
Lab4tassk3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004684  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004848  08004848  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004848  08004848  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004848  08004848  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00005848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800484c  0800484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004850  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000108  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b11a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019cd  00000000  00000000  00011156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  00012b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008af  00000000  00000000  00013650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020159  00000000  00000000  00013eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ea8d  00000000  00000000  00034058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca8c3  00000000  00000000  00042ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d3a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002eac  00000000  00000000  0010d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00110298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004800 	.word	0x08004800

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004800 	.word	0x08004800

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb9b 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f849 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 fa11 	bl	8000608 <MX_GPIO_Init>
  MX_ADC2_Init();
 80001e6:	f000 f8ab 	bl	8000340 <MX_ADC2_Init>
  MX_TIM2_Init();
 80001ea:	f000 f907 	bl	80003fc <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ee:	f000 f987 	bl	8000500 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D1
 80001f2:	2108      	movs	r1, #8
 80001f4:	481b      	ldr	r0, [pc, #108]	@ (8000264 <main+0x90>)
 80001f6:	f003 faf1 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D2
 80001fa:	2100      	movs	r1, #0
 80001fc:	481a      	ldr	r0, [pc, #104]	@ (8000268 <main+0x94>)
 80001fe:	f003 faed 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // D3
 8000202:	2104      	movs	r1, #4
 8000204:	4818      	ldr	r0, [pc, #96]	@ (8000268 <main+0x94>)
 8000206:	f003 fae9 	bl	80037dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // D4
 800020a:	2104      	movs	r1, #4
 800020c:	4815      	ldr	r0, [pc, #84]	@ (8000264 <main+0x90>)
 800020e:	f003 fae5 	bl	80037dc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc2);
 8000212:	4816      	ldr	r0, [pc, #88]	@ (800026c <main+0x98>)
 8000214:	f000 fdde 	bl	8000dd4 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc2, 1);
 8000218:	2101      	movs	r1, #1
 800021a:	4814      	ldr	r0, [pc, #80]	@ (800026c <main+0x98>)
 800021c:	f000 fef0 	bl	8001000 <HAL_ADC_PollForConversion>

	  uint16_t adc_value = HAL_ADC_GetValue(&hadc2);
 8000220:	4812      	ldr	r0, [pc, #72]	@ (800026c <main+0x98>)
 8000222:	f000 ffef 	bl	8001204 <HAL_ADC_GetValue>
 8000226:	4603      	mov	r3, r0
 8000228:	80fb      	strh	r3, [r7, #6]

	  TIM2->CCR3 = (1151-adc_value);
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	f5c3 638f 	rsb	r3, r3, #1144	@ 0x478
 8000230:	3307      	adds	r3, #7
 8000232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000236:	63d3      	str	r3, [r2, #60]	@ 0x3c
	  TIM3->CCR1 = (1151-adc_value);
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	f5c3 638f 	rsb	r3, r3, #1144	@ 0x478
 800023e:	3307      	adds	r3, #7
 8000240:	4a0b      	ldr	r2, [pc, #44]	@ (8000270 <main+0x9c>)
 8000242:	6353      	str	r3, [r2, #52]	@ 0x34
	  TIM3->CCR2 = (1151-adc_value);
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	f5c3 638f 	rsb	r3, r3, #1144	@ 0x478
 800024a:	3307      	adds	r3, #7
 800024c:	4a08      	ldr	r2, [pc, #32]	@ (8000270 <main+0x9c>)
 800024e:	6393      	str	r3, [r2, #56]	@ 0x38
	  TIM2->CCR2 = (1151-adc_value);
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	f5c3 638f 	rsb	r3, r3, #1144	@ 0x478
 8000256:	3307      	adds	r3, #7
 8000258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800025c:	6393      	str	r3, [r2, #56]	@ 0x38
  {
 800025e:	bf00      	nop
 8000260:	e7d7      	b.n	8000212 <main+0x3e>
 8000262:	bf00      	nop
 8000264:	20000078 	.word	0x20000078
 8000268:	200000c4 	.word	0x200000c4
 800026c:	20000028 	.word	0x20000028
 8000270:	40000400 	.word	0x40000400

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b0a6      	sub	sp, #152	@ 0x98
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800027e:	2228      	movs	r2, #40	@ 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f004 fa90 	bl	80047a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
 8000294:	60da      	str	r2, [r3, #12]
 8000296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2258      	movs	r2, #88	@ 0x58
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f004 fa82 	bl	80047a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a4:	2302      	movs	r3, #2
 80002a6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	2310      	movs	r3, #16
 80002ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b2:	2302      	movs	r3, #2
 80002b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ce:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fdc8 	bl	8001e68 <HAL_RCC_OscConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002de:	f000 f9b7 	bl	8000650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	230f      	movs	r3, #15
 80002e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e6:	2302      	movs	r3, #2
 80002e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002fc:	2101      	movs	r1, #1
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fdd6 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800030a:	f000 f9a1 	bl	8000650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
 800030e:	4b0b      	ldr	r3, [pc, #44]	@ (800033c <SystemClock_Config+0xc8>)
 8000310:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000312:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000318:	2300      	movs	r3, #0
 800031a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800031c:	2300      	movs	r3, #0
 800031e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4618      	mov	r0, r3
 8000324:	f002 ff86 	bl	8003234 <HAL_RCCEx_PeriphCLKConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800032e:	f000 f98f 	bl	8000650 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3798      	adds	r7, #152	@ 0x98
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	00300080 	.word	0x00300080

08000340 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b086      	sub	sp, #24
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	463b      	mov	r3, r7
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]
 8000350:	60da      	str	r2, [r3, #12]
 8000352:	611a      	str	r2, [r3, #16]
 8000354:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000356:	4b27      	ldr	r3, [pc, #156]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000358:	4a27      	ldr	r2, [pc, #156]	@ (80003f8 <MX_ADC2_Init+0xb8>)
 800035a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035c:	4b25      	ldr	r3, [pc, #148]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000368:	4b22      	ldr	r3, [pc, #136]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800036e:	4b21      	ldr	r3, [pc, #132]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000370:	2200      	movs	r2, #0
 8000372:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000374:	4b1f      	ldr	r3, [pc, #124]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000376:	2200      	movs	r2, #0
 8000378:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037c:	4b1d      	ldr	r3, [pc, #116]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 800037e:	2200      	movs	r2, #0
 8000380:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000382:	4b1c      	ldr	r3, [pc, #112]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000384:	2201      	movs	r2, #1
 8000386:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000388:	4b1a      	ldr	r3, [pc, #104]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800038e:	4b19      	ldr	r3, [pc, #100]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000390:	2201      	movs	r2, #1
 8000392:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 8000396:	2200      	movs	r2, #0
 8000398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800039c:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 800039e:	2204      	movs	r2, #4
 80003a0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003a2:	4b14      	ldr	r3, [pc, #80]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003a8:	4b12      	ldr	r3, [pc, #72]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003ae:	4811      	ldr	r0, [pc, #68]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 80003b0:	f000 fb16 	bl	80009e0 <HAL_ADC_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80003ba:	f000 f949 	bl	8000650 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003be:	2305      	movs	r3, #5
 80003c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c2:	2301      	movs	r3, #1
 80003c4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <MX_ADC2_Init+0xb4>)
 80003dc:	f000 ff20 	bl	8001220 <HAL_ADC_ConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003e6:	f000 f933 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000028 	.word	0x20000028
 80003f8:	50000100 	.word	0x50000100

080003fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08e      	sub	sp, #56	@ 0x38
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000410:	f107 031c 	add.w	r3, r7, #28
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041c:	463b      	mov	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800042e:	4b33      	ldr	r3, [pc, #204]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000430:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000436:	4b31      	ldr	r3, [pc, #196]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000438:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800043c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043e:	4b2f      	ldr	r3, [pc, #188]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1151;
 8000444:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000446:	f240 427f 	movw	r2, #1151	@ 0x47f
 800044a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800044c:	4b2b      	ldr	r3, [pc, #172]	@ (80004fc <MX_TIM2_Init+0x100>)
 800044e:	2200      	movs	r2, #0
 8000450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000452:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000458:	4828      	ldr	r0, [pc, #160]	@ (80004fc <MX_TIM2_Init+0x100>)
 800045a:	f003 f907 	bl	800366c <HAL_TIM_Base_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000464:	f000 f8f4 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800046c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800046e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000472:	4619      	mov	r1, r3
 8000474:	4821      	ldr	r0, [pc, #132]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000476:	f003 fbd1 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000480:	f000 f8e6 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000484:	481d      	ldr	r0, [pc, #116]	@ (80004fc <MX_TIM2_Init+0x100>)
 8000486:	f003 f948 	bl	800371a <HAL_TIM_PWM_Init>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000490:	f000 f8de 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800049c:	f107 031c 	add.w	r3, r7, #28
 80004a0:	4619      	mov	r1, r3
 80004a2:	4816      	ldr	r0, [pc, #88]	@ (80004fc <MX_TIM2_Init+0x100>)
 80004a4:	f004 f8f4 	bl	8004690 <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80004ae:	f000 f8cf 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b2:	2360      	movs	r3, #96	@ 0x60
 80004b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 115;
 80004b6:	2373      	movs	r3, #115	@ 0x73
 80004b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c2:	463b      	mov	r3, r7
 80004c4:	2204      	movs	r2, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	480c      	ldr	r0, [pc, #48]	@ (80004fc <MX_TIM2_Init+0x100>)
 80004ca:	f003 fa93 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80004d4:	f000 f8bc 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004d8:	463b      	mov	r3, r7
 80004da:	2208      	movs	r2, #8
 80004dc:	4619      	mov	r1, r3
 80004de:	4807      	ldr	r0, [pc, #28]	@ (80004fc <MX_TIM2_Init+0x100>)
 80004e0:	f003 fa88 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80004ea:	f000 f8b1 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004ee:	4803      	ldr	r0, [pc, #12]	@ (80004fc <MX_TIM2_Init+0x100>)
 80004f0:	f000 f94a 	bl	8000788 <HAL_TIM_MspPostInit>

}
 80004f4:	bf00      	nop
 80004f6:	3738      	adds	r7, #56	@ 0x38
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000078 	.word	0x20000078

08000500 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	@ 0x38
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
 800052e:	615a      	str	r2, [r3, #20]
 8000530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000532:	4b33      	ldr	r3, [pc, #204]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000534:	4a33      	ldr	r2, [pc, #204]	@ (8000604 <MX_TIM3_Init+0x104>)
 8000536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000538:	4b31      	ldr	r3, [pc, #196]	@ (8000600 <MX_TIM3_Init+0x100>)
 800053a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800053e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1151;
 8000546:	4b2e      	ldr	r3, [pc, #184]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000548:	f240 427f 	movw	r2, #1151	@ 0x47f
 800054c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054e:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000556:	2200      	movs	r2, #0
 8000558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800055a:	4829      	ldr	r0, [pc, #164]	@ (8000600 <MX_TIM3_Init+0x100>)
 800055c:	f003 f886 	bl	800366c <HAL_TIM_Base_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000566:	f000 f873 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800056e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000570:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000574:	4619      	mov	r1, r3
 8000576:	4822      	ldr	r0, [pc, #136]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000578:	f003 fb50 	bl	8003c1c <HAL_TIM_ConfigClockSource>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000582:	f000 f865 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000586:	481e      	ldr	r0, [pc, #120]	@ (8000600 <MX_TIM3_Init+0x100>)
 8000588:	f003 f8c7 	bl	800371a <HAL_TIM_PWM_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000592:	f000 f85d 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	4619      	mov	r1, r3
 80005a4:	4816      	ldr	r0, [pc, #88]	@ (8000600 <MX_TIM3_Init+0x100>)
 80005a6:	f004 f873 	bl	8004690 <HAL_TIMEx_MasterConfigSynchronization>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80005b0:	f000 f84e 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b4:	2360      	movs	r3, #96	@ 0x60
 80005b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 115;
 80005b8:	2373      	movs	r3, #115	@ 0x73
 80005ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	480d      	ldr	r0, [pc, #52]	@ (8000600 <MX_TIM3_Init+0x100>)
 80005cc:	f003 fa12 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80005d6:	f000 f83b 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	2204      	movs	r2, #4
 80005de:	4619      	mov	r1, r3
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <MX_TIM3_Init+0x100>)
 80005e2:	f003 fa07 	bl	80039f4 <HAL_TIM_PWM_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 80005ec:	f000 f830 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <MX_TIM3_Init+0x100>)
 80005f2:	f000 f8c9 	bl	8000788 <HAL_TIM_MspPostInit>

}
 80005f6:	bf00      	nop
 80005f8:	3738      	adds	r7, #56	@ 0x38
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000c4 	.word	0x200000c4
 8000604:	40000400 	.word	0x40000400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_GPIO_Init+0x44>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <MX_GPIO_Init+0x44>)
 8000614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_GPIO_Init+0x44>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_GPIO_Init+0x44>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <MX_GPIO_Init+0x44>)
 800062c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_GPIO_Init+0x44>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <Error_Handler+0x8>

0800065c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <HAL_MspInit+0x44>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <HAL_MspInit+0x44>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <HAL_MspInit+0x44>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_MspInit+0x44>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000692:	2007      	movs	r0, #7
 8000694:	f001 fa2a 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a15      	ldr	r2, [pc, #84]	@ (8000718 <HAL_ADC_MspInit+0x74>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d123      	bne.n	800070e <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <HAL_ADC_MspInit+0x78>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a14      	ldr	r2, [pc, #80]	@ (800071c <HAL_ADC_MspInit+0x78>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_ADC_MspInit+0x78>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <HAL_ADC_MspInit+0x78>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <HAL_ADC_MspInit+0x78>)
 80006e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <HAL_ADC_MspInit+0x78>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006f6:	2310      	movs	r3, #16
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_ADC_MspInit+0x7c>)
 800070a:	f001 fa23 	bl	8001b54 <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50000100 	.word	0x50000100
 800071c:	40021000 	.word	0x40021000
 8000720:	48000800 	.word	0x48000800

08000724 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000734:	d10c      	bne.n	8000750 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000736:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <HAL_TIM_Base_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a11      	ldr	r2, [pc, #68]	@ (8000780 <HAL_TIM_Base_MspInit+0x5c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <HAL_TIM_Base_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800074e:	e010      	b.n	8000772 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a0b      	ldr	r2, [pc, #44]	@ (8000784 <HAL_TIM_Base_MspInit+0x60>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d10b      	bne.n	8000772 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_TIM_Base_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <HAL_TIM_Base_MspInit+0x5c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_TIM_Base_MspInit+0x5c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40000400 	.word	0x40000400

08000788 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a8:	d11d      	bne.n	80007e6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <HAL_TIM_MspPostInit+0xa8>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a20      	ldr	r2, [pc, #128]	@ (8000830 <HAL_TIM_MspPostInit+0xa8>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <HAL_TIM_MspPostInit+0xa8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80007c2:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4815      	ldr	r0, [pc, #84]	@ (8000834 <HAL_TIM_MspPostInit+0xac>)
 80007e0:	f001 f9b8 	bl	8001b54 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007e4:	e020      	b.n	8000828 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a13      	ldr	r2, [pc, #76]	@ (8000838 <HAL_TIM_MspPostInit+0xb0>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d11b      	bne.n	8000828 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_TIM_MspPostInit+0xa8>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_TIM_MspPostInit+0xa8>)
 80007f6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007fa:	6153      	str	r3, [r2, #20]
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_TIM_MspPostInit+0xa8>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000808:	2330      	movs	r3, #48	@ 0x30
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000818:	2302      	movs	r3, #2
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <HAL_TIM_MspPostInit+0xac>)
 8000824:	f001 f996 	bl	8001b54 <HAL_GPIO_Init>
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	48000400 	.word	0x48000400
 8000838:	40000400 	.word	0x40000400

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f885 	bl	80009a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f003 ff63 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fc6f 	bl	80001d4 <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	08004850 	.word	0x08004850
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000114 	.word	0x20000114

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>
	...

08000914 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_Init+0x28>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a07      	ldr	r2, [pc, #28]	@ (800093c <HAL_Init+0x28>)
 800091e:	f043 0310 	orr.w	r3, r3, #16
 8000922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000924:	2003      	movs	r0, #3
 8000926:	f001 f8e1 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f808 	bl	8000940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000930:	f7ff fe94 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40022000 	.word	0x40022000

08000940 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x54>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_InitTick+0x58>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000956:	fbb3 f3f1 	udiv	r3, r3, r1
 800095a:	fbb2 f3f3 	udiv	r3, r2, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f001 f8eb 	bl	8001b3a <HAL_SYSTICK_Config>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e00e      	b.n	800098c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b0f      	cmp	r3, #15
 8000972:	d80a      	bhi.n	800098a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000974:	2200      	movs	r2, #0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	f001 f8c1 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000980:	4a06      	ldr	r2, [pc, #24]	@ (800099c <HAL_InitTick+0x5c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
 8000988:	e000      	b.n	800098c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000
 8000998:	20000008 	.word	0x20000008
 800099c:	20000004 	.word	0x20000004

080009a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000110 	.word	0x20000110

080009c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000110 	.word	0x20000110

080009e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09a      	sub	sp, #104	@ 0x68
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	e1e3      	b.n	8000dc8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d176      	bne.n	8000b00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d152      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fe35 	bl	80006a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d13b      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 ff37 	bl	80018bc <ADC_Disable>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d12f      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
 8000a60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d12b      	bne.n	8000ac0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a70:	f023 0302 	bic.w	r3, r3, #2
 8000a74:	f043 0202 	orr.w	r2, r3, #2
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a9c:	4b92      	ldr	r3, [pc, #584]	@ (8000ce8 <HAL_ADC_Init+0x308>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a92      	ldr	r2, [pc, #584]	@ (8000cec <HAL_ADC_Init+0x30c>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9a      	lsrs	r2, r3, #18
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ab2:	e002      	b.n	8000aba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f9      	bne.n	8000ab4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000adc:	d110      	bne.n	8000b00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f023 0312 	bic.w	r3, r3, #18
 8000ae6:	f043 0210 	orr.w	r2, r3, #16
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f043 0201 	orr.w	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f040 8150 	bne.w	8000dae <HAL_ADC_Init+0x3ce>
 8000b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f040 814b 	bne.w	8000dae <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8143 	bne.w	8000dae <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000b30:	f043 0202 	orr.w	r2, r3, #2
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b40:	d004      	beq.n	8000b4c <HAL_ADC_Init+0x16c>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a6a      	ldr	r2, [pc, #424]	@ (8000cf0 <HAL_ADC_Init+0x310>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_ADC_Init+0x170>
 8000b4c:	4b69      	ldr	r3, [pc, #420]	@ (8000cf4 <HAL_ADC_Init+0x314>)
 8000b4e:	e000      	b.n	8000b52 <HAL_ADC_Init+0x172>
 8000b50:	4b69      	ldr	r3, [pc, #420]	@ (8000cf8 <HAL_ADC_Init+0x318>)
 8000b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b5c:	d102      	bne.n	8000b64 <HAL_ADC_Init+0x184>
 8000b5e:	4b64      	ldr	r3, [pc, #400]	@ (8000cf0 <HAL_ADC_Init+0x310>)
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e01a      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a61      	ldr	r2, [pc, #388]	@ (8000cf0 <HAL_ADC_Init+0x310>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d103      	bne.n	8000b76 <HAL_ADC_Init+0x196>
 8000b6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e011      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a60      	ldr	r2, [pc, #384]	@ (8000cfc <HAL_ADC_Init+0x31c>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d102      	bne.n	8000b86 <HAL_ADC_Init+0x1a6>
 8000b80:	4b5f      	ldr	r3, [pc, #380]	@ (8000d00 <HAL_ADC_Init+0x320>)
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e009      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a5d      	ldr	r2, [pc, #372]	@ (8000d00 <HAL_ADC_Init+0x320>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d102      	bne.n	8000b96 <HAL_ADC_Init+0x1b6>
 8000b90:	4b5a      	ldr	r3, [pc, #360]	@ (8000cfc <HAL_ADC_Init+0x31c>)
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	e001      	b.n	8000b9a <HAL_ADC_Init+0x1ba>
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d108      	bne.n	8000bba <HAL_ADC_Init+0x1da>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x1da>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_ADC_Init+0x1dc>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11c      	bne.n	8000bfa <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d010      	beq.n	8000be8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d107      	bne.n	8000be2 <HAL_ADC_Init+0x202>
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_Init+0x202>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_ADC_Init+0x204>
 8000be2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d108      	bne.n	8000bfa <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000bf8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7e5b      	ldrb	r3, [r3, #25]
 8000bfe:	035b      	lsls	r3, r3, #13
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c04:	2a01      	cmp	r2, #1
 8000c06:	d002      	beq.n	8000c0e <HAL_ADC_Init+0x22e>
 8000c08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c0c:	e000      	b.n	8000c10 <HAL_ADC_Init+0x230>
 8000c0e:	2200      	movs	r2, #0
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	431a      	orrs	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c20:	4313      	orrs	r3, r2
 8000c22:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d11b      	bne.n	8000c66 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	7e5b      	ldrb	r3, [r3, #25]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d109      	bne.n	8000c4a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	045a      	lsls	r2, r3, #17
 8000c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c40:	4313      	orrs	r3, r2
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c46:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c48:	e00d      	b.n	8000c66 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000c52:	f043 0220 	orr.w	r2, r3, #32
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d054      	beq.n	8000d18 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a22      	ldr	r2, [pc, #136]	@ (8000cfc <HAL_ADC_Init+0x31c>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d004      	beq.n	8000c82 <HAL_ADC_Init+0x2a2>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	@ (8000d00 <HAL_ADC_Init+0x320>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d140      	bne.n	8000d04 <HAL_ADC_Init+0x324>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c86:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000c8a:	d02a      	beq.n	8000ce2 <HAL_ADC_Init+0x302>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c94:	d022      	beq.n	8000cdc <HAL_ADC_Init+0x2fc>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c9a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000c9e:	d01a      	beq.n	8000cd6 <HAL_ADC_Init+0x2f6>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca4:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8000ca8:	d012      	beq.n	8000cd0 <HAL_ADC_Init+0x2f0>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cae:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8000cb2:	d00a      	beq.n	8000cca <HAL_ADC_Init+0x2ea>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8000cbc:	d002      	beq.n	8000cc4 <HAL_ADC_Init+0x2e4>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc2:	e023      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cc4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cc8:	e020      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000cce:	e01d      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cd0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000cd4:	e01a      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cda:	e017      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000cdc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000ce0:	e014      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000ce2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000ce6:	e011      	b.n	8000d0c <HAL_ADC_Init+0x32c>
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	50000100 	.word	0x50000100
 8000cf4:	50000300 	.word	0x50000300
 8000cf8:	50000700 	.word	0x50000700
 8000cfc:	50000400 	.word	0x50000400
 8000d00:	50000500 	.word	0x50000500
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000d10:	4313      	orrs	r3, r2
 8000d12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d14:	4313      	orrs	r3, r2
 8000d16:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d114      	bne.n	8000d50 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d34:	f023 0302 	bic.w	r3, r3, #2
 8000d38:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7e1b      	ldrb	r3, [r3, #24]
 8000d3e:	039a      	lsls	r2, r3, #14
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <HAL_ADC_Init+0x3f0>)
 8000d58:	4013      	ands	r3, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d60:	430b      	orrs	r3, r1
 8000d62:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10c      	bne.n	8000d86 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f023 010f 	bic.w	r1, r3, #15
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d84:	e007      	b.n	8000d96 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 020f 	bic.w	r2, r2, #15
 8000d94:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f023 0303 	bic.w	r3, r3, #3
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dac:	e00a      	b.n	8000dc4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f023 0312 	bic.w	r3, r3, #18
 8000db6:	f043 0210 	orr.w	r2, r3, #16
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3768      	adds	r7, #104	@ 0x68
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	fff0c007 	.word	0xfff0c007

08000dd4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 80f9 	bne.w	8000fe2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d101      	bne.n	8000dfe <HAL_ADC_Start+0x2a>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e0f4      	b.n	8000fe8 <HAL_ADC_Start+0x214>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2201      	movs	r2, #1
 8000e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 fcf4 	bl	80017f4 <ADC_Enable>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 80e0 	bne.w	8000fd8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e20:	f023 0301 	bic.w	r3, r3, #1
 8000e24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e34:	d004      	beq.n	8000e40 <HAL_ADC_Start+0x6c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8000ff0 <HAL_ADC_Start+0x21c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d106      	bne.n	8000e4e <HAL_ADC_Start+0x7a>
 8000e40:	4b6c      	ldr	r3, [pc, #432]	@ (8000ff4 <HAL_ADC_Start+0x220>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d010      	beq.n	8000e6e <HAL_ADC_Start+0x9a>
 8000e4c:	e005      	b.n	8000e5a <HAL_ADC_Start+0x86>
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ff8 <HAL_ADC_Start+0x224>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 031f 	and.w	r3, r3, #31
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d009      	beq.n	8000e6e <HAL_ADC_Start+0x9a>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e62:	d004      	beq.n	8000e6e <HAL_ADC_Start+0x9a>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a64      	ldr	r2, [pc, #400]	@ (8000ffc <HAL_ADC_Start+0x228>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d115      	bne.n	8000e9a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d036      	beq.n	8000ef6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e98:	e02d      	b.n	8000ef6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eae:	d004      	beq.n	8000eba <HAL_ADC_Start+0xe6>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff0 <HAL_ADC_Start+0x21c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10a      	bne.n	8000ed0 <HAL_ADC_Start+0xfc>
 8000eba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	e008      	b.n	8000ee2 <HAL_ADC_Start+0x10e>
 8000ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ffc <HAL_ADC_Start+0x228>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000eee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f02:	d106      	bne.n	8000f12 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	f023 0206 	bic.w	r2, r3, #6
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f10:	e002      	b.n	8000f18 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	221c      	movs	r2, #28
 8000f26:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f30:	d004      	beq.n	8000f3c <HAL_ADC_Start+0x168>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a2e      	ldr	r2, [pc, #184]	@ (8000ff0 <HAL_ADC_Start+0x21c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d106      	bne.n	8000f4a <HAL_ADC_Start+0x176>
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff4 <HAL_ADC_Start+0x220>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d03e      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f48:	e005      	b.n	8000f56 <HAL_ADC_Start+0x182>
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <HAL_ADC_Start+0x224>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d037      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f5e:	d004      	beq.n	8000f6a <HAL_ADC_Start+0x196>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a22      	ldr	r2, [pc, #136]	@ (8000ff0 <HAL_ADC_Start+0x21c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d106      	bne.n	8000f78 <HAL_ADC_Start+0x1a4>
 8000f6a:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <HAL_ADC_Start+0x220>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2b05      	cmp	r3, #5
 8000f74:	d027      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f76:	e005      	b.n	8000f84 <HAL_ADC_Start+0x1b0>
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_ADC_Start+0x224>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	2b05      	cmp	r3, #5
 8000f82:	d020      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f8c:	d004      	beq.n	8000f98 <HAL_ADC_Start+0x1c4>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <HAL_ADC_Start+0x21c>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d106      	bne.n	8000fa6 <HAL_ADC_Start+0x1d2>
 8000f98:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_ADC_Start+0x220>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	d010      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000fa4:	e005      	b.n	8000fb2 <HAL_ADC_Start+0x1de>
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_ADC_Start+0x224>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	2b09      	cmp	r3, #9
 8000fb0:	d009      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fba:	d004      	beq.n	8000fc6 <HAL_ADC_Start+0x1f2>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_ADC_Start+0x228>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0204 	orr.w	r2, r2, #4
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	e006      	b.n	8000fe6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000fe0:	e001      	b.n	8000fe6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	50000100 	.word	0x50000100
 8000ff4:	50000300 	.word	0x50000300
 8000ff8:	50000700 	.word	0x50000700
 8000ffc:	50000400 	.word	0x50000400

08001000 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	2b08      	cmp	r3, #8
 8001014:	d102      	bne.n	800101c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001016:	2308      	movs	r3, #8
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e03a      	b.n	8001092 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001024:	d004      	beq.n	8001030 <HAL_ADC_PollForConversion+0x30>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a72      	ldr	r2, [pc, #456]	@ (80011f4 <HAL_ADC_PollForConversion+0x1f4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_ADC_PollForConversion+0x34>
 8001030:	4b71      	ldr	r3, [pc, #452]	@ (80011f8 <HAL_ADC_PollForConversion+0x1f8>)
 8001032:	e000      	b.n	8001036 <HAL_ADC_PollForConversion+0x36>
 8001034:	4b71      	ldr	r3, [pc, #452]	@ (80011fc <HAL_ADC_PollForConversion+0x1fc>)
 8001036:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	2b00      	cmp	r3, #0
 8001042:	d112      	bne.n	800106a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b01      	cmp	r3, #1
 8001050:	d11d      	bne.n	800108e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f043 0220 	orr.w	r2, r3, #32
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0bf      	b.n	80011ea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f043 0220 	orr.w	r2, r3, #32
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0ad      	b.n	80011ea <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800108e:	230c      	movs	r3, #12
 8001090:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800109a:	d004      	beq.n	80010a6 <HAL_ADC_PollForConversion+0xa6>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a54      	ldr	r2, [pc, #336]	@ (80011f4 <HAL_ADC_PollForConversion+0x1f4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <HAL_ADC_PollForConversion+0xb4>
 80010a6:	4b54      	ldr	r3, [pc, #336]	@ (80011f8 <HAL_ADC_PollForConversion+0x1f8>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d010      	beq.n	80010d4 <HAL_ADC_PollForConversion+0xd4>
 80010b2:	e005      	b.n	80010c0 <HAL_ADC_PollForConversion+0xc0>
 80010b4:	4b51      	ldr	r3, [pc, #324]	@ (80011fc <HAL_ADC_PollForConversion+0x1fc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d009      	beq.n	80010d4 <HAL_ADC_PollForConversion+0xd4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_PollForConversion+0xd4>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <HAL_ADC_PollForConversion+0x200>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d104      	bne.n	80010de <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	e00f      	b.n	80010fe <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e6:	d004      	beq.n	80010f2 <HAL_ADC_PollForConversion+0xf2>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a41      	ldr	r2, [pc, #260]	@ (80011f4 <HAL_ADC_PollForConversion+0x1f4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d102      	bne.n	80010f8 <HAL_ADC_PollForConversion+0xf8>
 80010f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010f6:	e000      	b.n	80010fa <HAL_ADC_PollForConversion+0xfa>
 80010f8:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HAL_ADC_PollForConversion+0x200>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80010fe:	f7ff fc63 	bl	80009c8 <HAL_GetTick>
 8001102:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001104:	e021      	b.n	800114a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d01d      	beq.n	800114a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_ADC_PollForConversion+0x124>
 8001114:	f7ff fc58 	bl	80009c8 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d212      	bcs.n	800114a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10b      	bne.n	800114a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f043 0204 	orr.w	r2, r3, #4
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e04f      	b.n	80011ea <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0d6      	beq.n	8001106 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800116e:	2b00      	cmp	r3, #0
 8001170:	d131      	bne.n	80011d6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001178:	2b00      	cmp	r3, #0
 800117a:	d12c      	bne.n	80011d6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b08      	cmp	r3, #8
 8001188:	d125      	bne.n	80011d6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d112      	bne.n	80011be <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d112      	bne.n	80011d6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80011bc:	e00b      	b.n	80011d6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f043 0220 	orr.w	r2, r3, #32
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d103      	bne.n	80011e8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	50000100 	.word	0x50000100
 80011f8:	50000300 	.word	0x50000300
 80011fc:	50000700 	.word	0x50000700
 8001200:	50000400 	.word	0x50000400

08001204 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001220:	b480      	push	{r7}
 8001222:	b09b      	sub	sp, #108	@ 0x6c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x22>
 800123e:	2302      	movs	r3, #2
 8001240:	e2c8      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x5b4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f040 82ac 	bne.w	80017b2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b04      	cmp	r3, #4
 8001260:	d81c      	bhi.n	800129c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	461a      	mov	r2, r3
 8001276:	231f      	movs	r3, #31
 8001278:	4093      	lsls	r3, r2
 800127a:	43db      	mvns	r3, r3
 800127c:	4019      	ands	r1, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa00 f203 	lsl.w	r2, r0, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	631a      	str	r2, [r3, #48]	@ 0x30
 800129a:	e063      	b.n	8001364 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	d81e      	bhi.n	80012e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	3b1e      	subs	r3, #30
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	4019      	ands	r1, r3
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	3b1e      	subs	r3, #30
 80012d4:	fa00 f203 	lsl.w	r2, r0, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	635a      	str	r2, [r3, #52]	@ 0x34
 80012e0:	e040      	b.n	8001364 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b0e      	cmp	r3, #14
 80012e8:	d81e      	bhi.n	8001328 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	3b3c      	subs	r3, #60	@ 0x3c
 80012fe:	221f      	movs	r2, #31
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	4019      	ands	r1, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	3b3c      	subs	r3, #60	@ 0x3c
 800131a:	fa00 f203 	lsl.w	r2, r0, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	639a      	str	r2, [r3, #56]	@ 0x38
 8001326:	e01d      	b.n	8001364 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	3b5a      	subs	r3, #90	@ 0x5a
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	4019      	ands	r1, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	6818      	ldr	r0, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	3b5a      	subs	r3, #90	@ 0x5a
 8001358:	fa00 f203 	lsl.w	r2, r0, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80e5 	bne.w	800153e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b09      	cmp	r3, #9
 800137a:	d91c      	bls.n	80013b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6999      	ldr	r1, [r3, #24]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	3b1e      	subs	r3, #30
 800138e:	2207      	movs	r2, #7
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	4019      	ands	r1, r3
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6898      	ldr	r0, [r3, #8]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	3b1e      	subs	r3, #30
 80013a8:	fa00 f203 	lsl.w	r2, r0, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	619a      	str	r2, [r3, #24]
 80013b4:	e019      	b.n	80013ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6959      	ldr	r1, [r3, #20]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	2207      	movs	r2, #7
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6898      	ldr	r0, [r3, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	3b01      	subs	r3, #1
 8001408:	2b03      	cmp	r3, #3
 800140a:	d84f      	bhi.n	80014ac <HAL_ADC_ConfigChannel+0x28c>
 800140c:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <HAL_ADC_ConfigChannel+0x1f4>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	08001447 	.word	0x08001447
 800141c:	08001469 	.word	0x08001469
 8001420:	0800148b 	.word	0x0800148b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800142a:	4b99      	ldr	r3, [pc, #612]	@ (8001690 <HAL_ADC_ConfigChannel+0x470>)
 800142c:	4013      	ands	r3, r2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	0691      	lsls	r1, r2, #26
 8001434:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001436:	430a      	orrs	r2, r1
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001442:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001444:	e07b      	b.n	800153e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800144c:	4b90      	ldr	r3, [pc, #576]	@ (8001690 <HAL_ADC_ConfigChannel+0x470>)
 800144e:	4013      	ands	r3, r2
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	0691      	lsls	r1, r2, #26
 8001456:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001458:	430a      	orrs	r2, r1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001464:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001466:	e06a      	b.n	800153e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800146e:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <HAL_ADC_ConfigChannel+0x470>)
 8001470:	4013      	ands	r3, r2
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	0691      	lsls	r1, r2, #26
 8001478:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800147a:	430a      	orrs	r2, r1
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001486:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001488:	e059      	b.n	800153e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001490:	4b7f      	ldr	r3, [pc, #508]	@ (8001690 <HAL_ADC_ConfigChannel+0x470>)
 8001492:	4013      	ands	r3, r2
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	0691      	lsls	r1, r2, #26
 800149a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800149c:	430a      	orrs	r2, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014a8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014aa:	e048      	b.n	800153e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	069b      	lsls	r3, r3, #26
 80014bc:	429a      	cmp	r2, r3
 80014be:	d107      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014ce:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	069b      	lsls	r3, r3, #26
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d107      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014f2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80014fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	069b      	lsls	r3, r3, #26
 8001504:	429a      	cmp	r2, r3
 8001506:	d107      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001516:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800151e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	069b      	lsls	r3, r3, #26
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800153a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800153c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_ADC_ConfigChannel+0x33e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d101      	bne.n	800155e <HAL_ADC_ConfigChannel+0x33e>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_ADC_ConfigChannel+0x340>
 800155e:	2300      	movs	r3, #0
 8001560:	2b00      	cmp	r3, #0
 8001562:	f040 8131 	bne.w	80017c8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d00f      	beq.n	800158e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2201      	movs	r2, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43da      	mvns	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	400a      	ands	r2, r1
 8001588:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800158c:	e049      	b.n	8001622 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	409a      	lsls	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d91c      	bls.n	80015ea <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6999      	ldr	r1, [r3, #24]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	3b1b      	subs	r3, #27
 80015c2:	2207      	movs	r2, #7
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	4019      	ands	r1, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	6898      	ldr	r0, [r3, #8]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	3b1b      	subs	r3, #27
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	619a      	str	r2, [r3, #24]
 80015e8:	e01b      	b.n	8001622 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6959      	ldr	r1, [r3, #20]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	2207      	movs	r2, #7
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	4019      	ands	r1, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6898      	ldr	r0, [r3, #8]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800162a:	d004      	beq.n	8001636 <HAL_ADC_ConfigChannel+0x416>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a18      	ldr	r2, [pc, #96]	@ (8001694 <HAL_ADC_ConfigChannel+0x474>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_ADC_ConfigChannel+0x41a>
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_ADC_ConfigChannel+0x478>)
 8001638:	e000      	b.n	800163c <HAL_ADC_ConfigChannel+0x41c>
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_ADC_ConfigChannel+0x47c>)
 800163c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2b10      	cmp	r3, #16
 8001644:	d105      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800164e:	2b00      	cmp	r3, #0
 8001650:	d015      	beq.n	800167e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001656:	2b11      	cmp	r3, #17
 8001658:	d105      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800165a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800166a:	2b12      	cmp	r3, #18
 800166c:	f040 80ac 	bne.w	80017c8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001678:	2b00      	cmp	r3, #0
 800167a:	f040 80a5 	bne.w	80017c8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001686:	d10b      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x480>
 8001688:	4b02      	ldr	r3, [pc, #8]	@ (8001694 <HAL_ADC_ConfigChannel+0x474>)
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e023      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x4b6>
 800168e:	bf00      	nop
 8001690:	83fff000 	.word	0x83fff000
 8001694:	50000100 	.word	0x50000100
 8001698:	50000300 	.word	0x50000300
 800169c:	50000700 	.word	0x50000700
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a4e      	ldr	r2, [pc, #312]	@ (80017e0 <HAL_ADC_ConfigChannel+0x5c0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d103      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x492>
 80016aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e011      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x4b6>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a4b      	ldr	r2, [pc, #300]	@ (80017e4 <HAL_ADC_ConfigChannel+0x5c4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <HAL_ADC_ConfigChannel+0x4a2>
 80016bc:	4b4a      	ldr	r3, [pc, #296]	@ (80017e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e009      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x4b6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a48      	ldr	r2, [pc, #288]	@ (80017e8 <HAL_ADC_ConfigChannel+0x5c8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d102      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x4b2>
 80016cc:	4b45      	ldr	r3, [pc, #276]	@ (80017e4 <HAL_ADC_ConfigChannel+0x5c4>)
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e001      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x4b6>
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x4d6>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x4d6>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x4d8>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d150      	bne.n	800179e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d010      	beq.n	8001724 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_ADC_ConfigChannel+0x4fe>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_ADC_ConfigChannel+0x4fe>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_ADC_ConfigChannel+0x500>
 800171e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001720:	2b00      	cmp	r3, #0
 8001722:	d13c      	bne.n	800179e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b10      	cmp	r3, #16
 800172a:	d11d      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x548>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001734:	d118      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800173e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001740:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <HAL_ADC_ConfigChannel+0x5cc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a2a      	ldr	r2, [pc, #168]	@ (80017f0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	0c9a      	lsrs	r2, r3, #18
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001758:	e002      	b.n	8001760 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	3b01      	subs	r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001766:	e02e      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b11      	cmp	r3, #17
 800176e:	d10b      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x568>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001778:	d106      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800177a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001784:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001786:	e01e      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b12      	cmp	r3, #18
 800178e:	d11a      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001790:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800179a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800179c:	e013      	b.n	80017c6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f043 0220 	orr.w	r2, r3, #32
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017b0:	e00a      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b6:	f043 0220 	orr.w	r2, r3, #32
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017c4:	e000      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017c6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	376c      	adds	r7, #108	@ 0x6c
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	50000100 	.word	0x50000100
 80017e4:	50000400 	.word	0x50000400
 80017e8:	50000500 	.word	0x50000500
 80017ec:	20000000 	.word	0x20000000
 80017f0:	431bde83 	.word	0x431bde83

080017f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b01      	cmp	r3, #1
 800180c:	d108      	bne.n	8001820 <ADC_Enable+0x2c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <ADC_Enable+0x2c>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <ADC_Enable+0x2e>
 8001820:	2300      	movs	r3, #0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d143      	bne.n	80018ae <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <ADC_Enable+0xc4>)
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e02f      	b.n	80018b0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001860:	f7ff f8b2 	bl	80009c8 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001866:	e01b      	b.n	80018a0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001868:	f7ff f8ae 	bl	80009c8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d914      	bls.n	80018a0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d00d      	beq.n	80018a0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f043 0210 	orr.w	r2, r3, #16
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e007      	b.n	80018b0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d1dc      	bne.n	8001868 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	8000003f 	.word	0x8000003f

080018bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d108      	bne.n	80018e8 <ADC_Disable+0x2c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <ADC_Disable+0x2c>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <ADC_Disable+0x2e>
 80018e8:	2300      	movs	r3, #0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d047      	beq.n	800197e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030d 	and.w	r3, r3, #13
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d10f      	bne.n	800191c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0202 	orr.w	r2, r2, #2
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2203      	movs	r2, #3
 8001912:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001914:	f7ff f858 	bl	80009c8 <HAL_GetTick>
 8001918:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800191a:	e029      	b.n	8001970 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f043 0210 	orr.w	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e023      	b.n	8001980 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001938:	f7ff f846 	bl	80009c8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d914      	bls.n	8001970 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10d      	bne.n	8001970 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f043 0210 	orr.w	r2, r3, #16
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e007      	b.n	8001980 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	d0dc      	beq.n	8001938 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	@ (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	@ 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff47 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff5c 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ffb0 	bl	8001aa8 <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e160      	b.n	8001e26 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8152 	beq.w	8001e20 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d017      	beq.n	8001c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80ac 	beq.w	8001e20 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ce0:	4a59      	ldr	r2, [pc, #356]	@ (8001e48 <HAL_GPIO_Init+0x2f4>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d0a:	d025      	beq.n	8001d58 <HAL_GPIO_Init+0x204>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4f      	ldr	r2, [pc, #316]	@ (8001e4c <HAL_GPIO_Init+0x2f8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d01f      	beq.n	8001d54 <HAL_GPIO_Init+0x200>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d019      	beq.n	8001d50 <HAL_GPIO_Init+0x1fc>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <HAL_GPIO_Init+0x1f8>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_GPIO_Init+0x304>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1f4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_GPIO_Init+0x308>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1f0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a4a      	ldr	r2, [pc, #296]	@ (8001e60 <HAL_GPIO_Init+0x30c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1ec>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e00c      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d40:	2307      	movs	r3, #7
 8001d42:	e00a      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d44:	2305      	movs	r3, #5
 8001d46:	e008      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e004      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_GPIO_Init+0x206>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6a:	4937      	ldr	r1, [pc, #220]	@ (8001e48 <HAL_GPIO_Init+0x2f4>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9c:	4a31      	ldr	r2, [pc, #196]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da2:	4b30      	ldr	r3, [pc, #192]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc6:	4a27      	ldr	r2, [pc, #156]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dcc:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_GPIO_Init+0x310>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f ae97 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	48001000 	.word	0x48001000
 8001e5c:	48001400 	.word	0x48001400
 8001e60:	48001800 	.word	0x48001800
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e74:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f001 b80a 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8161 	beq.w	8002166 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ea4:	4bae      	ldr	r3, [pc, #696]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d00c      	beq.n	8001eca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb0:	4bab      	ldr	r3, [pc, #684]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d157      	bne.n	8001f6c <HAL_RCC_OscConfig+0x104>
 8001ebc:	4ba8      	ldr	r3, [pc, #672]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ec8:	d150      	bne.n	8001f6c <HAL_RCC_OscConfig+0x104>
 8001eca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ece:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ede:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eea:	d802      	bhi.n	8001ef2 <HAL_RCC_OscConfig+0x8a>
 8001eec:	4b9c      	ldr	r3, [pc, #624]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e015      	b.n	8001f1e <HAL_RCC_OscConfig+0xb6>
 8001ef2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f0a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f1a:	4b91      	ldr	r3, [pc, #580]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f22:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001f26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001f2a:	fa92 f2a2 	rbit	r2, r2
 8001f2e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001f32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8108 	beq.w	8002164 <HAL_RCC_OscConfig+0x2fc>
 8001f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 80ff 	bne.w	8002164 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f000 bf9b 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7c:	d106      	bne.n	8001f8c <HAL_RCC_OscConfig+0x124>
 8001f7e:	4b78      	ldr	r3, [pc, #480]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a77      	ldr	r2, [pc, #476]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e036      	b.n	8001ffa <HAL_RCC_OscConfig+0x192>
 8001f8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x14e>
 8001f9c:	4b70      	ldr	r3, [pc, #448]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6f      	ldr	r2, [pc, #444]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6c      	ldr	r2, [pc, #432]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	e021      	b.n	8001ffa <HAL_RCC_OscConfig+0x192>
 8001fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x17a>
 8001fc8:	4b65      	ldr	r3, [pc, #404]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a64      	ldr	r2, [pc, #400]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b62      	ldr	r3, [pc, #392]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a61      	ldr	r2, [pc, #388]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x192>
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b5c      	ldr	r3, [pc, #368]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ffe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d054      	beq.n	80020b4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fcdd 	bl	80009c8 <HAL_GetTick>
 800200e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e00a      	b.n	800202a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe fcd8 	bl	80009c8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b64      	cmp	r3, #100	@ 0x64
 8002022:	d902      	bls.n	800202a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	f000 bf3c 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
 800202a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800202e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800203e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b3f      	cmp	r3, #63	@ 0x3f
 800204a:	d802      	bhi.n	8002052 <HAL_RCC_OscConfig+0x1ea>
 800204c:	4b44      	ldr	r3, [pc, #272]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x216>
 8002052:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002056:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002066:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800206a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800206e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800207a:	4b39      	ldr	r3, [pc, #228]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002082:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002086:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800208a:	fa92 f2a2 	rbit	r2, r2
 800208e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002092:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f002 021f 	and.w	r2, r2, #31
 80020a6:	2101      	movs	r1, #1
 80020a8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0b0      	beq.n	8002014 <HAL_RCC_OscConfig+0x1ac>
 80020b2:	e058      	b.n	8002166 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fc88 	bl	80009c8 <HAL_GetTick>
 80020b8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020be:	f7fe fc83 	bl	80009c8 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	@ 0x64
 80020cc:	d902      	bls.n	80020d4 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	f000 bee7 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80020d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020d8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80020e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80020f4:	d802      	bhi.n	80020fc <HAL_RCC_OscConfig+0x294>
 80020f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	e015      	b.n	8002128 <HAL_RCC_OscConfig+0x2c0>
 80020fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002100:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002110:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002114:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002118:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_RCC_OscConfig+0x2f8>)
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800212c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002130:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002134:	fa92 f2a2 	rbit	r2, r2
 8002138:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800213c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f042 0220 	orr.w	r2, r2, #32
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f002 021f 	and.w	r2, r2, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f202 	lsl.w	r2, r1, r2
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1b0      	bne.n	80020be <HAL_RCC_OscConfig+0x256>
 800215c:	e003      	b.n	8002166 <HAL_RCC_OscConfig+0x2fe>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002166:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800216a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 816d 	beq.w	8002456 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800217c:	4bcd      	ldr	r3, [pc, #820]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002188:	4bca      	ldr	r3, [pc, #808]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	2b08      	cmp	r3, #8
 8002192:	d16e      	bne.n	8002272 <HAL_RCC_OscConfig+0x40a>
 8002194:	4bc7      	ldr	r3, [pc, #796]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800219c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a0:	d167      	bne.n	8002272 <HAL_RCC_OscConfig+0x40a>
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80021b4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b3f      	cmp	r3, #63	@ 0x3f
 80021c0:	d802      	bhi.n	80021c8 <HAL_RCC_OscConfig+0x360>
 80021c2:	4bbc      	ldr	r3, [pc, #752]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e013      	b.n	80021f0 <HAL_RCC_OscConfig+0x388>
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80021da:	2302      	movs	r3, #2
 80021dc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021ec:	4bb1      	ldr	r3, [pc, #708]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	2202      	movs	r2, #2
 80021f2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80021f6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80021fa:	fa92 f2a2 	rbit	r2, r2
 80021fe:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002202:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f002 021f 	and.w	r2, r2, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCC_OscConfig+0x3d0>
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d002      	beq.n	8002238 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f000 be35 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b9e      	ldr	r3, [pc, #632]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002240:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002244:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	21f8      	movs	r1, #248	@ 0xf8
 800224e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002256:	fa91 f1a1 	rbit	r1, r1
 800225a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800225e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002262:	fab1 f181 	clz	r1, r1
 8002266:	b2c9      	uxtb	r1, r1
 8002268:	408b      	lsls	r3, r1
 800226a:	4992      	ldr	r1, [pc, #584]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002270:	e0f1      	b.n	8002456 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002276:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8083 	beq.w	800238a <HAL_RCC_OscConfig+0x522>
 8002284:	2301      	movs	r3, #1
 8002286:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002296:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	461a      	mov	r2, r3
 80022ac:	2301      	movs	r3, #1
 80022ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fb8a 	bl	80009c8 <HAL_GetTick>
 80022b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fb85 	bl	80009c8 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d902      	bls.n	80022d0 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f000 bde9 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80022e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ee:	d802      	bhi.n	80022f6 <HAL_RCC_OscConfig+0x48e>
 80022f0:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e013      	b.n	800231e <HAL_RCC_OscConfig+0x4b6>
 80022f6:	2302      	movs	r3, #2
 80022f8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800230e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800231a:	4b66      	ldr	r3, [pc, #408]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	2202      	movs	r2, #2
 8002320:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002324:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002328:	fa92 f2a2 	rbit	r2, r2
 800232c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002330:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f042 0220 	orr.w	r2, r2, #32
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0b4      	beq.n	80022ba <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b58      	ldr	r3, [pc, #352]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002358:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	21f8      	movs	r1, #248	@ 0xf8
 8002366:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800236e:	fa91 f1a1 	rbit	r1, r1
 8002372:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002376:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800237a:	fab1 f181 	clz	r1, r1
 800237e:	b2c9      	uxtb	r1, r1
 8002380:	408b      	lsls	r3, r1
 8002382:	494c      	ldr	r1, [pc, #304]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e065      	b.n	8002456 <HAL_RCC_OscConfig+0x5ee>
 800238a:	2301      	movs	r3, #1
 800238c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800239c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	2300      	movs	r3, #0
 80023b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b6:	f7fe fb07 	bl	80009c8 <HAL_GetTick>
 80023ba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe fb02 	bl	80009c8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d902      	bls.n	80023d6 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	f000 bd66 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80023e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80023f4:	d802      	bhi.n	80023fc <HAL_RCC_OscConfig+0x594>
 80023f6:	4b2f      	ldr	r3, [pc, #188]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	e013      	b.n	8002424 <HAL_RCC_OscConfig+0x5bc>
 80023fc:	2302      	movs	r3, #2
 80023fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800240e:	2302      	movs	r3, #2
 8002410:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002414:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002418:	fa93 f3a3 	rbit	r3, r3
 800241c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002420:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCC_OscConfig+0x64c>)
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	2202      	movs	r2, #2
 8002426:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800242a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800242e:	fa92 f2a2 	rbit	r2, r2
 8002432:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002436:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0220 	orr.w	r2, r2, #32
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1b4      	bne.n	80023c0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800245a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8119 	beq.w	800269e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002470:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8082 	beq.w	8002582 <HAL_RCC_OscConfig+0x71a>
 800247e:	2301      	movs	r3, #1
 8002480:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002490:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_OscConfig+0x650>)
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	461a      	mov	r2, r3
 80024a4:	2301      	movs	r3, #1
 80024a6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fa8e 	bl	80009c8 <HAL_GetTick>
 80024ac:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b0:	e00f      	b.n	80024d2 <HAL_RCC_OscConfig+0x66a>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe fa84 	bl	80009c8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	f000 bce8 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80024d2:	2302      	movs	r3, #2
 80024d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024f2:	2202      	movs	r2, #2
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002516:	2202      	movs	r2, #2
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002530:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	4bb0      	ldr	r3, [pc, #704]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800253e:	2102      	movs	r1, #2
 8002540:	6019      	str	r1, [r3, #0]
 8002542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002546:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f1a3 	rbit	r1, r3
 8002550:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002554:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002558:	6019      	str	r1, [r3, #0]
  return result;
 800255a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d09d      	beq.n	80024bc <HAL_RCC_OscConfig+0x654>
 8002580:	e08d      	b.n	800269e <HAL_RCC_OscConfig+0x836>
 8002582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002586:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002592:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025a4:	601a      	str	r2, [r3, #0]
  return result;
 80025a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025ae:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b8f      	ldr	r3, [pc, #572]	@ (80027f8 <HAL_RCC_OscConfig+0x990>)
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	461a      	mov	r2, r3
 80025c0:	2300      	movs	r3, #0
 80025c2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7fe fa00 	bl	80009c8 <HAL_GetTick>
 80025c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe f9fb 	bl	80009c8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d902      	bls.n	80025e4 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	f000 bc5f 	b.w	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025ec:	2202      	movs	r2, #2
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002602:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002618:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002626:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002630:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800264e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	4b68      	ldr	r3, [pc, #416]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002652:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002658:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800265c:	2102      	movs	r1, #2
 800265e:	6019      	str	r1, [r3, #0]
 8002660:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002664:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f1a3 	rbit	r1, r3
 800266e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002672:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002676:	6019      	str	r1, [r3, #0]
  return result;
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d197      	bne.n	80025ce <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 819c 	beq.w	80029ec <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b4e      	ldr	r3, [pc, #312]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a4a      	ldr	r2, [pc, #296]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]
 80026d2:	4b48      	ldr	r3, [pc, #288]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	4b41      	ldr	r3, [pc, #260]	@ (80027fc <HAL_RCC_OscConfig+0x994>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11a      	bne.n	8002736 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002700:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <HAL_RCC_OscConfig+0x994>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3d      	ldr	r2, [pc, #244]	@ (80027fc <HAL_RCC_OscConfig+0x994>)
 8002706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270c:	f7fe f95c 	bl	80009c8 <HAL_GetTick>
 8002710:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	e009      	b.n	800272a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7fe f957 	bl	80009c8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	@ 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e3bb      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b34      	ldr	r3, [pc, #208]	@ (80027fc <HAL_RCC_OscConfig+0x994>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ef      	beq.n	8002716 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002736:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800273a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d106      	bne.n	8002754 <HAL_RCC_OscConfig+0x8ec>
 8002746:	4b2b      	ldr	r3, [pc, #172]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a2a      	ldr	r2, [pc, #168]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	e035      	b.n	80027c0 <HAL_RCC_OscConfig+0x958>
 8002754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002758:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0x916>
 8002764:	4b23      	ldr	r3, [pc, #140]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a22      	ldr	r2, [pc, #136]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4a1f      	ldr	r2, [pc, #124]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	e020      	b.n	80027c0 <HAL_RCC_OscConfig+0x958>
 800277e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x940>
 800278e:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x958>
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4a11      	ldr	r2, [pc, #68]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	@ (80027f4 <HAL_RCC_OscConfig+0x98c>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8085 	beq.w	80028dc <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe f8f9 	bl	80009c8 <HAL_GetTick>
 80027d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e011      	b.n	8002800 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f8f4 	bl	80009c8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d907      	bls.n	8002800 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e356      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	10908120 	.word	0x10908120
 80027fc:	40007000 	.word	0x40007000
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002810:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fa93 f2a3 	rbit	r2, r3
 800281a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800282c:	2202      	movs	r2, #2
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002834:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002842:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002846:	601a      	str	r2, [r3, #0]
  return result;
 8002848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002850:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_RCC_OscConfig+0xa00>
 8002862:	4b98      	ldr	r3, [pc, #608]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	e013      	b.n	8002890 <HAL_RCC_OscConfig+0xa28>
 8002868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800286c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002870:	2202      	movs	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002878:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002886:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002890:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002894:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002898:	2102      	movs	r1, #2
 800289a:	6011      	str	r1, [r2, #0]
 800289c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028a0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	fa92 f1a2 	rbit	r1, r2
 80028aa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028ae:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80028b2:	6011      	str	r1, [r2, #0]
  return result;
 80028b4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028b8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	fab2 f282 	clz	r2, r2
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	f002 021f 	and.w	r2, r2, #31
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d080      	beq.n	80027dc <HAL_RCC_OscConfig+0x974>
 80028da:	e07d      	b.n	80029d8 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fe f874 	bl	80009c8 <HAL_GetTick>
 80028e0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	e00b      	b.n	80028fe <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe f86f 	bl	80009c8 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e2d1      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
 80028fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002902:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002906:	2202      	movs	r2, #2
 8002908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002926:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002932:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	fa93 f2a3 	rbit	r2, r3
 800293c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002940:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002944:	601a      	str	r2, [r3, #0]
  return result;
 8002946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800294e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <HAL_RCC_OscConfig+0xafe>
 8002960:	4b58      	ldr	r3, [pc, #352]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	e013      	b.n	800298e <HAL_RCC_OscConfig+0xb26>
 8002966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800296e:	2202      	movs	r2, #2
 8002970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002976:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002984:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002992:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002996:	2102      	movs	r1, #2
 8002998:	6011      	str	r1, [r2, #0]
 800299a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800299e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	fa92 f1a2 	rbit	r1, r2
 80029a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029ac:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80029b0:	6011      	str	r1, [r2, #0]
  return result;
 80029b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029b6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	fab2 f282 	clz	r2, r2
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f002 021f 	and.w	r2, r2, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d186      	bne.n	80028e6 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d8:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e0:	4b38      	ldr	r3, [pc, #224]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4a37      	ldr	r2, [pc, #220]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8251 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	f000 820f 	beq.w	8002e2a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	f040 8165 	bne.w	8002ce8 <HAL_RCC_OscConfig+0xe80>
 8002a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a22:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a30:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	fa93 f2a3 	rbit	r2, r3
 8002a3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a42:	601a      	str	r2, [r3, #0]
  return result;
 8002a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a4c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	461a      	mov	r2, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fd ffb0 	bl	80009c8 <HAL_GetTick>
 8002a68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6c:	e009      	b.n	8002a82 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fd ffab 	bl	80009c8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e20f      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
 8002a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a86:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a94:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002aa6:	601a      	str	r2, [r3, #0]
  return result;
 8002aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ab0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002aba:	d805      	bhi.n	8002ac8 <HAL_RCC_OscConfig+0xc60>
 8002abc:	4b01      	ldr	r3, [pc, #4]	@ (8002ac4 <HAL_RCC_OscConfig+0xc5c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	e02a      	b.n	8002b18 <HAL_RCC_OscConfig+0xcb0>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ad0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ada:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	fa93 f2a3 	rbit	r2, r3
 8002ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002af6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b00:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	4bca      	ldr	r3, [pc, #808]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b1c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b24:	6011      	str	r1, [r2, #0]
 8002b26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b2a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	fa92 f1a2 	rbit	r1, r2
 8002b34:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b38:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b3c:	6011      	str	r1, [r2, #0]
  return result;
 8002b3e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b42:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f002 021f 	and.w	r2, r2, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d184      	bne.n	8002a6e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b64:	4bb6      	ldr	r3, [pc, #728]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b68:	f023 020f 	bic.w	r2, r3, #15
 8002b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	49b1      	ldr	r1, [pc, #708]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002b7e:	4bb0      	ldr	r3, [pc, #704]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a19      	ldr	r1, [r3, #32]
 8002b92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	49a7      	ldr	r1, [pc, #668]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
 8002ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002baa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bca:	601a      	str	r2, [r3, #0]
  return result;
 8002bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bd4:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002be0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	461a      	mov	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fd feec 	bl	80009c8 <HAL_GetTick>
 8002bf0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bf4:	e009      	b.n	8002c0a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fd fee7 	bl	80009c8 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e14b      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
 8002c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c1c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c2e:	601a      	str	r2, [r3, #0]
  return result;
 8002c30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c34:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c42:	d802      	bhi.n	8002c4a <HAL_RCC_OscConfig+0xde2>
 8002c44:	4b7e      	ldr	r3, [pc, #504]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	e027      	b.n	8002c9a <HAL_RCC_OscConfig+0xe32>
 8002c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	fa93 f2a3 	rbit	r2, r3
 8002c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c74:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c82:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	fa93 f2a3 	rbit	r2, r3
 8002c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c90:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c9e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ca2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ca6:	6011      	str	r1, [r2, #0]
 8002ca8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	fa92 f1a2 	rbit	r1, r2
 8002cb6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cba:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002cbe:	6011      	str	r1, [r2, #0]
  return result;
 8002cc0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cc4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d087      	beq.n	8002bf6 <HAL_RCC_OscConfig+0xd8e>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1038>
 8002ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	fa93 f2a3 	rbit	r2, r3
 8002d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d0c:	601a      	str	r2, [r3, #0]
  return result;
 8002d0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d12:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d16:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d22:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fd fe4b 	bl	80009c8 <HAL_GetTick>
 8002d32:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d36:	e009      	b.n	8002d4c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fd fe46 	bl	80009c8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e0aa      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
 8002d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d50:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	fa93 f2a3 	rbit	r2, r3
 8002d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d70:	601a      	str	r2, [r3, #0]
  return result;
 8002d72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d76:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d84:	d802      	bhi.n	8002d8c <HAL_RCC_OscConfig+0xf24>
 8002d86:	4b2e      	ldr	r3, [pc, #184]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e027      	b.n	8002ddc <HAL_RCC_OscConfig+0xf74>
 8002d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d90:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	fa93 f2a3 	rbit	r2, r3
 8002da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002dba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	fa93 f2a3 	rbit	r2, r3
 8002dce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd2:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCC_OscConfig+0xfd8>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002de0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002de4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002de8:	6011      	str	r1, [r2, #0]
 8002dea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dee:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	fa92 f1a2 	rbit	r1, r2
 8002df8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dfc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e00:	6011      	str	r1, [r2, #0]
  return result;
 8002e02:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e06:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	fab2 f282 	clz	r2, r2
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	f002 021f 	and.w	r2, r2, #31
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d187      	bne.n	8002d38 <HAL_RCC_OscConfig+0xed0>
 8002e28:	e03a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d104      	bne.n	8002e44 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e031      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e44:	4b19      	ldr	r3, [pc, #100]	@ (8002eac <HAL_RCC_OscConfig+0x1044>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e4c:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <HAL_RCC_OscConfig+0x1044>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e58:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d117      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e70:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d10b      	bne.n	8002e9c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000

08002eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b09e      	sub	sp, #120	@ 0x78
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e154      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b89      	ldr	r3, [pc, #548]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d910      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b86      	ldr	r3, [pc, #536]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 0207 	bic.w	r2, r3, #7
 8002ede:	4984      	ldr	r1, [pc, #528]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b82      	ldr	r3, [pc, #520]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e13c      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b7b      	ldr	r3, [pc, #492]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4978      	ldr	r1, [pc, #480]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80cd 	beq.w	80030be <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d137      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xec>
 8002f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f44:	d802      	bhi.n	8002f4c <HAL_RCC_ClockConfig+0x9c>
 8002f46:	4b6b      	ldr	r3, [pc, #428]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	e00f      	b.n	8002f6c <HAL_RCC_ClockConfig+0xbc>
 8002f4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f68:	4b62      	ldr	r3, [pc, #392]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f74:	fa92 f2a2 	rbit	r2, r2
 8002f78:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d171      	bne.n	800307c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0ea      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d137      	bne.n	8003014 <HAL_RCC_ClockConfig+0x164>
 8002fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fbc:	d802      	bhi.n	8002fc4 <HAL_RCC_ClockConfig+0x114>
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e00f      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x134>
 8002fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe0:	4b44      	ldr	r3, [pc, #272]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fec:	fa92 f2a2 	rbit	r2, r2
 8002ff0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ff4:	fab2 f282 	clz	r2, r2
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f002 021f 	and.w	r2, r2, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d135      	bne.n	800307c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ae      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
 8003014:	2302      	movs	r3, #2
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b3f      	cmp	r3, #63	@ 0x3f
 800302a:	d802      	bhi.n	8003032 <HAL_RCC_ClockConfig+0x182>
 800302c:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	e00d      	b.n	800304e <HAL_RCC_ClockConfig+0x19e>
 8003032:	2302      	movs	r3, #2
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
 800303e:	2302      	movs	r3, #2
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	2202      	movs	r2, #2
 8003050:	61ba      	str	r2, [r7, #24]
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	fa92 f2a2 	rbit	r2, r2
 8003058:	617a      	str	r2, [r7, #20]
  return result;
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f002 021f 	and.w	r2, r2, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e07a      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f023 0203 	bic.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	491a      	ldr	r1, [pc, #104]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308e:	f7fd fc9b 	bl	80009c8 <HAL_GetTick>
 8003092:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003094:	e00a      	b.n	80030ac <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003096:	f7fd fc97 	bl	80009c8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e062      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_RCC_ClockConfig+0x244>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 020c 	and.w	r2, r3, #12
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d1eb      	bne.n	8003096 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030be:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d215      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030cc:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f023 0207 	bic.w	r2, r3, #7
 80030d4:	4906      	ldr	r1, [pc, #24]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <HAL_RCC_ClockConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d006      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e041      	b.n	8003172 <HAL_RCC_ClockConfig+0x2c2>
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <HAL_RCC_ClockConfig+0x2cc>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	491a      	ldr	r1, [pc, #104]	@ (800317c <HAL_RCC_ClockConfig+0x2cc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003122:	4b16      	ldr	r3, [pc, #88]	@ (800317c <HAL_RCC_ClockConfig+0x2cc>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4912      	ldr	r1, [pc, #72]	@ (800317c <HAL_RCC_ClockConfig+0x2cc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003136:	f000 f829 	bl	800318c <HAL_RCC_GetSysClockFreq>
 800313a:	4601      	mov	r1, r0
 800313c:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <HAL_RCC_ClockConfig+0x2cc>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003144:	22f0      	movs	r2, #240	@ 0xf0
 8003146:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	60fa      	str	r2, [r7, #12]
  return result;
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	40d3      	lsrs	r3, r2
 800315a:	4a09      	ldr	r2, [pc, #36]	@ (8003180 <HAL_RCC_ClockConfig+0x2d0>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	fa21 f303 	lsr.w	r3, r1, r3
 8003162:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_RCC_ClockConfig+0x2d4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_RCC_ClockConfig+0x2d8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fbe8 	bl	8000940 <HAL_InitTick>
  
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3778      	adds	r7, #120	@ 0x78
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	08004818 	.word	0x08004818
 8003184:	20000000 	.word	0x20000000
 8003188:	20000004 	.word	0x20000004

0800318c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x98>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x30>
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ba:	e029      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031be:	613b      	str	r3, [r7, #16]
      break;
 80031c0:	e029      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	0c9b      	lsrs	r3, r3, #18
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	4a18      	ldr	r2, [pc, #96]	@ (800322c <HAL_RCC_GetSysClockFreq+0xa0>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031d0:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d008      	beq.n	80031fa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e007      	b.n	800320a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	613b      	str	r3, [r7, #16]
      break;
 800320e:	e002      	b.n	8003216 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003212:	613b      	str	r3, [r7, #16]
      break;
 8003214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003216:	693b      	ldr	r3, [r7, #16]
}
 8003218:	4618      	mov	r0, r3
 800321a:	371c      	adds	r7, #28
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	40021000 	.word	0x40021000
 8003228:	007a1200 	.word	0x007a1200
 800322c:	08004828 	.word	0x08004828
 8003230:	08004838 	.word	0x08004838

08003234 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b092      	sub	sp, #72	@ 0x48
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80d2 	beq.w	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003258:	4b4d      	ldr	r3, [pc, #308]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10e      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003264:	4b4a      	ldr	r3, [pc, #296]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a49      	ldr	r2, [pc, #292]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800326a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
 8003270:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327c:	2301      	movs	r3, #1
 800327e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b44      	ldr	r3, [pc, #272]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b41      	ldr	r3, [pc, #260]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a40      	ldr	r2, [pc, #256]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003298:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fd fb95 	bl	80009c8 <HAL_GetTick>
 800329e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fd fb91 	bl	80009c8 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	@ 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1d4      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b37      	ldr	r3, [pc, #220]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c0:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8082 	beq.w	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d07a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80032f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	2301      	movs	r3, #1
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	4b1c      	ldr	r3, [pc, #112]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	461a      	mov	r2, r3
 800332e:	2300      	movs	r3, #0
 8003330:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003332:	4a17      	ldr	r2, [pc, #92]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003336:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d049      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fd fb41 	bl	80009c8 <HAL_GetTick>
 8003346:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd fb3d 	bl	80009c8 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e17e      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003360:	2302      	movs	r3, #2
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
 800336c:	2302      	movs	r3, #2
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	61fb      	str	r3, [r7, #28]
  return result;
 8003378:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337a:	fab3 f383 	clz	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800338a:	4b01      	ldr	r3, [pc, #4]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	e00d      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
 8003398:	10908100 	.word	0x10908100
 800339c:	2302      	movs	r3, #2
 800339e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	4b9a      	ldr	r3, [pc, #616]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	2202      	movs	r2, #2
 80033ae:	613a      	str	r2, [r7, #16]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	60fa      	str	r2, [r7, #12]
  return result;
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	fab2 f282 	clz	r2, r2
 80033be:	b2d2      	uxtb	r2, r2
 80033c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	f002 021f 	and.w	r2, r2, #31
 80033ca:	2101      	movs	r1, #1
 80033cc:	fa01 f202 	lsl.w	r2, r1, r2
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0b9      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	498c      	ldr	r1, [pc, #560]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	4a87      	ldr	r2, [pc, #540]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003408:	4b82      	ldr	r3, [pc, #520]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340c:	f023 0203 	bic.w	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	497f      	ldr	r1, [pc, #508]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d008      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003426:	4b7b      	ldr	r3, [pc, #492]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	4978      	ldr	r1, [pc, #480]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003444:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	4970      	ldr	r1, [pc, #448]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0320 	and.w	r3, r3, #32
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003462:	4b6c      	ldr	r3, [pc, #432]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f023 0210 	bic.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4969      	ldr	r1, [pc, #420]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003470:	4313      	orrs	r3, r2
 8003472:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003480:	4b64      	ldr	r3, [pc, #400]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	4961      	ldr	r1, [pc, #388]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d008      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800349e:	4b5d      	ldr	r3, [pc, #372]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	f023 0220 	bic.w	r2, r3, #32
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	495a      	ldr	r1, [pc, #360]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034bc:	4b55      	ldr	r3, [pc, #340]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	4952      	ldr	r1, [pc, #328]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034da:	4b4e      	ldr	r3, [pc, #312]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	494b      	ldr	r1, [pc, #300]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034f8:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4943      	ldr	r1, [pc, #268]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003516:	4b3f      	ldr	r3, [pc, #252]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	493c      	ldr	r1, [pc, #240]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003534:	4b37      	ldr	r3, [pc, #220]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003538:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	4934      	ldr	r1, [pc, #208]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003542:	4313      	orrs	r3, r2
 8003544:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003552:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	492d      	ldr	r1, [pc, #180]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003570:	4b28      	ldr	r3, [pc, #160]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357c:	4925      	ldr	r1, [pc, #148]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800358e:	4b21      	ldr	r3, [pc, #132]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	491e      	ldr	r1, [pc, #120]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	4916      	ldr	r1, [pc, #88]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80035ca:	4b12      	ldr	r3, [pc, #72]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d6:	490f      	ldr	r1, [pc, #60]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ec:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f4:	4907      	ldr	r1, [pc, #28]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003606:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361a:	4913      	ldr	r1, [pc, #76]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800361c:	4313      	orrs	r3, r2
 800361e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800362c:	4b0e      	ldr	r3, [pc, #56]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003638:	490b      	ldr	r1, [pc, #44]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800363a:	4313      	orrs	r3, r2
 800363c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	4904      	ldr	r1, [pc, #16]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003658:	4313      	orrs	r3, r2
 800365a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3748      	adds	r7, #72	@ 0x48
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e049      	b.n	8003712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd f846 	bl	8000724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4610      	mov	r0, r2
 80036ac:	f000 fb80 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e049      	b.n	80037c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f841 	bl	80037c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2202      	movs	r2, #2
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f000 fb29 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <HAL_TIM_PWM_Start+0x24>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e03c      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b04      	cmp	r3, #4
 8003804:	d109      	bne.n	800381a <HAL_TIM_PWM_Start+0x3e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b01      	cmp	r3, #1
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e02f      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d109      	bne.n	8003834 <HAL_TIM_PWM_Start+0x58>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b01      	cmp	r3, #1
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e022      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d109      	bne.n	800384e <HAL_TIM_PWM_Start+0x72>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	bf14      	ite	ne
 8003846:	2301      	movne	r3, #1
 8003848:	2300      	moveq	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e015      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d109      	bne.n	8003868 <HAL_TIM_PWM_Start+0x8c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e008      	b.n	800387a <HAL_TIM_PWM_Start+0x9e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0a1      	b.n	80039c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0xb6>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003890:	e023      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d104      	bne.n	80038a2 <HAL_TIM_PWM_Start+0xc6>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038a0:	e01b      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d104      	bne.n	80038b2 <HAL_TIM_PWM_Start+0xd6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b0:	e013      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_PWM_Start+0xe6>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038c0:	e00b      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0xf6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d0:	e003      	b.n	80038da <HAL_TIM_PWM_Start+0xfe>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 feae 	bl	8004644 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a38      	ldr	r2, [pc, #224]	@ (80039d0 <HAL_TIM_PWM_Start+0x1f4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <HAL_TIM_PWM_Start+0x148>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a37      	ldr	r2, [pc, #220]	@ (80039d4 <HAL_TIM_PWM_Start+0x1f8>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_TIM_PWM_Start+0x148>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a35      	ldr	r2, [pc, #212]	@ (80039d8 <HAL_TIM_PWM_Start+0x1fc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_TIM_PWM_Start+0x148>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a34      	ldr	r2, [pc, #208]	@ (80039dc <HAL_TIM_PWM_Start+0x200>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_TIM_PWM_Start+0x148>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a32      	ldr	r2, [pc, #200]	@ (80039e0 <HAL_TIM_PWM_Start+0x204>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_TIM_PWM_Start+0x148>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a31      	ldr	r2, [pc, #196]	@ (80039e4 <HAL_TIM_PWM_Start+0x208>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <HAL_TIM_PWM_Start+0x14c>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_TIM_PWM_Start+0x14e>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800393c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a23      	ldr	r2, [pc, #140]	@ (80039d0 <HAL_TIM_PWM_Start+0x1f4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d01d      	beq.n	8003984 <HAL_TIM_PWM_Start+0x1a8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003950:	d018      	beq.n	8003984 <HAL_TIM_PWM_Start+0x1a8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a24      	ldr	r2, [pc, #144]	@ (80039e8 <HAL_TIM_PWM_Start+0x20c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_TIM_PWM_Start+0x1a8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a22      	ldr	r2, [pc, #136]	@ (80039ec <HAL_TIM_PWM_Start+0x210>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_TIM_PWM_Start+0x1a8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <HAL_TIM_PWM_Start+0x1f8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_TIM_PWM_Start+0x1a8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a18      	ldr	r2, [pc, #96]	@ (80039d8 <HAL_TIM_PWM_Start+0x1fc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_PWM_Start+0x1a8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_TIM_PWM_Start+0x208>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d115      	bne.n	80039b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <HAL_TIM_PWM_Start+0x214>)
 800398c:	4013      	ands	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d015      	beq.n	80039c2 <HAL_TIM_PWM_Start+0x1e6>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d011      	beq.n	80039c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ae:	e008      	b.n	80039c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e000      	b.n	80039c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40013400 	.word	0x40013400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800
 80039e4:	40015000 	.word	0x40015000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	00010007 	.word	0x00010007

080039f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e0ff      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b14      	cmp	r3, #20
 8003a1e:	f200 80f0 	bhi.w	8003c02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003a22:	a201      	add	r2, pc, #4	@ (adr r2, 8003a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	08003c03 	.word	0x08003c03
 8003a30:	08003c03 	.word	0x08003c03
 8003a34:	08003c03 	.word	0x08003c03
 8003a38:	08003abd 	.word	0x08003abd
 8003a3c:	08003c03 	.word	0x08003c03
 8003a40:	08003c03 	.word	0x08003c03
 8003a44:	08003c03 	.word	0x08003c03
 8003a48:	08003aff 	.word	0x08003aff
 8003a4c:	08003c03 	.word	0x08003c03
 8003a50:	08003c03 	.word	0x08003c03
 8003a54:	08003c03 	.word	0x08003c03
 8003a58:	08003b3f 	.word	0x08003b3f
 8003a5c:	08003c03 	.word	0x08003c03
 8003a60:	08003c03 	.word	0x08003c03
 8003a64:	08003c03 	.word	0x08003c03
 8003a68:	08003b81 	.word	0x08003b81
 8003a6c:	08003c03 	.word	0x08003c03
 8003a70:	08003c03 	.word	0x08003c03
 8003a74:	08003c03 	.word	0x08003c03
 8003a78:	08003bc1 	.word	0x08003bc1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fa3e 	bl	8003f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0208 	orr.w	r2, r2, #8
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0204 	bic.w	r2, r2, #4
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	619a      	str	r2, [r3, #24]
      break;
 8003aba:	e0a5      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fab8 	bl	8004038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6999      	ldr	r1, [r3, #24]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	619a      	str	r2, [r3, #24]
      break;
 8003afc:	e084      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fb2b 	bl	8004160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0208 	orr.w	r2, r2, #8
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	61da      	str	r2, [r3, #28]
      break;
 8003b3c:	e064      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fb9d 	bl	8004284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69da      	ldr	r2, [r3, #28]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69d9      	ldr	r1, [r3, #28]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	021a      	lsls	r2, r3, #8
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	61da      	str	r2, [r3, #28]
      break;
 8003b7e:	e043      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fbec 	bl	8004364 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0204 	bic.w	r2, r2, #4
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bbe:	e023      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 fc36 	bl	8004438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	021a      	lsls	r2, r3, #8
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003c00:	e002      	b.n	8003c08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
      break;
 8003c06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop

08003c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_TIM_ConfigClockSource+0x1c>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0b6      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x18a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c74:	d03e      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0xd8>
 8003c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7a:	f200 8087 	bhi.w	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c82:	f000 8086 	beq.w	8003d92 <HAL_TIM_ConfigClockSource+0x176>
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8a:	d87f      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003c8c:	2b70      	cmp	r3, #112	@ 0x70
 8003c8e:	d01a      	beq.n	8003cc6 <HAL_TIM_ConfigClockSource+0xaa>
 8003c90:	2b70      	cmp	r3, #112	@ 0x70
 8003c92:	d87b      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003c94:	2b60      	cmp	r3, #96	@ 0x60
 8003c96:	d050      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x11e>
 8003c98:	2b60      	cmp	r3, #96	@ 0x60
 8003c9a:	d877      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003c9c:	2b50      	cmp	r3, #80	@ 0x50
 8003c9e:	d03c      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0xfe>
 8003ca0:	2b50      	cmp	r3, #80	@ 0x50
 8003ca2:	d873      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d058      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x13e>
 8003ca8:	2b40      	cmp	r3, #64	@ 0x40
 8003caa:	d86f      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003cac:	2b30      	cmp	r3, #48	@ 0x30
 8003cae:	d064      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15e>
 8003cb0:	2b30      	cmp	r3, #48	@ 0x30
 8003cb2:	d86b      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	d060      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15e>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d867      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05c      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15e>
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d05a      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x15e>
 8003cc4:	e062      	b.n	8003d8c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cd6:	f000 fc95 	bl	8004604 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	609a      	str	r2, [r3, #8]
      break;
 8003cf2:	e04f      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	f000 fc7e 	bl	8004604 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d16:	609a      	str	r2, [r3, #8]
      break;
 8003d18:	e03c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 fbf2 	bl	8004510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2150      	movs	r1, #80	@ 0x50
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fc4b 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 8003d38:	e02c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fc11 	bl	800456e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2160      	movs	r1, #96	@ 0x60
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fc3b 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 8003d58:	e01c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 fbd2 	bl	8004510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2140      	movs	r1, #64	@ 0x40
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fc2b 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 8003d78:	e00c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f000 fc22 	bl	80045ce <TIM_ITRx_SetConfig>
      break;
 8003d8a:	e003      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	e000      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a48      	ldr	r2, [pc, #288]	@ (8003ee4 <TIM_Base_SetConfig+0x134>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dce:	d00f      	beq.n	8003df0 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a45      	ldr	r2, [pc, #276]	@ (8003ee8 <TIM_Base_SetConfig+0x138>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00b      	beq.n	8003df0 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a44      	ldr	r2, [pc, #272]	@ (8003eec <TIM_Base_SetConfig+0x13c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d007      	beq.n	8003df0 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a43      	ldr	r2, [pc, #268]	@ (8003ef0 <TIM_Base_SetConfig+0x140>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a42      	ldr	r2, [pc, #264]	@ (8003ef4 <TIM_Base_SetConfig+0x144>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d108      	bne.n	8003e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a37      	ldr	r2, [pc, #220]	@ (8003ee4 <TIM_Base_SetConfig+0x134>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01f      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e10:	d01b      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a34      	ldr	r2, [pc, #208]	@ (8003ee8 <TIM_Base_SetConfig+0x138>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d017      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a33      	ldr	r2, [pc, #204]	@ (8003eec <TIM_Base_SetConfig+0x13c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a32      	ldr	r2, [pc, #200]	@ (8003ef0 <TIM_Base_SetConfig+0x140>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <TIM_Base_SetConfig+0x148>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a31      	ldr	r2, [pc, #196]	@ (8003efc <TIM_Base_SetConfig+0x14c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	@ (8003f00 <TIM_Base_SetConfig+0x150>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0x9a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef4 <TIM_Base_SetConfig+0x144>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <TIM_Base_SetConfig+0x134>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_Base_SetConfig+0x100>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <TIM_Base_SetConfig+0x140>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x100>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a19      	ldr	r2, [pc, #100]	@ (8003ef8 <TIM_Base_SetConfig+0x148>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x100>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <TIM_Base_SetConfig+0x14c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x100>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a17      	ldr	r2, [pc, #92]	@ (8003f00 <TIM_Base_SetConfig+0x150>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x100>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a12      	ldr	r2, [pc, #72]	@ (8003ef4 <TIM_Base_SetConfig+0x144>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d103      	bne.n	8003eb8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f023 0201 	bic.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40015000 	.word	0x40015000
 8003ef8:	40014000 	.word	0x40014000
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800

08003f04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 0201 	bic.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 0302 	bic.w	r3, r3, #2
 8003f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a30      	ldr	r2, [pc, #192]	@ (8004020 <TIM_OC1_SetConfig+0x11c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <TIM_OC1_SetConfig+0x88>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a2f      	ldr	r2, [pc, #188]	@ (8004024 <TIM_OC1_SetConfig+0x120>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_OC1_SetConfig+0x88>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8004028 <TIM_OC1_SetConfig+0x124>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_OC1_SetConfig+0x88>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a2d      	ldr	r2, [pc, #180]	@ (800402c <TIM_OC1_SetConfig+0x128>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_OC1_SetConfig+0x88>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <TIM_OC1_SetConfig+0x12c>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC1_SetConfig+0x88>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	@ (8004034 <TIM_OC1_SetConfig+0x130>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10c      	bne.n	8003fa6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0308 	bic.w	r3, r3, #8
 8003f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004020 <TIM_OC1_SetConfig+0x11c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d013      	beq.n	8003fd6 <TIM_OC1_SetConfig+0xd2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8004024 <TIM_OC1_SetConfig+0x120>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00f      	beq.n	8003fd6 <TIM_OC1_SetConfig+0xd2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <TIM_OC1_SetConfig+0x124>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00b      	beq.n	8003fd6 <TIM_OC1_SetConfig+0xd2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <TIM_OC1_SetConfig+0x128>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_OC1_SetConfig+0xd2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	@ (8004030 <TIM_OC1_SetConfig+0x12c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_OC1_SetConfig+0xd2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	@ (8004034 <TIM_OC1_SetConfig+0x130>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d111      	bne.n	8003ffa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	621a      	str	r2, [r3, #32]
}
 8004014:	bf00      	nop
 8004016:	371c      	adds	r7, #28
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40013400 	.word	0x40013400
 8004028:	40014000 	.word	0x40014000
 800402c:	40014400 	.word	0x40014400
 8004030:	40014800 	.word	0x40014800
 8004034:	40015000 	.word	0x40015000

08004038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 0210 	bic.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a2c      	ldr	r2, [pc, #176]	@ (8004148 <TIM_OC2_SetConfig+0x110>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <TIM_OC2_SetConfig+0x74>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a2b      	ldr	r2, [pc, #172]	@ (800414c <TIM_OC2_SetConfig+0x114>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC2_SetConfig+0x74>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004150 <TIM_OC2_SetConfig+0x118>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10d      	bne.n	80040c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004148 <TIM_OC2_SetConfig+0x110>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <TIM_OC2_SetConfig+0xc0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	@ (800414c <TIM_OC2_SetConfig+0x114>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00f      	beq.n	80040f8 <TIM_OC2_SetConfig+0xc0>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a1e      	ldr	r2, [pc, #120]	@ (8004154 <TIM_OC2_SetConfig+0x11c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00b      	beq.n	80040f8 <TIM_OC2_SetConfig+0xc0>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <TIM_OC2_SetConfig+0x120>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d007      	beq.n	80040f8 <TIM_OC2_SetConfig+0xc0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	@ (800415c <TIM_OC2_SetConfig+0x124>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC2_SetConfig+0xc0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <TIM_OC2_SetConfig+0x118>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d113      	bne.n	8004120 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004106:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40013400 	.word	0x40013400
 8004150:	40015000 	.word	0x40015000
 8004154:	40014000 	.word	0x40014000
 8004158:	40014400 	.word	0x40014400
 800415c:	40014800 	.word	0x40014800

08004160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	021b      	lsls	r3, r3, #8
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2b      	ldr	r2, [pc, #172]	@ (800426c <TIM_OC3_SetConfig+0x10c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_OC3_SetConfig+0x72>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004270 <TIM_OC3_SetConfig+0x110>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC3_SetConfig+0x72>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a29      	ldr	r2, [pc, #164]	@ (8004274 <TIM_OC3_SetConfig+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10d      	bne.n	80041ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1e      	ldr	r2, [pc, #120]	@ (800426c <TIM_OC3_SetConfig+0x10c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <TIM_OC3_SetConfig+0xbe>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004270 <TIM_OC3_SetConfig+0x110>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00f      	beq.n	800421e <TIM_OC3_SetConfig+0xbe>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1d      	ldr	r2, [pc, #116]	@ (8004278 <TIM_OC3_SetConfig+0x118>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_OC3_SetConfig+0xbe>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a1c      	ldr	r2, [pc, #112]	@ (800427c <TIM_OC3_SetConfig+0x11c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d007      	beq.n	800421e <TIM_OC3_SetConfig+0xbe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1b      	ldr	r2, [pc, #108]	@ (8004280 <TIM_OC3_SetConfig+0x120>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_OC3_SetConfig+0xbe>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <TIM_OC3_SetConfig+0x114>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d113      	bne.n	8004246 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800422c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40013400 	.word	0x40013400
 8004274:	40015000 	.word	0x40015000
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800

08004284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	@ (800434c <TIM_OC4_SetConfig+0xc8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <TIM_OC4_SetConfig+0x8c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <TIM_OC4_SetConfig+0xcc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_OC4_SetConfig+0x8c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <TIM_OC4_SetConfig+0xd0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00b      	beq.n	8004310 <TIM_OC4_SetConfig+0x8c>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a17      	ldr	r2, [pc, #92]	@ (8004358 <TIM_OC4_SetConfig+0xd4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_OC4_SetConfig+0x8c>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a16      	ldr	r2, [pc, #88]	@ (800435c <TIM_OC4_SetConfig+0xd8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_OC4_SetConfig+0x8c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <TIM_OC4_SetConfig+0xdc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d109      	bne.n	8004324 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40012c00 	.word	0x40012c00
 8004350:	40013400 	.word	0x40013400
 8004354:	40014000 	.word	0x40014000
 8004358:	40014400 	.word	0x40014400
 800435c:	40014800 	.word	0x40014800
 8004360:	40015000 	.word	0x40015000

08004364 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80043a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a19      	ldr	r2, [pc, #100]	@ (8004420 <TIM_OC5_SetConfig+0xbc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <TIM_OC5_SetConfig+0x82>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a18      	ldr	r2, [pc, #96]	@ (8004424 <TIM_OC5_SetConfig+0xc0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00f      	beq.n	80043e6 <TIM_OC5_SetConfig+0x82>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a17      	ldr	r2, [pc, #92]	@ (8004428 <TIM_OC5_SetConfig+0xc4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <TIM_OC5_SetConfig+0x82>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a16      	ldr	r2, [pc, #88]	@ (800442c <TIM_OC5_SetConfig+0xc8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d007      	beq.n	80043e6 <TIM_OC5_SetConfig+0x82>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a15      	ldr	r2, [pc, #84]	@ (8004430 <TIM_OC5_SetConfig+0xcc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d003      	beq.n	80043e6 <TIM_OC5_SetConfig+0x82>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a14      	ldr	r2, [pc, #80]	@ (8004434 <TIM_OC5_SetConfig+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d109      	bne.n	80043fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	621a      	str	r2, [r3, #32]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40013400 	.word	0x40013400
 8004428:	40014000 	.word	0x40014000
 800442c:	40014400 	.word	0x40014400
 8004430:	40014800 	.word	0x40014800
 8004434:	40015000 	.word	0x40015000

08004438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800447e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	051b      	lsls	r3, r3, #20
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1a      	ldr	r2, [pc, #104]	@ (80044f8 <TIM_OC6_SetConfig+0xc0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_OC6_SetConfig+0x84>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a19      	ldr	r2, [pc, #100]	@ (80044fc <TIM_OC6_SetConfig+0xc4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_OC6_SetConfig+0x84>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <TIM_OC6_SetConfig+0xc8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_OC6_SetConfig+0x84>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a17      	ldr	r2, [pc, #92]	@ (8004504 <TIM_OC6_SetConfig+0xcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_OC6_SetConfig+0x84>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a16      	ldr	r2, [pc, #88]	@ (8004508 <TIM_OC6_SetConfig+0xd0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC6_SetConfig+0x84>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a15      	ldr	r2, [pc, #84]	@ (800450c <TIM_OC6_SetConfig+0xd4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d109      	bne.n	80044d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	621a      	str	r2, [r3, #32]
}
 80044ea:	bf00      	nop
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40013400 	.word	0x40013400
 8004500:	40014000 	.word	0x40014000
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800
 800450c:	40015000 	.word	0x40015000

08004510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0201 	bic.w	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800453a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 030a 	bic.w	r3, r3, #10
 800454c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	621a      	str	r2, [r3, #32]
}
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456e:	b480      	push	{r7}
 8004570:	b087      	sub	sp, #28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0210 	bic.w	r2, r3, #16
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	031b      	lsls	r3, r3, #12
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f043 0307 	orr.w	r3, r3, #7
 80045f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800461e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	021a      	lsls	r2, r3, #8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	431a      	orrs	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4313      	orrs	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f003 031f 	and.w	r3, r3, #31
 8004656:	2201      	movs	r2, #1
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1a      	ldr	r2, [r3, #32]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	43db      	mvns	r3, r3
 8004666:	401a      	ands	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a1a      	ldr	r2, [r3, #32]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	431a      	orrs	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
}
 8004682:	bf00      	nop
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e06d      	b.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a30      	ldr	r2, [pc, #192]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d108      	bne.n	80046f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80046ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d01d      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d018      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1c      	ldr	r2, [pc, #112]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d013      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00e      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a15      	ldr	r2, [pc, #84]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d009      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d004      	beq.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a11      	ldr	r2, [pc, #68]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10c      	bne.n	8004772 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40013400 	.word	0x40013400
 8004798:	40015000 	.word	0x40015000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40014000 	.word	0x40014000

080047a8 <memset>:
 80047a8:	4402      	add	r2, r0
 80047aa:	4603      	mov	r3, r0
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d100      	bne.n	80047b2 <memset+0xa>
 80047b0:	4770      	bx	lr
 80047b2:	f803 1b01 	strb.w	r1, [r3], #1
 80047b6:	e7f9      	b.n	80047ac <memset+0x4>

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4d0d      	ldr	r5, [pc, #52]	@ (80047f0 <__libc_init_array+0x38>)
 80047bc:	4c0d      	ldr	r4, [pc, #52]	@ (80047f4 <__libc_init_array+0x3c>)
 80047be:	1b64      	subs	r4, r4, r5
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	2600      	movs	r6, #0
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	4d0b      	ldr	r5, [pc, #44]	@ (80047f8 <__libc_init_array+0x40>)
 80047ca:	4c0c      	ldr	r4, [pc, #48]	@ (80047fc <__libc_init_array+0x44>)
 80047cc:	f000 f818 	bl	8004800 <_init>
 80047d0:	1b64      	subs	r4, r4, r5
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	2600      	movs	r6, #0
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08004848 	.word	0x08004848
 80047f4:	08004848 	.word	0x08004848
 80047f8:	08004848 	.word	0x08004848
 80047fc:	0800484c 	.word	0x0800484c

08004800 <_init>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr

0800480c <_fini>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr
