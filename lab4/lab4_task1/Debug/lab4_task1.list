
lab4_task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000388c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003a20  08003a20  00004a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a50  08003a50  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a50  08003a50  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a50  08003a50  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a50  08003a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a58  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c3b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000184e  00000000  00000000  0000ec77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  000104c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000781  00000000  00000000  00010e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f402  00000000  00000000  00011601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0c5  00000000  00000000  00030a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c16b2  00000000  00000000  0003cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe17a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002834  00000000  00000000  000fe1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001009f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a08 	.word	0x08003a08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003a08 	.word	0x08003a08

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float  duty = 0.0f;
 80001da:	f04f 0300 	mov.w	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
	float  step = 0.05f; // 步长
 80001e0:	4b29      	ldr	r3, [pc, #164]	@ (8000288 <main+0xb4>)
 80001e2:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e4:	f000 fabe 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e8:	f000 f852 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ec:	f000 f928 	bl	8000440 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001f0:	f000 f8ae 	bl	8000350 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001f4:	2100      	movs	r1, #0
 80001f6:	4825      	ldr	r0, [pc, #148]	@ (800028c <main+0xb8>)
 80001f8:	f002 faac 	bl	8002754 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  TIM2->CCR1 = (uint32_t)(duty * TIM2->ARR); // 控制 D2 的亮度
 80001fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000202:	ee07 3a90 	vmov	s15, r3
 8000206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800020a:	edd7 7a03 	vldr	s15, [r7, #12]
 800020e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000212:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800021a:	ee17 2a90 	vmov	r2, s15
 800021e:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  // 手动控制 LED1-4 的模拟 PWM
	  	  for (int i = 0; i < 10; i++) {
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	e006      	b.n	8000234 <main+0x60>
	  		software_pwm_leds(duty); // 自定义函数见下方
 8000226:	ed97 0a03 	vldr	s0, [r7, #12]
 800022a:	f000 f953 	bl	80004d4 <software_pwm_leds>
	  	  for (int i = 0; i < 10; i++) {
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b09      	cmp	r3, #9
 8000238:	ddf5      	ble.n	8000226 <main+0x52>
	  	  }

	  	  // 改变亮度
	  	duty += step;
 800023a:	ed97 7a03 	vldr	s14, [r7, #12]
 800023e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000246:	edc7 7a03 	vstr	s15, [r7, #12]
	  	 if (duty >= 1.0f || duty <= 0.0f) {
 800024a:	edd7 7a03 	vldr	s15, [r7, #12]
 800024e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000252:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800025a:	da06      	bge.n	800026a <main+0x96>
 800025c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000268:	d80d      	bhi.n	8000286 <main+0xb2>
			  step = -step;
 800026a:	edd7 7a02 	vldr	s15, [r7, #8]
 800026e:	eef1 7a67 	vneg.f32	s15, s15
 8000272:	edc7 7a02 	vstr	s15, [r7, #8]
			  duty += step;
 8000276:	ed97 7a03 	vldr	s14, [r7, #12]
 800027a:	edd7 7a02 	vldr	s15, [r7, #8]
 800027e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000282:	edc7 7a03 	vstr	s15, [r7, #12]
	  	  TIM2->CCR1 = (uint32_t)(duty * TIM2->ARR); // 控制 D2 的亮度
 8000286:	e7b9      	b.n	80001fc <main+0x28>
 8000288:	3d4ccccd 	.word	0x3d4ccccd
 800028c:	20000028 	.word	0x20000028

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b0a6      	sub	sp, #152	@ 0x98
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800029a:	2228      	movs	r2, #40	@ 0x28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f003 fb86 	bl	80039b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2258      	movs	r2, #88	@ 0x58
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f003 fb78 	bl	80039b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	2310      	movs	r3, #16
 80002ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002dc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd76 	bl	8000de0 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002fa:	f000 f93b 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2302      	movs	r3, #2
 8000304:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800030e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000314:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000318:	2101      	movs	r1, #1
 800031a:	4618      	mov	r0, r3
 800031c:	f001 fd84 	bl	8001e28 <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000326:	f000 f925 	bl	8000574 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 800032a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800032e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000330:	2300      	movs	r3, #0
 8000332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4618      	mov	r0, r3
 8000338:	f001 ff38 	bl	80021ac <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000342:	f000 f917 	bl	8000574 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3798      	adds	r7, #152	@ 0x98
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08e      	sub	sp, #56	@ 0x38
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000382:	4b2e      	ldr	r3, [pc, #184]	@ (800043c <MX_TIM2_Init+0xec>)
 8000384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800038a:	4b2c      	ldr	r3, [pc, #176]	@ (800043c <MX_TIM2_Init+0xec>)
 800038c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b2a      	ldr	r3, [pc, #168]	@ (800043c <MX_TIM2_Init+0xec>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1151;
 8000398:	4b28      	ldr	r3, [pc, #160]	@ (800043c <MX_TIM2_Init+0xec>)
 800039a:	f240 427f 	movw	r2, #1151	@ 0x47f
 800039e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a0:	4b26      	ldr	r3, [pc, #152]	@ (800043c <MX_TIM2_Init+0xec>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a6:	4b25      	ldr	r3, [pc, #148]	@ (800043c <MX_TIM2_Init+0xec>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ac:	4823      	ldr	r0, [pc, #140]	@ (800043c <MX_TIM2_Init+0xec>)
 80003ae:	f002 f919 	bl	80025e4 <HAL_TIM_Base_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80003b8:	f000 f8dc 	bl	8000574 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003c6:	4619      	mov	r1, r3
 80003c8:	481c      	ldr	r0, [pc, #112]	@ (800043c <MX_TIM2_Init+0xec>)
 80003ca:	f002 fce5 	bl	8002d98 <HAL_TIM_ConfigClockSource>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80003d4:	f000 f8ce 	bl	8000574 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003d8:	4818      	ldr	r0, [pc, #96]	@ (800043c <MX_TIM2_Init+0xec>)
 80003da:	f002 f95a 	bl	8002692 <HAL_TIM_PWM_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003e4:	f000 f8c6 	bl	8000574 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003f0:	f107 031c 	add.w	r3, r7, #28
 80003f4:	4619      	mov	r1, r3
 80003f6:	4811      	ldr	r0, [pc, #68]	@ (800043c <MX_TIM2_Init+0xec>)
 80003f8:	f003 fa30 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000402:	f000 f8b7 	bl	8000574 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000406:	2360      	movs	r3, #96	@ 0x60
 8000408:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 115;
 800040a:	2373      	movs	r3, #115	@ 0x73
 800040c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000416:	463b      	mov	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	4807      	ldr	r0, [pc, #28]	@ (800043c <MX_TIM2_Init+0xec>)
 800041e:	f002 fba7 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000428:	f000 f8a4 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800042c:	4803      	ldr	r0, [pc, #12]	@ (800043c <MX_TIM2_Init+0xec>)
 800042e:	f000 f8ef 	bl	8000610 <HAL_TIM_MspPostInit>

}
 8000432:	bf00      	nop
 8000434:	3738      	adds	r7, #56	@ 0x38
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000028 	.word	0x20000028

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 030c 	add.w	r3, r7, #12
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0x78>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a17      	ldr	r2, [pc, #92]	@ (80004b8 <MX_GPIO_Init+0x78>)
 800045c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b15      	ldr	r3, [pc, #84]	@ (80004b8 <MX_GPIO_Init+0x78>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <MX_GPIO_Init+0x78>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <MX_GPIO_Init+0x78>)
 8000474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <MX_GPIO_Init+0x78>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 800048c:	480b      	ldr	r0, [pc, #44]	@ (80004bc <MX_GPIO_Init+0x7c>)
 800048e:	f000 fc8f 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000492:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000498:	2301      	movs	r3, #1
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	4619      	mov	r1, r3
 80004aa:	4804      	ldr	r0, [pc, #16]	@ (80004bc <MX_GPIO_Init+0x7c>)
 80004ac:	f000 faf6 	bl	8000a9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	48000400 	.word	0x48000400

080004c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <software_pwm_leds>:

void software_pwm_leds(float duty) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t period = 16;
 80004de:	2310      	movs	r3, #16
 80004e0:	617b      	str	r3, [r7, #20]

	uint32_t on_time = period * duty;
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	ee07 3a90 	vmov	s15, r3
 80004e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80004f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004f8:	ee17 3a90 	vmov	r3, s15
 80004fc:	613b      	str	r3, [r7, #16]
	uint32_t off_time = period - on_time;
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	60fb      	str	r3, [r7, #12]

    // 点亮LED1-4
    HAL_GPIO_WritePin(LED_Port, D1_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800050c:	4818      	ldr	r0, [pc, #96]	@ (8000570 <software_pwm_leds+0x9c>)
 800050e:	f000 fc4f 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_Port, D2_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2110      	movs	r1, #16
 8000516:	4816      	ldr	r0, [pc, #88]	@ (8000570 <software_pwm_leds+0x9c>)
 8000518:	f000 fc4a 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_Port, D3_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	4813      	ldr	r0, [pc, #76]	@ (8000570 <software_pwm_leds+0x9c>)
 8000522:	f000 fc45 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_Port, D4_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2108      	movs	r1, #8
 800052a:	4811      	ldr	r0, [pc, #68]	@ (8000570 <software_pwm_leds+0x9c>)
 800052c:	f000 fc40 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_Delay(on_time);
 8000530:	6938      	ldr	r0, [r7, #16]
 8000532:	f000 f97d 	bl	8000830 <HAL_Delay>

    // 熄灭LED1-4
    HAL_GPIO_WritePin(LED_Port, D1_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <software_pwm_leds+0x9c>)
 800053e:	f000 fc37 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_Port, D2_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2110      	movs	r1, #16
 8000546:	480a      	ldr	r0, [pc, #40]	@ (8000570 <software_pwm_leds+0x9c>)
 8000548:	f000 fc32 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_Port, D3_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2120      	movs	r1, #32
 8000550:	4807      	ldr	r0, [pc, #28]	@ (8000570 <software_pwm_leds+0x9c>)
 8000552:	f000 fc2d 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_Port, D4_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	4805      	ldr	r0, [pc, #20]	@ (8000570 <software_pwm_leds+0x9c>)
 800055c:	f000 fc28 	bl	8000db0 <HAL_GPIO_WritePin>
    HAL_Delay(off_time);
 8000560:	68f8      	ldr	r0, [r7, #12]
 8000562:	f000 f965 	bl	8000830 <HAL_Delay>
}
 8000566:	bf00      	nop
 8000568:	3718      	adds	r7, #24
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	48000400 	.word	0x48000400

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a08      	ldr	r2, [pc, #32]	@ (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_MspInit+0x44>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005b6:	2007      	movs	r0, #7
 80005b8:	f000 fa2e 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005d8:	d113      	bne.n	8000602 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <HAL_TIM_Base_MspInit+0x44>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <HAL_TIM_Base_MspInit+0x44>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	61d3      	str	r3, [r2, #28]
 80005e6:	4b09      	ldr	r3, [pc, #36]	@ (800060c <HAL_TIM_Base_MspInit+0x44>)
 80005e8:	69db      	ldr	r3, [r3, #28]
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	201c      	movs	r0, #28
 80005f8:	f000 fa19 	bl	8000a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005fc:	201c      	movs	r0, #28
 80005fe:	f000 fa32 	bl	8000a66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000630:	d11c      	bne.n	800066c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <HAL_TIM_MspPostInit+0x64>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <HAL_TIM_MspPostInit+0x64>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <HAL_TIM_MspPostInit+0x64>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800064a:	2320      	movs	r3, #32
 800064c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	2302      	movs	r3, #2
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800065a:	2301      	movs	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000668:	f000 fa18 	bl	8000a9c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <NMI_Handler+0x4>

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f88f 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006dc:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <TIM2_IRQHandler+0x10>)
 80006de:	f002 f945 	bl	800296c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000748 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	@ (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f003 f93f 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fd47 	bl	80001d4 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	08003a58 	.word	0x08003a58
  ldr r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800075c:	20000078 	.word	0x20000078

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f94f 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff fefe 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f967 	bl	8000a82 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f92f 	bl	8000a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_IncTick+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x24>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_IncTick+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008
 8000814:	20000074 	.word	0x20000074

08000818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;  
 800081c:	4b03      	ldr	r3, [pc, #12]	@ (800082c <HAL_GetTick+0x14>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000074 	.word	0x20000074

08000830 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000838:	f7ff ffee 	bl	8000818 <HAL_GetTick>
 800083c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000848:	d005      	beq.n	8000856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084a:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <HAL_Delay+0x44>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000856:	bf00      	nop
 8000858:	f7ff ffde 	bl	8000818 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	429a      	cmp	r2, r3
 8000866:	d8f7      	bhi.n	8000858 <HAL_Delay+0x28>
  {
  }
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4907      	ldr	r1, [pc, #28]	@ (8000914 <__NVIC_EnableIRQ+0x38>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0a      	blt.n	8000942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	490c      	ldr	r1, [pc, #48]	@ (8000964 <__NVIC_SetPriority+0x4c>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	440b      	add	r3, r1
 800093c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000940:	e00a      	b.n	8000958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4908      	ldr	r1, [pc, #32]	@ (8000968 <__NVIC_SetPriority+0x50>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	3b04      	subs	r3, #4
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	440b      	add	r3, r1
 8000956:	761a      	strb	r2, [r3, #24]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b480      	push	{r7}
 800096e:	b089      	sub	sp, #36	@ 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f1c3 0307 	rsb	r3, r3, #7
 8000986:	2b04      	cmp	r3, #4
 8000988:	bf28      	it	cs
 800098a:	2304      	movcs	r3, #4
 800098c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3304      	adds	r3, #4
 8000992:	2b06      	cmp	r3, #6
 8000994:	d902      	bls.n	800099c <NVIC_EncodePriority+0x30>
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3b03      	subs	r3, #3
 800099a:	e000      	b.n	800099e <NVIC_EncodePriority+0x32>
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	f04f 32ff 	mov.w	r2, #4294967295
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43da      	mvns	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b4:	f04f 31ff 	mov.w	r1, #4294967295
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43d9      	mvns	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	4313      	orrs	r3, r2
         );
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3724      	adds	r7, #36	@ 0x24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009e4:	d301      	bcc.n	80009ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00f      	b.n	8000a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <SysTick_Config+0x40>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f2:	210f      	movs	r1, #15
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f7ff ff8e 	bl	8000918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <SysTick_Config+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <SysTick_Config+0x40>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff29 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff3e 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff8e 	bl	800096c <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5d 	bl	8000918 <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff31 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffa2 	bl	80009d4 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	e160      	b.n	8000d6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 8152 	beq.w	8000d68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d005      	beq.n	8000adc <HAL_GPIO_Init+0x40>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 0201 	and.w	r2, r3, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d017      	beq.n	8000b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d123      	bne.n	8000bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	6939      	ldr	r1, [r7, #16]
 8000bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0203 	and.w	r2, r3, #3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80ac 	beq.w	8000d68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	4b5e      	ldr	r3, [pc, #376]	@ (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a5d      	ldr	r2, [pc, #372]	@ (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b5b      	ldr	r3, [pc, #364]	@ (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c28:	4a59      	ldr	r2, [pc, #356]	@ (8000d90 <HAL_GPIO_Init+0x2f4>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c52:	d025      	beq.n	8000ca0 <HAL_GPIO_Init+0x204>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a4f      	ldr	r2, [pc, #316]	@ (8000d94 <HAL_GPIO_Init+0x2f8>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d01f      	beq.n	8000c9c <HAL_GPIO_Init+0x200>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a4e      	ldr	r2, [pc, #312]	@ (8000d98 <HAL_GPIO_Init+0x2fc>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d019      	beq.n	8000c98 <HAL_GPIO_Init+0x1fc>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a4d      	ldr	r2, [pc, #308]	@ (8000d9c <HAL_GPIO_Init+0x300>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d013      	beq.n	8000c94 <HAL_GPIO_Init+0x1f8>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000da0 <HAL_GPIO_Init+0x304>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d00d      	beq.n	8000c90 <HAL_GPIO_Init+0x1f4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a4b      	ldr	r2, [pc, #300]	@ (8000da4 <HAL_GPIO_Init+0x308>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d007      	beq.n	8000c8c <HAL_GPIO_Init+0x1f0>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a4a      	ldr	r2, [pc, #296]	@ (8000da8 <HAL_GPIO_Init+0x30c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c84:	2306      	movs	r3, #6
 8000c86:	e00c      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c88:	2307      	movs	r3, #7
 8000c8a:	e00a      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	e008      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c90:	2304      	movs	r3, #4
 8000c92:	e006      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e004      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c98:	2302      	movs	r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	e000      	b.n	8000ca2 <HAL_GPIO_Init+0x206>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4093      	lsls	r3, r2
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cb2:	4937      	ldr	r1, [pc, #220]	@ (8000d90 <HAL_GPIO_Init+0x2f4>)
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ce4:	4a31      	ldr	r2, [pc, #196]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cea:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d0e:	4a27      	ldr	r2, [pc, #156]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d38:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <HAL_GPIO_Init+0x310>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f47f ae97 	bne.w	8000aac <HAL_GPIO_Init+0x10>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000
 8000d94:	48000400 	.word	0x48000400
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	48000c00 	.word	0x48000c00
 8000da0:	48001000 	.word	0x48001000
 8000da4:	48001400 	.word	0x48001400
 8000da8:	48001800 	.word	0x48001800
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000dec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000df0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000df6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	f001 b80a 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8161 	beq.w	80010de <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e1c:	4bae      	ldr	r3, [pc, #696]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 030c 	and.w	r3, r3, #12
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d00c      	beq.n	8000e42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e28:	4bab      	ldr	r3, [pc, #684]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b08      	cmp	r3, #8
 8000e32:	d157      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x104>
 8000e34:	4ba8      	ldr	r3, [pc, #672]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e40:	d150      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x104>
 8000e42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e46:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5a:	fab3 f383 	clz	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e62:	d802      	bhi.n	8000e6a <HAL_RCC_OscConfig+0x8a>
 8000e64:	4b9c      	ldr	r3, [pc, #624]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0xb6>
 8000e6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e82:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e86:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e92:	4b91      	ldr	r3, [pc, #580]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e96:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e9a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e9e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000ea2:	fa92 f2a2 	rbit	r2, r2
 8000ea6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000eaa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	f002 021f 	and.w	r2, r2, #31
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8108 	beq.w	80010dc <HAL_RCC_OscConfig+0x2fc>
 8000ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ed0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f040 80ff 	bne.w	80010dc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f000 bf9b 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ee8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef4:	d106      	bne.n	8000f04 <HAL_RCC_OscConfig+0x124>
 8000ef6:	4b78      	ldr	r3, [pc, #480]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a77      	ldr	r2, [pc, #476]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e036      	b.n	8000f72 <HAL_RCC_OscConfig+0x192>
 8000f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x14e>
 8000f14:	4b70      	ldr	r3, [pc, #448]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a6f      	ldr	r2, [pc, #444]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b6d      	ldr	r3, [pc, #436]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a6c      	ldr	r2, [pc, #432]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e021      	b.n	8000f72 <HAL_RCC_OscConfig+0x192>
 8000f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f3e:	d10c      	bne.n	8000f5a <HAL_RCC_OscConfig+0x17a>
 8000f40:	4b65      	ldr	r3, [pc, #404]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a64      	ldr	r2, [pc, #400]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b62      	ldr	r3, [pc, #392]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a61      	ldr	r2, [pc, #388]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e00b      	b.n	8000f72 <HAL_RCC_OscConfig+0x192>
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b5c      	ldr	r3, [pc, #368]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d054      	beq.n	800102c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fc49 	bl	8000818 <HAL_GetTick>
 8000f86:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	e00a      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fc44 	bl	8000818 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b64      	cmp	r3, #100	@ 0x64
 8000f9a:	d902      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	f000 bf3c 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
 8000fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fa6:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000fae:	fa93 f3a3 	rbit	r3, r3
 8000fb2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000fb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	fab3 f383 	clz	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fc2:	d802      	bhi.n	8000fca <HAL_RCC_OscConfig+0x1ea>
 8000fc4:	4b44      	ldr	r3, [pc, #272]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	e015      	b.n	8000ff6 <HAL_RCC_OscConfig+0x216>
 8000fca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000fde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fe6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000ff2:	4b39      	ldr	r3, [pc, #228]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ffa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000ffe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001002:	fa92 f2a2 	rbit	r2, r2
 8001006:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800100a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800100e:	fab2 f282 	clz	r2, r2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	f042 0220 	orr.w	r2, r2, #32
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	f002 021f 	and.w	r2, r2, #31
 800101e:	2101      	movs	r1, #1
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0b0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x1ac>
 800102a:	e058      	b.n	80010de <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fbf4 	bl	8000818 <HAL_GetTick>
 8001030:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001034:	e00a      	b.n	800104c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001036:	f7ff fbef 	bl	8000818 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	@ 0x64
 8001044:	d902      	bls.n	800104c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	f000 bee7 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
 800104c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001050:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001054:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001058:	fa93 f3a3 	rbit	r3, r3
 800105c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001060:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b3f      	cmp	r3, #63	@ 0x3f
 800106c:	d802      	bhi.n	8001074 <HAL_RCC_OscConfig+0x294>
 800106e:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e015      	b.n	80010a0 <HAL_RCC_OscConfig+0x2c0>
 8001074:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001078:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001080:	fa93 f3a3 	rbit	r3, r3
 8001084:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001088:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800108c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001090:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001094:	fa93 f3a3 	rbit	r3, r3
 8001098:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <HAL_RCC_OscConfig+0x2f8>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010a4:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80010a8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80010ac:	fa92 f2a2 	rbit	r2, r2
 80010b0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80010b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010b8:	fab2 f282 	clz	r2, r2
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f042 0220 	orr.w	r2, r2, #32
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	f002 021f 	and.w	r2, r2, #31
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1b0      	bne.n	8001036 <HAL_RCC_OscConfig+0x256>
 80010d4:	e003      	b.n	80010de <HAL_RCC_OscConfig+0x2fe>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80010e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 816d 	beq.w	80013ce <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010f4:	4bcd      	ldr	r3, [pc, #820]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001100:	4bca      	ldr	r3, [pc, #808]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d16e      	bne.n	80011ea <HAL_RCC_OscConfig+0x40a>
 800110c:	4bc7      	ldr	r3, [pc, #796]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001118:	d167      	bne.n	80011ea <HAL_RCC_OscConfig+0x40a>
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001120:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800112c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001130:	fab3 f383 	clz	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b3f      	cmp	r3, #63	@ 0x3f
 8001138:	d802      	bhi.n	8001140 <HAL_RCC_OscConfig+0x360>
 800113a:	4bbc      	ldr	r3, [pc, #752]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	e013      	b.n	8001168 <HAL_RCC_OscConfig+0x388>
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001158:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001164:	4bb1      	ldr	r3, [pc, #708]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001168:	2202      	movs	r2, #2
 800116a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800116e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001172:	fa92 f2a2 	rbit	r2, r2
 8001176:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800117a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800117e:	fab2 f282 	clz	r2, r2
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	f042 0220 	orr.w	r2, r2, #32
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	f002 021f 	and.w	r2, r2, #31
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	4013      	ands	r3, r2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00a      	beq.n	80011b0 <HAL_RCC_OscConfig+0x3d0>
 800119a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800119e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f000 be35 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b9e      	ldr	r3, [pc, #632]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	21f8      	movs	r1, #248	@ 0xf8
 80011c6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80011ce:	fa91 f1a1 	rbit	r1, r1
 80011d2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80011d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011da:	fab1 f181 	clz	r1, r1
 80011de:	b2c9      	uxtb	r1, r1
 80011e0:	408b      	lsls	r3, r1
 80011e2:	4992      	ldr	r1, [pc, #584]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	e0f1      	b.n	80013ce <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80011ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 8083 	beq.w	8001302 <HAL_RCC_OscConfig+0x522>
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800120e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800121c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff faf6 	bl	8000818 <HAL_GetTick>
 800122c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff faf1 	bl	8000818 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d902      	bls.n	8001248 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	f000 bde9 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800125a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b3f      	cmp	r3, #63	@ 0x3f
 8001266:	d802      	bhi.n	800126e <HAL_RCC_OscConfig+0x48e>
 8001268:	4b70      	ldr	r3, [pc, #448]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	e013      	b.n	8001296 <HAL_RCC_OscConfig+0x4b6>
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001274:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001278:	fa93 f3a3 	rbit	r3, r3
 800127c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001280:	2302      	movs	r3, #2
 8001282:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001286:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001292:	4b66      	ldr	r3, [pc, #408]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	2202      	movs	r2, #2
 8001298:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800129c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80012a0:	fa92 f2a2 	rbit	r2, r2
 80012a4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80012a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012ac:	fab2 f282 	clz	r2, r2
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f002 021f 	and.w	r2, r2, #31
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	4013      	ands	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0b4      	beq.n	8001232 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b58      	ldr	r3, [pc, #352]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	21f8      	movs	r1, #248	@ 0xf8
 80012de:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80012e6:	fa91 f1a1 	rbit	r1, r1
 80012ea:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80012ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012f2:	fab1 f181 	clz	r1, r1
 80012f6:	b2c9      	uxtb	r1, r1
 80012f8:	408b      	lsls	r3, r1
 80012fa:	494c      	ldr	r1, [pc, #304]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e065      	b.n	80013ce <HAL_RCC_OscConfig+0x5ee>
 8001302:	2301      	movs	r3, #1
 8001304:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001314:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001322:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	2300      	movs	r3, #0
 800132c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fa73 	bl	8000818 <HAL_GetTick>
 8001332:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e00a      	b.n	800134e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fa6e 	bl	8000818 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d902      	bls.n	800134e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	f000 bd66 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001354:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001360:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001364:	fab3 f383 	clz	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b3f      	cmp	r3, #63	@ 0x3f
 800136c:	d802      	bhi.n	8001374 <HAL_RCC_OscConfig+0x594>
 800136e:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	e013      	b.n	800139c <HAL_RCC_OscConfig+0x5bc>
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800138c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <HAL_RCC_OscConfig+0x64c>)
 800139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139c:	2202      	movs	r2, #2
 800139e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80013a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013a6:	fa92 f2a2 	rbit	r2, r2
 80013aa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80013ae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013b2:	fab2 f282 	clz	r2, r2
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	f042 0220 	orr.w	r2, r2, #32
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	f002 021f 	and.w	r2, r2, #31
 80013c2:	2101      	movs	r1, #1
 80013c4:	fa01 f202 	lsl.w	r2, r1, r2
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1b4      	bne.n	8001338 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8119 	beq.w	8001616 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8082 	beq.w	80014fa <HAL_RCC_OscConfig+0x71a>
 80013f6:	2301      	movs	r3, #1
 80013f8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001400:	fa93 f3a3 	rbit	r3, r3
 8001404:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001408:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140c:	fab3 f383 	clz	r3, r3
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <HAL_RCC_OscConfig+0x650>)
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	461a      	mov	r2, r3
 800141c:	2301      	movs	r3, #1
 800141e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff f9fa 	bl	8000818 <HAL_GetTick>
 8001424:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001428:	e00f      	b.n	800144a <HAL_RCC_OscConfig+0x66a>
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000
 8001430:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff f9f0 	bl	8000818 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d902      	bls.n	800144a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	f000 bce8 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800146a:	2202      	movs	r2, #2
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001496:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4bb0      	ldr	r3, [pc, #704]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80014ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014b6:	2102      	movs	r1, #2
 80014b8:	6019      	str	r1, [r3, #0]
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f1a3 	rbit	r1, r3
 80014c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014d0:	6019      	str	r1, [r3, #0]
  return result;
 80014d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014d6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d09d      	beq.n	8001434 <HAL_RCC_OscConfig+0x654>
 80014f8:	e08d      	b.n	8001616 <HAL_RCC_OscConfig+0x836>
 80014fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800150a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001518:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800151c:	601a      	str	r2, [r3, #0]
  return result;
 800151e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001522:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001526:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4b8f      	ldr	r3, [pc, #572]	@ (8001770 <HAL_RCC_OscConfig+0x990>)
 8001532:	4413      	add	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	461a      	mov	r2, r3
 8001538:	2300      	movs	r3, #0
 800153a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff f96c 	bl	8000818 <HAL_GetTick>
 8001540:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff f967 	bl	8000818 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d902      	bls.n	800155c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	f000 bc5f 	b.w	8001e1a <HAL_RCC_OscConfig+0x103a>
 800155c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001560:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001584:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001590:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f2a3 	rbit	r2, r3
 80015be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b68      	ldr	r3, [pc, #416]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80015ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015d4:	2102      	movs	r1, #2
 80015d6:	6019      	str	r1, [r3, #0]
 80015d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	fa93 f1a3 	rbit	r1, r3
 80015e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015ee:	6019      	str	r1, [r3, #0]
  return result;
 80015f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d197      	bne.n	8001546 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800161a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 819c 	beq.w	8001964 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b4b      	ldr	r3, [pc, #300]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a4a      	ldr	r2, [pc, #296]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b48      	ldr	r3, [pc, #288]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b41      	ldr	r3, [pc, #260]	@ (8001774 <HAL_RCC_OscConfig+0x994>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11a      	bne.n	80016ae <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001678:	4b3e      	ldr	r3, [pc, #248]	@ (8001774 <HAL_RCC_OscConfig+0x994>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3d      	ldr	r2, [pc, #244]	@ (8001774 <HAL_RCC_OscConfig+0x994>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001684:	f7ff f8c8 	bl	8000818 <HAL_GetTick>
 8001688:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff f8c3 	bl	8000818 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e3bb      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <HAL_RCC_OscConfig+0x994>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ef      	beq.n	800168e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x8ec>
 80016be:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a2a      	ldr	r2, [pc, #168]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e035      	b.n	8001738 <HAL_RCC_OscConfig+0x958>
 80016cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x916>
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a22      	ldr	r2, [pc, #136]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	e020      	b.n	8001738 <HAL_RCC_OscConfig+0x958>
 80016f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x940>
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a18      	ldr	r2, [pc, #96]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a15      	ldr	r2, [pc, #84]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0x958>
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a11      	ldr	r2, [pc, #68]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6213      	str	r3, [r2, #32]
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a0e      	ldr	r2, [pc, #56]	@ (800176c <HAL_RCC_OscConfig+0x98c>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800173c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8085 	beq.w	8001854 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff f865 	bl	8000818 <HAL_GetTick>
 800174e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	e011      	b.n	8001778 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff f860 	bl	8000818 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d907      	bls.n	8001778 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e356      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
 800176c:	40021000 	.word	0x40021000
 8001770:	10908120 	.word	0x10908120
 8001774:	40007000 	.word	0x40007000
 8001778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001796:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ac:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017ba:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017be:	601a      	str	r2, [r3, #0]
  return result;
 80017c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0xa00>
 80017da:	4b98      	ldr	r3, [pc, #608]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	e013      	b.n	8001808 <HAL_RCC_OscConfig+0xa28>
 80017e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	fa93 f2a3 	rbit	r2, r3
 80017fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017fe:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4b8d      	ldr	r3, [pc, #564]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001808:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800180c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001810:	2102      	movs	r1, #2
 8001812:	6011      	str	r1, [r2, #0]
 8001814:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001818:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	fa92 f1a2 	rbit	r1, r2
 8001822:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001826:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800182a:	6011      	str	r1, [r2, #0]
  return result;
 800182c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001830:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	fab2 f282 	clz	r2, r2
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f002 021f 	and.w	r2, r2, #31
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d080      	beq.n	8001754 <HAL_RCC_OscConfig+0x974>
 8001852:	e07d      	b.n	8001950 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7fe ffe0 	bl	8000818 <HAL_GetTick>
 8001858:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7fe ffdb 	bl	8000818 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2d1      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
 8001876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800187e:	2202      	movs	r2, #2
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001886:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001894:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018a2:	2202      	movs	r2, #2
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018aa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	fa93 f2a3 	rbit	r2, r3
 80018b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018bc:	601a      	str	r2, [r3, #0]
  return result;
 80018be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	fab3 f383 	clz	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <HAL_RCC_OscConfig+0xafe>
 80018d8:	4b58      	ldr	r3, [pc, #352]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	e013      	b.n	8001906 <HAL_RCC_OscConfig+0xb26>
 80018de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018e6:	2202      	movs	r2, #2
 80018e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018ee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fa93 f2a3 	rbit	r2, r3
 80018f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018fc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4b4e      	ldr	r3, [pc, #312]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800190a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800190e:	2102      	movs	r1, #2
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001916:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fa92 f1a2 	rbit	r1, r2
 8001920:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001924:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001928:	6011      	str	r1, [r2, #0]
  return result;
 800192a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800192e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	fab2 f282 	clz	r2, r2
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f002 021f 	and.w	r2, r2, #31
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d186      	bne.n	800185e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001950:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	4a37      	ldr	r2, [pc, #220]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001962:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001968:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8251 	beq.w	8001e18 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001976:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	f000 820f 	beq.w	8001da2 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b02      	cmp	r3, #2
 8001992:	f040 8165 	bne.w	8001c60 <HAL_RCC_OscConfig+0xe80>
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800199e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019ba:	601a      	str	r2, [r3, #0]
  return result;
 80019bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80019c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	461a      	mov	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7fe ff1c 	bl	8000818 <HAL_GetTick>
 80019e0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e6:	f7fe ff17 	bl	8000818 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e20f      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
 80019fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a1a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a1e:	601a      	str	r2, [r3, #0]
  return result;
 8001a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a24:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a32:	d805      	bhi.n	8001a40 <HAL_RCC_OscConfig+0xc60>
 8001a34:	4b01      	ldr	r3, [pc, #4]	@ (8001a3c <HAL_RCC_OscConfig+0xc5c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	e02a      	b.n	8001a90 <HAL_RCC_OscConfig+0xcb0>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a44:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a52:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fa93 f2a3 	rbit	r2, r3
 8001a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a60:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a78:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a86:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	4bca      	ldr	r3, [pc, #808]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a90:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a94:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a98:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a9c:	6011      	str	r1, [r2, #0]
 8001a9e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aa2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	fa92 f1a2 	rbit	r1, r2
 8001aac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ab0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001ab4:	6011      	str	r1, [r2, #0]
  return result;
 8001ab6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aba:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f042 0220 	orr.w	r2, r2, #32
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	f002 021f 	and.w	r2, r2, #31
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d184      	bne.n	80019e6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4bb6      	ldr	r3, [pc, #728]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	f023 020f 	bic.w	r2, r3, #15
 8001ae4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	49b1      	ldr	r1, [pc, #708]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001af6:	4bb0      	ldr	r3, [pc, #704]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a19      	ldr	r1, [r3, #32]
 8001b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	49a7      	ldr	r1, [pc, #668]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b26:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b42:	601a      	str	r2, [r3, #0]
  return result;
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b4c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b58:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2301      	movs	r3, #1
 8001b62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7fe fe58 	bl	8000818 <HAL_GetTick>
 8001b68:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe fe53 	bl	8000818 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e14b      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
 8001b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b86:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b94:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001ba6:	601a      	str	r2, [r3, #0]
  return result;
 8001ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bb0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bba:	d802      	bhi.n	8001bc2 <HAL_RCC_OscConfig+0xde2>
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	e027      	b.n	8001c12 <HAL_RCC_OscConfig+0xe32>
 8001bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bfa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c08:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c16:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c1a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c1e:	6011      	str	r1, [r2, #0]
 8001c20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c24:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	fa92 f1a2 	rbit	r1, r2
 8001c2e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c32:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c36:	6011      	str	r1, [r2, #0]
  return result;
 8001c38:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c3c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d087      	beq.n	8001b6e <HAL_RCC_OscConfig+0xd8e>
 8001c5e:	e0db      	b.n	8001e18 <HAL_RCC_OscConfig+0x1038>
 8001c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c64:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c80:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c84:	601a      	str	r2, [r3, #0]
  return result;
 8001c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c8e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7fe fdb7 	bl	8000818 <HAL_GetTick>
 8001caa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	e009      	b.n	8001cc4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7fe fdb2 	bl	8000818 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0aa      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
 8001cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ccc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001cf2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001cfc:	d802      	bhi.n	8001d04 <HAL_RCC_OscConfig+0xf24>
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e027      	b.n	8001d54 <HAL_RCC_OscConfig+0xf74>
 8001d04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d08:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d16:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d24:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d3c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	fa93 f2a3 	rbit	r2, r3
 8001d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_OscConfig+0xfd8>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d58:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d60:	6011      	str	r1, [r2, #0]
 8001d62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d66:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	fa92 f1a2 	rbit	r1, r2
 8001d70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d74:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d78:	6011      	str	r1, [r2, #0]
  return result;
 8001d7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d7e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	fab2 f282 	clz	r2, r2
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f042 0220 	orr.w	r2, r2, #32
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f002 021f 	and.w	r2, r2, #31
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d187      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xed0>
 8001da0:	e03a      	b.n	8001e18 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d104      	bne.n	8001dbc <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e031      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_RCC_OscConfig+0x1044>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	@ (8001e24 <HAL_RCC_OscConfig+0x1044>)
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001dd0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d117      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001de4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001de8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10b      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b09e      	sub	sp, #120	@ 0x78
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e154      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b89      	ldr	r3, [pc, #548]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b86      	ldr	r3, [pc, #536]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4984      	ldr	r1, [pc, #528]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b82      	ldr	r3, [pc, #520]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e13c      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b7b      	ldr	r3, [pc, #492]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4978      	ldr	r1, [pc, #480]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 80cd 	beq.w	8002036 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d137      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xec>
 8001ea4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_RCC_ClockConfig+0x9c>
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_ClockConfig+0xbc>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ee0:	4b62      	ldr	r3, [pc, #392]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001eea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ef2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0220 	orr.w	r2, r2, #32
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d171      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0ea      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d137      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x164>
 8001f1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f20:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f34:	d802      	bhi.n	8001f3c <HAL_RCC_ClockConfig+0x114>
 8001f36:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_ClockConfig+0x134>
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f58:	4b44      	ldr	r3, [pc, #272]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f60:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	f042 0220 	orr.w	r2, r2, #32
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f002 021f 	and.w	r2, r2, #31
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d135      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0ae      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fa2:	d802      	bhi.n	8001faa <HAL_RCC_ClockConfig+0x182>
 8001fa4:	4b31      	ldr	r3, [pc, #196]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	e00d      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x19e>
 8001faa:	2302      	movs	r3, #2
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	61ba      	str	r2, [r7, #24]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	fa92 f2a2 	rbit	r2, r2
 8001fd0:	617a      	str	r2, [r7, #20]
  return result;
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	fab2 f282 	clz	r2, r2
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f042 0220 	orr.w	r2, r2, #32
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f002 021f 	and.w	r2, r2, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e07a      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 0203 	bic.w	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	491a      	ldr	r1, [pc, #104]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002006:	f7fe fc07 	bl	8000818 <HAL_GetTick>
 800200a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200c:	e00a      	b.n	8002024 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f7fe fc03 	bl	8000818 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e062      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_ClockConfig+0x244>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 020c 	and.w	r2, r3, #12
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	429a      	cmp	r2, r3
 8002034:	d1eb      	bne.n	800200e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002036:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d215      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 0207 	bic.w	r2, r3, #7
 800204c:	4906      	ldr	r1, [pc, #24]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <HAL_RCC_ClockConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d006      	beq.n	8002070 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e041      	b.n	80020ea <HAL_RCC_ClockConfig+0x2c2>
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000
 800206c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b1d      	ldr	r3, [pc, #116]	@ (80020f4 <HAL_RCC_ClockConfig+0x2cc>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	491a      	ldr	r1, [pc, #104]	@ (80020f4 <HAL_RCC_ClockConfig+0x2cc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b16      	ldr	r3, [pc, #88]	@ (80020f4 <HAL_RCC_ClockConfig+0x2cc>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4912      	ldr	r1, [pc, #72]	@ (80020f4 <HAL_RCC_ClockConfig+0x2cc>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ae:	f000 f829 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <HAL_RCC_ClockConfig+0x2cc>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020bc:	22f0      	movs	r2, #240	@ 0xf0
 80020be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	fa92 f2a2 	rbit	r2, r2
 80020c6:	60fa      	str	r2, [r7, #12]
  return result;
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	fab2 f282 	clz	r2, r2
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	40d3      	lsrs	r3, r2
 80020d2:	4a09      	ldr	r2, [pc, #36]	@ (80020f8 <HAL_RCC_ClockConfig+0x2d0>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	fa21 f303 	lsr.w	r3, r1, r3
 80020da:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <HAL_RCC_ClockConfig+0x2d4>)
 80020dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x2d8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fb54 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3778      	adds	r7, #120	@ 0x78
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08003a20 	.word	0x08003a20
 80020fc:	20000000 	.word	0x20000000
 8002100:	20000004 	.word	0x20000004

08002104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	2b04      	cmp	r3, #4
 800212c:	d002      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x30>
 800212e:	2b08      	cmp	r3, #8
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0x36>
 8002132:	e029      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	e029      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	4a18      	ldr	r2, [pc, #96]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002144:	5cd3      	ldrb	r3, [r2, r3]
 8002146:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002148:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	4a15      	ldr	r2, [pc, #84]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002160:	4a0f      	ldr	r2, [pc, #60]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	fbb2 f2f3 	udiv	r2, r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e007      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002172:	4a0b      	ldr	r2, [pc, #44]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	fbb2 f2f3 	udiv	r2, r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	613b      	str	r3, [r7, #16]
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800218a:	613b      	str	r3, [r7, #16]
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	693b      	ldr	r3, [r7, #16]
}
 8002190:	4618      	mov	r0, r3
 8002192:	371c      	adds	r7, #28
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	40021000 	.word	0x40021000
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	08003a30 	.word	0x08003a30
 80021a8:	08003a40 	.word	0x08003a40

080021ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b092      	sub	sp, #72	@ 0x48
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80d2 	beq.w	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10e      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	4a49      	ldr	r2, [pc, #292]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	61d3      	str	r3, [r2, #28]
 80021e8:	4b47      	ldr	r3, [pc, #284]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b44      	ldr	r3, [pc, #272]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b41      	ldr	r3, [pc, #260]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a40      	ldr	r2, [pc, #256]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe fb01 	bl	8000818 <HAL_GetTick>
 8002216:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7fe fafd 	bl	8000818 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b64      	cmp	r3, #100	@ 0x64
 8002226:	d901      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1d4      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b37      	ldr	r3, [pc, #220]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002238:	4b33      	ldr	r3, [pc, #204]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002240:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8082 	beq.w	800234e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002252:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002254:	429a      	cmp	r2, r3
 8002256:	d07a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002258:	4b2b      	ldr	r3, [pc, #172]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	461a      	mov	r2, r3
 8002282:	2301      	movs	r3, #1
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800228a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	461a      	mov	r2, r3
 80022a6:	2300      	movs	r3, #0
 80022a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022aa:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d049      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe faad 	bl	8000818 <HAL_GetTick>
 80022be:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7fe faa9 	bl	8000818 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e17e      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80022d8:	2302      	movs	r3, #2
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	61fb      	str	r3, [r7, #28]
  return result;
 80022f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002302:	4b01      	ldr	r3, [pc, #4]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	e00d      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
 8002310:	10908100 	.word	0x10908100
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	4b9a      	ldr	r3, [pc, #616]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	2202      	movs	r2, #2
 8002326:	613a      	str	r2, [r7, #16]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	60fa      	str	r2, [r7, #12]
  return result;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	fab2 f282 	clz	r2, r2
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	f002 021f 	and.w	r2, r2, #31
 8002342:	2101      	movs	r1, #1
 8002344:	fa01 f202 	lsl.w	r2, r1, r2
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0b9      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800234e:	4b8f      	ldr	r3, [pc, #572]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	498c      	ldr	r1, [pc, #560]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002360:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002368:	4b88      	ldr	r3, [pc, #544]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	4a87      	ldr	r2, [pc, #540]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002372:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002380:	4b82      	ldr	r3, [pc, #520]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	f023 0203 	bic.w	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	497f      	ldr	r1, [pc, #508]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238e:	4313      	orrs	r3, r2
 8002390:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800239e:	4b7b      	ldr	r3, [pc, #492]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4978      	ldr	r1, [pc, #480]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023bc:	4b73      	ldr	r3, [pc, #460]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4970      	ldr	r1, [pc, #448]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023da:	4b6c      	ldr	r3, [pc, #432]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f023 0210 	bic.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4969      	ldr	r1, [pc, #420]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023f8:	4b64      	ldr	r3, [pc, #400]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	4961      	ldr	r1, [pc, #388]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002416:	4b5d      	ldr	r3, [pc, #372]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f023 0220 	bic.w	r2, r3, #32
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	495a      	ldr	r1, [pc, #360]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002424:	4313      	orrs	r3, r2
 8002426:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002434:	4b55      	ldr	r3, [pc, #340]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002438:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	4952      	ldr	r1, [pc, #328]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002442:	4313      	orrs	r3, r2
 8002444:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002452:	4b4e      	ldr	r3, [pc, #312]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	494b      	ldr	r1, [pc, #300]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002470:	4b46      	ldr	r3, [pc, #280]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4943      	ldr	r1, [pc, #268]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800248e:	4b3f      	ldr	r3, [pc, #252]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	493c      	ldr	r1, [pc, #240]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024ac:	4b37      	ldr	r3, [pc, #220]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	4934      	ldr	r1, [pc, #208]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024ca:	4b30      	ldr	r3, [pc, #192]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d6:	492d      	ldr	r1, [pc, #180]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024e8:	4b28      	ldr	r3, [pc, #160]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f4:	4925      	ldr	r1, [pc, #148]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d008      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002506:	4b21      	ldr	r3, [pc, #132]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	491e      	ldr	r1, [pc, #120]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002514:	4313      	orrs	r3, r2
 8002516:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	4916      	ldr	r1, [pc, #88]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254e:	490f      	ldr	r1, [pc, #60]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002560:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	4907      	ldr	r1, [pc, #28]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00c      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800257e:	4b03      	ldr	r3, [pc, #12]	@ (800258c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	e002      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	4913      	ldr	r1, [pc, #76]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002594:	4313      	orrs	r3, r2
 8002596:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	490b      	ldr	r1, [pc, #44]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80025c2:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ce:	4904      	ldr	r1, [pc, #16]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3748      	adds	r7, #72	@ 0x48
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e049      	b.n	800268a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fd ffdc 	bl	80005c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f000 fcaa 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e049      	b.n	8002738 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f841 	bl	8002740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4610      	mov	r0, r2
 80026d2:	f000 fc53 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_TIM_PWM_Start+0x24>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e03c      	b.n	80027f2 <HAL_TIM_PWM_Start+0x9e>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d109      	bne.n	8002792 <HAL_TIM_PWM_Start+0x3e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e02f      	b.n	80027f2 <HAL_TIM_PWM_Start+0x9e>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d109      	bne.n	80027ac <HAL_TIM_PWM_Start+0x58>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e022      	b.n	80027f2 <HAL_TIM_PWM_Start+0x9e>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d109      	bne.n	80027c6 <HAL_TIM_PWM_Start+0x72>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	bf14      	ite	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	2300      	moveq	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	e015      	b.n	80027f2 <HAL_TIM_PWM_Start+0x9e>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b10      	cmp	r3, #16
 80027ca:	d109      	bne.n	80027e0 <HAL_TIM_PWM_Start+0x8c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e008      	b.n	80027f2 <HAL_TIM_PWM_Start+0x9e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e0a1      	b.n	800293e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <HAL_TIM_PWM_Start+0xb6>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002808:	e023      	b.n	8002852 <HAL_TIM_PWM_Start+0xfe>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d104      	bne.n	800281a <HAL_TIM_PWM_Start+0xc6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002818:	e01b      	b.n	8002852 <HAL_TIM_PWM_Start+0xfe>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b08      	cmp	r3, #8
 800281e:	d104      	bne.n	800282a <HAL_TIM_PWM_Start+0xd6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002828:	e013      	b.n	8002852 <HAL_TIM_PWM_Start+0xfe>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0xe6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002838:	e00b      	b.n	8002852 <HAL_TIM_PWM_Start+0xfe>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b10      	cmp	r3, #16
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start+0xf6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002848:	e003      	b.n	8002852 <HAL_TIM_PWM_Start+0xfe>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2201      	movs	r2, #1
 8002858:	6839      	ldr	r1, [r7, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f000 ffd8 	bl	8003810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a38      	ldr	r2, [pc, #224]	@ (8002948 <HAL_TIM_PWM_Start+0x1f4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_TIM_PWM_Start+0x148>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a37      	ldr	r2, [pc, #220]	@ (800294c <HAL_TIM_PWM_Start+0x1f8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_TIM_PWM_Start+0x148>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a35      	ldr	r2, [pc, #212]	@ (8002950 <HAL_TIM_PWM_Start+0x1fc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_TIM_PWM_Start+0x148>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a34      	ldr	r2, [pc, #208]	@ (8002954 <HAL_TIM_PWM_Start+0x200>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_TIM_PWM_Start+0x148>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a32      	ldr	r2, [pc, #200]	@ (8002958 <HAL_TIM_PWM_Start+0x204>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_TIM_PWM_Start+0x148>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a31      	ldr	r2, [pc, #196]	@ (800295c <HAL_TIM_PWM_Start+0x208>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_TIM_PWM_Start+0x14c>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_TIM_PWM_Start+0x14e>
 80028a0:	2300      	movs	r3, #0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a23      	ldr	r2, [pc, #140]	@ (8002948 <HAL_TIM_PWM_Start+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d01d      	beq.n	80028fc <HAL_TIM_PWM_Start+0x1a8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028c8:	d018      	beq.n	80028fc <HAL_TIM_PWM_Start+0x1a8>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <HAL_TIM_PWM_Start+0x20c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d013      	beq.n	80028fc <HAL_TIM_PWM_Start+0x1a8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_TIM_PWM_Start+0x210>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00e      	beq.n	80028fc <HAL_TIM_PWM_Start+0x1a8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_TIM_PWM_Start+0x1f8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d009      	beq.n	80028fc <HAL_TIM_PWM_Start+0x1a8>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_TIM_PWM_Start+0x1fc>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_TIM_PWM_Start+0x1a8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a19      	ldr	r2, [pc, #100]	@ (800295c <HAL_TIM_PWM_Start+0x208>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d115      	bne.n	8002928 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_TIM_PWM_Start+0x214>)
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b06      	cmp	r3, #6
 800290c:	d015      	beq.n	800293a <HAL_TIM_PWM_Start+0x1e6>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002914:	d011      	beq.n	800293a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	e008      	b.n	800293a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e000      	b.n	800293c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40013400 	.word	0x40013400
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800
 800295c:	40015000 	.word	0x40015000
 8002960:	40000400 	.word	0x40000400
 8002964:	40000800 	.word	0x40000800
 8002968:	00010007 	.word	0x00010007

0800296c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0202 	mvn.w	r2, #2
 80029a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fac1 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fab3 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fac4 	bl	8002f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d020      	beq.n	8002a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0204 	mvn.w	r2, #4
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa9b 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fa8d 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa9e 	bl	8002f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d020      	beq.n	8002a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01b      	beq.n	8002a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0208 	mvn.w	r2, #8
 8002a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fa75 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002a54:	e005      	b.n	8002a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fa67 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fa78 	bl	8002f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d020      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0210 	mvn.w	r2, #16
 8002a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2208      	movs	r2, #8
 8002a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fa4f 	bl	8002f3e <HAL_TIM_IC_CaptureCallback>
 8002aa0:	e005      	b.n	8002aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa41 	bl	8002f2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fa52 	bl	8002f52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0201 	mvn.w	r2, #1
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fd fcf4 	bl	80004c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 ff46 	bl	8003988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00c      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 ff3e 	bl	800399c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00c      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fa11 	bl	8002f66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0220 	mvn.w	r2, #32
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 ff06 	bl	8003974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0ff      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b14      	cmp	r3, #20
 8002b9a:	f200 80f0 	bhi.w	8002d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bf9 	.word	0x08002bf9
 8002ba8:	08002d7f 	.word	0x08002d7f
 8002bac:	08002d7f 	.word	0x08002d7f
 8002bb0:	08002d7f 	.word	0x08002d7f
 8002bb4:	08002c39 	.word	0x08002c39
 8002bb8:	08002d7f 	.word	0x08002d7f
 8002bbc:	08002d7f 	.word	0x08002d7f
 8002bc0:	08002d7f 	.word	0x08002d7f
 8002bc4:	08002c7b 	.word	0x08002c7b
 8002bc8:	08002d7f 	.word	0x08002d7f
 8002bcc:	08002d7f 	.word	0x08002d7f
 8002bd0:	08002d7f 	.word	0x08002d7f
 8002bd4:	08002cbb 	.word	0x08002cbb
 8002bd8:	08002d7f 	.word	0x08002d7f
 8002bdc:	08002d7f 	.word	0x08002d7f
 8002be0:	08002d7f 	.word	0x08002d7f
 8002be4:	08002cfd 	.word	0x08002cfd
 8002be8:	08002d7f 	.word	0x08002d7f
 8002bec:	08002d7f 	.word	0x08002d7f
 8002bf0:	08002d7f 	.word	0x08002d7f
 8002bf4:	08002d3d 	.word	0x08002d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa66 	bl	80030d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	619a      	str	r2, [r3, #24]
      break;
 8002c36:	e0a5      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fae0 	bl	8003204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
      break;
 8002c78:	e084      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb53 	bl	800332c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0204 	bic.w	r2, r2, #4
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
      break;
 8002cb8:	e064      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fbc5 	bl	8003450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
      break;
 8002cfa:	e043      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fc14 	bl	8003530 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d3a:	e023      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fc5e 	bl	8003604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d7c:	e002      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
      break;
 8002d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop

08002d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0b6      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x18a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xd8>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfe:	f000 8086 	beq.w	8002f0e <HAL_TIM_ConfigClockSource+0x176>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e08:	2b70      	cmp	r3, #112	@ 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xaa>
 8002e0c:	2b70      	cmp	r3, #112	@ 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e10:	2b60      	cmp	r3, #96	@ 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x11e>
 8002e14:	2b60      	cmp	r3, #96	@ 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e18:	2b50      	cmp	r3, #80	@ 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xfe>
 8002e1c:	2b50      	cmp	r3, #80	@ 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e20:	2b40      	cmp	r3, #64	@ 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x13e>
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e28:	2b30      	cmp	r3, #48	@ 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e2c:	2b30      	cmp	r3, #48	@ 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	f000 fcbd 	bl	80037d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04f      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	f000 fca6 	bl	80037d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 fc1a 	bl	80036dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	@ 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fc73 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 fc39 	bl	800373a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	@ 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fc63 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 fbfa 	bl	80036dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	@ 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fc53 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 fc4a 	bl	800379a <TIM_ITRx_SetConfig>
      break;
 8002f06:	e003      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a48      	ldr	r2, [pc, #288]	@ (80030b0 <TIM_Base_SetConfig+0x134>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a45      	ldr	r2, [pc, #276]	@ (80030b4 <TIM_Base_SetConfig+0x138>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a44      	ldr	r2, [pc, #272]	@ (80030b8 <TIM_Base_SetConfig+0x13c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a43      	ldr	r2, [pc, #268]	@ (80030bc <TIM_Base_SetConfig+0x140>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a42      	ldr	r2, [pc, #264]	@ (80030c0 <TIM_Base_SetConfig+0x144>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d108      	bne.n	8002fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a37      	ldr	r2, [pc, #220]	@ (80030b0 <TIM_Base_SetConfig+0x134>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01f      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fdc:	d01b      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a34      	ldr	r2, [pc, #208]	@ (80030b4 <TIM_Base_SetConfig+0x138>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d017      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a33      	ldr	r2, [pc, #204]	@ (80030b8 <TIM_Base_SetConfig+0x13c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a32      	ldr	r2, [pc, #200]	@ (80030bc <TIM_Base_SetConfig+0x140>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00f      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a32      	ldr	r2, [pc, #200]	@ (80030c4 <TIM_Base_SetConfig+0x148>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a31      	ldr	r2, [pc, #196]	@ (80030c8 <TIM_Base_SetConfig+0x14c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a30      	ldr	r2, [pc, #192]	@ (80030cc <TIM_Base_SetConfig+0x150>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_Base_SetConfig+0x9a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a2b      	ldr	r2, [pc, #172]	@ (80030c0 <TIM_Base_SetConfig+0x144>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d108      	bne.n	8003028 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800301c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4313      	orrs	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <TIM_Base_SetConfig+0x134>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <TIM_Base_SetConfig+0x100>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a19      	ldr	r2, [pc, #100]	@ (80030bc <TIM_Base_SetConfig+0x140>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00f      	beq.n	800307c <TIM_Base_SetConfig+0x100>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <TIM_Base_SetConfig+0x148>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00b      	beq.n	800307c <TIM_Base_SetConfig+0x100>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a18      	ldr	r2, [pc, #96]	@ (80030c8 <TIM_Base_SetConfig+0x14c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <TIM_Base_SetConfig+0x100>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a17      	ldr	r2, [pc, #92]	@ (80030cc <TIM_Base_SetConfig+0x150>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_Base_SetConfig+0x100>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <TIM_Base_SetConfig+0x144>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40013400 	.word	0x40013400
 80030c0:	40015000 	.word	0x40015000
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800

080030d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f023 0201 	bic.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0302 	bic.w	r3, r3, #2
 800311c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a30      	ldr	r2, [pc, #192]	@ (80031ec <TIM_OC1_SetConfig+0x11c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <TIM_OC1_SetConfig+0x88>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a2f      	ldr	r2, [pc, #188]	@ (80031f0 <TIM_OC1_SetConfig+0x120>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00f      	beq.n	8003158 <TIM_OC1_SetConfig+0x88>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a2e      	ldr	r2, [pc, #184]	@ (80031f4 <TIM_OC1_SetConfig+0x124>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00b      	beq.n	8003158 <TIM_OC1_SetConfig+0x88>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a2d      	ldr	r2, [pc, #180]	@ (80031f8 <TIM_OC1_SetConfig+0x128>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <TIM_OC1_SetConfig+0x88>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a2c      	ldr	r2, [pc, #176]	@ (80031fc <TIM_OC1_SetConfig+0x12c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_OC1_SetConfig+0x88>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a2b      	ldr	r2, [pc, #172]	@ (8003200 <TIM_OC1_SetConfig+0x130>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10c      	bne.n	8003172 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0308 	bic.w	r3, r3, #8
 800315e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a1d      	ldr	r2, [pc, #116]	@ (80031ec <TIM_OC1_SetConfig+0x11c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <TIM_OC1_SetConfig+0xd2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <TIM_OC1_SetConfig+0x120>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00f      	beq.n	80031a2 <TIM_OC1_SetConfig+0xd2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <TIM_OC1_SetConfig+0x124>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_OC1_SetConfig+0xd2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <TIM_OC1_SetConfig+0x128>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d007      	beq.n	80031a2 <TIM_OC1_SetConfig+0xd2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a19      	ldr	r2, [pc, #100]	@ (80031fc <TIM_OC1_SetConfig+0x12c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_OC1_SetConfig+0xd2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a18      	ldr	r2, [pc, #96]	@ (8003200 <TIM_OC1_SetConfig+0x130>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40013400 	.word	0x40013400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800
 8003200:	40015000 	.word	0x40015000

08003204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f023 0210 	bic.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800323e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f023 0320 	bic.w	r3, r3, #32
 8003252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2c      	ldr	r2, [pc, #176]	@ (8003314 <TIM_OC2_SetConfig+0x110>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_OC2_SetConfig+0x74>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a2b      	ldr	r2, [pc, #172]	@ (8003318 <TIM_OC2_SetConfig+0x114>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_OC2_SetConfig+0x74>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a2a      	ldr	r2, [pc, #168]	@ (800331c <TIM_OC2_SetConfig+0x118>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d10d      	bne.n	8003294 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800327e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a1f      	ldr	r2, [pc, #124]	@ (8003314 <TIM_OC2_SetConfig+0x110>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d013      	beq.n	80032c4 <TIM_OC2_SetConfig+0xc0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a1e      	ldr	r2, [pc, #120]	@ (8003318 <TIM_OC2_SetConfig+0x114>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00f      	beq.n	80032c4 <TIM_OC2_SetConfig+0xc0>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003320 <TIM_OC2_SetConfig+0x11c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_OC2_SetConfig+0xc0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003324 <TIM_OC2_SetConfig+0x120>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <TIM_OC2_SetConfig+0xc0>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <TIM_OC2_SetConfig+0x124>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC2_SetConfig+0xc0>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a17      	ldr	r2, [pc, #92]	@ (800331c <TIM_OC2_SetConfig+0x118>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d113      	bne.n	80032ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40013400 	.word	0x40013400
 800331c:	40015000 	.word	0x40015000
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800

0800332c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <TIM_OC3_SetConfig+0x10c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_OC3_SetConfig+0x72>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <TIM_OC3_SetConfig+0x110>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC3_SetConfig+0x72>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a29      	ldr	r2, [pc, #164]	@ (8003440 <TIM_OC3_SetConfig+0x114>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d10d      	bne.n	80033ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033b8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003438 <TIM_OC3_SetConfig+0x10c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <TIM_OC3_SetConfig+0xbe>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	@ (800343c <TIM_OC3_SetConfig+0x110>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00f      	beq.n	80033ea <TIM_OC3_SetConfig+0xbe>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003444 <TIM_OC3_SetConfig+0x118>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00b      	beq.n	80033ea <TIM_OC3_SetConfig+0xbe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003448 <TIM_OC3_SetConfig+0x11c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d007      	beq.n	80033ea <TIM_OC3_SetConfig+0xbe>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	@ (800344c <TIM_OC3_SetConfig+0x120>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_OC3_SetConfig+0xbe>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <TIM_OC3_SetConfig+0x114>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d113      	bne.n	8003412 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	621a      	str	r2, [r3, #32]
}
 800342c:	bf00      	nop
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40012c00 	.word	0x40012c00
 800343c:	40013400 	.word	0x40013400
 8003440:	40015000 	.word	0x40015000
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800

08003450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800349e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	031b      	lsls	r3, r3, #12
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003518 <TIM_OC4_SetConfig+0xc8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d013      	beq.n	80034dc <TIM_OC4_SetConfig+0x8c>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a19      	ldr	r2, [pc, #100]	@ (800351c <TIM_OC4_SetConfig+0xcc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00f      	beq.n	80034dc <TIM_OC4_SetConfig+0x8c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <TIM_OC4_SetConfig+0xd0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <TIM_OC4_SetConfig+0x8c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <TIM_OC4_SetConfig+0xd4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d007      	beq.n	80034dc <TIM_OC4_SetConfig+0x8c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <TIM_OC4_SetConfig+0xd8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_OC4_SetConfig+0x8c>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a15      	ldr	r2, [pc, #84]	@ (800352c <TIM_OC4_SetConfig+0xdc>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d109      	bne.n	80034f0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	019b      	lsls	r3, r3, #6
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	621a      	str	r2, [r3, #32]
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40012c00 	.word	0x40012c00
 800351c:	40013400 	.word	0x40013400
 8003520:	40014000 	.word	0x40014000
 8003524:	40014400 	.word	0x40014400
 8003528:	40014800 	.word	0x40014800
 800352c:	40015000 	.word	0x40015000

08003530 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003574:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <TIM_OC5_SetConfig+0xbc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d013      	beq.n	80035b2 <TIM_OC5_SetConfig+0x82>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a18      	ldr	r2, [pc, #96]	@ (80035f0 <TIM_OC5_SetConfig+0xc0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00f      	beq.n	80035b2 <TIM_OC5_SetConfig+0x82>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <TIM_OC5_SetConfig+0xc4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00b      	beq.n	80035b2 <TIM_OC5_SetConfig+0x82>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a16      	ldr	r2, [pc, #88]	@ (80035f8 <TIM_OC5_SetConfig+0xc8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <TIM_OC5_SetConfig+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a15      	ldr	r2, [pc, #84]	@ (80035fc <TIM_OC5_SetConfig+0xcc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d003      	beq.n	80035b2 <TIM_OC5_SetConfig+0x82>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <TIM_OC5_SetConfig+0xd0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d109      	bne.n	80035c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40013400 	.word	0x40013400
 80035f4:	40014000 	.word	0x40014000
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800
 8003600:	40015000 	.word	0x40015000

08003604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800364a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	051b      	lsls	r3, r3, #20
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a1a      	ldr	r2, [pc, #104]	@ (80036c4 <TIM_OC6_SetConfig+0xc0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <TIM_OC6_SetConfig+0x84>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a19      	ldr	r2, [pc, #100]	@ (80036c8 <TIM_OC6_SetConfig+0xc4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00f      	beq.n	8003688 <TIM_OC6_SetConfig+0x84>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a18      	ldr	r2, [pc, #96]	@ (80036cc <TIM_OC6_SetConfig+0xc8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00b      	beq.n	8003688 <TIM_OC6_SetConfig+0x84>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a17      	ldr	r2, [pc, #92]	@ (80036d0 <TIM_OC6_SetConfig+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <TIM_OC6_SetConfig+0x84>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <TIM_OC6_SetConfig+0xd0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_OC6_SetConfig+0x84>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a15      	ldr	r2, [pc, #84]	@ (80036d8 <TIM_OC6_SetConfig+0xd4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d109      	bne.n	800369c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800368e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	029b      	lsls	r3, r3, #10
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40013400 	.word	0x40013400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40014400 	.word	0x40014400
 80036d4:	40014800 	.word	0x40014800
 80036d8:	40015000 	.word	0x40015000

080036dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f023 0201 	bic.w	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f023 030a 	bic.w	r3, r3, #10
 8003718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800373a:	b480      	push	{r7}
 800373c:	b087      	sub	sp, #28
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f023 0210 	bic.w	r2, r3, #16
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003764:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	031b      	lsls	r3, r3, #12
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003776:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f043 0307 	orr.w	r3, r3, #7
 80037bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2201      	movs	r2, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	621a      	str	r2, [r3, #32]
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e06d      	b.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80038b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	@ (800395c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d01d      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f0:	d018      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d013      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1a      	ldr	r2, [pc, #104]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00e      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a15      	ldr	r2, [pc, #84]	@ (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a16      	ldr	r2, [pc, #88]	@ (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d004      	beq.n	8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a11      	ldr	r2, [pc, #68]	@ (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d10c      	bne.n	800393e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800392a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40015000 	.word	0x40015000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40014000 	.word	0x40014000

08003974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <memset>:
 80039b0:	4402      	add	r2, r0
 80039b2:	4603      	mov	r3, r0
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d100      	bne.n	80039ba <memset+0xa>
 80039b8:	4770      	bx	lr
 80039ba:	f803 1b01 	strb.w	r1, [r3], #1
 80039be:	e7f9      	b.n	80039b4 <memset+0x4>

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4d0d      	ldr	r5, [pc, #52]	@ (80039f8 <__libc_init_array+0x38>)
 80039c4:	4c0d      	ldr	r4, [pc, #52]	@ (80039fc <__libc_init_array+0x3c>)
 80039c6:	1b64      	subs	r4, r4, r5
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	2600      	movs	r6, #0
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	4d0b      	ldr	r5, [pc, #44]	@ (8003a00 <__libc_init_array+0x40>)
 80039d2:	4c0c      	ldr	r4, [pc, #48]	@ (8003a04 <__libc_init_array+0x44>)
 80039d4:	f000 f818 	bl	8003a08 <_init>
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	2600      	movs	r6, #0
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	08003a50 	.word	0x08003a50
 80039fc:	08003a50 	.word	0x08003a50
 8003a00:	08003a50 	.word	0x08003a50
 8003a04:	08003a54 	.word	0x08003a54

08003a08 <_init>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	bf00      	nop
 8003a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0e:	bc08      	pop	{r3}
 8003a10:	469e      	mov	lr, r3
 8003a12:	4770      	bx	lr

08003a14 <_fini>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	bf00      	nop
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr
