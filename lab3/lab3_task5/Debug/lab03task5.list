
lab03task5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d60  08003d60  00004d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003de0  08003de0  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de0  08003de0  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003de8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          000000f8  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000114  20000114  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000f96e  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000066  00000000  00000000  000149ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000e1f3  00000000  00000000  00014a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001bd8  00000000  00000000  00022c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000c58  00000000  00000000  000247f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca13a  00000000  00000000  00025448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000099f  00000000  00000000  000ef582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00020893  00000000  00000000  000eff21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001107b4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000339c  00000000  00000000  001107f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003d48 	.word	0x08003d48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08003d48 	.word	0x08003d48

080001d4 <delay>:
.global delay

delay:
	LDR R1, =9000000 // 72Mhz / 8
 80001d4:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <loop+0xc>)
	MUL R1, R0, R1	// frequency times the input seconds to get loop number
 80001d6:	4341      	muls	r1, r0

080001d8 <loop>:
loop:
	SUB R1, R1, #1
 80001d8:	3901      	subs	r1, #1
	CMP R1, #0
 80001da:	2900      	cmp	r1, #0
	NOP
 80001dc:	46c0      	nop			@ (mov r8, r8)
	BNE loop
 80001de:	d1fb      	bne.n	80001d8 <loop>
	BX LR
 80001e0:	4770      	bx	lr
 80001e2:	0000      	.short	0x0000
	LDR R1, =9000000 // 72Mhz / 8
 80001e4:	00895440 	.word	0x00895440

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b08c      	sub	sp, #48	@ 0x30
 80001ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ee:	f000 fdb1 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f8f9 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 f9bd 	bl	8000574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001fa:	f000 f98b 	bl	8000514 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80001fe:	f000 f951 	bl	80004a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 8000202:	2032      	movs	r0, #50	@ 0x32
 8000204:	f000 fe0c 	bl	8000e20 <HAL_Delay>
  LCD_putNibble(0b0011);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 fb6f 	bl	80008ec <LCD_putNibble>
  LCD_enable();
 800020e:	f000 fba7 	bl	8000960 <LCD_enable>
  LCD_putNibble(0b0011);
 8000212:	2003      	movs	r0, #3
 8000214:	f000 fb6a 	bl	80008ec <LCD_putNibble>
  LCD_enable();
 8000218:	f000 fba2 	bl	8000960 <LCD_enable>
  LCD_putNibble(0b0011);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fb65 	bl	80008ec <LCD_putNibble>
  LCD_enable();
 8000222:	f000 fb9d 	bl	8000960 <LCD_enable>
  LCD_putNibble(0b0010);
 8000226:	2002      	movs	r0, #2
 8000228:	f000 fb60 	bl	80008ec <LCD_putNibble>
  LCD_enable();
 800022c:	f000 fb98 	bl	8000960 <LCD_enable>
  LCD_command(0b00101100);
 8000230:	202c      	movs	r0, #44	@ 0x2c
 8000232:	f000 fbbb 	bl	80009ac <LCD_command>
  LCD_command(0b00001000);
 8000236:	2008      	movs	r0, #8
 8000238:	f000 fbb8 	bl	80009ac <LCD_command>
  LCD_command(0b00000001);
 800023c:	2001      	movs	r0, #1
 800023e:	f000 fbb5 	bl	80009ac <LCD_command>
  LCD_command(0b00000110);
 8000242:	2006      	movs	r0, #6
 8000244:	f000 fbb2 	bl	80009ac <LCD_command>
  LCD_command(0b00001111);
 8000248:	200f      	movs	r0, #15
 800024a:	f000 fbaf 	bl	80009ac <LCD_command>

  uint16_t col_pins[4] = { KEY_COL1_Pin, KEY_COL2_Pin, KEY_COL3_Pin, KEY_COL4_Pin };
 800024e:	4a5e      	ldr	r2, [pc, #376]	@ (80003c8 <main+0x1e0>)
 8000250:	f107 0320 	add.w	r3, r7, #32
 8000254:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000258:	e883 0003 	stmia.w	r3, {r0, r1}
  uint16_t row_pins[4] = { KEY_ROW1_Pin, KEY_ROW2_Pin, KEY_ROW3_Pin, KEY_ROW4_Pin };
 800025c:	4a5b      	ldr	r2, [pc, #364]	@ (80003cc <main+0x1e4>)
 800025e:	f107 0318 	add.w	r3, r7, #24
 8000262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000266:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t value_arr[17];
  uint8_t key_value = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t counter = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  key_value = KEY_scan(col_pins, row_pins);
 8000276:	f107 0218 	add.w	r2, r7, #24
 800027a:	f107 0320 	add.w	r3, r7, #32
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fc05 	bl	8000a90 <KEY_scan>
 8000286:	4603      	mov	r3, r0
 8000288:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	  if (key_value != 0) {
 800028c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000290:	2b00      	cmp	r3, #0
 8000292:	d0f0      	beq.n	8000276 <main+0x8e>
		  HAL_Delay(50);
 8000294:	2032      	movs	r0, #50	@ 0x32
 8000296:	f000 fdc3 	bl	8000e20 <HAL_Delay>
		  if (KEY_scan(col_pins, row_pins) == key_value) {
 800029a:	f107 0218 	add.w	r2, r7, #24
 800029e:	f107 0320 	add.w	r3, r7, #32
 80002a2:	4611      	mov	r1, r2
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fbf3 	bl	8000a90 <KEY_scan>
 80002aa:	4603      	mov	r3, r0
 80002ac:	461a      	mov	r2, r3
 80002ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d131      	bne.n	800031a <main+0x132>
			  //value_arr[counter] = key_value;

			  if (counter == 16) {
 80002b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80002ba:	2b10      	cmp	r3, #16
 80002bc:	d110      	bne.n	80002e0 <main+0xf8>
				  counter = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				  LCD_command(0b00000001);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 fb71 	bl	80009ac <LCD_command>
				  LCD_display("too long statement");
 80002ca:	4841      	ldr	r0, [pc, #260]	@ (80003d0 <main+0x1e8>)
 80002cc:	f000 fbc0 	bl	8000a50 <LCD_display>
				  HAL_Delay(3000);
 80002d0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002d4:	f000 fda4 	bl	8000e20 <HAL_Delay>
				  LCD_command(0b00000001);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 fb67 	bl	80009ac <LCD_command>
				  continue;
 80002de:	e071      	b.n	80003c4 <main+0x1dc>
			  } else if (key_value == '*') {
 80002e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80002e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80002e6:	d106      	bne.n	80002f6 <main+0x10e>
				  counter = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				  LCD_command(0b00000001);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fb5c 	bl	80009ac <LCD_command>
				  continue;
 80002f4:	e066      	b.n	80003c4 <main+0x1dc>
			  }

			  value_arr[counter] = key_value;
 80002f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80002fa:	3330      	adds	r3, #48	@ 0x30
 80002fc:	443b      	add	r3, r7
 80002fe:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000302:	f803 2c2c 	strb.w	r2, [r3, #-44]
			  LCD_data(key_value);
 8000306:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fb6f 	bl	80009ee <LCD_data>
			  counter++;
 8000310:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000314:	3301      	adds	r3, #1
 8000316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  }

		  while (KEY_scan(col_pins, row_pins) == key_value);
 800031a:	bf00      	nop
 800031c:	f107 0218 	add.w	r2, r7, #24
 8000320:	f107 0320 	add.w	r3, r7, #32
 8000324:	4611      	mov	r1, r2
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fbb2 	bl	8000a90 <KEY_scan>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000334:	4293      	cmp	r3, r2
 8000336:	d0f1      	beq.n	800031c <main+0x134>

		  if (key_value == '#') {
 8000338:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800033c:	2b23      	cmp	r3, #35	@ 0x23
 800033e:	d19a      	bne.n	8000276 <main+0x8e>
			  if (syntax_check(value_arr, counter)) {
 8000340:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4611      	mov	r1, r2
 8000348:	4618      	mov	r0, r3
 800034a:	f000 faa4 	bl	8000896 <syntax_check>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d010      	beq.n	8000376 <main+0x18e>
				  LCD_command(0b00000001);
 8000354:	2001      	movs	r0, #1
 8000356:	f000 fb29 	bl	80009ac <LCD_command>
				  LCD_display("INVALID INPUT");
 800035a:	481e      	ldr	r0, [pc, #120]	@ (80003d4 <main+0x1ec>)
 800035c:	f000 fb78 	bl	8000a50 <LCD_display>
				  HAL_Delay(3000);
 8000360:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000364:	f000 fd5c 	bl	8000e20 <HAL_Delay>
				  LCD_command(0b00000001);
 8000368:	2001      	movs	r0, #1
 800036a:	f000 fb1f 	bl	80009ac <LCD_command>
				  counter = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				  continue;
 8000374:	e026      	b.n	80003c4 <main+0x1dc>
			  }

			  uint32_t delayTime = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	62bb      	str	r3, [r7, #40]	@ 0x28
			  delayTime = to_digit(value_arr, counter);
 800037a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4611      	mov	r1, r2
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fa60 	bl	8000848 <to_digit>
 8000388:	62b8      	str	r0, [r7, #40]	@ 0x28
			  LCD_command(0b00000001);
 800038a:	2001      	movs	r0, #1
 800038c:	f000 fb0e 	bl	80009ac <LCD_command>

			  LCD_display("Start Delay");
 8000390:	4811      	ldr	r0, [pc, #68]	@ (80003d8 <main+0x1f0>)
 8000392:	f000 fb5d 	bl	8000a50 <LCD_display>
			  delay(delayTime);
 8000396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000398:	f7ff ff1c 	bl	80001d4 <delay>
			  LCD_command(0b00000001);
 800039c:	2001      	movs	r0, #1
 800039e:	f000 fb05 	bl	80009ac <LCD_command>
			  LCD_display("Done");
 80003a2:	480e      	ldr	r0, [pc, #56]	@ (80003dc <main+0x1f4>)
 80003a4:	f000 fb54 	bl	8000a50 <LCD_display>

			  is_done = true;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <main+0x1f8>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim6);
 80003ae:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <main+0x1fc>)
 80003b0:	f002 fd42 	bl	8002e38 <HAL_TIM_Base_Start_IT>
			  counter = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			  while (is_done);
 80003ba:	bf00      	nop
 80003bc:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <main+0x1f8>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d1fb      	bne.n	80003bc <main+0x1d4>
	  key_value = KEY_scan(col_pins, row_pins);
 80003c4:	e757      	b.n	8000276 <main+0x8e>
 80003c6:	bf00      	nop
 80003c8:	08003d98 	.word	0x08003d98
 80003cc:	08003da0 	.word	0x08003da0
 80003d0:	08003d60 	.word	0x08003d60
 80003d4:	08003d74 	.word	0x08003d74
 80003d8:	08003d84 	.word	0x08003d84
 80003dc:	08003d90 	.word	0x08003d90
 80003e0:	2000010c 	.word	0x2000010c
 80003e4:	20000038 	.word	0x20000038

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b0a6      	sub	sp, #152	@ 0x98
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003f2:	2228      	movs	r2, #40	@ 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f003 fc79 	bl	8003cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2258      	movs	r2, #88	@ 0x58
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 fc6b 	bl	8003cee <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000418:	2302      	movs	r3, #2
 800041a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041c:	2301      	movs	r3, #1
 800041e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000420:	2310      	movs	r3, #16
 8000422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000426:	2302      	movs	r3, #2
 8000428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000430:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000434:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000442:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000446:	4618      	mov	r0, r3
 8000448:	f001 f80c 	bl	8001464 <HAL_RCC_OscConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000452:	f000 fb6f 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000456:	230f      	movs	r3, #15
 8000458:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045a:	2302      	movs	r3, #2
 800045c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000466:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f002 f84a 	bl	800250c <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800047e:	f000 fb59 	bl	8000b34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000482:	2302      	movs	r3, #2
 8000484:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fa5d 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000498:	f000 fb4c 	bl	8000b34 <Error_Handler>
  }
}
 800049c:	bf00      	nop
 800049e:	3798      	adds	r7, #152	@ 0x98
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004b4:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_TIM6_Init+0x68>)
 80004b6:	4a16      	ldr	r2, [pc, #88]	@ (8000510 <MX_TIM6_Init+0x6c>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 80004ba:	4b14      	ldr	r3, [pc, #80]	@ (800050c <MX_TIM6_Init+0x68>)
 80004bc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_TIM6_Init+0x68>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <MX_TIM6_Init+0x68>)
 80004ca:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80004ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <MX_TIM6_Init+0x68>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004d6:	480d      	ldr	r0, [pc, #52]	@ (800050c <MX_TIM6_Init+0x68>)
 80004d8:	f002 fc56 	bl	8002d88 <HAL_TIM_Base_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80004e2:	f000 fb27 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	4619      	mov	r1, r3
 80004f2:	4806      	ldr	r0, [pc, #24]	@ (800050c <MX_TIM6_Init+0x68>)
 80004f4:	f002 ff14 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80004fe:	f000 fb19 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000038 	.word	0x20000038
 8000510:	40001000 	.word	0x40001000

08000514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_USART2_UART_Init+0x58>)
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <MX_USART2_UART_Init+0x5c>)
 800051c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800051e:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000520:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_USART2_UART_Init+0x58>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_USART2_UART_Init+0x58>)
 800053a:	220c      	movs	r2, #12
 800053c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART2_UART_Init+0x58>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_USART2_UART_Init+0x58>)
 8000558:	f002 ff8c 	bl	8003474 <HAL_UART_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000562:	f000 fae7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000084 	.word	0x20000084
 8000570:	40004400 	.word	0x40004400

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4b5b      	ldr	r3, [pc, #364]	@ (80006f8 <MX_GPIO_Init+0x184>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a5a      	ldr	r2, [pc, #360]	@ (80006f8 <MX_GPIO_Init+0x184>)
 8000590:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b58      	ldr	r3, [pc, #352]	@ (80006f8 <MX_GPIO_Init+0x184>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b55      	ldr	r3, [pc, #340]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	4a54      	ldr	r2, [pc, #336]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ac:	6153      	str	r3, [r2, #20]
 80005ae:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a4e      	ldr	r2, [pc, #312]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b4c      	ldr	r3, [pc, #304]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b49      	ldr	r3, [pc, #292]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	4a48      	ldr	r2, [pc, #288]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005dc:	6153      	str	r3, [r2, #20]
 80005de:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a42      	ldr	r2, [pc, #264]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <MX_GPIO_Init+0x184>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SFT_SRCLK_Pin|LCD_RW_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000602:	2200      	movs	r2, #0
 8000604:	f640 7141 	movw	r1, #3905	@ 0xf41
 8000608:	483c      	ldr	r0, [pc, #240]	@ (80006fc <MX_GPIO_Init+0x188>)
 800060a:	f000 fee1 	bl	80013d0 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|KEY_COL1_Pin|KEY_COL2_Pin|KEY_COL3_Pin
 800060e:	2200      	movs	r2, #0
 8000610:	f648 7120 	movw	r1, #36640	@ 0x8f20
 8000614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000618:	f000 feda 	bl	80013d0 <HAL_GPIO_WritePin>
                          |KEY_COL4_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_Pin|SFT_SER_Pin|LED_D4_Pin|LED_D2_Pin
 800061c:	2200      	movs	r2, #0
 800061e:	f248 41b8 	movw	r1, #33976	@ 0x84b8
 8000622:	4837      	ldr	r0, [pc, #220]	@ (8000700 <MX_GPIO_Init+0x18c>)
 8000624:	f000 fed4 	bl	80013d0 <HAL_GPIO_WritePin>
                          |LED_D3_Pin|SFT_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2104      	movs	r1, #4
 800062c:	4835      	ldr	r0, [pc, #212]	@ (8000704 <MX_GPIO_Init+0x190>)
 800062e:	f000 fecf 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000632:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000638:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	482c      	ldr	r0, [pc, #176]	@ (80006fc <MX_GPIO_Init+0x188>)
 800064a:	f000 fd1f 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : SFT_SRCLK_Pin LCD_RW_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = SFT_SRCLK_Pin|LCD_RW_Pin|LCD_D4_Pin|LCD_D5_Pin
 800064e:	f640 7341 	movw	r3, #3905	@ 0xf41
 8000652:	617b      	str	r3, [r7, #20]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4825      	ldr	r0, [pc, #148]	@ (80006fc <MX_GPIO_Init+0x188>)
 8000668:	f000 fd10 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin KEY_COL1_Pin KEY_COL2_Pin KEY_COL3_Pin
                           KEY_COL4_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|KEY_COL1_Pin|KEY_COL2_Pin|KEY_COL3_Pin
 800066c:	f648 7320 	movw	r3, #36640	@ 0x8f20
 8000670:	617b      	str	r3, [r7, #20]
                          |KEY_COL4_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f000 fd00 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin SFT_SER_Pin LED_D4_Pin LED_D2_Pin
                           LED_D3_Pin SFT_RCLK_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|SFT_SER_Pin|LED_D4_Pin|LED_D2_Pin
 800068c:	f248 43b8 	movw	r3, #33976	@ 0x84b8
 8000690:	617b      	str	r3, [r7, #20]
                          |LED_D3_Pin|SFT_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4816      	ldr	r0, [pc, #88]	@ (8000700 <MX_GPIO_Init+0x18c>)
 80006a6:	f000 fcf1 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_ROW1_Pin KEY_ROW2_Pin KEY_ROW3_Pin KEY_ROW4_Pin */
  GPIO_InitStruct.Pin = KEY_ROW1_Pin|KEY_ROW2_Pin|KEY_ROW3_Pin|KEY_ROW4_Pin;
 80006aa:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4810      	ldr	r0, [pc, #64]	@ (8000700 <MX_GPIO_Init+0x18c>)
 80006c0:	f000 fce4 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 80006c4:	2304      	movs	r3, #4
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <MX_GPIO_Init+0x190>)
 80006dc:	f000 fcd6 	bl	800108c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2028      	movs	r0, #40	@ 0x28
 80006e6:	f000 fc9a 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ea:	2028      	movs	r0, #40	@ 0x28
 80006ec:	f000 fcb3 	bl	8001056 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	@ 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000800 	.word	0x48000800
 8000700:	48000400 	.word	0x48000400
 8000704:	48000c00 	.word	0x48000c00

08000708 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000712:	88fb      	ldrh	r3, [r7, #6]
 8000714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000718:	d146      	bne.n	80007a8 <HAL_GPIO_EXTI_Callback+0xa0>
		HAL_TIM_Base_Stop_IT(&htim6);
 800071a:	4825      	ldr	r0, [pc, #148]	@ (80007b0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800071c:	f002 fbfc 	bl	8002f18 <HAL_TIM_Base_Stop_IT>
		LCD_command(0b00000001);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f943 	bl	80009ac <LCD_command>

		HAL_GPIO_WritePin(SFT_SER_GPIO_Port, SFT_SER_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800072c:	4821      	ldr	r0, [pc, #132]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 800072e:	f000 fe4f 	bl	80013d0 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e00c      	b.n	8000752 <HAL_GPIO_EXTI_Callback+0x4a>
			HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	481e      	ldr	r0, [pc, #120]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800073e:	f000 fe47 	bl	80013d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2101      	movs	r1, #1
 8000746:	481c      	ldr	r0, [pc, #112]	@ (80007b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000748:	f000 fe42 	bl	80013d0 <HAL_GPIO_WritePin>
		for (int i = 0; i < 16; i++) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3301      	adds	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	ddef      	ble.n	8000738 <HAL_GPIO_EXTI_Callback+0x30>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2120      	movs	r1, #32
 800075c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000760:	f000 fe36 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800076a:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 800076c:	f000 fe30 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2110      	movs	r1, #16
 8000774:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 8000776:	f000 fe2b 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	480d      	ldr	r0, [pc, #52]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 8000780:	f000 fe26 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2108      	movs	r1, #8
 8000788:	480a      	ldr	r0, [pc, #40]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 800078a:	f000 fe21 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SFT_RCLK_GPIO_Port, SFT_RCLK_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2180      	movs	r1, #128	@ 0x80
 8000792:	4808      	ldr	r0, [pc, #32]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 8000794:	f000 fe1c 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SFT_RCLK_GPIO_Port, SFT_RCLK_Pin, GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <HAL_GPIO_EXTI_Callback+0xac>)
 800079e:	f000 fe17 	bl	80013d0 <HAL_GPIO_WritePin>

		is_done = false;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <HAL_GPIO_EXTI_Callback+0xb4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	}
}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000038 	.word	0x20000038
 80007b4:	48000400 	.word	0x48000400
 80007b8:	48000800 	.word	0x48000800
 80007bc:	2000010c 	.word	0x2000010c

080007c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(SFT_SER_GPIO_Port, SFT_SER_Pin);
 80007c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007cc:	481c      	ldr	r0, [pc, #112]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80007ce:	f000 fe17 	bl	8001400 <HAL_GPIO_TogglePin>
	for (int i = 0; i < 16; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	e00c      	b.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x32>
		HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2101      	movs	r1, #1
 80007dc:	4819      	ldr	r0, [pc, #100]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007de:	f000 fdf7 	bl	80013d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2101      	movs	r1, #1
 80007e6:	4817      	ldr	r0, [pc, #92]	@ (8000844 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007e8:	f000 fdf2 	bl	80013d0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	ddef      	ble.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x18>
	}

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007f8:	2120      	movs	r1, #32
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fe:	f000 fdff 	bl	8001400 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
 8000802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000808:	f000 fdfa 	bl	8001400 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D2_GPIO_Port, LED_D2_Pin);
 800080c:	2110      	movs	r1, #16
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000810:	f000 fdf6 	bl	8001400 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D3_GPIO_Port, LED_D3_Pin);
 8000814:	2120      	movs	r1, #32
 8000816:	480a      	ldr	r0, [pc, #40]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000818:	f000 fdf2 	bl	8001400 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);
 800081c:	2108      	movs	r1, #8
 800081e:	4808      	ldr	r0, [pc, #32]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000820:	f000 fdee 	bl	8001400 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(SFT_RCLK_GPIO_Port, SFT_RCLK_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2180      	movs	r1, #128	@ 0x80
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800082a:	f000 fdd1 	bl	80013d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SFT_RCLK_GPIO_Port, SFT_RCLK_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	@ 0x80
 8000832:	4803      	ldr	r0, [pc, #12]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000834:	f000 fdcc 	bl	80013d0 <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800

08000848 <to_digit>:

uint32_t to_digit(uint8_t *value_arr, uint8_t counter) {
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
	uint32_t num = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < counter - 1; i++) {
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	e00f      	b.n	800087e <to_digit+0x36>
		num = num * 10 + (value_arr[i] - '0');
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4619      	mov	r1, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	440b      	add	r3, r1
 8000874:	3b30      	subs	r3, #48	@ 0x30
 8000876:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < counter - 1; i++) {
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	3301      	adds	r3, #1
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	3b01      	subs	r3, #1
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbea      	blt.n	800085e <to_digit+0x16>
	}
	return num;
 8000888:	68fb      	ldr	r3, [r7, #12]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <syntax_check>:

bool syntax_check(uint8_t *value_arr, uint8_t counter) {
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
 800089e:	460b      	mov	r3, r1
 80008a0:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	    for (int i = 0; i < counter; i++) {
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e015      	b.n	80008d4 <syntax_check+0x3e>
	    	temp = value_arr[i];
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	72fb      	strb	r3, [r7, #11]
	    	if (temp == 'A' || temp == 'B' || temp == 'C' || temp == 'D') {
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	2b41      	cmp	r3, #65	@ 0x41
 80008b6:	d008      	beq.n	80008ca <syntax_check+0x34>
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	2b42      	cmp	r3, #66	@ 0x42
 80008bc:	d005      	beq.n	80008ca <syntax_check+0x34>
 80008be:	7afb      	ldrb	r3, [r7, #11]
 80008c0:	2b43      	cmp	r3, #67	@ 0x43
 80008c2:	d002      	beq.n	80008ca <syntax_check+0x34>
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	2b44      	cmp	r3, #68	@ 0x44
 80008c8:	d101      	bne.n	80008ce <syntax_check+0x38>
	    		return true;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e007      	b.n	80008de <syntax_check+0x48>
	    for (int i = 0; i < counter; i++) {
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3301      	adds	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	78fb      	ldrb	r3, [r7, #3]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	dbe5      	blt.n	80008a8 <syntax_check+0x12>
	    	}
	    }
	return false;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <LCD_putNibble>:

void LCD_putNibble(uint8_t data) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, data & 1);
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000904:	4815      	ldr	r0, [pc, #84]	@ (800095c <LCD_putNibble+0x70>)
 8000906:	f000 fd63 	bl	80013d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 1);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <LCD_putNibble+0x70>)
 800091e:	f000 fd57 	bl	80013d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 1);
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <LCD_putNibble+0x70>)
 8000936:	f000 fd4b 	bl	80013d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 1);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	b2db      	uxtb	r3, r3
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	b2db      	uxtb	r3, r3
 8000946:	461a      	mov	r2, r3
 8000948:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <LCD_putNibble+0x70>)
 800094e:	f000 fd3f 	bl	80013d0 <HAL_GPIO_WritePin>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	48000800 	.word	0x48000800

08000960 <LCD_enable>:

void LCD_enable() {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 1);
 8000966:	2201      	movs	r2, #1
 8000968:	2104      	movs	r1, #4
 800096a:	480f      	ldr	r0, [pc, #60]	@ (80009a8 <LCD_enable+0x48>)
 800096c:	f000 fd30 	bl	80013d0 <HAL_GPIO_WritePin>
	int delayCounter = 10000;
 8000970:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000974:	607b      	str	r3, [r7, #4]
	while(delayCounter--);
 8000976:	bf00      	nop
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d1fa      	bne.n	8000978 <LCD_enable+0x18>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	4808      	ldr	r0, [pc, #32]	@ (80009a8 <LCD_enable+0x48>)
 8000988:	f000 fd22 	bl	80013d0 <HAL_GPIO_WritePin>
	delayCounter = 10000;
 800098c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000990:	607b      	str	r3, [r7, #4]
	while(delayCounter--);
 8000992:	bf00      	nop
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1fa      	bne.n	8000994 <LCD_enable+0x34>
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	48000c00 	.word	0x48000c00

080009ac <LCD_command>:

void LCD_command(uint8_t command) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c0:	f000 fd06 	bl	80013d0 <HAL_GPIO_WritePin>
	LCD_putNibble(command >> 4);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff8e 	bl	80008ec <LCD_putNibble>
	LCD_enable();
 80009d0:	f7ff ffc6 	bl	8000960 <LCD_enable>
	LCD_putNibble(command & 0x0f);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff ff85 	bl	80008ec <LCD_putNibble>
	LCD_enable();
 80009e2:	f7ff ffbd 	bl	8000960 <LCD_enable>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <LCD_data>:

void LCD_data(uint8_t data) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 1);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f000 fce5 	bl	80013d0 <HAL_GPIO_WritePin>
	int delayCounter = 10000;
 8000a06:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a0a:	60fb      	str	r3, [r7, #12]
	while(delayCounter--);
 8000a0c:	bf00      	nop
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	60fa      	str	r2, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1fa      	bne.n	8000a0e <LCD_data+0x20>
	LCD_putNibble(data >> 4);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	091b      	lsrs	r3, r3, #4
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ff64 	bl	80008ec <LCD_putNibble>
	LCD_enable();
 8000a24:	f7ff ff9c 	bl	8000960 <LCD_enable>
	LCD_putNibble(data & 0x0f);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff5b 	bl	80008ec <LCD_putNibble>
	LCD_enable();
 8000a36:	f7ff ff93 	bl	8000960 <LCD_enable>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a44:	f000 fcc4 	bl	80013d0 <HAL_GPIO_WritePin>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LCD_display>:

void LCD_display(const char *str) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	int c = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
	while(*str) {
 8000a5c:	e00f      	b.n	8000a7e <LCD_display+0x2e>
		if (c == 16) {
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b10      	cmp	r3, #16
 8000a62:	d102      	bne.n	8000a6a <LCD_display+0x1a>
			LCD_command(0b11000000);
 8000a64:	20c0      	movs	r0, #192	@ 0xc0
 8000a66:	f7ff ffa1 	bl	80009ac <LCD_command>
		}
		LCD_data(*str++);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ffbb 	bl	80009ee <LCD_data>
		c++;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
	while(*str) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1eb      	bne.n	8000a5e <LCD_display+0xe>
	}

}
 8000a86:	bf00      	nop
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <KEY_scan>:

uint8_t KEY_scan(uint16_t *cols, uint16_t *rows) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	uint8_t key_value = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < 4; i++) {
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	e039      	b.n	8000b18 <KEY_scan+0x88>
		HAL_GPIO_WritePin(C_PORT, cols[i], 1);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	4413      	add	r3, r2
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 fc8b 	bl	80013d0 <HAL_GPIO_WritePin>
		for (int j = 0; j < 4; j++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e017      	b.n	8000af0 <KEY_scan+0x60>
			if (HAL_GPIO_ReadPin(R_PORT, rows[j])) {
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	4619      	mov	r1, r3
 8000acc:	4817      	ldr	r0, [pc, #92]	@ (8000b2c <KEY_scan+0x9c>)
 8000ace:	f000 fc67 	bl	80013a0 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <KEY_scan+0x5a>
				key_value = key_map[j][i];
 8000ad8:	4a15      	ldr	r2, [pc, #84]	@ (8000b30 <KEY_scan+0xa0>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	441a      	add	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	75fb      	strb	r3, [r7, #23]
				break;
 8000ae8:	e005      	b.n	8000af6 <KEY_scan+0x66>
		for (int j = 0; j < 4; j++) {
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	dde4      	ble.n	8000ac0 <KEY_scan+0x30>
			}
		}
		HAL_GPIO_WritePin(C_PORT, cols[i], 0);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b08:	f000 fc62 	bl	80013d0 <HAL_GPIO_WritePin>
		if (key_value != 0) {
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d106      	bne.n	8000b20 <KEY_scan+0x90>
	for (int i = 0; i < 4; i++) {
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	3301      	adds	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	ddc2      	ble.n	8000aa4 <KEY_scan+0x14>
 8000b1e:	e000      	b.n	8000b22 <KEY_scan+0x92>
			break;
 8000b20:	bf00      	nop
		}
	}
	return key_value;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	20000000 	.word	0x20000000

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <Error_Handler+0x8>

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6193      	str	r3, [r2, #24]
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_MspInit+0x44>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 fa46 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_TIM_Base_MspInit+0x44>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d113      	bne.n	8000bc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <HAL_TIM_Base_MspInit+0x48>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <HAL_TIM_Base_MspInit+0x48>)
 8000ba0:	f043 0310 	orr.w	r3, r3, #16
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_TIM_Base_MspInit+0x48>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2036      	movs	r0, #54	@ 0x36
 8000bb8:	f000 fa31 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bbc:	2036      	movs	r0, #54	@ 0x36
 8000bbe:	f000 fa4a 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40001000 	.word	0x40001000
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_UART_MspInit+0x7c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d128      	bne.n	8000c48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a10      	ldr	r2, [pc, #64]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_UART_MspInit+0x80>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c26:	230c      	movs	r3, #12
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c44:	f000 fa22 	bl	800108c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	@ 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40004400 	.word	0x40004400
 8000c54:	40021000 	.word	0x40021000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f897 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cbe:	f000 fbb9 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <TIM6_DAC_IRQHandler+0x10>)
 8000cce:	f002 f952 	bl	8002f76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000038 	.word	0x20000038

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d38 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	@ (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f002 ffe7 	bl	8003d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fa59 	bl	80001e8 <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d44:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 8000d48:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d4c:	20000114 	.word	0x20000114

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <HAL_Init+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <HAL_Init+0x28>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f94f 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fee6 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f967 	bl	8001072 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f92f 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000010 	.word	0x20000010
 8000dd8:	20000018 	.word	0x20000018
 8000ddc:	20000014 	.word	0x20000014

08000de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000018 	.word	0x20000018
 8000e04:	20000110 	.word	0x20000110

08000e08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000110 	.word	0x20000110

08000e20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000018 	.word	0x20000018

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e160      	b.n	800135e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 8152 	beq.w	8001358 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	f003 0201 	and.w	r2, r3, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b03      	cmp	r3, #3
 8001138:	d017      	beq.n	800116a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0203 	and.w	r2, r3, #3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80ac 	beq.w	8001358 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b5e      	ldr	r3, [pc, #376]	@ (800137c <HAL_GPIO_Init+0x2f0>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a5d      	ldr	r2, [pc, #372]	@ (800137c <HAL_GPIO_Init+0x2f0>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b5b      	ldr	r3, [pc, #364]	@ (800137c <HAL_GPIO_Init+0x2f0>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001218:	4a59      	ldr	r2, [pc, #356]	@ (8001380 <HAL_GPIO_Init+0x2f4>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001242:	d025      	beq.n	8001290 <HAL_GPIO_Init+0x204>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4f      	ldr	r2, [pc, #316]	@ (8001384 <HAL_GPIO_Init+0x2f8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d01f      	beq.n	800128c <HAL_GPIO_Init+0x200>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4e      	ldr	r2, [pc, #312]	@ (8001388 <HAL_GPIO_Init+0x2fc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d019      	beq.n	8001288 <HAL_GPIO_Init+0x1fc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4d      	ldr	r2, [pc, #308]	@ (800138c <HAL_GPIO_Init+0x300>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d013      	beq.n	8001284 <HAL_GPIO_Init+0x1f8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x304>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1f4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4b      	ldr	r2, [pc, #300]	@ (8001394 <HAL_GPIO_Init+0x308>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1f0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <HAL_GPIO_Init+0x30c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1ec>
 8001274:	2306      	movs	r3, #6
 8001276:	e00c      	b.n	8001292 <HAL_GPIO_Init+0x206>
 8001278:	2307      	movs	r3, #7
 800127a:	e00a      	b.n	8001292 <HAL_GPIO_Init+0x206>
 800127c:	2305      	movs	r3, #5
 800127e:	e008      	b.n	8001292 <HAL_GPIO_Init+0x206>
 8001280:	2304      	movs	r3, #4
 8001282:	e006      	b.n	8001292 <HAL_GPIO_Init+0x206>
 8001284:	2303      	movs	r3, #3
 8001286:	e004      	b.n	8001292 <HAL_GPIO_Init+0x206>
 8001288:	2302      	movs	r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x206>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_GPIO_Init+0x206>
 8001290:	2300      	movs	r3, #0
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	f002 0203 	and.w	r2, r2, #3
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	4093      	lsls	r3, r2
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a2:	4937      	ldr	r1, [pc, #220]	@ (8001380 <HAL_GPIO_Init+0x2f4>)
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b0:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <HAL_GPIO_Init+0x310>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d4:	4a31      	ldr	r2, [pc, #196]	@ (800139c <HAL_GPIO_Init+0x310>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012da:	4b30      	ldr	r3, [pc, #192]	@ (800139c <HAL_GPIO_Init+0x310>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012fe:	4a27      	ldr	r2, [pc, #156]	@ (800139c <HAL_GPIO_Init+0x310>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <HAL_GPIO_Init+0x310>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001328:	4a1c      	ldr	r2, [pc, #112]	@ (800139c <HAL_GPIO_Init+0x310>)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <HAL_GPIO_Init+0x310>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43db      	mvns	r3, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <HAL_GPIO_Init+0x310>)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f47f ae97 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000
 8001380:	40010000 	.word	0x40010000
 8001384:	48000400 	.word	0x48000400
 8001388:	48000800 	.word	0x48000800
 800138c:	48000c00 	.word	0x48000c00
 8001390:	48001000 	.word	0x48001000
 8001394:	48001400 	.word	0x48001400
 8001398:	48001800 	.word	0x48001800
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ec:	e002      	b.n	80013f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4013      	ands	r3, r2
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43d9      	mvns	r1, r3
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	400b      	ands	r3, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800143e:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144a:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f958 	bl	8000708 <HAL_GPIO_EXTI_Callback>
  }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40010400 	.word	0x40010400

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800146a:	af00      	add	r7, sp, #0
 800146c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001470:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001474:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800147a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f001 b83a 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 816f 	beq.w	800177e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014a0:	4bb5      	ldr	r3, [pc, #724]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d00c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ac:	4bb2      	ldr	r3, [pc, #712]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 030c 	and.w	r3, r3, #12
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d15c      	bne.n	8001572 <HAL_RCC_OscConfig+0x10e>
 80014b8:	4baf      	ldr	r3, [pc, #700]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c4:	d155      	bne.n	8001572 <HAL_RCC_OscConfig+0x10e>
 80014c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014ca:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	095b      	lsrs	r3, r3, #5
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d102      	bne.n	80014f8 <HAL_RCC_OscConfig+0x94>
 80014f2:	4ba1      	ldr	r3, [pc, #644]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	e015      	b.n	8001524 <HAL_RCC_OscConfig+0xc0>
 80014f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014fc:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001500:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001504:	fa93 f3a3 	rbit	r3, r3
 8001508:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800150c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001510:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001514:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001520:	4b95      	ldr	r3, [pc, #596]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001528:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800152c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001530:	fa92 f2a2 	rbit	r2, r2
 8001534:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001538:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800153c:	fab2 f282 	clz	r2, r2
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	f042 0220 	orr.w	r2, r2, #32
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	f002 021f 	and.w	r2, r2, #31
 800154c:	2101      	movs	r1, #1
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4013      	ands	r3, r2
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8111 	beq.w	800177c <HAL_RCC_OscConfig+0x318>
 800155a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f040 8108 	bne.w	800177c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f000 bfc6 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x12e>
 8001584:	4b7c      	ldr	r3, [pc, #496]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a7b      	ldr	r2, [pc, #492]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e036      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 8001592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001596:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x158>
 80015a2:	4b75      	ldr	r3, [pc, #468]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a74      	ldr	r2, [pc, #464]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b72      	ldr	r3, [pc, #456]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a71      	ldr	r2, [pc, #452]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e021      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 80015bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x184>
 80015ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a69      	ldr	r2, [pc, #420]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b67      	ldr	r3, [pc, #412]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a66      	ldr	r2, [pc, #408]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x19c>
 80015e8:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a62      	ldr	r2, [pc, #392]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b60      	ldr	r3, [pc, #384]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a5f      	ldr	r2, [pc, #380]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fe:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d059      	beq.n	80016c4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fbfa 	bl	8000e08 <HAL_GetTick>
 8001614:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161a:	f7ff fbf5 	bl	8000e08 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	@ 0x64
 8001628:	d902      	bls.n	8001630 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	f000 bf67 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001630:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001634:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001644:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d102      	bne.n	8001662 <HAL_RCC_OscConfig+0x1fe>
 800165c:	4b46      	ldr	r3, [pc, #280]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	e015      	b.n	800168e <HAL_RCC_OscConfig+0x22a>
 8001662:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001666:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001676:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800167a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800167e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800168a:	4b3b      	ldr	r3, [pc, #236]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001692:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001696:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800169a:	fa92 f2a2 	rbit	r2, r2
 800169e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80016a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80016a6:	fab2 f282 	clz	r2, r2
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	f042 0220 	orr.w	r2, r2, #32
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	f002 021f 	and.w	r2, r2, #31
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	4013      	ands	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0ab      	beq.n	800161a <HAL_RCC_OscConfig+0x1b6>
 80016c2:	e05c      	b.n	800177e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fba0 	bl	8000e08 <HAL_GetTick>
 80016c8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb9b 	bl	8000e08 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	@ 0x64
 80016dc:	d902      	bls.n	80016e4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	f000 bf0d 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 80016e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80016f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0x2b2>
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x2de>
 8001716:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800171a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800172a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800172e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001732:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800173e:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_RCC_OscConfig+0x314>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001746:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800174a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800174e:	fa92 f2a2 	rbit	r2, r2
 8001752:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001756:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800175a:	fab2 f282 	clz	r2, r2
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f042 0220 	orr.w	r2, r2, #32
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	f002 021f 	and.w	r2, r2, #31
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ab      	bne.n	80016ce <HAL_RCC_OscConfig+0x26a>
 8001776:	e002      	b.n	800177e <HAL_RCC_OscConfig+0x31a>
 8001778:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 817f 	beq.w	8001a92 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001794:	4ba7      	ldr	r3, [pc, #668]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00c      	beq.n	80017ba <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017a0:	4ba4      	ldr	r3, [pc, #656]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d173      	bne.n	8001894 <HAL_RCC_OscConfig+0x430>
 80017ac:	4ba1      	ldr	r3, [pc, #644]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80017b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80017b8:	d16c      	bne.n	8001894 <HAL_RCC_OscConfig+0x430>
 80017ba:	2302      	movs	r3, #2
 80017bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80017cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d102      	bne.n	80017ea <HAL_RCC_OscConfig+0x386>
 80017e4:	4b93      	ldr	r3, [pc, #588]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	e013      	b.n	8001812 <HAL_RCC_OscConfig+0x3ae>
 80017ea:	2302      	movs	r3, #2
 80017ec:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001802:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001806:	fa93 f3a3 	rbit	r3, r3
 800180a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800180e:	4b89      	ldr	r3, [pc, #548]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	2202      	movs	r2, #2
 8001814:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001818:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800181c:	fa92 f2a2 	rbit	r2, r2
 8001820:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001824:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f002 021f 	and.w	r2, r2, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00a      	beq.n	800185a <HAL_RCC_OscConfig+0x3f6>
 8001844:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001848:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d002      	beq.n	800185a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	f000 be52 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185a:	4b76      	ldr	r3, [pc, #472]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001866:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	21f8      	movs	r1, #248	@ 0xf8
 8001870:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001878:	fa91 f1a1 	rbit	r1, r1
 800187c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001880:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001884:	fab1 f181 	clz	r1, r1
 8001888:	b2c9      	uxtb	r1, r1
 800188a:	408b      	lsls	r3, r1
 800188c:	4969      	ldr	r1, [pc, #420]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e0fe      	b.n	8001a92 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001898:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8088 	beq.w	80019b6 <HAL_RCC_OscConfig+0x552>
 80018a6:	2301      	movs	r3, #1
 80018a8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80018b8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018c6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	461a      	mov	r2, r3
 80018ce:	2301      	movs	r3, #1
 80018d0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fa99 	bl	8000e08 <HAL_GetTick>
 80018d6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff fa94 	bl	8000e08 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d902      	bls.n	80018f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	f000 be06 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001904:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x4be>
 800191c:	4b45      	ldr	r3, [pc, #276]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e013      	b.n	800194a <HAL_RCC_OscConfig+0x4e6>
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800193a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001946:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	2202      	movs	r2, #2
 800194c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001950:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001954:	fa92 f2a2 	rbit	r2, r2
 8001958:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800195c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0af      	beq.n	80018dc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001988:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	21f8      	movs	r1, #248	@ 0xf8
 8001992:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800199a:	fa91 f1a1 	rbit	r1, r1
 800199e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80019a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80019a6:	fab1 f181 	clz	r1, r1
 80019aa:	b2c9      	uxtb	r1, r1
 80019ac:	408b      	lsls	r3, r1
 80019ae:	4921      	ldr	r1, [pc, #132]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e06d      	b.n	8001a92 <HAL_RCC_OscConfig+0x62e>
 80019b6:	2301      	movs	r3, #1
 80019b8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80019c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	461a      	mov	r2, r3
 80019de:	2300      	movs	r3, #0
 80019e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa11 	bl	8000e08 <HAL_GetTick>
 80019e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fa0c 	bl	8000e08 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d902      	bls.n	8001a02 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	f000 bd7e 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5d4>
 8001a2c:	4b01      	ldr	r3, [pc, #4]	@ (8001a34 <HAL_RCC_OscConfig+0x5d0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	e016      	b.n	8001a60 <HAL_RCC_OscConfig+0x5fc>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a50:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a5c:	4bbf      	ldr	r3, [pc, #764]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	2202      	movs	r2, #2
 8001a62:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001a66:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001a6a:	fa92 f2a2 	rbit	r2, r2
 8001a6e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001a72:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ac      	bne.n	80019ec <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8113 	beq.w	8001cce <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d07c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x74e>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001aca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	@ (8001d60 <HAL_RCC_OscConfig+0x8fc>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f991 	bl	8000e08 <HAL_GetTick>
 8001ae6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f98c 	bl	8000e08 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 bcfe 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001b0c:	fa93 f2a3 	rbit	r2, r3
 8001b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b14:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b22:	2202      	movs	r2, #2
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b46:	2202      	movs	r2, #2
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b7e      	ldr	r3, [pc, #504]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001b64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b6e:	2102      	movs	r1, #2
 8001b70:	6019      	str	r1, [r3, #0]
 8001b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f1a3 	rbit	r1, r3
 8001b80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b88:	6019      	str	r1, [r3, #0]
  return result;
 8001b8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d09d      	beq.n	8001aec <HAL_RCC_OscConfig+0x688>
 8001bb0:	e08d      	b.n	8001cce <HAL_RCC_OscConfig+0x86a>
 8001bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bba:	2201      	movs	r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bd4:	601a      	str	r2, [r3, #0]
  return result;
 8001bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bde:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <HAL_RCC_OscConfig+0x8fc>)
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f908 	bl	8000e08 <HAL_GetTick>
 8001bf8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f903 	bl	8000e08 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d902      	bls.n	8001c14 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f000 bc75 	b.w	80024fe <HAL_RCC_OscConfig+0x109a>
 8001c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c40:	2202      	movs	r2, #2
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	6019      	str	r1, [r3, #0]
 8001c90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f1a3 	rbit	r1, r3
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ca6:	6019      	str	r1, [r3, #0]
  return result;
 8001ca8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fab3 f383 	clz	r3, r3
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d197      	bne.n	8001bfe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 81a5 	beq.w	800202e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d116      	bne.n	8001d24 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <HAL_RCC_OscConfig+0x8f8>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d1c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_RCC_OscConfig+0x900>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_RCC_OscConfig+0x900>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_RCC_OscConfig+0x900>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f864 	bl	8000e08 <HAL_GetTick>
 8001d40:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e010      	b.n	8001d68 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff f85f 	bl	8000e08 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	@ 0x64
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e3d1      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	10908120 	.word	0x10908120
 8001d64:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa0 <HAL_RCC_OscConfig+0xb3c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0e8      	beq.n	8001d46 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x92e>
 8001d84:	4b87      	ldr	r3, [pc, #540]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a86      	ldr	r2, [pc, #536]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e035      	b.n	8001dfe <HAL_RCC_OscConfig+0x99a>
 8001d92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d96:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x958>
 8001da2:	4b80      	ldr	r3, [pc, #512]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4a7f      	ldr	r2, [pc, #508]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	6213      	str	r3, [r2, #32]
 8001dae:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	e020      	b.n	8001dfe <HAL_RCC_OscConfig+0x99a>
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b05      	cmp	r3, #5
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x982>
 8001dcc:	4b75      	ldr	r3, [pc, #468]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a74      	ldr	r2, [pc, #464]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4b72      	ldr	r3, [pc, #456]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a71      	ldr	r2, [pc, #452]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e00b      	b.n	8001dfe <HAL_RCC_OscConfig+0x99a>
 8001de6:	4b6f      	ldr	r3, [pc, #444]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a6e      	ldr	r2, [pc, #440]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b6c      	ldr	r3, [pc, #432]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a6b      	ldr	r2, [pc, #428]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 8081 	beq.w	8001f12 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7fe fffa 	bl	8000e08 <HAL_GetTick>
 8001e14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	e00b      	b.n	8001e32 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7fe fff5 	bl	8000e08 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e365      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8001e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e50:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e5e:	2202      	movs	r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e74:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e82:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d102      	bne.n	8001e9e <HAL_RCC_OscConfig+0xa3a>
 8001e98:	4b42      	ldr	r3, [pc, #264]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	e013      	b.n	8001ec6 <HAL_RCC_OscConfig+0xa62>
 8001e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4b38      	ldr	r3, [pc, #224]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ece:	2102      	movs	r1, #2
 8001ed0:	6011      	str	r1, [r2, #0]
 8001ed2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ed6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	fa92 f1a2 	rbit	r1, r2
 8001ee0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ee4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ee8:	6011      	str	r1, [r2, #0]
  return result;
 8001eea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001eee:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	fab2 f282 	clz	r2, r2
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f002 021f 	and.w	r2, r2, #31
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d084      	beq.n	8001e1a <HAL_RCC_OscConfig+0x9b6>
 8001f10:	e083      	b.n	800201a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe ff79 	bl	8000e08 <HAL_GetTick>
 8001f16:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7fe ff74 	bl	8000e08 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e2e4      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8001f34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f44:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f52:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f60:	2202      	movs	r2, #2
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f76:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f7a:	601a      	str	r2, [r3, #0]
  return result;
 8001f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f80:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f84:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d106      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xb44>
 8001f9a:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <HAL_RCC_OscConfig+0xb40>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	e017      	b.n	8001fd0 <HAL_RCC_OscConfig+0xb6c>
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	4bb3      	ldr	r3, [pc, #716]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fd4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fd8:	2102      	movs	r1, #2
 8001fda:	6011      	str	r1, [r2, #0]
 8001fdc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fe0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	fa92 f1a2 	rbit	r1, r2
 8001fea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001fee:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ff2:	6011      	str	r1, [r2, #0]
  return result;
 8001ff4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ff8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d180      	bne.n	8001f1c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800201a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800201e:	2b01      	cmp	r3, #1
 8002020:	d105      	bne.n	800202e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b9e      	ldr	r3, [pc, #632]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4a9d      	ldr	r2, [pc, #628]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002032:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 825e 	beq.w	80024fc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002040:	4b96      	ldr	r3, [pc, #600]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	f000 821f 	beq.w	800248c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002052:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b02      	cmp	r3, #2
 800205c:	f040 8170 	bne.w	8002340 <HAL_RCC_OscConfig+0xedc>
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002068:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800206c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002072:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002080:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002084:	601a      	str	r2, [r3, #0]
  return result;
 8002086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800208a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800208e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800209a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	461a      	mov	r2, r3
 80020a2:	2300      	movs	r3, #0
 80020a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7fe feaf 	bl	8000e08 <HAL_GetTick>
 80020aa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	e009      	b.n	80020c4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe feaa 	bl	8000e08 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e21c      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 80020c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	fa93 f2a3 	rbit	r2, r3
 80020e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020e8:	601a      	str	r2, [r3, #0]
  return result;
 80020ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f4:	fab3 f383 	clz	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <HAL_RCC_OscConfig+0xcaa>
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	e027      	b.n	800215e <HAL_RCC_OscConfig+0xcfa>
 800210e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002112:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002116:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002120:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002138:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800213c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002146:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002154:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002162:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002166:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800216a:	6011      	str	r1, [r2, #0]
 800216c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002170:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	fa92 f1a2 	rbit	r1, r2
 800217a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800217e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002182:	6011      	str	r1, [r2, #0]
  return result;
 8002184:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002188:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	fab2 f282 	clz	r2, r2
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f042 0220 	orr.w	r2, r2, #32
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	f002 021f 	and.w	r2, r2, #31
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d182      	bne.n	80020b0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021aa:	4b3c      	ldr	r3, [pc, #240]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	4937      	ldr	r1, [pc, #220]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80021cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6a19      	ldr	r1, [r3, #32]
 80021d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	492d      	ldr	r1, [pc, #180]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002216:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800221a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002226:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	461a      	mov	r2, r3
 800222e:	2301      	movs	r3, #1
 8002230:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fde9 	bl	8000e08 <HAL_GetTick>
 8002236:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223a:	e009      	b.n	8002250 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fde4 	bl	8000e08 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e156      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 8002250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002254:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800225c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002262:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	fa93 f2a3 	rbit	r2, r3
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002274:	601a      	str	r2, [r3, #0]
  return result;
 8002276:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800227e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0xe3c>
 8002294:	4b01      	ldr	r3, [pc, #4]	@ (800229c <HAL_RCC_OscConfig+0xe38>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e02a      	b.n	80022f0 <HAL_RCC_OscConfig+0xe8c>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022a4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	fa93 f2a3 	rbit	r2, r3
 80022e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	4b86      	ldr	r3, [pc, #536]	@ (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022f4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022f8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022fc:	6011      	str	r1, [r2, #0]
 80022fe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002302:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fa92 f1a2 	rbit	r1, r2
 800230c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002310:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002314:	6011      	str	r1, [r2, #0]
  return result;
 8002316:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800231a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	fab2 f282 	clz	r2, r2
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f042 0220 	orr.w	r2, r2, #32
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	f002 021f 	and.w	r2, r2, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f202 	lsl.w	r2, r1, r2
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	f43f af7f 	beq.w	800223c <HAL_RCC_OscConfig+0xdd8>
 800233e:	e0dd      	b.n	80024fc <HAL_RCC_OscConfig+0x1098>
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002348:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800234c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002352:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	fa93 f2a3 	rbit	r2, r3
 800235c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002360:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002364:	601a      	str	r2, [r3, #0]
  return result;
 8002366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800236a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800236e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800237a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	461a      	mov	r2, r3
 8002382:	2300      	movs	r3, #0
 8002384:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7fe fd3f 	bl	8000e08 <HAL_GetTick>
 800238a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e009      	b.n	80023a4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002390:	f7fe fd3a 	bl	8000e08 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0ac      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
 80023a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	fa93 f2a3 	rbit	r2, r3
 80023c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023c8:	601a      	str	r2, [r3, #0]
  return result;
 80023ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d102      	bne.n	80023ee <HAL_RCC_OscConfig+0xf8a>
 80023e8:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	e027      	b.n	800243e <HAL_RCC_OscConfig+0xfda>
 80023ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002400:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002418:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800241c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002426:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f2a3 	rbit	r2, r3
 8002430:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002434:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <HAL_RCC_OscConfig+0x10a4>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002442:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002446:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800244a:	6011      	str	r1, [r2, #0]
 800244c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002450:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	fa92 f1a2 	rbit	r1, r2
 800245a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800245e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002462:	6011      	str	r1, [r2, #0]
  return result;
 8002464:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002468:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	fab2 f282 	clz	r2, r2
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	f042 0220 	orr.w	r2, r2, #32
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f002 021f 	and.w	r2, r2, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f202 	lsl.w	r2, r1, r2
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d182      	bne.n	8002390 <HAL_RCC_OscConfig+0xf2c>
 800248a:	e037      	b.n	80024fc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002490:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e02e      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <HAL_RCC_OscConfig+0x10a4>)
 80024aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ac:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024b4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80024b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d117      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024c8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80024cc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024dc:	429a      	cmp	r2, r3
 80024de:	d10b      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d001      	beq.n	80024fc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b09e      	sub	sp, #120	@ 0x78
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e162      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b90      	ldr	r3, [pc, #576]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d910      	bls.n	8002554 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b8d      	ldr	r3, [pc, #564]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	498b      	ldr	r1, [pc, #556]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b89      	ldr	r3, [pc, #548]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e14a      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b82      	ldr	r3, [pc, #520]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	497f      	ldr	r1, [pc, #508]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80dc 	beq.w	8002738 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d13c      	bne.n	8002602 <HAL_RCC_ClockConfig+0xf6>
 8002588:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800258c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xa6>
 80025ac:	4b6f      	ldr	r3, [pc, #444]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e00f      	b.n	80025d2 <HAL_RCC_ClockConfig+0xc6>
 80025b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	667b      	str	r3, [r7, #100]	@ 0x64
 80025c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80025c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025ce:	4b67      	ldr	r3, [pc, #412]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80025d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025d6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80025e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025e2:	fab2 f282 	clz	r2, r2
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f042 0220 	orr.w	r2, r2, #32
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f002 021f 	and.w	r2, r2, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f202 	lsl.w	r2, r1, r2
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d17b      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0f3      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d13c      	bne.n	8002684 <HAL_RCC_ClockConfig+0x178>
 800260a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800260e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_RCC_ClockConfig+0x128>
 800262e:	4b4f      	ldr	r3, [pc, #316]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	e00f      	b.n	8002654 <HAL_RCC_ClockConfig+0x148>
 8002634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	647b      	str	r3, [r7, #68]	@ 0x44
 8002642:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
 8002648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002650:	4b46      	ldr	r3, [pc, #280]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002658:	63ba      	str	r2, [r7, #56]	@ 0x38
 800265a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800265c:	fa92 f2a2 	rbit	r2, r2
 8002660:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002664:	fab2 f282 	clz	r2, r2
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f002 021f 	and.w	r2, r2, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f202 	lsl.w	r2, r1, r2
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d13a      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0b2      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
 8002684:	2302      	movs	r3, #2
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1a0>
 80026a6:	4b31      	ldr	r3, [pc, #196]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e00d      	b.n	80026c8 <HAL_RCC_ClockConfig+0x1bc>
 80026ac:	2302      	movs	r3, #2
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b8:	2302      	movs	r3, #2
 80026ba:	623b      	str	r3, [r7, #32]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	61fb      	str	r3, [r7, #28]
 80026c4:	4b29      	ldr	r3, [pc, #164]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	2202      	movs	r2, #2
 80026ca:	61ba      	str	r2, [r7, #24]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	fa92 f2a2 	rbit	r2, r2
 80026d2:	617a      	str	r2, [r7, #20]
  return result;
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	fab2 f282 	clz	r2, r2
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f042 0220 	orr.w	r2, r2, #32
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	f002 021f 	and.w	r2, r2, #31
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e079      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026f6:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f023 0203 	bic.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	491a      	ldr	r1, [pc, #104]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002708:	f7fe fb7e 	bl	8000e08 <HAL_GetTick>
 800270c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe fb7a 	bl	8000e08 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e061      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_RCC_ClockConfig+0x260>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 020c 	and.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	429a      	cmp	r2, r3
 8002736:	d1eb      	bne.n	8002710 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d214      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0207 	bic.w	r2, r3, #7
 800274e:	4906      	ldr	r1, [pc, #24]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002756:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <HAL_RCC_ClockConfig+0x25c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e040      	b.n	80027ea <HAL_RCC_ClockConfig+0x2de>
 8002768:	40022000 	.word	0x40022000
 800276c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	491a      	ldr	r1, [pc, #104]	@ (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4912      	ldr	r1, [pc, #72]	@ (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ae:	f000 f829 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027b2:	4601      	mov	r1, r0
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <HAL_RCC_ClockConfig+0x2e8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027bc:	22f0      	movs	r2, #240	@ 0xf0
 80027be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	fa92 f2a2 	rbit	r2, r2
 80027c6:	60fa      	str	r2, [r7, #12]
  return result;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	fab2 f282 	clz	r2, r2
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	40d3      	lsrs	r3, r2
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_RCC_ClockConfig+0x2ec>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	fa21 f303 	lsr.w	r3, r1, r3
 80027da:	4a08      	ldr	r2, [pc, #32]	@ (80027fc <HAL_RCC_ClockConfig+0x2f0>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027de:	4b08      	ldr	r3, [pc, #32]	@ (8002800 <HAL_RCC_ClockConfig+0x2f4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe facc 	bl	8000d80 <HAL_InitTick>
  
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3778      	adds	r7, #120	@ 0x78
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08003da8 	.word	0x08003da8
 80027fc:	20000010 	.word	0x20000010
 8002800:	20000014 	.word	0x20000014

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800281e:	4b1f      	ldr	r3, [pc, #124]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e029      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	e029      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a18      	ldr	r2, [pc, #96]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002848:	4b14      	ldr	r3, [pc, #80]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002860:	4a0f      	ldr	r2, [pc, #60]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e007      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002872:	4a0b      	ldr	r2, [pc, #44]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	fbb2 f2f3 	udiv	r2, r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	613b      	str	r3, [r7, #16]
      break;
 8002886:	e002      	b.n	800288e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800288a:	613b      	str	r3, [r7, #16]
      break;
 800288c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288e:	693b      	ldr	r3, [r7, #16]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	40021000 	.word	0x40021000
 80028a0:	007a1200 	.word	0x007a1200
 80028a4:	08003dc0 	.word	0x08003dc0
 80028a8:	08003dd0 	.word	0x08003dd0

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000010 	.word	0x20000010

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028ca:	f7ff ffef 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028ce:	4601      	mov	r1, r0
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028d8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	603a      	str	r2, [r7, #0]
  return result;
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	40d3      	lsrs	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	@ (8002904 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028f2:	5cd3      	ldrb	r3, [r2, r3]
 80028f4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	08003db8 	.word	0x08003db8

08002908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800290e:	f7ff ffcd 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 8002912:	4601      	mov	r1, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800291c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002920:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	fa92 f2a2 	rbit	r2, r2
 8002928:	603a      	str	r2, [r7, #0]
  return result;
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	fab2 f282 	clz	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	40d3      	lsrs	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	08003db8 	.word	0x08003db8

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b092      	sub	sp, #72	@ 0x48
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80d4 	beq.w	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002970:	4b4e      	ldr	r3, [pc, #312]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10e      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297c:	4b4b      	ldr	r3, [pc, #300]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	4a4a      	ldr	r2, [pc, #296]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002986:	61d3      	str	r3, [r2, #28]
 8002988:	4b48      	ldr	r3, [pc, #288]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b45      	ldr	r3, [pc, #276]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b42      	ldr	r3, [pc, #264]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a41      	ldr	r2, [pc, #260]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fa29 	bl	8000e08 <HAL_GetTick>
 80029b6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fa25 	bl	8000e08 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b64      	cmp	r3, #100	@ 0x64
 80029c6:	d901      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1d6      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d8:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8084 	beq.w	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d07c      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f8:	4b2c      	ldr	r3, [pc, #176]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	461a      	mov	r2, r3
 8002a22:	2301      	movs	r3, #1
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	461a      	mov	r2, r3
 8002a46:	2300      	movs	r3, #0
 8002a48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a4a:	4a18      	ldr	r2, [pc, #96]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d04b      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe f9d5 	bl	8000e08 <HAL_GetTick>
 8002a5e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe f9d1 	bl	8000e08 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e180      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a84:	2302      	movs	r3, #2
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002aa6:	4b01      	ldr	r3, [pc, #4]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	e00d      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	10908100 	.word	0x10908100
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	4b9a      	ldr	r3, [pc, #616]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2202      	movs	r2, #2
 8002aca:	613a      	str	r2, [r7, #16]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	fa92 f2a2 	rbit	r2, r2
 8002ad2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	fab2 f282 	clz	r2, r2
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f002 021f 	and.w	r2, r2, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0b7      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002af2:	4b8f      	ldr	r3, [pc, #572]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	498c      	ldr	r1, [pc, #560]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b88      	ldr	r3, [pc, #544]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4a87      	ldr	r2, [pc, #540]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b24:	4b82      	ldr	r3, [pc, #520]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	f023 0203 	bic.w	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	497f      	ldr	r1, [pc, #508]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b42:	4b7b      	ldr	r3, [pc, #492]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4978      	ldr	r1, [pc, #480]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b60:	4b73      	ldr	r3, [pc, #460]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4970      	ldr	r1, [pc, #448]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	f023 0210 	bic.w	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4969      	ldr	r1, [pc, #420]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b9c:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba8:	4961      	ldr	r1, [pc, #388]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bba:	4b5d      	ldr	r3, [pc, #372]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f023 0220 	bic.w	r2, r3, #32
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	495a      	ldr	r1, [pc, #360]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd8:	4b55      	ldr	r3, [pc, #340]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	4952      	ldr	r1, [pc, #328]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	494b      	ldr	r1, [pc, #300]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c14:	4b46      	ldr	r3, [pc, #280]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4943      	ldr	r1, [pc, #268]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c32:	4b3f      	ldr	r3, [pc, #252]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	493c      	ldr	r1, [pc, #240]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c50:	4b37      	ldr	r3, [pc, #220]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	4934      	ldr	r1, [pc, #208]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c6e:	4b30      	ldr	r3, [pc, #192]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7a:	492d      	ldr	r1, [pc, #180]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c98:	4925      	ldr	r1, [pc, #148]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	491e      	ldr	r1, [pc, #120]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	4916      	ldr	r1, [pc, #88]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	490f      	ldr	r1, [pc, #60]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d04:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d10:	4907      	ldr	r1, [pc, #28]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d22:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	e002      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d36:	4913      	ldr	r1, [pc, #76]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d48:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d54:	490b      	ldr	r1, [pc, #44]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d72:	4904      	ldr	r1, [pc, #16]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3748      	adds	r7, #72	@ 0x48
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e049      	b.n	8002e2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fd feea 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fa00 	bl	80031cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e04f      	b.n	8002ef0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	@ (8002efc <HAL_TIM_Base_Start_IT+0xc4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e7a:	d018      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1f      	ldr	r2, [pc, #124]	@ (8002f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1c      	ldr	r2, [pc, #112]	@ (8002f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_TIM_Base_Start_IT+0x76>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	@ (8002f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d115      	bne.n	8002eda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d015      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0xb4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec6:	d011      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	e008      	b.n	8002eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0201 	orr.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e000      	b.n	8002eee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40012c00 	.word	0x40012c00
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40013400 	.word	0x40013400
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40015000 	.word	0x40015000
 8002f14:	00010007 	.word	0x00010007

08002f18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68da      	ldr	r2, [r3, #12]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10f      	bne.n	8002f60 <HAL_TIM_Base_Stop_IT+0x48>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_Base_Stop_IT+0x48>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01b      	beq.n	8002fda <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0202 	mvn.w	r2, #2
 8002faa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8e4 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8002fc6:	e005      	b.n	8002fd4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8d6 	bl	800317a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8e7 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d020      	beq.n	8003026 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01b      	beq.n	8003026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f06f 0204 	mvn.w	r2, #4
 8002ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8be 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 8003012:	e005      	b.n	8003020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8b0 	bl	800317a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8c1 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01b      	beq.n	8003072 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0208 	mvn.w	r2, #8
 8003042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2204      	movs	r2, #4
 8003048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f898 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 800305e:	e005      	b.n	800306c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f88a 	bl	800317a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f89b 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d01b      	beq.n	80030be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0210 	mvn.w	r2, #16
 800308e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2208      	movs	r2, #8
 8003094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f872 	bl	800318e <HAL_TIM_IC_CaptureCallback>
 80030aa:	e005      	b.n	80030b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f864 	bl	800317a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f875 	bl	80031a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00c      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0201 	mvn.w	r2, #1
 80030da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd fb6f 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d007      	beq.n	8003106 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f9a3 	bl	800344c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00c      	beq.n	800312a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f99b 	bl	8003460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f834 	bl	80031b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0220 	mvn.w	r2, #32
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f963 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a48      	ldr	r2, [pc, #288]	@ (8003300 <TIM_Base_SetConfig+0x134>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ea:	d00f      	beq.n	800320c <TIM_Base_SetConfig+0x40>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a45      	ldr	r2, [pc, #276]	@ (8003304 <TIM_Base_SetConfig+0x138>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00b      	beq.n	800320c <TIM_Base_SetConfig+0x40>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a44      	ldr	r2, [pc, #272]	@ (8003308 <TIM_Base_SetConfig+0x13c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <TIM_Base_SetConfig+0x40>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a43      	ldr	r2, [pc, #268]	@ (800330c <TIM_Base_SetConfig+0x140>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_Base_SetConfig+0x40>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a42      	ldr	r2, [pc, #264]	@ (8003310 <TIM_Base_SetConfig+0x144>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d108      	bne.n	800321e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a37      	ldr	r2, [pc, #220]	@ (8003300 <TIM_Base_SetConfig+0x134>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01f      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322c:	d01b      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a34      	ldr	r2, [pc, #208]	@ (8003304 <TIM_Base_SetConfig+0x138>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d017      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a33      	ldr	r2, [pc, #204]	@ (8003308 <TIM_Base_SetConfig+0x13c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a32      	ldr	r2, [pc, #200]	@ (800330c <TIM_Base_SetConfig+0x140>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00f      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a32      	ldr	r2, [pc, #200]	@ (8003314 <TIM_Base_SetConfig+0x148>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00b      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a31      	ldr	r2, [pc, #196]	@ (8003318 <TIM_Base_SetConfig+0x14c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d007      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a30      	ldr	r2, [pc, #192]	@ (800331c <TIM_Base_SetConfig+0x150>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d003      	beq.n	8003266 <TIM_Base_SetConfig+0x9a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <TIM_Base_SetConfig+0x144>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d108      	bne.n	8003278 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800326c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a18      	ldr	r2, [pc, #96]	@ (8003300 <TIM_Base_SetConfig+0x134>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d013      	beq.n	80032cc <TIM_Base_SetConfig+0x100>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a19      	ldr	r2, [pc, #100]	@ (800330c <TIM_Base_SetConfig+0x140>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00f      	beq.n	80032cc <TIM_Base_SetConfig+0x100>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a19      	ldr	r2, [pc, #100]	@ (8003314 <TIM_Base_SetConfig+0x148>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00b      	beq.n	80032cc <TIM_Base_SetConfig+0x100>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a18      	ldr	r2, [pc, #96]	@ (8003318 <TIM_Base_SetConfig+0x14c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <TIM_Base_SetConfig+0x100>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a17      	ldr	r2, [pc, #92]	@ (800331c <TIM_Base_SetConfig+0x150>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_Base_SetConfig+0x100>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <TIM_Base_SetConfig+0x144>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d103      	bne.n	80032d4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f023 0201 	bic.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	611a      	str	r2, [r3, #16]
  }
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40012c00 	.word	0x40012c00
 8003304:	40000400 	.word	0x40000400
 8003308:	40000800 	.word	0x40000800
 800330c:	40013400 	.word	0x40013400
 8003310:	40015000 	.word	0x40015000
 8003314:	40014000 	.word	0x40014000
 8003318:	40014400 	.word	0x40014400
 800331c:	40014800 	.word	0x40014800

08003320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e06d      	b.n	8003414 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a30      	ldr	r2, [pc, #192]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2f      	ldr	r2, [pc, #188]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d004      	beq.n	8003376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2d      	ldr	r2, [pc, #180]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800337c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003420 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01d      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d018      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a15      	ldr	r2, [pc, #84]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a16      	ldr	r2, [pc, #88]	@ (8003434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a11      	ldr	r2, [pc, #68]	@ (8003428 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d10c      	bne.n	8003402 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40013400 	.word	0x40013400
 8003428:	40015000 	.word	0x40015000
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	40014000 	.word	0x40014000

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e040      	b.n	8003508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fd fb9c 	bl	8000bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2224      	movs	r2, #36	@ 0x24
 80034a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f9fc 	bl	80038b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f825 	bl	8003510 <UART_SetConfig>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e01b      	b.n	8003508 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa7b 	bl	80039fc <UART_CheckIdleState>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	4b92      	ldr	r3, [pc, #584]	@ (8003784 <UART_SetConfig+0x274>)
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	6979      	ldr	r1, [r7, #20]
 8003544:	430b      	orrs	r3, r1
 8003546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	4313      	orrs	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a80      	ldr	r2, [pc, #512]	@ (8003788 <UART_SetConfig+0x278>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d120      	bne.n	80035ce <UART_SetConfig+0xbe>
 800358c:	4b7f      	ldr	r3, [pc, #508]	@ (800378c <UART_SetConfig+0x27c>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b03      	cmp	r3, #3
 8003596:	d817      	bhi.n	80035c8 <UART_SetConfig+0xb8>
 8003598:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <UART_SetConfig+0x90>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035bd 	.word	0x080035bd
 80035a8:	080035c3 	.word	0x080035c3
 80035ac:	080035b7 	.word	0x080035b7
 80035b0:	2301      	movs	r3, #1
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e0b5      	b.n	8003722 <UART_SetConfig+0x212>
 80035b6:	2302      	movs	r3, #2
 80035b8:	77fb      	strb	r3, [r7, #31]
 80035ba:	e0b2      	b.n	8003722 <UART_SetConfig+0x212>
 80035bc:	2304      	movs	r3, #4
 80035be:	77fb      	strb	r3, [r7, #31]
 80035c0:	e0af      	b.n	8003722 <UART_SetConfig+0x212>
 80035c2:	2308      	movs	r3, #8
 80035c4:	77fb      	strb	r3, [r7, #31]
 80035c6:	e0ac      	b.n	8003722 <UART_SetConfig+0x212>
 80035c8:	2310      	movs	r3, #16
 80035ca:	77fb      	strb	r3, [r7, #31]
 80035cc:	e0a9      	b.n	8003722 <UART_SetConfig+0x212>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003790 <UART_SetConfig+0x280>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d124      	bne.n	8003622 <UART_SetConfig+0x112>
 80035d8:	4b6c      	ldr	r3, [pc, #432]	@ (800378c <UART_SetConfig+0x27c>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035e4:	d011      	beq.n	800360a <UART_SetConfig+0xfa>
 80035e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035ea:	d817      	bhi.n	800361c <UART_SetConfig+0x10c>
 80035ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035f0:	d011      	beq.n	8003616 <UART_SetConfig+0x106>
 80035f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035f6:	d811      	bhi.n	800361c <UART_SetConfig+0x10c>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <UART_SetConfig+0xf4>
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003600:	d006      	beq.n	8003610 <UART_SetConfig+0x100>
 8003602:	e00b      	b.n	800361c <UART_SetConfig+0x10c>
 8003604:	2300      	movs	r3, #0
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e08b      	b.n	8003722 <UART_SetConfig+0x212>
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e088      	b.n	8003722 <UART_SetConfig+0x212>
 8003610:	2304      	movs	r3, #4
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e085      	b.n	8003722 <UART_SetConfig+0x212>
 8003616:	2308      	movs	r3, #8
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e082      	b.n	8003722 <UART_SetConfig+0x212>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e07f      	b.n	8003722 <UART_SetConfig+0x212>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5b      	ldr	r2, [pc, #364]	@ (8003794 <UART_SetConfig+0x284>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d124      	bne.n	8003676 <UART_SetConfig+0x166>
 800362c:	4b57      	ldr	r3, [pc, #348]	@ (800378c <UART_SetConfig+0x27c>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003634:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003638:	d011      	beq.n	800365e <UART_SetConfig+0x14e>
 800363a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800363e:	d817      	bhi.n	8003670 <UART_SetConfig+0x160>
 8003640:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003644:	d011      	beq.n	800366a <UART_SetConfig+0x15a>
 8003646:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800364a:	d811      	bhi.n	8003670 <UART_SetConfig+0x160>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <UART_SetConfig+0x148>
 8003650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003654:	d006      	beq.n	8003664 <UART_SetConfig+0x154>
 8003656:	e00b      	b.n	8003670 <UART_SetConfig+0x160>
 8003658:	2300      	movs	r3, #0
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e061      	b.n	8003722 <UART_SetConfig+0x212>
 800365e:	2302      	movs	r3, #2
 8003660:	77fb      	strb	r3, [r7, #31]
 8003662:	e05e      	b.n	8003722 <UART_SetConfig+0x212>
 8003664:	2304      	movs	r3, #4
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e05b      	b.n	8003722 <UART_SetConfig+0x212>
 800366a:	2308      	movs	r3, #8
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e058      	b.n	8003722 <UART_SetConfig+0x212>
 8003670:	2310      	movs	r3, #16
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e055      	b.n	8003722 <UART_SetConfig+0x212>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a47      	ldr	r2, [pc, #284]	@ (8003798 <UART_SetConfig+0x288>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d124      	bne.n	80036ca <UART_SetConfig+0x1ba>
 8003680:	4b42      	ldr	r3, [pc, #264]	@ (800378c <UART_SetConfig+0x27c>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003688:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800368c:	d011      	beq.n	80036b2 <UART_SetConfig+0x1a2>
 800368e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003692:	d817      	bhi.n	80036c4 <UART_SetConfig+0x1b4>
 8003694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003698:	d011      	beq.n	80036be <UART_SetConfig+0x1ae>
 800369a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800369e:	d811      	bhi.n	80036c4 <UART_SetConfig+0x1b4>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <UART_SetConfig+0x19c>
 80036a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a8:	d006      	beq.n	80036b8 <UART_SetConfig+0x1a8>
 80036aa:	e00b      	b.n	80036c4 <UART_SetConfig+0x1b4>
 80036ac:	2300      	movs	r3, #0
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e037      	b.n	8003722 <UART_SetConfig+0x212>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e034      	b.n	8003722 <UART_SetConfig+0x212>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e031      	b.n	8003722 <UART_SetConfig+0x212>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e02e      	b.n	8003722 <UART_SetConfig+0x212>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	e02b      	b.n	8003722 <UART_SetConfig+0x212>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a33      	ldr	r2, [pc, #204]	@ (800379c <UART_SetConfig+0x28c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d124      	bne.n	800371e <UART_SetConfig+0x20e>
 80036d4:	4b2d      	ldr	r3, [pc, #180]	@ (800378c <UART_SetConfig+0x27c>)
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80036dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036e0:	d011      	beq.n	8003706 <UART_SetConfig+0x1f6>
 80036e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036e6:	d817      	bhi.n	8003718 <UART_SetConfig+0x208>
 80036e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ec:	d011      	beq.n	8003712 <UART_SetConfig+0x202>
 80036ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036f2:	d811      	bhi.n	8003718 <UART_SetConfig+0x208>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <UART_SetConfig+0x1f0>
 80036f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036fc:	d006      	beq.n	800370c <UART_SetConfig+0x1fc>
 80036fe:	e00b      	b.n	8003718 <UART_SetConfig+0x208>
 8003700:	2300      	movs	r3, #0
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e00d      	b.n	8003722 <UART_SetConfig+0x212>
 8003706:	2302      	movs	r3, #2
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e00a      	b.n	8003722 <UART_SetConfig+0x212>
 800370c:	2304      	movs	r3, #4
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e007      	b.n	8003722 <UART_SetConfig+0x212>
 8003712:	2308      	movs	r3, #8
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e004      	b.n	8003722 <UART_SetConfig+0x212>
 8003718:	2310      	movs	r3, #16
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	e001      	b.n	8003722 <UART_SetConfig+0x212>
 800371e:	2310      	movs	r3, #16
 8003720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800372a:	d16b      	bne.n	8003804 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800372c:	7ffb      	ldrb	r3, [r7, #31]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d838      	bhi.n	80037a4 <UART_SetConfig+0x294>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <UART_SetConfig+0x228>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	080037a5 	.word	0x080037a5
 8003748:	08003773 	.word	0x08003773
 800374c:	080037a5 	.word	0x080037a5
 8003750:	080037a5 	.word	0x080037a5
 8003754:	080037a5 	.word	0x080037a5
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7ff f8b2 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003760:	61b8      	str	r0, [r7, #24]
        break;
 8003762:	e024      	b.n	80037ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff f8d0 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8003768:	61b8      	str	r0, [r7, #24]
        break;
 800376a:	e020      	b.n	80037ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <UART_SetConfig+0x290>)
 800376e:	61bb      	str	r3, [r7, #24]
        break;
 8003770:	e01d      	b.n	80037ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7ff f847 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8003776:	61b8      	str	r0, [r7, #24]
        break;
 8003778:	e019      	b.n	80037ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377e:	61bb      	str	r3, [r7, #24]
        break;
 8003780:	e015      	b.n	80037ae <UART_SetConfig+0x29e>
 8003782:	bf00      	nop
 8003784:	efff69f3 	.word	0xefff69f3
 8003788:	40013800 	.word	0x40013800
 800378c:	40021000 	.word	0x40021000
 8003790:	40004400 	.word	0x40004400
 8003794:	40004800 	.word	0x40004800
 8003798:	40004c00 	.word	0x40004c00
 800379c:	40005000 	.word	0x40005000
 80037a0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77bb      	strb	r3, [r7, #30]
        break;
 80037ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d073      	beq.n	800389c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	005a      	lsls	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	441a      	add	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d916      	bls.n	80037fe <UART_SetConfig+0x2ee>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d6:	d212      	bcs.n	80037fe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f023 030f 	bic.w	r3, r3, #15
 80037e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	89fb      	ldrh	r3, [r7, #14]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	89fa      	ldrh	r2, [r7, #14]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	e04e      	b.n	800389c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	77bb      	strb	r3, [r7, #30]
 8003802:	e04b      	b.n	800389c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003804:	7ffb      	ldrb	r3, [r7, #31]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d827      	bhi.n	800385a <UART_SetConfig+0x34a>
 800380a:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <UART_SetConfig+0x300>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003835 	.word	0x08003835
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003845 	.word	0x08003845
 800381c:	0800385b 	.word	0x0800385b
 8003820:	0800384b 	.word	0x0800384b
 8003824:	0800385b 	.word	0x0800385b
 8003828:	0800385b 	.word	0x0800385b
 800382c:	0800385b 	.word	0x0800385b
 8003830:	08003853 	.word	0x08003853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003834:	f7ff f846 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003838:	61b8      	str	r0, [r7, #24]
        break;
 800383a:	e013      	b.n	8003864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7ff f864 	bl	8002908 <HAL_RCC_GetPCLK2Freq>
 8003840:	61b8      	str	r0, [r7, #24]
        break;
 8003842:	e00f      	b.n	8003864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b1b      	ldr	r3, [pc, #108]	@ (80038b4 <UART_SetConfig+0x3a4>)
 8003846:	61bb      	str	r3, [r7, #24]
        break;
 8003848:	e00c      	b.n	8003864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7fe ffdb 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 800384e:	61b8      	str	r0, [r7, #24]
        break;
 8003850:	e008      	b.n	8003864 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e004      	b.n	8003864 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	77bb      	strb	r3, [r7, #30]
        break;
 8003862:	bf00      	nop
    }

    if (pclk != 0U)
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	085a      	lsrs	r2, r3, #1
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	441a      	add	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	fbb2 f3f3 	udiv	r3, r2, r3
 800387c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b0f      	cmp	r3, #15
 8003882:	d909      	bls.n	8003898 <UART_SetConfig+0x388>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388a:	d205      	bcs.n	8003898 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	e001      	b.n	800389c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01a      	beq.n	80039ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b6:	d10a      	bne.n	80039ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b098      	sub	sp, #96	@ 0x60
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a0c:	f7fd f9fc 	bl	8000e08 <HAL_GetTick>
 8003a10:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d12e      	bne.n	8003a7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f88c 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d021      	beq.n	8003a7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e6      	bne.n	8003a3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e062      	b.n	8003b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d149      	bne.n	8003b20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a94:	2200      	movs	r2, #0
 8003a96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f856 	bl	8003b4c <UART_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03c      	beq.n	8003b20 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e6      	bne.n	8003aa6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0301 	bic.w	r3, r3, #1
 8003aee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3308      	adds	r3, #8
 8003af6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	617b      	str	r3, [r7, #20]
   return(result);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e011      	b.n	8003b44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3758      	adds	r7, #88	@ 0x58
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	e04f      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d04b      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fd f94f 	bl	8000e08 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e04e      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d037      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b80      	cmp	r3, #128	@ 0x80
 8003b92:	d034      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b40      	cmp	r3, #64	@ 0x40
 8003b98:	d031      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d110      	bne.n	8003bca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2208      	movs	r2, #8
 8003bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f838 	bl	8003c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e029      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd8:	d111      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f81e 	bl	8003c26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e00f      	b.n	8003c1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d0a0      	beq.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b095      	sub	sp, #84	@ 0x54
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e6      	bne.n	8003c2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3308      	adds	r3, #8
 8003c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e5      	bne.n	8003c60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d118      	bne.n	8003cce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f023 0310 	bic.w	r3, r3, #16
 8003cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ce2:	bf00      	nop
 8003ce4:	3754      	adds	r7, #84	@ 0x54
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <memset>:
 8003cee:	4402      	add	r2, r0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d100      	bne.n	8003cf8 <memset+0xa>
 8003cf6:	4770      	bx	lr
 8003cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfc:	e7f9      	b.n	8003cf2 <memset+0x4>
	...

08003d00 <__libc_init_array>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	4d0d      	ldr	r5, [pc, #52]	@ (8003d38 <__libc_init_array+0x38>)
 8003d04:	4c0d      	ldr	r4, [pc, #52]	@ (8003d3c <__libc_init_array+0x3c>)
 8003d06:	1b64      	subs	r4, r4, r5
 8003d08:	10a4      	asrs	r4, r4, #2
 8003d0a:	2600      	movs	r6, #0
 8003d0c:	42a6      	cmp	r6, r4
 8003d0e:	d109      	bne.n	8003d24 <__libc_init_array+0x24>
 8003d10:	4d0b      	ldr	r5, [pc, #44]	@ (8003d40 <__libc_init_array+0x40>)
 8003d12:	4c0c      	ldr	r4, [pc, #48]	@ (8003d44 <__libc_init_array+0x44>)
 8003d14:	f000 f818 	bl	8003d48 <_init>
 8003d18:	1b64      	subs	r4, r4, r5
 8003d1a:	10a4      	asrs	r4, r4, #2
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	42a6      	cmp	r6, r4
 8003d20:	d105      	bne.n	8003d2e <__libc_init_array+0x2e>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d28:	4798      	blx	r3
 8003d2a:	3601      	adds	r6, #1
 8003d2c:	e7ee      	b.n	8003d0c <__libc_init_array+0xc>
 8003d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d32:	4798      	blx	r3
 8003d34:	3601      	adds	r6, #1
 8003d36:	e7f2      	b.n	8003d1e <__libc_init_array+0x1e>
 8003d38:	08003de0 	.word	0x08003de0
 8003d3c:	08003de0 	.word	0x08003de0
 8003d40:	08003de0 	.word	0x08003de0
 8003d44:	08003de4 	.word	0x08003de4

08003d48 <_init>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr

08003d54 <_fini>:
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d56:	bf00      	nop
 8003d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5a:	bc08      	pop	{r3}
 8003d5c:	469e      	mov	lr, r3
 8003d5e:	4770      	bx	lr
