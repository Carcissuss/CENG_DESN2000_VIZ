
lab03task4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008ca8  08008ca8  00009ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009134  08009134  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800913c  0800913c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800913c  0800913c  0000a13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009140  08009140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009144  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          00000248  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000041c  2000041c  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e824  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e01  00000000  00000000  00019a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0001b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a22  00000000  00000000  0001c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002181a  00000000  00000000  0001cf4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100f5  00000000  00000000  0003e764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc0f0  00000000  00000000  0004e859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011a949  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b6c  00000000  00000000  0011a98c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  0011f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c8c 	.word	0x08008c8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008c8c 	.word	0x08008c8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fd18 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f834 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f000 f8f6 	bl	8000f00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d14:	f000 f8c4 	bl	8000ea0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000d18:	f000 f88c 	bl	8000e34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	@ 0x32
 8000d1e:	f000 fd73 	bl	8001808 <HAL_Delay>
  LCD_putNibble(0b0011);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 fa56 	bl	80011d4 <LCD_putNibble>
  LCD_enable();
 8000d28:	f000 fa8e 	bl	8001248 <LCD_enable>
  LCD_putNibble(0b0011);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 fa51 	bl	80011d4 <LCD_putNibble>
  LCD_enable();
 8000d32:	f000 fa89 	bl	8001248 <LCD_enable>
  LCD_putNibble(0b0011);
 8000d36:	2003      	movs	r0, #3
 8000d38:	f000 fa4c 	bl	80011d4 <LCD_putNibble>
  LCD_enable();
 8000d3c:	f000 fa84 	bl	8001248 <LCD_enable>
  LCD_putNibble(0b0010);
 8000d40:	2002      	movs	r0, #2
 8000d42:	f000 fa47 	bl	80011d4 <LCD_putNibble>
  LCD_enable();
 8000d46:	f000 fa7f 	bl	8001248 <LCD_enable>
  LCD_command(0b00101100);
 8000d4a:	202c      	movs	r0, #44	@ 0x2c
 8000d4c:	f000 faa2 	bl	8001294 <LCD_command>
  LCD_command(0b00001000);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f000 fa9f 	bl	8001294 <LCD_command>
  LCD_command(0b00000001);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 fa9c 	bl	8001294 <LCD_command>
  LCD_command(0b00000110);
 8000d5c:	2006      	movs	r0, #6
 8000d5e:	f000 fa99 	bl	8001294 <LCD_command>
  LCD_command(0b00001111);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 fa96 	bl	8001294 <LCD_command>

  LCD_display("Press SW1/2/3 to Start");
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <main+0x70>)
 8000d6a:	f000 fae5 	bl	8001338 <LCD_display>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d6e:	bf00      	nop
 8000d70:	e7fd      	b.n	8000d6e <main+0x6a>
 8000d72:	bf00      	nop
 8000d74:	08008ca8 	.word	0x08008ca8

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0a6      	sub	sp, #152	@ 0x98
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d82:	2228      	movs	r2, #40	@ 0x28
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fba5 	bl	80054d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2258      	movs	r2, #88	@ 0x58
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 fb97 	bl	80054d6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da8:	2302      	movs	r3, #2
 8000daa:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2310      	movs	r3, #16
 8000db2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f81e 	bl	8001e18 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fac9 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2302      	movs	r3, #2
 8000dec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 f82c 	bl	8002e60 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e0e:	f000 fab3 	bl	8001378 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 fa31 	bl	8003284 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e28:	f000 faa6 	bl	8001378 <Error_Handler>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3798      	adds	r7, #152	@ 0x98
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e46:	4a15      	ldr	r2, [pc, #84]	@ (8000e9c <MX_TIM6_Init+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e4c:	2263      	movs	r2, #99	@ 0x63
 8000e4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b11      	ldr	r3, [pc, #68]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 719;
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e58:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000e5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e64:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e66:	f002 fc29 	bl	80036bc <HAL_TIM_Base_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e70:	f000 fa82 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <MX_TIM6_Init+0x64>)
 8000e82:	f002 feb7 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000e8c:	f000 fa74 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200001f0 	.word	0x200001f0
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <MX_USART2_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eac:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f002 ff30 	bl	8003d48 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 fa43 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000023c 	.word	0x2000023c
 8000efc:	40004400 	.word	0x40004400

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b67      	ldr	r3, [pc, #412]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a66      	ldr	r2, [pc, #408]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b64      	ldr	r3, [pc, #400]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	4b61      	ldr	r3, [pc, #388]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a60      	ldr	r2, [pc, #384]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b5e      	ldr	r3, [pc, #376]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b5b      	ldr	r3, [pc, #364]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a5a      	ldr	r2, [pc, #360]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b58      	ldr	r3, [pc, #352]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5e:	4b55      	ldr	r3, [pc, #340]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a54      	ldr	r2, [pc, #336]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b52      	ldr	r3, [pc, #328]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b4f      	ldr	r3, [pc, #316]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b4c      	ldr	r3, [pc, #304]	@ (80010b4 <MX_GPIO_Init+0x1b4>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f98:	f000 ff0e 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RW_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6174 	mov.w	r1, #3904	@ 0xf40
 8000fa2:	4845      	ldr	r0, [pc, #276]	@ (80010b8 <MX_GPIO_Init+0x1b8>)
 8000fa4:	f000 ff08 	bl	8001db8 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2104      	movs	r1, #4
 8000fac:	4843      	ldr	r0, [pc, #268]	@ (80010bc <MX_GPIO_Init+0x1bc>)
 8000fae:	f000 ff03 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	483b      	ldr	r0, [pc, #236]	@ (80010b8 <MX_GPIO_Init+0x1b8>)
 8000fca:	f000 fd53 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fd2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe6:	f000 fd45 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8000fea:	2310      	movs	r3, #16
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001002:	f000 fd37 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800100a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	4829      	ldr	r0, [pc, #164]	@ (80010c0 <MX_GPIO_Init+0x1c0>)
 800101c:	f000 fd2a 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LCD_RS_Pin;
 8001020:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103c:	f000 fd1a 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RW_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RW_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001040:	f44f 6374 	mov.w	r3, #3904	@ 0xf40
 8001044:	617b      	str	r3, [r7, #20]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4817      	ldr	r0, [pc, #92]	@ (80010b8 <MX_GPIO_Init+0x1b8>)
 800105a:	f000 fd0b 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin;
 800105e:	2304      	movs	r3, #4
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <MX_GPIO_Init+0x1bc>)
 8001076:	f000 fcfd 	bl	8001a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2007      	movs	r0, #7
 8001080:	f000 fcc1 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001084:	2007      	movs	r0, #7
 8001086:	f000 fcda 	bl	8001a3e <HAL_NVIC_EnableIRQ>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	200a      	movs	r0, #10
 8001090:	f000 fcb9 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001094:	200a      	movs	r0, #10
 8001096:	f000 fcd2 	bl	8001a3e <HAL_NVIC_EnableIRQ>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2006      	movs	r0, #6
 80010a0:	f000 fcb1 	bl	8001a06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010a4:	2006      	movs	r0, #6
 80010a6:	f000 fcca 	bl	8001a3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	@ 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000c00 	.word	0x48000c00
 80010c0:	48000400 	.word	0x48000400

080010c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b092      	sub	sp, #72	@ 0x48
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SW1_Pin) {
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d11e      	bne.n	8001112 <HAL_GPIO_EXTI_Callback+0x4e>
		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_SET) {
 80010d4:	2102      	movs	r1, #2
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010da:	f000 fe55 	bl	8001d88 <HAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d113      	bne.n	800110c <HAL_GPIO_EXTI_Callback+0x48>
			HAL_TIM_Base_Start_IT(&htim6);
 80010e4:	482f      	ldr	r0, [pc, #188]	@ (80011a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 80010e6:	f002 fb41 	bl	800376c <HAL_TIM_Base_Start_IT>
			char temp[20];
			sprintf(temp, "Time: %lu ms", counter);
 80010ea:	4b2f      	ldr	r3, [pc, #188]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010f2:	492e      	ldr	r1, [pc, #184]	@ (80011ac <HAL_GPIO_EXTI_Callback+0xe8>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 f989 	bl	800540c <siprintf>
			LCD_command(0b00000001);	// clear display;
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 f8ca 	bl	8001294 <LCD_command>
			LCD_display(temp);
 8001100:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001104:	4618      	mov	r0, r3
 8001106:	f000 f917 	bl	8001338 <LCD_display>
 800110a:	e002      	b.n	8001112 <HAL_GPIO_EXTI_Callback+0x4e>
		} else {
			counter = 0;
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == SW2_Pin) {
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	2b10      	cmp	r3, #16
 8001116:	d11e      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x92>
		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW2_Pin) == GPIO_PIN_SET) {
 8001118:	2110      	movs	r1, #16
 800111a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111e:	f000 fe33 	bl	8001d88 <HAL_GPIO_ReadPin>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d113      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x8c>
			HAL_TIM_Base_Start_IT(&htim6);
 8001128:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800112a:	f002 fb1f 	bl	800376c <HAL_TIM_Base_Start_IT>
			char temp[20];
			sprintf(temp, "Time: %lu ms", counter);
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	491d      	ldr	r1, [pc, #116]	@ (80011ac <HAL_GPIO_EXTI_Callback+0xe8>)
 8001138:	4618      	mov	r0, r3
 800113a:	f004 f967 	bl	800540c <siprintf>
			LCD_command(0b00000001);	// clear display;
 800113e:	2001      	movs	r0, #1
 8001140:	f000 f8a8 	bl	8001294 <LCD_command>
			LCD_display(temp);
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f8f5 	bl	8001338 <LCD_display>
 800114e:	e002      	b.n	8001156 <HAL_GPIO_EXTI_Callback+0x92>
		} else {
			counter = 0;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
		}
	}
	if (GPIO_Pin == SW3_Pin) {
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d11e      	bne.n	800119a <HAL_GPIO_EXTI_Callback+0xd6>
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW3_Pin) == GPIO_PIN_SET) {
 800115c:	2101      	movs	r1, #1
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f000 fe11 	bl	8001d88 <HAL_GPIO_ReadPin>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d113      	bne.n	8001194 <HAL_GPIO_EXTI_Callback+0xd0>
				HAL_TIM_Base_Start_IT(&htim6);
 800116c:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <HAL_GPIO_EXTI_Callback+0xe0>)
 800116e:	f002 fafd 	bl	800376c <HAL_TIM_Base_Start_IT>
				char temp[20];
				sprintf(temp, "Time: %lu ms", counter);
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	490c      	ldr	r1, [pc, #48]	@ (80011ac <HAL_GPIO_EXTI_Callback+0xe8>)
 800117c:	4618      	mov	r0, r3
 800117e:	f004 f945 	bl	800540c <siprintf>
				LCD_command(0b00000001);	// clear display;
 8001182:	2001      	movs	r0, #1
 8001184:	f000 f886 	bl	8001294 <LCD_command>
				LCD_display(temp);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f8d3 	bl	8001338 <LCD_display>
			} else {
				counter = 0;
			}
		}
}
 8001192:	e002      	b.n	800119a <HAL_GPIO_EXTI_Callback+0xd6>
				counter = 0;
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	3748      	adds	r7, #72	@ 0x48
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200001f0 	.word	0x200001f0
 80011a8:	200002c4 	.word	0x200002c4
 80011ac:	08008cc0 	.word	0x08008cc0

080011b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    counter++;
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011c0:	6013      	str	r3, [r2, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200002c4 	.word	0x200002c4

080011d4 <LCD_putNibble>:

void LCD_putNibble(uint8_t data) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, data & 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ec:	4815      	ldr	r0, [pc, #84]	@ (8001244 <LCD_putNibble+0x70>)
 80011ee:	f000 fde3 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data >> 1) & 1);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001204:	480f      	ldr	r0, [pc, #60]	@ (8001244 <LCD_putNibble+0x70>)
 8001206:	f000 fdd7 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data >> 2) & 1);
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <LCD_putNibble+0x70>)
 800121e:	f000 fdcb 	bl	8001db8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data >> 3) & 1);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001234:	4803      	ldr	r0, [pc, #12]	@ (8001244 <LCD_putNibble+0x70>)
 8001236:	f000 fdbf 	bl	8001db8 <HAL_GPIO_WritePin>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	48000800 	.word	0x48000800

08001248 <LCD_enable>:

void LCD_enable() {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	2104      	movs	r1, #4
 8001252:	480f      	ldr	r0, [pc, #60]	@ (8001290 <LCD_enable+0x48>)
 8001254:	f000 fdb0 	bl	8001db8 <HAL_GPIO_WritePin>
	int delayCounter = 10000;
 8001258:	f242 7310 	movw	r3, #10000	@ 0x2710
 800125c:	607b      	str	r3, [r7, #4]
	while(delayCounter--);
 800125e:	bf00      	nop
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1fa      	bne.n	8001260 <LCD_enable+0x18>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2104      	movs	r1, #4
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <LCD_enable+0x48>)
 8001270:	f000 fda2 	bl	8001db8 <HAL_GPIO_WritePin>
	delayCounter = 10000;
 8001274:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001278:	607b      	str	r3, [r7, #4]
	while(delayCounter--);
 800127a:	bf00      	nop
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	1e5a      	subs	r2, r3, #1
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1fa      	bne.n	800127c <LCD_enable+0x34>
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	48000c00 	.word	0x48000c00

08001294 <LCD_command>:

void LCD_command(uint8_t command) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a8:	f000 fd86 	bl	8001db8 <HAL_GPIO_WritePin>
	LCD_putNibble(command >> 4);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff8e 	bl	80011d4 <LCD_putNibble>
	LCD_enable();
 80012b8:	f7ff ffc6 	bl	8001248 <LCD_enable>
	LCD_putNibble(command & 0x0f);
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff85 	bl	80011d4 <LCD_putNibble>
	LCD_enable();
 80012ca:	f7ff ffbd 	bl	8001248 <LCD_enable>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <LCD_data>:

void LCD_data(uint8_t data) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ea:	f000 fd65 	bl	8001db8 <HAL_GPIO_WritePin>
	int delayCounter = 10000;
 80012ee:	f242 7310 	movw	r3, #10000	@ 0x2710
 80012f2:	60fb      	str	r3, [r7, #12]
	while(delayCounter--);
 80012f4:	bf00      	nop
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	60fa      	str	r2, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1fa      	bne.n	80012f6 <LCD_data+0x20>
	LCD_putNibble(data >> 4);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff64 	bl	80011d4 <LCD_putNibble>
	LCD_enable();
 800130c:	f7ff ff9c 	bl	8001248 <LCD_enable>
	LCD_putNibble(data & 0x0f);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5b 	bl	80011d4 <LCD_putNibble>
	LCD_enable();
 800131e:	f7ff ff93 	bl	8001248 <LCD_enable>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132c:	f000 fd44 	bl	8001db8 <HAL_GPIO_WritePin>
}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <LCD_display>:

void LCD_display(const char *str) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

	int c = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
	while(*str) {
 8001344:	e00f      	b.n	8001366 <LCD_display+0x2e>
		if (c == 16) {
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b10      	cmp	r3, #16
 800134a:	d102      	bne.n	8001352 <LCD_display+0x1a>
			LCD_command(0b11000000);
 800134c:	20c0      	movs	r0, #192	@ 0xc0
 800134e:	f7ff ffa1 	bl	8001294 <LCD_command>
		}
		LCD_data(*str++);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ffbb 	bl	80012d6 <LCD_data>
		c++;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3301      	adds	r3, #1
 8001364:	60fb      	str	r3, [r7, #12]
	while(*str) {
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1eb      	bne.n	8001346 <LCD_display+0xe>
	}

}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <HAL_MspInit+0x44>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a0e      	ldr	r2, [pc, #56]	@ (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <HAL_MspInit+0x44>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <HAL_MspInit+0x44>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a08      	ldr	r2, [pc, #32]	@ (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_MspInit+0x44>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f000 fb18 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2036      	movs	r0, #54	@ 0x36
 80013fc:	f000 fb03 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001400:	2036      	movs	r0, #54	@ 0x36
 8001402:	f000 fb1c 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40001000 	.word	0x40001000
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	@ (8001494 <HAL_UART_MspInit+0x7c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d128      	bne.n	800148c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_UART_MspInit+0x80>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <HAL_UART_MspInit+0x80>)
 8001440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_UART_MspInit+0x80>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_UART_MspInit+0x80>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <HAL_UART_MspInit+0x80>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <HAL_UART_MspInit+0x80>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800146a:	230c      	movs	r3, #12
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147a:	2307      	movs	r3, #7
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001488:	f000 faf4 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40004400 	.word	0x40004400
 8001498:	40021000 	.word	0x40021000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <MemManage_Handler+0x4>

080014b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f2:	f000 f969 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}

080014fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80014fe:	2002      	movs	r0, #2
 8001500:	f000 fc72 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 800150c:	2001      	movs	r0, #1
 800150e:	f000 fc6b 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}

08001516 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 800151a:	2010      	movs	r0, #16
 800151c:	f000 fc64 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <TIM6_DAC_IRQHandler>:
/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <TIM6_DAC_IRQHandler+0x10>)
 800152a:	f002 f98f 	bl	800384c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200001f0 	.word	0x200001f0

08001538 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return 1;
 800153c:	2301      	movs	r3, #1
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_kill>:

int _kill(int pid, int sig)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001552:	f004 f813 	bl	800557c <__errno>
 8001556:	4603      	mov	r3, r0
 8001558:	2216      	movs	r2, #22
 800155a:	601a      	str	r2, [r3, #0]
  return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <_exit>:

void _exit (int status)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ffe7 	bl	8001548 <_kill>
  while (1) {}    /* Make sure we hang here */
 800157a:	bf00      	nop
 800157c:	e7fd      	b.n	800157a <_exit+0x12>

0800157e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e00a      	b.n	80015a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001590:	f3af 8000 	nop.w
 8001594:	4601      	mov	r1, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	60ba      	str	r2, [r7, #8]
 800159c:	b2ca      	uxtb	r2, r1
 800159e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	dbf0      	blt.n	8001590 <_read+0x12>
  }

  return len;
 80015ae:	687b      	ldr	r3, [r7, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e009      	b.n	80015de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	60ba      	str	r2, [r7, #8]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbf1      	blt.n	80015ca <_write+0x12>
  }
  return len;
 80015e6:	687b      	ldr	r3, [r7, #4]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_close>:

int _close(int file)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001618:	605a      	str	r2, [r3, #4]
  return 0;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_isatty>:

int _isatty(int file)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001630:	2301      	movs	r3, #1
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	@ (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f003 ff78 	bl	800557c <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	@ (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	@ (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20010000 	.word	0x20010000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	200002c8 	.word	0x200002c8
 80016c0:	20000420 	.word	0x20000420

080016c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <SystemInit+0x20>)
 80016ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <SystemInit+0x20>)
 80016d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001720 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ec:	f7ff ffea 	bl	80016c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	@ (8001724 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <LoopForever+0xe>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	@ (8001734 <LoopForever+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f003 ff37 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171a:	f7ff faf3 	bl	8000d04 <main>

0800171e <LoopForever>:

LoopForever:
    b LoopForever
 800171e:	e7fe      	b.n	800171e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001720:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800172c:	08009144 	.word	0x08009144
  ldr r2, =_sbss
 8001730:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001734:	2000041c 	.word	0x2000041c

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <HAL_Init+0x28>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_Init+0x28>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800174c:	2003      	movs	r0, #3
 800174e:	f000 f94f 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f808 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001758:	f7ff fe14 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f967 	bl	8001a5a <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f92f 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	@ (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000008 	.word	0x20000008
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	200002cc 	.word	0x200002cc

080017f0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;  
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200002cc 	.word	0x200002cc

08001808 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	@ (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	@ 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e160      	b.n	8001d46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8152 	beq.w	8001d40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x40>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d130      	bne.n	8001b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aea:	2201      	movs	r2, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	f003 0201 	and.w	r2, r3, #1
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d017      	beq.n	8001b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d123      	bne.n	8001ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	6939      	ldr	r1, [r7, #16]
 8001ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 0203 	and.w	r2, r3, #3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80ac 	beq.w	8001d40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a5d      	ldr	r2, [pc, #372]	@ (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c00:	4a59      	ldr	r2, [pc, #356]	@ (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c2a:	d025      	beq.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d6c <HAL_GPIO_Init+0x2f8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01f      	beq.n	8001c74 <HAL_GPIO_Init+0x200>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4e      	ldr	r2, [pc, #312]	@ (8001d70 <HAL_GPIO_Init+0x2fc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d019      	beq.n	8001c70 <HAL_GPIO_Init+0x1fc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d74 <HAL_GPIO_Init+0x300>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_GPIO_Init+0x1f8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4c      	ldr	r2, [pc, #304]	@ (8001d78 <HAL_GPIO_Init+0x304>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1f4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d7c <HAL_GPIO_Init+0x308>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1f0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4a      	ldr	r2, [pc, #296]	@ (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1ec>
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	e00c      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c60:	2307      	movs	r3, #7
 8001c62:	e00a      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e008      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8a:	4937      	ldr	r1, [pc, #220]	@ (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c98:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cbc:	4a31      	ldr	r2, [pc, #196]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ce6:	4a27      	ldr	r2, [pc, #156]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d10:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <HAL_GPIO_Init+0x310>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f ae97 	bne.w	8001a84 <HAL_GPIO_Init+0x10>
  }
}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000c00 	.word	0x48000c00
 8001d78:	48001000 	.word	0x48001000
 8001d7c:	48001400 	.word	0x48001400
 8001d80:	48001800 	.word	0x48001800
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dfe:	4a05      	ldr	r2, [pc, #20]	@ (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff f95c 	bl	80010c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40010400 	.word	0x40010400

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f001 b80a 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8161 	beq.w	8002116 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e54:	4bae      	ldr	r3, [pc, #696]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d00c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e60:	4bab      	ldr	r3, [pc, #684]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d157      	bne.n	8001f1c <HAL_RCC_OscConfig+0x104>
 8001e6c:	4ba8      	ldr	r3, [pc, #672]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e78:	d150      	bne.n	8001f1c <HAL_RCC_OscConfig+0x104>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e7e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e9a:	d802      	bhi.n	8001ea2 <HAL_RCC_OscConfig+0x8a>
 8001e9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0xb6>
 8001ea2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001eae:	fa93 f3a3 	rbit	r3, r3
 8001eb2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eba:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ebe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001eca:	4b91      	ldr	r3, [pc, #580]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001ed6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001eda:	fa92 f2a2 	rbit	r2, r2
 8001ede:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001ee2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8108 	beq.w	8002114 <HAL_RCC_OscConfig+0x2fc>
 8001f04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f040 80ff 	bne.w	8002114 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f000 bf9b 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2c:	d106      	bne.n	8001f3c <HAL_RCC_OscConfig+0x124>
 8001f2e:	4b78      	ldr	r3, [pc, #480]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a77      	ldr	r2, [pc, #476]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e036      	b.n	8001faa <HAL_RCC_OscConfig+0x192>
 8001f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x14e>
 8001f4c:	4b70      	ldr	r3, [pc, #448]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a6f      	ldr	r2, [pc, #444]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b6d      	ldr	r3, [pc, #436]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a6c      	ldr	r2, [pc, #432]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e021      	b.n	8001faa <HAL_RCC_OscConfig+0x192>
 8001f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f6a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x17a>
 8001f78:	4b65      	ldr	r3, [pc, #404]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a64      	ldr	r2, [pc, #400]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b62      	ldr	r3, [pc, #392]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a61      	ldr	r2, [pc, #388]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e00b      	b.n	8001faa <HAL_RCC_OscConfig+0x192>
 8001f92:	4b5f      	ldr	r3, [pc, #380]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a5e      	ldr	r2, [pc, #376]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001fa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d054      	beq.n	8002064 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fc19 	bl	80017f0 <HAL_GetTick>
 8001fbe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fc14 	bl	80017f0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	@ 0x64
 8001fd2:	d902      	bls.n	8001fda <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	f000 bf3c 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
 8001fda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fde:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001fee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ffa:	d802      	bhi.n	8002002 <HAL_RCC_OscConfig+0x1ea>
 8001ffc:	4b44      	ldr	r3, [pc, #272]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x216>
 8002002:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002006:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800201a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800201e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800202a:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002032:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002036:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800203a:	fa92 f2a2 	rbit	r2, r2
 800203e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002042:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002046:	fab2 f282 	clz	r2, r2
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	f042 0220 	orr.w	r2, r2, #32
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	f002 021f 	and.w	r2, r2, #31
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f202 	lsl.w	r2, r1, r2
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0b0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x1ac>
 8002062:	e058      	b.n	8002116 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fbc4 	bl	80017f0 <HAL_GetTick>
 8002068:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206e:	f7ff fbbf 	bl	80017f0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	@ 0x64
 800207c:	d902      	bls.n	8002084 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	f000 bee7 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002084:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002088:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002098:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80020a4:	d802      	bhi.n	80020ac <HAL_RCC_OscConfig+0x294>
 80020a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e015      	b.n	80020d8 <HAL_RCC_OscConfig+0x2c0>
 80020ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80020c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_RCC_OscConfig+0x2f8>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020dc:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80020e0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80020e4:	fa92 f2a2 	rbit	r2, r2
 80020e8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80020ec:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80020f0:	fab2 f282 	clz	r2, r2
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	f042 0220 	orr.w	r2, r2, #32
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	f002 021f 	and.w	r2, r2, #31
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1b0      	bne.n	800206e <HAL_RCC_OscConfig+0x256>
 800210c:	e003      	b.n	8002116 <HAL_RCC_OscConfig+0x2fe>
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002116:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 816d 	beq.w	8002406 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800212c:	4bcd      	ldr	r3, [pc, #820]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002138:	4bca      	ldr	r3, [pc, #808]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d16e      	bne.n	8002222 <HAL_RCC_OscConfig+0x40a>
 8002144:	4bc7      	ldr	r3, [pc, #796]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002150:	d167      	bne.n	8002222 <HAL_RCC_OscConfig+0x40a>
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002164:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002168:	fab3 f383 	clz	r3, r3
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002170:	d802      	bhi.n	8002178 <HAL_RCC_OscConfig+0x360>
 8002172:	4bbc      	ldr	r3, [pc, #752]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e013      	b.n	80021a0 <HAL_RCC_OscConfig+0x388>
 8002178:	2302      	movs	r3, #2
 800217a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002190:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800219c:	4bb1      	ldr	r3, [pc, #708]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	2202      	movs	r2, #2
 80021a2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80021a6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80021aa:	fa92 f2a2 	rbit	r2, r2
 80021ae:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80021b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 021f 	and.w	r2, r2, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCC_OscConfig+0x3d0>
 80021d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021d6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f000 be35 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b9e      	ldr	r3, [pc, #632]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	21f8      	movs	r1, #248	@ 0xf8
 80021fe:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002206:	fa91 f1a1 	rbit	r1, r1
 800220a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800220e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002212:	fab1 f181 	clz	r1, r1
 8002216:	b2c9      	uxtb	r1, r1
 8002218:	408b      	lsls	r3, r1
 800221a:	4992      	ldr	r1, [pc, #584]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002220:	e0f1      	b.n	8002406 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8083 	beq.w	800233a <HAL_RCC_OscConfig+0x522>
 8002234:	2301      	movs	r3, #1
 8002236:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002246:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224a:	fab3 f383 	clz	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002254:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	461a      	mov	r2, r3
 800225c:	2301      	movs	r3, #1
 800225e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fac6 	bl	80017f0 <HAL_GetTick>
 8002264:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff fac1 	bl	80017f0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d902      	bls.n	8002280 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	f000 bde9 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002292:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b3f      	cmp	r3, #63	@ 0x3f
 800229e:	d802      	bhi.n	80022a6 <HAL_RCC_OscConfig+0x48e>
 80022a0:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x4b6>
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022be:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80022ca:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	2202      	movs	r2, #2
 80022d0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80022d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80022d8:	fa92 f2a2 	rbit	r2, r2
 80022dc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80022e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0220 	orr.w	r2, r2, #32
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 021f 	and.w	r2, r2, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0b4      	beq.n	800226a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002300:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	21f8      	movs	r1, #248	@ 0xf8
 8002316:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800231e:	fa91 f1a1 	rbit	r1, r1
 8002322:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002326:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800232a:	fab1 f181 	clz	r1, r1
 800232e:	b2c9      	uxtb	r1, r1
 8002330:	408b      	lsls	r3, r1
 8002332:	494c      	ldr	r1, [pc, #304]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e065      	b.n	8002406 <HAL_RCC_OscConfig+0x5ee>
 800233a:	2301      	movs	r3, #1
 800233c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002340:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800234c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800235a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	461a      	mov	r2, r3
 8002362:	2300      	movs	r3, #0
 8002364:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fa43 	bl	80017f0 <HAL_GetTick>
 800236a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e00a      	b.n	8002386 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002370:	f7ff fa3e 	bl	80017f0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d902      	bls.n	8002386 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	f000 bd66 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002398:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80023a4:	d802      	bhi.n	80023ac <HAL_RCC_OscConfig+0x594>
 80023a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	e013      	b.n	80023d4 <HAL_RCC_OscConfig+0x5bc>
 80023ac:	2302      	movs	r3, #2
 80023ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023d0:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_RCC_OscConfig+0x64c>)
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	2202      	movs	r2, #2
 80023d6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80023da:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80023de:	fa92 f2a2 	rbit	r2, r2
 80023e2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80023e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80023ea:	fab2 f282 	clz	r2, r2
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f002 021f 	and.w	r2, r2, #31
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1b4      	bne.n	8002370 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8119 	beq.w	800264e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002420:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8082 	beq.w	8002532 <HAL_RCC_OscConfig+0x71a>
 800242e:	2301      	movs	r3, #1
 8002430:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002440:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002444:	fab3 f383 	clz	r3, r3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <HAL_RCC_OscConfig+0x650>)
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	461a      	mov	r2, r3
 8002454:	2301      	movs	r3, #1
 8002456:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff f9ca 	bl	80017f0 <HAL_GetTick>
 800245c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002460:	e00f      	b.n	8002482 <HAL_RCC_OscConfig+0x66a>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff f9c0 	bl	80017f0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d902      	bls.n	8002482 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	f000 bce8 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024a2:	2202      	movs	r2, #2
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024c6:	2202      	movs	r2, #2
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f2a3 	rbit	r2, r3
 80024d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4bb0      	ldr	r3, [pc, #704]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 80024e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024ee:	2102      	movs	r1, #2
 80024f0:	6019      	str	r1, [r3, #0]
 80024f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f1a3 	rbit	r1, r3
 8002500:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002504:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002508:	6019      	str	r1, [r3, #0]
  return result;
 800250a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d09d      	beq.n	800246c <HAL_RCC_OscConfig+0x654>
 8002530:	e08d      	b.n	800264e <HAL_RCC_OscConfig+0x836>
 8002532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002536:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002542:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002554:	601a      	str	r2, [r3, #0]
  return result;
 8002556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800255e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	4b8f      	ldr	r3, [pc, #572]	@ (80027a8 <HAL_RCC_OscConfig+0x990>)
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	461a      	mov	r2, r3
 8002570:	2300      	movs	r3, #0
 8002572:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002574:	f7ff f93c 	bl	80017f0 <HAL_GetTick>
 8002578:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257e:	f7ff f937 	bl	80017f0 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d902      	bls.n	8002594 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	f000 bc5f 	b.w	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002598:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800259c:	2202      	movs	r2, #2
 800259e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025c0:	2202      	movs	r2, #2
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025e4:	2202      	movs	r2, #2
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	4b68      	ldr	r3, [pc, #416]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002604:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002608:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800260c:	2102      	movs	r1, #2
 800260e:	6019      	str	r1, [r3, #0]
 8002610:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002614:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	fa93 f1a3 	rbit	r1, r3
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002626:	6019      	str	r1, [r3, #0]
  return result;
 8002628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d197      	bne.n	800257e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002652:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 819c 	beq.w	800299c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b4e      	ldr	r3, [pc, #312]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a4a      	ldr	r2, [pc, #296]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b48      	ldr	r3, [pc, #288]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800268a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800268e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002698:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800269c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a4:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_RCC_OscConfig+0x994>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11a      	bne.n	80026e6 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b0:	4b3e      	ldr	r3, [pc, #248]	@ (80027ac <HAL_RCC_OscConfig+0x994>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3d      	ldr	r2, [pc, #244]	@ (80027ac <HAL_RCC_OscConfig+0x994>)
 80026b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026bc:	f7ff f898 	bl	80017f0 <HAL_GetTick>
 80026c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e009      	b.n	80026da <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7ff f893 	bl	80017f0 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e3bb      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b34      	ldr	r3, [pc, #208]	@ (80027ac <HAL_RCC_OscConfig+0x994>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0ef      	beq.n	80026c6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_RCC_OscConfig+0x8ec>
 80026f6:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a2a      	ldr	r2, [pc, #168]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6213      	str	r3, [r2, #32]
 8002702:	e035      	b.n	8002770 <HAL_RCC_OscConfig+0x958>
 8002704:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002708:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <HAL_RCC_OscConfig+0x916>
 8002714:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a22      	ldr	r2, [pc, #136]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e020      	b.n	8002770 <HAL_RCC_OscConfig+0x958>
 800272e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002732:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b05      	cmp	r3, #5
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x940>
 800273e:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	e00b      	b.n	8002770 <HAL_RCC_OscConfig+0x958>
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a11      	ldr	r2, [pc, #68]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800275e:	f023 0301 	bic.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4a0e      	ldr	r2, [pc, #56]	@ (80027a4 <HAL_RCC_OscConfig+0x98c>)
 800276a:	f023 0304 	bic.w	r3, r3, #4
 800276e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002774:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8085 	beq.w	800288c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7ff f835 	bl	80017f0 <HAL_GetTick>
 8002786:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	e011      	b.n	80027b0 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800278c:	f7ff f830 	bl	80017f0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d907      	bls.n	80027b0 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e356      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
 80027a4:	40021000 	.word	0x40021000
 80027a8:	10908120 	.word	0x10908120
 80027ac:	40007000 	.word	0x40007000
 80027b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027b8:	2202      	movs	r2, #2
 80027ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fa93 f2a3 	rbit	r2, r3
 80027ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ce:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027dc:	2202      	movs	r2, #2
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	fa93 f2a3 	rbit	r2, r3
 80027ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027f6:	601a      	str	r2, [r3, #0]
  return result;
 80027f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027fc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002800:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <HAL_RCC_OscConfig+0xa00>
 8002812:	4b98      	ldr	r3, [pc, #608]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	e013      	b.n	8002840 <HAL_RCC_OscConfig+0xa28>
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002836:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002844:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002848:	2102      	movs	r1, #2
 800284a:	6011      	str	r1, [r2, #0]
 800284c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002850:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	fa92 f1a2 	rbit	r1, r2
 800285a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800285e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002862:	6011      	str	r1, [r2, #0]
  return result;
 8002864:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002868:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	fab2 f282 	clz	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f002 021f 	and.w	r2, r2, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d080      	beq.n	800278c <HAL_RCC_OscConfig+0x974>
 800288a:	e07d      	b.n	8002988 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288c:	f7fe ffb0 	bl	80017f0 <HAL_GetTick>
 8002890:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe ffab 	bl	80017f0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e2d1      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
 80028ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028b6:	2202      	movs	r2, #2
 80028b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028be:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	fa93 f2a3 	rbit	r2, r3
 80028c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028cc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028da:	2202      	movs	r2, #2
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028f4:	601a      	str	r2, [r3, #0]
  return result;
 80028f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <HAL_RCC_OscConfig+0xafe>
 8002910:	4b58      	ldr	r3, [pc, #352]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	e013      	b.n	800293e <HAL_RCC_OscConfig+0xb26>
 8002916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800291e:	2202      	movs	r2, #2
 8002920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002926:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002934:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002942:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002946:	2102      	movs	r1, #2
 8002948:	6011      	str	r1, [r2, #0]
 800294a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800294e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	fa92 f1a2 	rbit	r1, r2
 8002958:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800295c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002960:	6011      	str	r1, [r2, #0]
  return result;
 8002962:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002966:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	fab2 f282 	clz	r2, r2
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f002 021f 	and.w	r2, r2, #31
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d186      	bne.n	8002896 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002988:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4a37      	ldr	r2, [pc, #220]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 8002996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800299a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8251 	beq.w	8002e50 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	f000 820f 	beq.w	8002dda <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	f040 8165 	bne.w	8002c98 <HAL_RCC_OscConfig+0xe80>
 80029ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	fa93 f2a3 	rbit	r2, r3
 80029ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029f2:	601a      	str	r2, [r3, #0]
  return result;
 80029f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029f8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe feec 	bl	80017f0 <HAL_GetTick>
 8002a18:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	e009      	b.n	8002a32 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1e:	f7fe fee7 	bl	80017f0 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e20f      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a44:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	fa93 f2a3 	rbit	r2, r3
 8002a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a52:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a56:	601a      	str	r2, [r3, #0]
  return result;
 8002a58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a5c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a6a:	d805      	bhi.n	8002a78 <HAL_RCC_OscConfig+0xc60>
 8002a6c:	4b01      	ldr	r3, [pc, #4]	@ (8002a74 <HAL_RCC_OscConfig+0xc5c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	e02a      	b.n	8002ac8 <HAL_RCC_OscConfig+0xcb0>
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000
 8002a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a7c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a8a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	fa93 f2a3 	rbit	r2, r3
 8002a94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a98:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002aa6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	fa93 f2a3 	rbit	r2, r3
 8002aba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002abe:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	4bca      	ldr	r3, [pc, #808]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002acc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ad0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ad4:	6011      	str	r1, [r2, #0]
 8002ad6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ada:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	fa92 f1a2 	rbit	r1, r2
 8002ae4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ae8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002aec:	6011      	str	r1, [r2, #0]
  return result;
 8002aee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002af2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	fab2 f282 	clz	r2, r2
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f042 0220 	orr.w	r2, r2, #32
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	f002 021f 	and.w	r2, r2, #31
 8002b08:	2101      	movs	r1, #1
 8002b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d184      	bne.n	8002a1e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b14:	4bb6      	ldr	r3, [pc, #728]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	f023 020f 	bic.w	r2, r3, #15
 8002b1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	49b1      	ldr	r1, [pc, #708]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002b2e:	4bb0      	ldr	r3, [pc, #704]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a19      	ldr	r1, [r3, #32]
 8002b42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	49a7      	ldr	r1, [pc, #668]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
 8002b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b68:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b76:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b7a:	601a      	str	r2, [r3, #0]
  return result;
 8002b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b84:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	2301      	movs	r3, #1
 8002b9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fe28 	bl	80017f0 <HAL_GetTick>
 8002ba0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fe fe23 	bl	80017f0 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e14b      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bbe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bcc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bda:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bde:	601a      	str	r2, [r3, #0]
  return result;
 8002be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bf2:	d802      	bhi.n	8002bfa <HAL_RCC_OscConfig+0xde2>
 8002bf4:	4b7e      	ldr	r3, [pc, #504]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	e027      	b.n	8002c4a <HAL_RCC_OscConfig+0xe32>
 8002bfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bfe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c1a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c24:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c32:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c40:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4b6a      	ldr	r3, [pc, #424]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c4e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c56:	6011      	str	r1, [r2, #0]
 8002c58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c5c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	fa92 f1a2 	rbit	r1, r2
 8002c66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c6a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002c6e:	6011      	str	r1, [r2, #0]
  return result;
 8002c70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c74:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d087      	beq.n	8002ba6 <HAL_RCC_OscConfig+0xd8e>
 8002c96:	e0db      	b.n	8002e50 <HAL_RCC_OscConfig+0x1038>
 8002c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ca0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002caa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	fa93 f2a3 	rbit	r2, r3
 8002cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cbc:	601a      	str	r2, [r3, #0]
  return result;
 8002cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc8:	fab3 f383 	clz	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cd2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2300      	movs	r3, #0
 8002cdc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe fd87 	bl	80017f0 <HAL_GetTick>
 8002ce2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce6:	e009      	b.n	8002cfc <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fe fd82 	bl	80017f0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0aa      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002cfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d00:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d20:	601a      	str	r2, [r3, #0]
  return result;
 8002d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d26:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d34:	d802      	bhi.n	8002d3c <HAL_RCC_OscConfig+0xf24>
 8002d36:	4b2e      	ldr	r3, [pc, #184]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e027      	b.n	8002d8c <HAL_RCC_OscConfig+0xf74>
 8002d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d40:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fa93 f2a3 	rbit	r2, r3
 8002d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d66:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d74:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d82:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_RCC_OscConfig+0xfd8>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d90:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002d94:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002d98:	6011      	str	r1, [r2, #0]
 8002d9a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d9e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	fa92 f1a2 	rbit	r1, r2
 8002da8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dac:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002db0:	6011      	str	r1, [r2, #0]
  return result;
 8002db2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002db6:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	fab2 f282 	clz	r2, r2
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f042 0220 	orr.w	r2, r2, #32
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f002 021f 	and.w	r2, r2, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d187      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xed0>
 8002dd8:	e03a      	b.n	8002e50 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d104      	bne.n	8002df4 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e031      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002df4:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_OscConfig+0x1044>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_RCC_OscConfig+0x1044>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e08:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d117      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e20:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10b      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b09e      	sub	sp, #120	@ 0x78
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e154      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e78:	4b89      	ldr	r3, [pc, #548]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d910      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b86      	ldr	r3, [pc, #536]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 0207 	bic.w	r2, r3, #7
 8002e8e:	4984      	ldr	r1, [pc, #528]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b82      	ldr	r3, [pc, #520]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e13c      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b7b      	ldr	r3, [pc, #492]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4978      	ldr	r1, [pc, #480]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80cd 	beq.w	800306e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d137      	bne.n	8002f4c <HAL_RCC_ClockConfig+0xec>
 8002edc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ee0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ef4:	d802      	bhi.n	8002efc <HAL_RCC_ClockConfig+0x9c>
 8002ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	e00f      	b.n	8002f1c <HAL_RCC_ClockConfig+0xbc>
 8002efc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f0a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f18:	4b62      	ldr	r3, [pc, #392]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f24:	fa92 f2a2 	rbit	r2, r2
 8002f28:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f2c:	fab2 f282 	clz	r2, r2
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	f042 0220 	orr.w	r2, r2, #32
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	f002 021f 	and.w	r2, r2, #31
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d171      	bne.n	800302c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0ea      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d137      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x164>
 8002f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f6c:	d802      	bhi.n	8002f74 <HAL_RCC_ClockConfig+0x114>
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	e00f      	b.n	8002f94 <HAL_RCC_ClockConfig+0x134>
 8002f74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f86:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f90:	4b44      	ldr	r3, [pc, #272]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f98:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002f9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f9c:	fa92 f2a2 	rbit	r2, r2
 8002fa0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002fa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa4:	fab2 f282 	clz	r2, r2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f042 0220 	orr.w	r2, r2, #32
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f002 021f 	and.w	r2, r2, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d135      	bne.n	800302c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0ae      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fda:	d802      	bhi.n	8002fe2 <HAL_RCC_ClockConfig+0x182>
 8002fdc:	4b31      	ldr	r3, [pc, #196]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	e00d      	b.n	8002ffe <HAL_RCC_ClockConfig+0x19e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fee:	2302      	movs	r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	2202      	movs	r2, #2
 8003000:	61ba      	str	r2, [r7, #24]
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	617a      	str	r2, [r7, #20]
  return result;
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f042 0220 	orr.w	r2, r2, #32
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f002 021f 	and.w	r2, r2, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f202 	lsl.w	r2, r1, r2
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e07a      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302c:	4b1d      	ldr	r3, [pc, #116]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 0203 	bic.w	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	491a      	ldr	r1, [pc, #104]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303e:	f7fe fbd7 	bl	80017f0 <HAL_GetTick>
 8003042:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003044:	e00a      	b.n	800305c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe fbd3 	bl	80017f0 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e062      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <HAL_RCC_ClockConfig+0x244>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 020c 	and.w	r2, r3, #12
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	429a      	cmp	r2, r3
 800306c:	d1eb      	bne.n	8003046 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306e:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d215      	bcs.n	80030a8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 0207 	bic.w	r2, r3, #7
 8003084:	4906      	ldr	r1, [pc, #24]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308c:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <HAL_RCC_ClockConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d006      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e041      	b.n	8003122 <HAL_RCC_ClockConfig+0x2c2>
 800309e:	bf00      	nop
 80030a0:	40022000 	.word	0x40022000
 80030a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_RCC_ClockConfig+0x2cc>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	491a      	ldr	r1, [pc, #104]	@ (800312c <HAL_RCC_ClockConfig+0x2cc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d009      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030d2:	4b16      	ldr	r3, [pc, #88]	@ (800312c <HAL_RCC_ClockConfig+0x2cc>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4912      	ldr	r1, [pc, #72]	@ (800312c <HAL_RCC_ClockConfig+0x2cc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030e6:	f000 f829 	bl	800313c <HAL_RCC_GetSysClockFreq>
 80030ea:	4601      	mov	r1, r0
 80030ec:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <HAL_RCC_ClockConfig+0x2cc>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030f4:	22f0      	movs	r2, #240	@ 0xf0
 80030f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	fa92 f2a2 	rbit	r2, r2
 80030fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fab2 f282 	clz	r2, r2
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	40d3      	lsrs	r3, r2
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x2d0>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	fa21 f303 	lsr.w	r3, r1, r3
 8003112:	4a08      	ldr	r2, [pc, #32]	@ (8003134 <HAL_RCC_ClockConfig+0x2d4>)
 8003114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_RCC_ClockConfig+0x2d8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe fb24 	bl	8001768 <HAL_InitTick>
  
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3778      	adds	r7, #120	@ 0x78
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	08008cd0 	.word	0x08008cd0
 8003134:	20000000 	.word	0x20000000
 8003138:	20000004 	.word	0x20000004

0800313c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003156:	4b1f      	ldr	r3, [pc, #124]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b04      	cmp	r3, #4
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x30>
 8003166:	2b08      	cmp	r3, #8
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x36>
 800316a:	e029      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	e029      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	4a18      	ldr	r2, [pc, #96]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003180:	4b14      	ldr	r3, [pc, #80]	@ (80031d4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	4a15      	ldr	r2, [pc, #84]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003198:	4a0f      	ldr	r2, [pc, #60]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	e007      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031aa:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	613b      	str	r3, [r7, #16]
      break;
 80031be:	e002      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c0:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c2:	613b      	str	r3, [r7, #16]
      break;
 80031c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c6:	693b      	ldr	r3, [r7, #16]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40021000 	.word	0x40021000
 80031d8:	007a1200 	.word	0x007a1200
 80031dc:	08008ce8 	.word	0x08008ce8
 80031e0:	08008cf8 	.word	0x08008cf8

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	@ (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003202:	f7ff ffef 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003206:	4601      	mov	r1, r0
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003210:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	603a      	str	r2, [r7, #0]
  return result;
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	40d3      	lsrs	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x40>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08008ce0 	.word	0x08008ce0

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003246:	f7ff ffcd 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800324a:	4601      	mov	r1, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003254:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	fa92 f2a2 	rbit	r2, r2
 8003260:	603a      	str	r2, [r7, #0]
  return result;
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	fab2 f282 	clz	r2, r2
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	40d3      	lsrs	r3, r2
 800326c:	4a04      	ldr	r2, [pc, #16]	@ (8003280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40021000 	.word	0x40021000
 8003280:	08008ce0 	.word	0x08008ce0

08003284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b092      	sub	sp, #72	@ 0x48
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80d2 	beq.w	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a8:	4b4d      	ldr	r3, [pc, #308]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10e      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b4a      	ldr	r3, [pc, #296]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4a49      	ldr	r2, [pc, #292]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032be:	61d3      	str	r3, [r2, #28]
 80032c0:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b44      	ldr	r3, [pc, #272]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a40      	ldr	r2, [pc, #256]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fa81 	bl	80017f0 <HAL_GetTick>
 80032ee:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fa7d 	bl	80017f0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	@ 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1d4      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b37      	ldr	r3, [pc, #220]	@ (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003310:	4b33      	ldr	r3, [pc, #204]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003318:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800331a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8082 	beq.w	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800332c:	429a      	cmp	r2, r3
 800332e:	d07a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003330:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800333a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	4b25      	ldr	r3, [pc, #148]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	461a      	mov	r2, r3
 800335a:	2301      	movs	r3, #1
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	461a      	mov	r2, r3
 800337e:	2300      	movs	r3, #0
 8003380:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003382:	4a17      	ldr	r2, [pc, #92]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003386:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d049      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fe fa2d 	bl	80017f0 <HAL_GetTick>
 8003396:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	e00a      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe fa29 	bl	80017f0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e17e      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80033b0:	2302      	movs	r3, #2
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80033bc:	2302      	movs	r3, #2
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	61fb      	str	r3, [r7, #28]
  return result;
 80033c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x168>
 80033da:	4b01      	ldr	r3, [pc, #4]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	e00d      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40007000 	.word	0x40007000
 80033e8:	10908100 	.word	0x10908100
 80033ec:	2302      	movs	r3, #2
 80033ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	4b9a      	ldr	r3, [pc, #616]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	2202      	movs	r2, #2
 80033fe:	613a      	str	r2, [r7, #16]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	60fa      	str	r2, [r7, #12]
  return result;
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	fab2 f282 	clz	r2, r2
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f002 021f 	and.w	r2, r2, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0b9      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003426:	4b8f      	ldr	r3, [pc, #572]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	498c      	ldr	r1, [pc, #560]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003434:	4313      	orrs	r3, r2
 8003436:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003438:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	4a87      	ldr	r2, [pc, #540]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003458:	4b82      	ldr	r3, [pc, #520]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	f023 0203 	bic.w	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	497f      	ldr	r1, [pc, #508]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003466:	4313      	orrs	r3, r2
 8003468:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003476:	4b7b      	ldr	r3, [pc, #492]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4978      	ldr	r1, [pc, #480]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003494:	4b73      	ldr	r3, [pc, #460]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	4970      	ldr	r1, [pc, #448]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0320 	and.w	r3, r3, #32
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d008      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f023 0210 	bic.w	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	4969      	ldr	r1, [pc, #420]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034d0:	4b64      	ldr	r3, [pc, #400]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034dc:	4961      	ldr	r1, [pc, #388]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	f023 0220 	bic.w	r2, r3, #32
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	495a      	ldr	r1, [pc, #360]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800350c:	4b55      	ldr	r3, [pc, #340]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	4952      	ldr	r1, [pc, #328]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800352a:	4b4e      	ldr	r3, [pc, #312]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	494b      	ldr	r1, [pc, #300]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003538:	4313      	orrs	r3, r2
 800353a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	4943      	ldr	r1, [pc, #268]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003566:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	493c      	ldr	r1, [pc, #240]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003588:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	4934      	ldr	r1, [pc, #208]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003592:	4313      	orrs	r3, r2
 8003594:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80035a2:	4b30      	ldr	r3, [pc, #192]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	492d      	ldr	r1, [pc, #180]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035c0:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	4925      	ldr	r1, [pc, #148]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035de:	4b21      	ldr	r3, [pc, #132]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	491e      	ldr	r1, [pc, #120]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80035fc:	4b19      	ldr	r3, [pc, #100]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003600:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	4916      	ldr	r1, [pc, #88]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360a:	4313      	orrs	r3, r2
 800360c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	490f      	ldr	r1, [pc, #60]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003628:	4313      	orrs	r3, r2
 800362a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	4907      	ldr	r1, [pc, #28]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003656:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366a:	4913      	ldr	r1, [pc, #76]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800366c:	4313      	orrs	r3, r2
 800366e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800367c:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	490b      	ldr	r1, [pc, #44]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800368a:	4313      	orrs	r3, r2
 800368c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d008      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800369a:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	4904      	ldr	r1, [pc, #16]	@ (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3748      	adds	r7, #72	@ 0x48
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e049      	b.n	8003762 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fe72 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 f9d0 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04f      	b.n	8003824 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a23      	ldr	r2, [pc, #140]	@ (8003830 <HAL_TIM_Base_Start_IT+0xc4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01d      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x76>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ae:	d018      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x76>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1f      	ldr	r2, [pc, #124]	@ (8003834 <HAL_TIM_Base_Start_IT+0xc8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x76>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <HAL_TIM_Base_Start_IT+0xcc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x76>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1c      	ldr	r2, [pc, #112]	@ (800383c <HAL_TIM_Base_Start_IT+0xd0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x76>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_TIM_Base_Start_IT+0xd4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x76>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_TIM_Base_Start_IT+0xd8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d115      	bne.n	800380e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b17      	ldr	r3, [pc, #92]	@ (8003848 <HAL_TIM_Base_Start_IT+0xdc>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d015      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037fa:	d011      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	e008      	b.n	8003820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e000      	b.n	8003822 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40013400 	.word	0x40013400
 8003840:	40014000 	.word	0x40014000
 8003844:	40015000 	.word	0x40015000
 8003848:	00010007 	.word	0x00010007

0800384c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d020      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01b      	beq.n	80038b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8e4 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8d6 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f8e7 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d020      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0204 	mvn.w	r2, #4
 80038cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2202      	movs	r2, #2
 80038d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f8be 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 80038e8:	e005      	b.n	80038f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8b0 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8c1 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0208 	mvn.w	r2, #8
 8003918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2204      	movs	r2, #4
 800391e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f898 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003934:	e005      	b.n	8003942 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f88a 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f89b 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d020      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f872 	bl	8003a64 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f864 	bl	8003a50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f875 	bl	8003a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00c      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0201 	mvn.w	r2, #1
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fbfc 	bl	80011b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00c      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9a2 	bl	8003d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00c      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f99a 	bl	8003d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f834 	bl	8003a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0220 	mvn.w	r2, #32
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f962 	bl	8003d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a48      	ldr	r2, [pc, #288]	@ (8003bd4 <TIM_Base_SetConfig+0x134>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a45      	ldr	r2, [pc, #276]	@ (8003bd8 <TIM_Base_SetConfig+0x138>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a44      	ldr	r2, [pc, #272]	@ (8003bdc <TIM_Base_SetConfig+0x13c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a43      	ldr	r2, [pc, #268]	@ (8003be0 <TIM_Base_SetConfig+0x140>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a42      	ldr	r2, [pc, #264]	@ (8003be4 <TIM_Base_SetConfig+0x144>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a37      	ldr	r2, [pc, #220]	@ (8003bd4 <TIM_Base_SetConfig+0x134>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d01b      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a34      	ldr	r2, [pc, #208]	@ (8003bd8 <TIM_Base_SetConfig+0x138>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d017      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a33      	ldr	r2, [pc, #204]	@ (8003bdc <TIM_Base_SetConfig+0x13c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <TIM_Base_SetConfig+0x140>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00f      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a32      	ldr	r2, [pc, #200]	@ (8003be8 <TIM_Base_SetConfig+0x148>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a31      	ldr	r2, [pc, #196]	@ (8003bec <TIM_Base_SetConfig+0x14c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a30      	ldr	r2, [pc, #192]	@ (8003bf0 <TIM_Base_SetConfig+0x150>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2b      	ldr	r2, [pc, #172]	@ (8003be4 <TIM_Base_SetConfig+0x144>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d108      	bne.n	8003b4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <TIM_Base_SetConfig+0x134>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <TIM_Base_SetConfig+0x100>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <TIM_Base_SetConfig+0x140>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_Base_SetConfig+0x100>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a19      	ldr	r2, [pc, #100]	@ (8003be8 <TIM_Base_SetConfig+0x148>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_Base_SetConfig+0x100>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a18      	ldr	r2, [pc, #96]	@ (8003bec <TIM_Base_SetConfig+0x14c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_Base_SetConfig+0x100>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <TIM_Base_SetConfig+0x150>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_Base_SetConfig+0x100>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <TIM_Base_SetConfig+0x144>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d103      	bne.n	8003ba8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d105      	bne.n	8003bc6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	611a      	str	r2, [r3, #16]
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40013400 	.word	0x40013400
 8003be4:	40015000 	.word	0x40015000
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e06d      	b.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a30      	ldr	r2, [pc, #192]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2d      	ldr	r2, [pc, #180]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d01d      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c88:	d018      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d013      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a1a      	ldr	r2, [pc, #104]	@ (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00e      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a15      	ldr	r2, [pc, #84]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d009      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a16      	ldr	r2, [pc, #88]	@ (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a11      	ldr	r2, [pc, #68]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d10c      	bne.n	8003cd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40013400 	.word	0x40013400
 8003cfc:	40015000 	.word	0x40015000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40014000 	.word	0x40014000

08003d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e040      	b.n	8003ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fb54 	bl	8001418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	@ 0x24
 8003d74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9fc 	bl	800418c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f825 	bl	8003de4 <UART_SetConfig>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01b      	b.n	8003ddc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fa7b 	bl	80042d0 <UART_CheckIdleState>
 8003dda:	4603      	mov	r3, r0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b92      	ldr	r3, [pc, #584]	@ (8004058 <UART_SetConfig+0x274>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	6979      	ldr	r1, [r7, #20]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a80      	ldr	r2, [pc, #512]	@ (800405c <UART_SetConfig+0x278>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d120      	bne.n	8003ea2 <UART_SetConfig+0xbe>
 8003e60:	4b7f      	ldr	r3, [pc, #508]	@ (8004060 <UART_SetConfig+0x27c>)
 8003e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d817      	bhi.n	8003e9c <UART_SetConfig+0xb8>
 8003e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e74 <UART_SetConfig+0x90>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003e97 	.word	0x08003e97
 8003e80:	08003e8b 	.word	0x08003e8b
 8003e84:	2301      	movs	r3, #1
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e0b5      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e0b2      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003e90:	2304      	movs	r3, #4
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e0af      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003e96:	2308      	movs	r3, #8
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e0ac      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	77fb      	strb	r3, [r7, #31]
 8003ea0:	e0a9      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8004064 <UART_SetConfig+0x280>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d124      	bne.n	8003ef6 <UART_SetConfig+0x112>
 8003eac:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <UART_SetConfig+0x27c>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003eb4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eb8:	d011      	beq.n	8003ede <UART_SetConfig+0xfa>
 8003eba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ebe:	d817      	bhi.n	8003ef0 <UART_SetConfig+0x10c>
 8003ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ec4:	d011      	beq.n	8003eea <UART_SetConfig+0x106>
 8003ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eca:	d811      	bhi.n	8003ef0 <UART_SetConfig+0x10c>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <UART_SetConfig+0xf4>
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d006      	beq.n	8003ee4 <UART_SetConfig+0x100>
 8003ed6:	e00b      	b.n	8003ef0 <UART_SetConfig+0x10c>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e08b      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	77fb      	strb	r3, [r7, #31]
 8003ee2:	e088      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003ee4:	2304      	movs	r3, #4
 8003ee6:	77fb      	strb	r3, [r7, #31]
 8003ee8:	e085      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003eea:	2308      	movs	r3, #8
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e082      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e07f      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a5b      	ldr	r2, [pc, #364]	@ (8004068 <UART_SetConfig+0x284>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d124      	bne.n	8003f4a <UART_SetConfig+0x166>
 8003f00:	4b57      	ldr	r3, [pc, #348]	@ (8004060 <UART_SetConfig+0x27c>)
 8003f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f04:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003f08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f0c:	d011      	beq.n	8003f32 <UART_SetConfig+0x14e>
 8003f0e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f12:	d817      	bhi.n	8003f44 <UART_SetConfig+0x160>
 8003f14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f18:	d011      	beq.n	8003f3e <UART_SetConfig+0x15a>
 8003f1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f1e:	d811      	bhi.n	8003f44 <UART_SetConfig+0x160>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <UART_SetConfig+0x148>
 8003f24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f28:	d006      	beq.n	8003f38 <UART_SetConfig+0x154>
 8003f2a:	e00b      	b.n	8003f44 <UART_SetConfig+0x160>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e061      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f32:	2302      	movs	r3, #2
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e05e      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e05b      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e058      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f44:	2310      	movs	r3, #16
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e055      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a47      	ldr	r2, [pc, #284]	@ (800406c <UART_SetConfig+0x288>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d124      	bne.n	8003f9e <UART_SetConfig+0x1ba>
 8003f54:	4b42      	ldr	r3, [pc, #264]	@ (8004060 <UART_SetConfig+0x27c>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003f5c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f60:	d011      	beq.n	8003f86 <UART_SetConfig+0x1a2>
 8003f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f66:	d817      	bhi.n	8003f98 <UART_SetConfig+0x1b4>
 8003f68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f6c:	d011      	beq.n	8003f92 <UART_SetConfig+0x1ae>
 8003f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f72:	d811      	bhi.n	8003f98 <UART_SetConfig+0x1b4>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <UART_SetConfig+0x19c>
 8003f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f7c:	d006      	beq.n	8003f8c <UART_SetConfig+0x1a8>
 8003f7e:	e00b      	b.n	8003f98 <UART_SetConfig+0x1b4>
 8003f80:	2300      	movs	r3, #0
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e037      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f86:	2302      	movs	r3, #2
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e034      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e031      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f92:	2308      	movs	r3, #8
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e02e      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e02b      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a33      	ldr	r2, [pc, #204]	@ (8004070 <UART_SetConfig+0x28c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d124      	bne.n	8003ff2 <UART_SetConfig+0x20e>
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <UART_SetConfig+0x27c>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003fb0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fb4:	d011      	beq.n	8003fda <UART_SetConfig+0x1f6>
 8003fb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fba:	d817      	bhi.n	8003fec <UART_SetConfig+0x208>
 8003fbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fc0:	d011      	beq.n	8003fe6 <UART_SetConfig+0x202>
 8003fc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fc6:	d811      	bhi.n	8003fec <UART_SetConfig+0x208>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <UART_SetConfig+0x1f0>
 8003fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd0:	d006      	beq.n	8003fe0 <UART_SetConfig+0x1fc>
 8003fd2:	e00b      	b.n	8003fec <UART_SetConfig+0x208>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e00d      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e00a      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e007      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003fe6:	2308      	movs	r3, #8
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e004      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003fec:	2310      	movs	r3, #16
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e001      	b.n	8003ff6 <UART_SetConfig+0x212>
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffe:	d16b      	bne.n	80040d8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004000:	7ffb      	ldrb	r3, [r7, #31]
 8004002:	2b08      	cmp	r3, #8
 8004004:	d838      	bhi.n	8004078 <UART_SetConfig+0x294>
 8004006:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <UART_SetConfig+0x228>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004031 	.word	0x08004031
 8004010:	08004039 	.word	0x08004039
 8004014:	08004041 	.word	0x08004041
 8004018:	08004079 	.word	0x08004079
 800401c:	08004047 	.word	0x08004047
 8004020:	08004079 	.word	0x08004079
 8004024:	08004079 	.word	0x08004079
 8004028:	08004079 	.word	0x08004079
 800402c:	0800404f 	.word	0x0800404f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7ff f8e4 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8004034:	61b8      	str	r0, [r7, #24]
        break;
 8004036:	e024      	b.n	8004082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7ff f902 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 800403c:	61b8      	str	r0, [r7, #24]
        break;
 800403e:	e020      	b.n	8004082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004040:	4b0c      	ldr	r3, [pc, #48]	@ (8004074 <UART_SetConfig+0x290>)
 8004042:	61bb      	str	r3, [r7, #24]
        break;
 8004044:	e01d      	b.n	8004082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004046:	f7ff f879 	bl	800313c <HAL_RCC_GetSysClockFreq>
 800404a:	61b8      	str	r0, [r7, #24]
        break;
 800404c:	e019      	b.n	8004082 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004052:	61bb      	str	r3, [r7, #24]
        break;
 8004054:	e015      	b.n	8004082 <UART_SetConfig+0x29e>
 8004056:	bf00      	nop
 8004058:	efff69f3 	.word	0xefff69f3
 800405c:	40013800 	.word	0x40013800
 8004060:	40021000 	.word	0x40021000
 8004064:	40004400 	.word	0x40004400
 8004068:	40004800 	.word	0x40004800
 800406c:	40004c00 	.word	0x40004c00
 8004070:	40005000 	.word	0x40005000
 8004074:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77bb      	strb	r3, [r7, #30]
        break;
 8004080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d073      	beq.n	8004170 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	005a      	lsls	r2, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d916      	bls.n	80040d2 <UART_SetConfig+0x2ee>
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040aa:	d212      	bcs.n	80040d2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	89fb      	ldrh	r3, [r7, #14]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	89fa      	ldrh	r2, [r7, #14]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e04e      	b.n	8004170 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77bb      	strb	r3, [r7, #30]
 80040d6:	e04b      	b.n	8004170 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d827      	bhi.n	800412e <UART_SetConfig+0x34a>
 80040de:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <UART_SetConfig+0x300>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004109 	.word	0x08004109
 80040e8:	08004111 	.word	0x08004111
 80040ec:	08004119 	.word	0x08004119
 80040f0:	0800412f 	.word	0x0800412f
 80040f4:	0800411f 	.word	0x0800411f
 80040f8:	0800412f 	.word	0x0800412f
 80040fc:	0800412f 	.word	0x0800412f
 8004100:	0800412f 	.word	0x0800412f
 8004104:	08004127 	.word	0x08004127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004108:	f7ff f878 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 800410c:	61b8      	str	r0, [r7, #24]
        break;
 800410e:	e013      	b.n	8004138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004110:	f7ff f896 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8004114:	61b8      	str	r0, [r7, #24]
        break;
 8004116:	e00f      	b.n	8004138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004118:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <UART_SetConfig+0x3a4>)
 800411a:	61bb      	str	r3, [r7, #24]
        break;
 800411c:	e00c      	b.n	8004138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411e:	f7ff f80d 	bl	800313c <HAL_RCC_GetSysClockFreq>
 8004122:	61b8      	str	r0, [r7, #24]
        break;
 8004124:	e008      	b.n	8004138 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412a:	61bb      	str	r3, [r7, #24]
        break;
 800412c:	e004      	b.n	8004138 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	77bb      	strb	r3, [r7, #30]
        break;
 8004136:	bf00      	nop
    }

    if (pclk != 0U)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	085a      	lsrs	r2, r3, #1
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	441a      	add	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d909      	bls.n	800416c <UART_SetConfig+0x388>
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415e:	d205      	bcs.n	800416c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	e001      	b.n	8004170 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800417c:	7fbb      	ldrb	r3, [r7, #30]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	007a1200 	.word	0x007a1200

0800418c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428a:	d10a      	bne.n	80042a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b098      	sub	sp, #96	@ 0x60
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e0:	f7fd fa86 	bl	80017f0 <HAL_GetTick>
 80042e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d12e      	bne.n	8004352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fc:	2200      	movs	r2, #0
 80042fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f88c 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d021      	beq.n	8004352 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004322:	653b      	str	r3, [r7, #80]	@ 0x50
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
 800432e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004332:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e6      	bne.n	800430e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e062      	b.n	8004418 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d149      	bne.n	80043f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	2200      	movs	r2, #0
 800436a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f856 	bl	8004420 <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d03c      	beq.n	80043f4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	623b      	str	r3, [r7, #32]
   return(result);
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
 800439a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800439e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e6      	bne.n	800437a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043cc:	61fa      	str	r2, [r7, #28]
 80043ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	69b9      	ldr	r1, [r7, #24]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	617b      	str	r3, [r7, #20]
   return(result);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e011      	b.n	8004418 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3758      	adds	r7, #88	@ 0x58
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004430:	e04f      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d04b      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fd f9d9 	bl	80017f0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <UART_WaitOnFlagUntilTimeout+0x30>
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e04e      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d037      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b80      	cmp	r3, #128	@ 0x80
 8004466:	d034      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b40      	cmp	r3, #64	@ 0x40
 800446c:	d031      	beq.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b08      	cmp	r3, #8
 800447a:	d110      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2208      	movs	r2, #8
 8004482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f838 	bl	80044fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2208      	movs	r2, #8
 800448e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e029      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ac:	d111      	bne.n	80044d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f81e 	bl	80044fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e00f      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d0a0      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b095      	sub	sp, #84	@ 0x54
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004520:	643b      	str	r3, [r7, #64]	@ 0x40
 8004522:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800452e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e6      	bne.n	8004502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	3308      	adds	r3, #8
 800453a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	61fb      	str	r3, [r7, #28]
   return(result);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3308      	adds	r3, #8
 8004552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004554:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800455a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456c:	2b01      	cmp	r3, #1
 800456e:	d118      	bne.n	80045a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	60bb      	str	r3, [r7, #8]
   return(result);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f023 0310 	bic.w	r3, r3, #16
 8004584:	647b      	str	r3, [r7, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6979      	ldr	r1, [r7, #20]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	613b      	str	r3, [r7, #16]
   return(result);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e6      	bne.n	8004570 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045b6:	bf00      	nop
 80045b8:	3754      	adds	r7, #84	@ 0x54
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <__cvt>:
 80045c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c6:	ec57 6b10 	vmov	r6, r7, d0
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	460c      	mov	r4, r1
 80045ce:	4619      	mov	r1, r3
 80045d0:	463b      	mov	r3, r7
 80045d2:	bfbb      	ittet	lt
 80045d4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80045d8:	461f      	movlt	r7, r3
 80045da:	2300      	movge	r3, #0
 80045dc:	232d      	movlt	r3, #45	@ 0x2d
 80045de:	700b      	strb	r3, [r1, #0]
 80045e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045e2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80045e6:	4691      	mov	r9, r2
 80045e8:	f023 0820 	bic.w	r8, r3, #32
 80045ec:	bfbc      	itt	lt
 80045ee:	4632      	movlt	r2, r6
 80045f0:	4616      	movlt	r6, r2
 80045f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80045f6:	d005      	beq.n	8004604 <__cvt+0x42>
 80045f8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80045fc:	d100      	bne.n	8004600 <__cvt+0x3e>
 80045fe:	3401      	adds	r4, #1
 8004600:	2102      	movs	r1, #2
 8004602:	e000      	b.n	8004606 <__cvt+0x44>
 8004604:	2103      	movs	r1, #3
 8004606:	ab03      	add	r3, sp, #12
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	ab02      	add	r3, sp, #8
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	ec47 6b10 	vmov	d0, r6, r7
 8004612:	4653      	mov	r3, sl
 8004614:	4622      	mov	r2, r4
 8004616:	f001 f86f 	bl	80056f8 <_dtoa_r>
 800461a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800461e:	4605      	mov	r5, r0
 8004620:	d119      	bne.n	8004656 <__cvt+0x94>
 8004622:	f019 0f01 	tst.w	r9, #1
 8004626:	d00e      	beq.n	8004646 <__cvt+0x84>
 8004628:	eb00 0904 	add.w	r9, r0, r4
 800462c:	2200      	movs	r2, #0
 800462e:	2300      	movs	r3, #0
 8004630:	4630      	mov	r0, r6
 8004632:	4639      	mov	r1, r7
 8004634:	f7fc fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8004638:	b108      	cbz	r0, 800463e <__cvt+0x7c>
 800463a:	f8cd 900c 	str.w	r9, [sp, #12]
 800463e:	2230      	movs	r2, #48	@ 0x30
 8004640:	9b03      	ldr	r3, [sp, #12]
 8004642:	454b      	cmp	r3, r9
 8004644:	d31e      	bcc.n	8004684 <__cvt+0xc2>
 8004646:	9b03      	ldr	r3, [sp, #12]
 8004648:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800464a:	1b5b      	subs	r3, r3, r5
 800464c:	4628      	mov	r0, r5
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	b004      	add	sp, #16
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800465a:	eb00 0904 	add.w	r9, r0, r4
 800465e:	d1e5      	bne.n	800462c <__cvt+0x6a>
 8004660:	7803      	ldrb	r3, [r0, #0]
 8004662:	2b30      	cmp	r3, #48	@ 0x30
 8004664:	d10a      	bne.n	800467c <__cvt+0xba>
 8004666:	2200      	movs	r2, #0
 8004668:	2300      	movs	r3, #0
 800466a:	4630      	mov	r0, r6
 800466c:	4639      	mov	r1, r7
 800466e:	f7fc fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 8004672:	b918      	cbnz	r0, 800467c <__cvt+0xba>
 8004674:	f1c4 0401 	rsb	r4, r4, #1
 8004678:	f8ca 4000 	str.w	r4, [sl]
 800467c:	f8da 3000 	ldr.w	r3, [sl]
 8004680:	4499      	add	r9, r3
 8004682:	e7d3      	b.n	800462c <__cvt+0x6a>
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	9103      	str	r1, [sp, #12]
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e7d9      	b.n	8004640 <__cvt+0x7e>

0800468c <__exponent>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	2900      	cmp	r1, #0
 8004690:	bfba      	itte	lt
 8004692:	4249      	neglt	r1, r1
 8004694:	232d      	movlt	r3, #45	@ 0x2d
 8004696:	232b      	movge	r3, #43	@ 0x2b
 8004698:	2909      	cmp	r1, #9
 800469a:	7002      	strb	r2, [r0, #0]
 800469c:	7043      	strb	r3, [r0, #1]
 800469e:	dd29      	ble.n	80046f4 <__exponent+0x68>
 80046a0:	f10d 0307 	add.w	r3, sp, #7
 80046a4:	461d      	mov	r5, r3
 80046a6:	270a      	movs	r7, #10
 80046a8:	461a      	mov	r2, r3
 80046aa:	fbb1 f6f7 	udiv	r6, r1, r7
 80046ae:	fb07 1416 	mls	r4, r7, r6, r1
 80046b2:	3430      	adds	r4, #48	@ 0x30
 80046b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80046b8:	460c      	mov	r4, r1
 80046ba:	2c63      	cmp	r4, #99	@ 0x63
 80046bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80046c0:	4631      	mov	r1, r6
 80046c2:	dcf1      	bgt.n	80046a8 <__exponent+0x1c>
 80046c4:	3130      	adds	r1, #48	@ 0x30
 80046c6:	1e94      	subs	r4, r2, #2
 80046c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046cc:	1c41      	adds	r1, r0, #1
 80046ce:	4623      	mov	r3, r4
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	d30a      	bcc.n	80046ea <__exponent+0x5e>
 80046d4:	f10d 0309 	add.w	r3, sp, #9
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	42ac      	cmp	r4, r5
 80046dc:	bf88      	it	hi
 80046de:	2300      	movhi	r3, #0
 80046e0:	3302      	adds	r3, #2
 80046e2:	4403      	add	r3, r0
 80046e4:	1a18      	subs	r0, r3, r0
 80046e6:	b003      	add	sp, #12
 80046e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80046ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80046f2:	e7ed      	b.n	80046d0 <__exponent+0x44>
 80046f4:	2330      	movs	r3, #48	@ 0x30
 80046f6:	3130      	adds	r1, #48	@ 0x30
 80046f8:	7083      	strb	r3, [r0, #2]
 80046fa:	70c1      	strb	r1, [r0, #3]
 80046fc:	1d03      	adds	r3, r0, #4
 80046fe:	e7f1      	b.n	80046e4 <__exponent+0x58>

08004700 <_printf_float>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	b08d      	sub	sp, #52	@ 0x34
 8004706:	460c      	mov	r4, r1
 8004708:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800470c:	4616      	mov	r6, r2
 800470e:	461f      	mov	r7, r3
 8004710:	4605      	mov	r5, r0
 8004712:	f000 fee9 	bl	80054e8 <_localeconv_r>
 8004716:	6803      	ldr	r3, [r0, #0]
 8004718:	9304      	str	r3, [sp, #16]
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fdb0 	bl	8000280 <strlen>
 8004720:	2300      	movs	r3, #0
 8004722:	930a      	str	r3, [sp, #40]	@ 0x28
 8004724:	f8d8 3000 	ldr.w	r3, [r8]
 8004728:	9005      	str	r0, [sp, #20]
 800472a:	3307      	adds	r3, #7
 800472c:	f023 0307 	bic.w	r3, r3, #7
 8004730:	f103 0208 	add.w	r2, r3, #8
 8004734:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004738:	f8d4 b000 	ldr.w	fp, [r4]
 800473c:	f8c8 2000 	str.w	r2, [r8]
 8004740:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004744:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004748:	9307      	str	r3, [sp, #28]
 800474a:	f8cd 8018 	str.w	r8, [sp, #24]
 800474e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004756:	4b9c      	ldr	r3, [pc, #624]	@ (80049c8 <_printf_float+0x2c8>)
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	f7fc f9ee 	bl	8000b3c <__aeabi_dcmpun>
 8004760:	bb70      	cbnz	r0, 80047c0 <_printf_float+0xc0>
 8004762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004766:	4b98      	ldr	r3, [pc, #608]	@ (80049c8 <_printf_float+0x2c8>)
 8004768:	f04f 32ff 	mov.w	r2, #4294967295
 800476c:	f7fc f9c8 	bl	8000b00 <__aeabi_dcmple>
 8004770:	bb30      	cbnz	r0, 80047c0 <_printf_float+0xc0>
 8004772:	2200      	movs	r2, #0
 8004774:	2300      	movs	r3, #0
 8004776:	4640      	mov	r0, r8
 8004778:	4649      	mov	r1, r9
 800477a:	f7fc f9b7 	bl	8000aec <__aeabi_dcmplt>
 800477e:	b110      	cbz	r0, 8004786 <_printf_float+0x86>
 8004780:	232d      	movs	r3, #45	@ 0x2d
 8004782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004786:	4a91      	ldr	r2, [pc, #580]	@ (80049cc <_printf_float+0x2cc>)
 8004788:	4b91      	ldr	r3, [pc, #580]	@ (80049d0 <_printf_float+0x2d0>)
 800478a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800478e:	bf8c      	ite	hi
 8004790:	4690      	movhi	r8, r2
 8004792:	4698      	movls	r8, r3
 8004794:	2303      	movs	r3, #3
 8004796:	6123      	str	r3, [r4, #16]
 8004798:	f02b 0304 	bic.w	r3, fp, #4
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	f04f 0900 	mov.w	r9, #0
 80047a2:	9700      	str	r7, [sp, #0]
 80047a4:	4633      	mov	r3, r6
 80047a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80047a8:	4621      	mov	r1, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f9d2 	bl	8004b54 <_printf_common>
 80047b0:	3001      	adds	r0, #1
 80047b2:	f040 808d 	bne.w	80048d0 <_printf_float+0x1d0>
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	b00d      	add	sp, #52	@ 0x34
 80047bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	4640      	mov	r0, r8
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fc f9b8 	bl	8000b3c <__aeabi_dcmpun>
 80047cc:	b140      	cbz	r0, 80047e0 <_printf_float+0xe0>
 80047ce:	464b      	mov	r3, r9
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bfbc      	itt	lt
 80047d4:	232d      	movlt	r3, #45	@ 0x2d
 80047d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80047da:	4a7e      	ldr	r2, [pc, #504]	@ (80049d4 <_printf_float+0x2d4>)
 80047dc:	4b7e      	ldr	r3, [pc, #504]	@ (80049d8 <_printf_float+0x2d8>)
 80047de:	e7d4      	b.n	800478a <_printf_float+0x8a>
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80047e6:	9206      	str	r2, [sp, #24]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	d13b      	bne.n	8004864 <_printf_float+0x164>
 80047ec:	2306      	movs	r3, #6
 80047ee:	6063      	str	r3, [r4, #4]
 80047f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80047f4:	2300      	movs	r3, #0
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	9303      	str	r3, [sp, #12]
 80047fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80047fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004800:	ab09      	add	r3, sp, #36	@ 0x24
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	6861      	ldr	r1, [r4, #4]
 8004806:	ec49 8b10 	vmov	d0, r8, r9
 800480a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800480e:	4628      	mov	r0, r5
 8004810:	f7ff fed7 	bl	80045c2 <__cvt>
 8004814:	9b06      	ldr	r3, [sp, #24]
 8004816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004818:	2b47      	cmp	r3, #71	@ 0x47
 800481a:	4680      	mov	r8, r0
 800481c:	d129      	bne.n	8004872 <_printf_float+0x172>
 800481e:	1cc8      	adds	r0, r1, #3
 8004820:	db02      	blt.n	8004828 <_printf_float+0x128>
 8004822:	6863      	ldr	r3, [r4, #4]
 8004824:	4299      	cmp	r1, r3
 8004826:	dd41      	ble.n	80048ac <_printf_float+0x1ac>
 8004828:	f1aa 0a02 	sub.w	sl, sl, #2
 800482c:	fa5f fa8a 	uxtb.w	sl, sl
 8004830:	3901      	subs	r1, #1
 8004832:	4652      	mov	r2, sl
 8004834:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004838:	9109      	str	r1, [sp, #36]	@ 0x24
 800483a:	f7ff ff27 	bl	800468c <__exponent>
 800483e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004840:	1813      	adds	r3, r2, r0
 8004842:	2a01      	cmp	r2, #1
 8004844:	4681      	mov	r9, r0
 8004846:	6123      	str	r3, [r4, #16]
 8004848:	dc02      	bgt.n	8004850 <_printf_float+0x150>
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	07d2      	lsls	r2, r2, #31
 800484e:	d501      	bpl.n	8004854 <_printf_float+0x154>
 8004850:	3301      	adds	r3, #1
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0a2      	beq.n	80047a2 <_printf_float+0xa2>
 800485c:	232d      	movs	r3, #45	@ 0x2d
 800485e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004862:	e79e      	b.n	80047a2 <_printf_float+0xa2>
 8004864:	9a06      	ldr	r2, [sp, #24]
 8004866:	2a47      	cmp	r2, #71	@ 0x47
 8004868:	d1c2      	bne.n	80047f0 <_printf_float+0xf0>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1c0      	bne.n	80047f0 <_printf_float+0xf0>
 800486e:	2301      	movs	r3, #1
 8004870:	e7bd      	b.n	80047ee <_printf_float+0xee>
 8004872:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004876:	d9db      	bls.n	8004830 <_printf_float+0x130>
 8004878:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800487c:	d118      	bne.n	80048b0 <_printf_float+0x1b0>
 800487e:	2900      	cmp	r1, #0
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	dd0b      	ble.n	800489c <_printf_float+0x19c>
 8004884:	6121      	str	r1, [r4, #16]
 8004886:	b913      	cbnz	r3, 800488e <_printf_float+0x18e>
 8004888:	6822      	ldr	r2, [r4, #0]
 800488a:	07d0      	lsls	r0, r2, #31
 800488c:	d502      	bpl.n	8004894 <_printf_float+0x194>
 800488e:	3301      	adds	r3, #1
 8004890:	440b      	add	r3, r1
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004896:	f04f 0900 	mov.w	r9, #0
 800489a:	e7db      	b.n	8004854 <_printf_float+0x154>
 800489c:	b913      	cbnz	r3, 80048a4 <_printf_float+0x1a4>
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	07d2      	lsls	r2, r2, #31
 80048a2:	d501      	bpl.n	80048a8 <_printf_float+0x1a8>
 80048a4:	3302      	adds	r3, #2
 80048a6:	e7f4      	b.n	8004892 <_printf_float+0x192>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e7f2      	b.n	8004892 <_printf_float+0x192>
 80048ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80048b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048b2:	4299      	cmp	r1, r3
 80048b4:	db05      	blt.n	80048c2 <_printf_float+0x1c2>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	6121      	str	r1, [r4, #16]
 80048ba:	07d8      	lsls	r0, r3, #31
 80048bc:	d5ea      	bpl.n	8004894 <_printf_float+0x194>
 80048be:	1c4b      	adds	r3, r1, #1
 80048c0:	e7e7      	b.n	8004892 <_printf_float+0x192>
 80048c2:	2900      	cmp	r1, #0
 80048c4:	bfd4      	ite	le
 80048c6:	f1c1 0202 	rsble	r2, r1, #2
 80048ca:	2201      	movgt	r2, #1
 80048cc:	4413      	add	r3, r2
 80048ce:	e7e0      	b.n	8004892 <_printf_float+0x192>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	055a      	lsls	r2, r3, #21
 80048d4:	d407      	bmi.n	80048e6 <_printf_float+0x1e6>
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	4642      	mov	r2, r8
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	47b8      	blx	r7
 80048e0:	3001      	adds	r0, #1
 80048e2:	d12b      	bne.n	800493c <_printf_float+0x23c>
 80048e4:	e767      	b.n	80047b6 <_printf_float+0xb6>
 80048e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048ea:	f240 80dd 	bls.w	8004aa8 <_printf_float+0x3a8>
 80048ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80048f2:	2200      	movs	r2, #0
 80048f4:	2300      	movs	r3, #0
 80048f6:	f7fc f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d033      	beq.n	8004966 <_printf_float+0x266>
 80048fe:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <_printf_float+0x2dc>)
 8004900:	2301      	movs	r3, #1
 8004902:	4631      	mov	r1, r6
 8004904:	4628      	mov	r0, r5
 8004906:	47b8      	blx	r7
 8004908:	3001      	adds	r0, #1
 800490a:	f43f af54 	beq.w	80047b6 <_printf_float+0xb6>
 800490e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004912:	4543      	cmp	r3, r8
 8004914:	db02      	blt.n	800491c <_printf_float+0x21c>
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	07d8      	lsls	r0, r3, #31
 800491a:	d50f      	bpl.n	800493c <_printf_float+0x23c>
 800491c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f af45 	beq.w	80047b6 <_printf_float+0xb6>
 800492c:	f04f 0900 	mov.w	r9, #0
 8004930:	f108 38ff 	add.w	r8, r8, #4294967295
 8004934:	f104 0a1a 	add.w	sl, r4, #26
 8004938:	45c8      	cmp	r8, r9
 800493a:	dc09      	bgt.n	8004950 <_printf_float+0x250>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	079b      	lsls	r3, r3, #30
 8004940:	f100 8103 	bmi.w	8004b4a <_printf_float+0x44a>
 8004944:	68e0      	ldr	r0, [r4, #12]
 8004946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004948:	4298      	cmp	r0, r3
 800494a:	bfb8      	it	lt
 800494c:	4618      	movlt	r0, r3
 800494e:	e734      	b.n	80047ba <_printf_float+0xba>
 8004950:	2301      	movs	r3, #1
 8004952:	4652      	mov	r2, sl
 8004954:	4631      	mov	r1, r6
 8004956:	4628      	mov	r0, r5
 8004958:	47b8      	blx	r7
 800495a:	3001      	adds	r0, #1
 800495c:	f43f af2b 	beq.w	80047b6 <_printf_float+0xb6>
 8004960:	f109 0901 	add.w	r9, r9, #1
 8004964:	e7e8      	b.n	8004938 <_printf_float+0x238>
 8004966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	dc39      	bgt.n	80049e0 <_printf_float+0x2e0>
 800496c:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <_printf_float+0x2dc>)
 800496e:	2301      	movs	r3, #1
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af1d 	beq.w	80047b6 <_printf_float+0xb6>
 800497c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004980:	ea59 0303 	orrs.w	r3, r9, r3
 8004984:	d102      	bne.n	800498c <_printf_float+0x28c>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07d9      	lsls	r1, r3, #31
 800498a:	d5d7      	bpl.n	800493c <_printf_float+0x23c>
 800498c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	f43f af0d 	beq.w	80047b6 <_printf_float+0xb6>
 800499c:	f04f 0a00 	mov.w	sl, #0
 80049a0:	f104 0b1a 	add.w	fp, r4, #26
 80049a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a6:	425b      	negs	r3, r3
 80049a8:	4553      	cmp	r3, sl
 80049aa:	dc01      	bgt.n	80049b0 <_printf_float+0x2b0>
 80049ac:	464b      	mov	r3, r9
 80049ae:	e793      	b.n	80048d8 <_printf_float+0x1d8>
 80049b0:	2301      	movs	r3, #1
 80049b2:	465a      	mov	r2, fp
 80049b4:	4631      	mov	r1, r6
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b8      	blx	r7
 80049ba:	3001      	adds	r0, #1
 80049bc:	f43f aefb 	beq.w	80047b6 <_printf_float+0xb6>
 80049c0:	f10a 0a01 	add.w	sl, sl, #1
 80049c4:	e7ee      	b.n	80049a4 <_printf_float+0x2a4>
 80049c6:	bf00      	nop
 80049c8:	7fefffff 	.word	0x7fefffff
 80049cc:	08008d0c 	.word	0x08008d0c
 80049d0:	08008d08 	.word	0x08008d08
 80049d4:	08008d14 	.word	0x08008d14
 80049d8:	08008d10 	.word	0x08008d10
 80049dc:	08008d18 	.word	0x08008d18
 80049e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80049e6:	4553      	cmp	r3, sl
 80049e8:	bfa8      	it	ge
 80049ea:	4653      	movge	r3, sl
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	4699      	mov	r9, r3
 80049f0:	dc36      	bgt.n	8004a60 <_printf_float+0x360>
 80049f2:	f04f 0b00 	mov.w	fp, #0
 80049f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049fa:	f104 021a 	add.w	r2, r4, #26
 80049fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a00:	9306      	str	r3, [sp, #24]
 8004a02:	eba3 0309 	sub.w	r3, r3, r9
 8004a06:	455b      	cmp	r3, fp
 8004a08:	dc31      	bgt.n	8004a6e <_printf_float+0x36e>
 8004a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a0c:	459a      	cmp	sl, r3
 8004a0e:	dc3a      	bgt.n	8004a86 <_printf_float+0x386>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	07da      	lsls	r2, r3, #31
 8004a14:	d437      	bmi.n	8004a86 <_printf_float+0x386>
 8004a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a18:	ebaa 0903 	sub.w	r9, sl, r3
 8004a1c:	9b06      	ldr	r3, [sp, #24]
 8004a1e:	ebaa 0303 	sub.w	r3, sl, r3
 8004a22:	4599      	cmp	r9, r3
 8004a24:	bfa8      	it	ge
 8004a26:	4699      	movge	r9, r3
 8004a28:	f1b9 0f00 	cmp.w	r9, #0
 8004a2c:	dc33      	bgt.n	8004a96 <_printf_float+0x396>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a36:	f104 0b1a 	add.w	fp, r4, #26
 8004a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8004a40:	eba3 0309 	sub.w	r3, r3, r9
 8004a44:	4543      	cmp	r3, r8
 8004a46:	f77f af79 	ble.w	800493c <_printf_float+0x23c>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	465a      	mov	r2, fp
 8004a4e:	4631      	mov	r1, r6
 8004a50:	4628      	mov	r0, r5
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	f43f aeae 	beq.w	80047b6 <_printf_float+0xb6>
 8004a5a:	f108 0801 	add.w	r8, r8, #1
 8004a5e:	e7ec      	b.n	8004a3a <_printf_float+0x33a>
 8004a60:	4642      	mov	r2, r8
 8004a62:	4631      	mov	r1, r6
 8004a64:	4628      	mov	r0, r5
 8004a66:	47b8      	blx	r7
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d1c2      	bne.n	80049f2 <_printf_float+0x2f2>
 8004a6c:	e6a3      	b.n	80047b6 <_printf_float+0xb6>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	9206      	str	r2, [sp, #24]
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	f43f ae9c 	beq.w	80047b6 <_printf_float+0xb6>
 8004a7e:	9a06      	ldr	r2, [sp, #24]
 8004a80:	f10b 0b01 	add.w	fp, fp, #1
 8004a84:	e7bb      	b.n	80049fe <_printf_float+0x2fe>
 8004a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	d1c0      	bne.n	8004a16 <_printf_float+0x316>
 8004a94:	e68f      	b.n	80047b6 <_printf_float+0xb6>
 8004a96:	9a06      	ldr	r2, [sp, #24]
 8004a98:	464b      	mov	r3, r9
 8004a9a:	4442      	add	r2, r8
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d1c3      	bne.n	8004a2e <_printf_float+0x32e>
 8004aa6:	e686      	b.n	80047b6 <_printf_float+0xb6>
 8004aa8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004aac:	f1ba 0f01 	cmp.w	sl, #1
 8004ab0:	dc01      	bgt.n	8004ab6 <_printf_float+0x3b6>
 8004ab2:	07db      	lsls	r3, r3, #31
 8004ab4:	d536      	bpl.n	8004b24 <_printf_float+0x424>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4642      	mov	r2, r8
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae78 	beq.w	80047b6 <_printf_float+0xb6>
 8004ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f43f ae70 	beq.w	80047b6 <_printf_float+0xb6>
 8004ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ada:	2200      	movs	r2, #0
 8004adc:	2300      	movs	r3, #0
 8004ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ae2:	f7fb fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ae6:	b9c0      	cbnz	r0, 8004b1a <_printf_float+0x41a>
 8004ae8:	4653      	mov	r3, sl
 8004aea:	f108 0201 	add.w	r2, r8, #1
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	d10c      	bne.n	8004b12 <_printf_float+0x412>
 8004af8:	e65d      	b.n	80047b6 <_printf_float+0xb6>
 8004afa:	2301      	movs	r3, #1
 8004afc:	465a      	mov	r2, fp
 8004afe:	4631      	mov	r1, r6
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b8      	blx	r7
 8004b04:	3001      	adds	r0, #1
 8004b06:	f43f ae56 	beq.w	80047b6 <_printf_float+0xb6>
 8004b0a:	f108 0801 	add.w	r8, r8, #1
 8004b0e:	45d0      	cmp	r8, sl
 8004b10:	dbf3      	blt.n	8004afa <_printf_float+0x3fa>
 8004b12:	464b      	mov	r3, r9
 8004b14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b18:	e6df      	b.n	80048da <_printf_float+0x1da>
 8004b1a:	f04f 0800 	mov.w	r8, #0
 8004b1e:	f104 0b1a 	add.w	fp, r4, #26
 8004b22:	e7f4      	b.n	8004b0e <_printf_float+0x40e>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4642      	mov	r2, r8
 8004b28:	e7e1      	b.n	8004aee <_printf_float+0x3ee>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	464a      	mov	r2, r9
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b8      	blx	r7
 8004b34:	3001      	adds	r0, #1
 8004b36:	f43f ae3e 	beq.w	80047b6 <_printf_float+0xb6>
 8004b3a:	f108 0801 	add.w	r8, r8, #1
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b42:	1a5b      	subs	r3, r3, r1
 8004b44:	4543      	cmp	r3, r8
 8004b46:	dcf0      	bgt.n	8004b2a <_printf_float+0x42a>
 8004b48:	e6fc      	b.n	8004944 <_printf_float+0x244>
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	f104 0919 	add.w	r9, r4, #25
 8004b52:	e7f4      	b.n	8004b3e <_printf_float+0x43e>

08004b54 <_printf_common>:
 8004b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b58:	4616      	mov	r6, r2
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	688a      	ldr	r2, [r1, #8]
 8004b5e:	690b      	ldr	r3, [r1, #16]
 8004b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bfb8      	it	lt
 8004b68:	4613      	movlt	r3, r2
 8004b6a:	6033      	str	r3, [r6, #0]
 8004b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b70:	4607      	mov	r7, r0
 8004b72:	460c      	mov	r4, r1
 8004b74:	b10a      	cbz	r2, 8004b7a <_printf_common+0x26>
 8004b76:	3301      	adds	r3, #1
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	0699      	lsls	r1, r3, #26
 8004b7e:	bf42      	ittt	mi
 8004b80:	6833      	ldrmi	r3, [r6, #0]
 8004b82:	3302      	addmi	r3, #2
 8004b84:	6033      	strmi	r3, [r6, #0]
 8004b86:	6825      	ldr	r5, [r4, #0]
 8004b88:	f015 0506 	ands.w	r5, r5, #6
 8004b8c:	d106      	bne.n	8004b9c <_printf_common+0x48>
 8004b8e:	f104 0a19 	add.w	sl, r4, #25
 8004b92:	68e3      	ldr	r3, [r4, #12]
 8004b94:	6832      	ldr	r2, [r6, #0]
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	42ab      	cmp	r3, r5
 8004b9a:	dc26      	bgt.n	8004bea <_printf_common+0x96>
 8004b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ba0:	6822      	ldr	r2, [r4, #0]
 8004ba2:	3b00      	subs	r3, #0
 8004ba4:	bf18      	it	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	0692      	lsls	r2, r2, #26
 8004baa:	d42b      	bmi.n	8004c04 <_printf_common+0xb0>
 8004bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	47c8      	blx	r9
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	d01e      	beq.n	8004bf8 <_printf_common+0xa4>
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	6922      	ldr	r2, [r4, #16]
 8004bbe:	f003 0306 	and.w	r3, r3, #6
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	bf02      	ittt	eq
 8004bc6:	68e5      	ldreq	r5, [r4, #12]
 8004bc8:	6833      	ldreq	r3, [r6, #0]
 8004bca:	1aed      	subeq	r5, r5, r3
 8004bcc:	68a3      	ldr	r3, [r4, #8]
 8004bce:	bf0c      	ite	eq
 8004bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd4:	2500      	movne	r5, #0
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bfc4      	itt	gt
 8004bda:	1a9b      	subgt	r3, r3, r2
 8004bdc:	18ed      	addgt	r5, r5, r3
 8004bde:	2600      	movs	r6, #0
 8004be0:	341a      	adds	r4, #26
 8004be2:	42b5      	cmp	r5, r6
 8004be4:	d11a      	bne.n	8004c1c <_printf_common+0xc8>
 8004be6:	2000      	movs	r0, #0
 8004be8:	e008      	b.n	8004bfc <_printf_common+0xa8>
 8004bea:	2301      	movs	r3, #1
 8004bec:	4652      	mov	r2, sl
 8004bee:	4641      	mov	r1, r8
 8004bf0:	4638      	mov	r0, r7
 8004bf2:	47c8      	blx	r9
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d103      	bne.n	8004c00 <_printf_common+0xac>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	3501      	adds	r5, #1
 8004c02:	e7c6      	b.n	8004b92 <_printf_common+0x3e>
 8004c04:	18e1      	adds	r1, r4, r3
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	2030      	movs	r0, #48	@ 0x30
 8004c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c0e:	4422      	add	r2, r4
 8004c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c18:	3302      	adds	r3, #2
 8004c1a:	e7c7      	b.n	8004bac <_printf_common+0x58>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4622      	mov	r2, r4
 8004c20:	4641      	mov	r1, r8
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c8      	blx	r9
 8004c26:	3001      	adds	r0, #1
 8004c28:	d0e6      	beq.n	8004bf8 <_printf_common+0xa4>
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7d9      	b.n	8004be2 <_printf_common+0x8e>
	...

08004c30 <_printf_i>:
 8004c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	7e0f      	ldrb	r7, [r1, #24]
 8004c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c38:	2f78      	cmp	r7, #120	@ 0x78
 8004c3a:	4691      	mov	r9, r2
 8004c3c:	4680      	mov	r8, r0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	469a      	mov	sl, r3
 8004c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c46:	d807      	bhi.n	8004c58 <_printf_i+0x28>
 8004c48:	2f62      	cmp	r7, #98	@ 0x62
 8004c4a:	d80a      	bhi.n	8004c62 <_printf_i+0x32>
 8004c4c:	2f00      	cmp	r7, #0
 8004c4e:	f000 80d1 	beq.w	8004df4 <_printf_i+0x1c4>
 8004c52:	2f58      	cmp	r7, #88	@ 0x58
 8004c54:	f000 80b8 	beq.w	8004dc8 <_printf_i+0x198>
 8004c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c60:	e03a      	b.n	8004cd8 <_printf_i+0xa8>
 8004c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c66:	2b15      	cmp	r3, #21
 8004c68:	d8f6      	bhi.n	8004c58 <_printf_i+0x28>
 8004c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c70 <_printf_i+0x40>)
 8004c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c70:	08004cc9 	.word	0x08004cc9
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004c59 	.word	0x08004c59
 8004c7c:	08004c59 	.word	0x08004c59
 8004c80:	08004c59 	.word	0x08004c59
 8004c84:	08004c59 	.word	0x08004c59
 8004c88:	08004cdd 	.word	0x08004cdd
 8004c8c:	08004c59 	.word	0x08004c59
 8004c90:	08004c59 	.word	0x08004c59
 8004c94:	08004c59 	.word	0x08004c59
 8004c98:	08004c59 	.word	0x08004c59
 8004c9c:	08004ddb 	.word	0x08004ddb
 8004ca0:	08004d07 	.word	0x08004d07
 8004ca4:	08004d95 	.word	0x08004d95
 8004ca8:	08004c59 	.word	0x08004c59
 8004cac:	08004c59 	.word	0x08004c59
 8004cb0:	08004dfd 	.word	0x08004dfd
 8004cb4:	08004c59 	.word	0x08004c59
 8004cb8:	08004d07 	.word	0x08004d07
 8004cbc:	08004c59 	.word	0x08004c59
 8004cc0:	08004c59 	.word	0x08004c59
 8004cc4:	08004d9d 	.word	0x08004d9d
 8004cc8:	6833      	ldr	r3, [r6, #0]
 8004cca:	1d1a      	adds	r2, r3, #4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6032      	str	r2, [r6, #0]
 8004cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e09c      	b.n	8004e16 <_printf_i+0x1e6>
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	6820      	ldr	r0, [r4, #0]
 8004ce0:	1d19      	adds	r1, r3, #4
 8004ce2:	6031      	str	r1, [r6, #0]
 8004ce4:	0606      	lsls	r6, r0, #24
 8004ce6:	d501      	bpl.n	8004cec <_printf_i+0xbc>
 8004ce8:	681d      	ldr	r5, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <_printf_i+0xc4>
 8004cec:	0645      	lsls	r5, r0, #25
 8004cee:	d5fb      	bpl.n	8004ce8 <_printf_i+0xb8>
 8004cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	da03      	bge.n	8004d00 <_printf_i+0xd0>
 8004cf8:	232d      	movs	r3, #45	@ 0x2d
 8004cfa:	426d      	negs	r5, r5
 8004cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d00:	4858      	ldr	r0, [pc, #352]	@ (8004e64 <_printf_i+0x234>)
 8004d02:	230a      	movs	r3, #10
 8004d04:	e011      	b.n	8004d2a <_printf_i+0xfa>
 8004d06:	6821      	ldr	r1, [r4, #0]
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	0608      	lsls	r0, r1, #24
 8004d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d10:	d402      	bmi.n	8004d18 <_printf_i+0xe8>
 8004d12:	0649      	lsls	r1, r1, #25
 8004d14:	bf48      	it	mi
 8004d16:	b2ad      	uxthmi	r5, r5
 8004d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d1a:	4852      	ldr	r0, [pc, #328]	@ (8004e64 <_printf_i+0x234>)
 8004d1c:	6033      	str	r3, [r6, #0]
 8004d1e:	bf14      	ite	ne
 8004d20:	230a      	movne	r3, #10
 8004d22:	2308      	moveq	r3, #8
 8004d24:	2100      	movs	r1, #0
 8004d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d2a:	6866      	ldr	r6, [r4, #4]
 8004d2c:	60a6      	str	r6, [r4, #8]
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	db05      	blt.n	8004d3e <_printf_i+0x10e>
 8004d32:	6821      	ldr	r1, [r4, #0]
 8004d34:	432e      	orrs	r6, r5
 8004d36:	f021 0104 	bic.w	r1, r1, #4
 8004d3a:	6021      	str	r1, [r4, #0]
 8004d3c:	d04b      	beq.n	8004dd6 <_printf_i+0x1a6>
 8004d3e:	4616      	mov	r6, r2
 8004d40:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d44:	fb03 5711 	mls	r7, r3, r1, r5
 8004d48:	5dc7      	ldrb	r7, [r0, r7]
 8004d4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d4e:	462f      	mov	r7, r5
 8004d50:	42bb      	cmp	r3, r7
 8004d52:	460d      	mov	r5, r1
 8004d54:	d9f4      	bls.n	8004d40 <_printf_i+0x110>
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d10b      	bne.n	8004d72 <_printf_i+0x142>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	07df      	lsls	r7, r3, #31
 8004d5e:	d508      	bpl.n	8004d72 <_printf_i+0x142>
 8004d60:	6923      	ldr	r3, [r4, #16]
 8004d62:	6861      	ldr	r1, [r4, #4]
 8004d64:	4299      	cmp	r1, r3
 8004d66:	bfde      	ittt	le
 8004d68:	2330      	movle	r3, #48	@ 0x30
 8004d6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d72:	1b92      	subs	r2, r2, r6
 8004d74:	6122      	str	r2, [r4, #16]
 8004d76:	f8cd a000 	str.w	sl, [sp]
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	aa03      	add	r2, sp, #12
 8004d7e:	4621      	mov	r1, r4
 8004d80:	4640      	mov	r0, r8
 8004d82:	f7ff fee7 	bl	8004b54 <_printf_common>
 8004d86:	3001      	adds	r0, #1
 8004d88:	d14a      	bne.n	8004e20 <_printf_i+0x1f0>
 8004d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8e:	b004      	add	sp, #16
 8004d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	f043 0320 	orr.w	r3, r3, #32
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	4832      	ldr	r0, [pc, #200]	@ (8004e68 <_printf_i+0x238>)
 8004d9e:	2778      	movs	r7, #120	@ 0x78
 8004da0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	6831      	ldr	r1, [r6, #0]
 8004da8:	061f      	lsls	r7, r3, #24
 8004daa:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dae:	d402      	bmi.n	8004db6 <_printf_i+0x186>
 8004db0:	065f      	lsls	r7, r3, #25
 8004db2:	bf48      	it	mi
 8004db4:	b2ad      	uxthmi	r5, r5
 8004db6:	6031      	str	r1, [r6, #0]
 8004db8:	07d9      	lsls	r1, r3, #31
 8004dba:	bf44      	itt	mi
 8004dbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004dc0:	6023      	strmi	r3, [r4, #0]
 8004dc2:	b11d      	cbz	r5, 8004dcc <_printf_i+0x19c>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	e7ad      	b.n	8004d24 <_printf_i+0xf4>
 8004dc8:	4826      	ldr	r0, [pc, #152]	@ (8004e64 <_printf_i+0x234>)
 8004dca:	e7e9      	b.n	8004da0 <_printf_i+0x170>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f023 0320 	bic.w	r3, r3, #32
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	e7f6      	b.n	8004dc4 <_printf_i+0x194>
 8004dd6:	4616      	mov	r6, r2
 8004dd8:	e7bd      	b.n	8004d56 <_printf_i+0x126>
 8004dda:	6833      	ldr	r3, [r6, #0]
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	6961      	ldr	r1, [r4, #20]
 8004de0:	1d18      	adds	r0, r3, #4
 8004de2:	6030      	str	r0, [r6, #0]
 8004de4:	062e      	lsls	r6, r5, #24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	d501      	bpl.n	8004dee <_printf_i+0x1be>
 8004dea:	6019      	str	r1, [r3, #0]
 8004dec:	e002      	b.n	8004df4 <_printf_i+0x1c4>
 8004dee:	0668      	lsls	r0, r5, #25
 8004df0:	d5fb      	bpl.n	8004dea <_printf_i+0x1ba>
 8004df2:	8019      	strh	r1, [r3, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	4616      	mov	r6, r2
 8004dfa:	e7bc      	b.n	8004d76 <_printf_i+0x146>
 8004dfc:	6833      	ldr	r3, [r6, #0]
 8004dfe:	1d1a      	adds	r2, r3, #4
 8004e00:	6032      	str	r2, [r6, #0]
 8004e02:	681e      	ldr	r6, [r3, #0]
 8004e04:	6862      	ldr	r2, [r4, #4]
 8004e06:	2100      	movs	r1, #0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f7fb f9e9 	bl	80001e0 <memchr>
 8004e0e:	b108      	cbz	r0, 8004e14 <_printf_i+0x1e4>
 8004e10:	1b80      	subs	r0, r0, r6
 8004e12:	6060      	str	r0, [r4, #4]
 8004e14:	6863      	ldr	r3, [r4, #4]
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e1e:	e7aa      	b.n	8004d76 <_printf_i+0x146>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	4632      	mov	r2, r6
 8004e24:	4649      	mov	r1, r9
 8004e26:	4640      	mov	r0, r8
 8004e28:	47d0      	blx	sl
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d0ad      	beq.n	8004d8a <_printf_i+0x15a>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	079b      	lsls	r3, r3, #30
 8004e32:	d413      	bmi.n	8004e5c <_printf_i+0x22c>
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	9b03      	ldr	r3, [sp, #12]
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	bfb8      	it	lt
 8004e3c:	4618      	movlt	r0, r3
 8004e3e:	e7a6      	b.n	8004d8e <_printf_i+0x15e>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4632      	mov	r2, r6
 8004e44:	4649      	mov	r1, r9
 8004e46:	4640      	mov	r0, r8
 8004e48:	47d0      	blx	sl
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d09d      	beq.n	8004d8a <_printf_i+0x15a>
 8004e4e:	3501      	adds	r5, #1
 8004e50:	68e3      	ldr	r3, [r4, #12]
 8004e52:	9903      	ldr	r1, [sp, #12]
 8004e54:	1a5b      	subs	r3, r3, r1
 8004e56:	42ab      	cmp	r3, r5
 8004e58:	dcf2      	bgt.n	8004e40 <_printf_i+0x210>
 8004e5a:	e7eb      	b.n	8004e34 <_printf_i+0x204>
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	f104 0619 	add.w	r6, r4, #25
 8004e62:	e7f5      	b.n	8004e50 <_printf_i+0x220>
 8004e64:	08008d1a 	.word	0x08008d1a
 8004e68:	08008d2b 	.word	0x08008d2b

08004e6c <_scanf_float>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	b087      	sub	sp, #28
 8004e72:	4691      	mov	r9, r2
 8004e74:	9303      	str	r3, [sp, #12]
 8004e76:	688b      	ldr	r3, [r1, #8]
 8004e78:	1e5a      	subs	r2, r3, #1
 8004e7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004e7e:	bf81      	itttt	hi
 8004e80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004e84:	eb03 0b05 	addhi.w	fp, r3, r5
 8004e88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004e8c:	608b      	strhi	r3, [r1, #8]
 8004e8e:	680b      	ldr	r3, [r1, #0]
 8004e90:	460a      	mov	r2, r1
 8004e92:	f04f 0500 	mov.w	r5, #0
 8004e96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004e9a:	f842 3b1c 	str.w	r3, [r2], #28
 8004e9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ea2:	4680      	mov	r8, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	bf98      	it	ls
 8004ea8:	f04f 0b00 	movls.w	fp, #0
 8004eac:	9201      	str	r2, [sp, #4]
 8004eae:	4616      	mov	r6, r2
 8004eb0:	46aa      	mov	sl, r5
 8004eb2:	462f      	mov	r7, r5
 8004eb4:	9502      	str	r5, [sp, #8]
 8004eb6:	68a2      	ldr	r2, [r4, #8]
 8004eb8:	b15a      	cbz	r2, 8004ed2 <_scanf_float+0x66>
 8004eba:	f8d9 3000 	ldr.w	r3, [r9]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ec2:	d863      	bhi.n	8004f8c <_scanf_float+0x120>
 8004ec4:	2b40      	cmp	r3, #64	@ 0x40
 8004ec6:	d83b      	bhi.n	8004f40 <_scanf_float+0xd4>
 8004ec8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004ecc:	b2c8      	uxtb	r0, r1
 8004ece:	280e      	cmp	r0, #14
 8004ed0:	d939      	bls.n	8004f46 <_scanf_float+0xda>
 8004ed2:	b11f      	cbz	r7, 8004edc <_scanf_float+0x70>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eda:	6023      	str	r3, [r4, #0]
 8004edc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ee0:	f1ba 0f01 	cmp.w	sl, #1
 8004ee4:	f200 8114 	bhi.w	8005110 <_scanf_float+0x2a4>
 8004ee8:	9b01      	ldr	r3, [sp, #4]
 8004eea:	429e      	cmp	r6, r3
 8004eec:	f200 8105 	bhi.w	80050fa <_scanf_float+0x28e>
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	b007      	add	sp, #28
 8004ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004efc:	2a0d      	cmp	r2, #13
 8004efe:	d8e8      	bhi.n	8004ed2 <_scanf_float+0x66>
 8004f00:	a101      	add	r1, pc, #4	@ (adr r1, 8004f08 <_scanf_float+0x9c>)
 8004f02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08005051 	.word	0x08005051
 8004f0c:	08004ed3 	.word	0x08004ed3
 8004f10:	08004ed3 	.word	0x08004ed3
 8004f14:	08004ed3 	.word	0x08004ed3
 8004f18:	080050ad 	.word	0x080050ad
 8004f1c:	08005087 	.word	0x08005087
 8004f20:	08004ed3 	.word	0x08004ed3
 8004f24:	08004ed3 	.word	0x08004ed3
 8004f28:	0800505f 	.word	0x0800505f
 8004f2c:	08004ed3 	.word	0x08004ed3
 8004f30:	08004ed3 	.word	0x08004ed3
 8004f34:	08004ed3 	.word	0x08004ed3
 8004f38:	08004ed3 	.word	0x08004ed3
 8004f3c:	0800501b 	.word	0x0800501b
 8004f40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004f44:	e7da      	b.n	8004efc <_scanf_float+0x90>
 8004f46:	290e      	cmp	r1, #14
 8004f48:	d8c3      	bhi.n	8004ed2 <_scanf_float+0x66>
 8004f4a:	a001      	add	r0, pc, #4	@ (adr r0, 8004f50 <_scanf_float+0xe4>)
 8004f4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004f50:	0800500b 	.word	0x0800500b
 8004f54:	08004ed3 	.word	0x08004ed3
 8004f58:	0800500b 	.word	0x0800500b
 8004f5c:	0800509b 	.word	0x0800509b
 8004f60:	08004ed3 	.word	0x08004ed3
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004ff1 	.word	0x08004ff1
 8004f6c:	08004ff1 	.word	0x08004ff1
 8004f70:	08004ff1 	.word	0x08004ff1
 8004f74:	08004ff1 	.word	0x08004ff1
 8004f78:	08004ff1 	.word	0x08004ff1
 8004f7c:	08004ff1 	.word	0x08004ff1
 8004f80:	08004ff1 	.word	0x08004ff1
 8004f84:	08004ff1 	.word	0x08004ff1
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004f8e:	d809      	bhi.n	8004fa4 <_scanf_float+0x138>
 8004f90:	2b60      	cmp	r3, #96	@ 0x60
 8004f92:	d8b1      	bhi.n	8004ef8 <_scanf_float+0x8c>
 8004f94:	2b54      	cmp	r3, #84	@ 0x54
 8004f96:	d07b      	beq.n	8005090 <_scanf_float+0x224>
 8004f98:	2b59      	cmp	r3, #89	@ 0x59
 8004f9a:	d19a      	bne.n	8004ed2 <_scanf_float+0x66>
 8004f9c:	2d07      	cmp	r5, #7
 8004f9e:	d198      	bne.n	8004ed2 <_scanf_float+0x66>
 8004fa0:	2508      	movs	r5, #8
 8004fa2:	e02f      	b.n	8005004 <_scanf_float+0x198>
 8004fa4:	2b74      	cmp	r3, #116	@ 0x74
 8004fa6:	d073      	beq.n	8005090 <_scanf_float+0x224>
 8004fa8:	2b79      	cmp	r3, #121	@ 0x79
 8004faa:	e7f6      	b.n	8004f9a <_scanf_float+0x12e>
 8004fac:	6821      	ldr	r1, [r4, #0]
 8004fae:	05c8      	lsls	r0, r1, #23
 8004fb0:	d51e      	bpl.n	8004ff0 <_scanf_float+0x184>
 8004fb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004fb6:	6021      	str	r1, [r4, #0]
 8004fb8:	3701      	adds	r7, #1
 8004fba:	f1bb 0f00 	cmp.w	fp, #0
 8004fbe:	d003      	beq.n	8004fc8 <_scanf_float+0x15c>
 8004fc0:	3201      	adds	r2, #1
 8004fc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fc6:	60a2      	str	r2, [r4, #8]
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	60a3      	str	r3, [r4, #8]
 8004fce:	6923      	ldr	r3, [r4, #16]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f8c9 3004 	str.w	r3, [r9, #4]
 8004fe0:	f340 8082 	ble.w	80050e8 <_scanf_float+0x27c>
 8004fe4:	f8d9 3000 	ldr.w	r3, [r9]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	f8c9 3000 	str.w	r3, [r9]
 8004fee:	e762      	b.n	8004eb6 <_scanf_float+0x4a>
 8004ff0:	eb1a 0105 	adds.w	r1, sl, r5
 8004ff4:	f47f af6d 	bne.w	8004ed2 <_scanf_float+0x66>
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ffe:	6022      	str	r2, [r4, #0]
 8005000:	460d      	mov	r5, r1
 8005002:	468a      	mov	sl, r1
 8005004:	f806 3b01 	strb.w	r3, [r6], #1
 8005008:	e7de      	b.n	8004fc8 <_scanf_float+0x15c>
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	0610      	lsls	r0, r2, #24
 800500e:	f57f af60 	bpl.w	8004ed2 <_scanf_float+0x66>
 8005012:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005016:	6022      	str	r2, [r4, #0]
 8005018:	e7f4      	b.n	8005004 <_scanf_float+0x198>
 800501a:	f1ba 0f00 	cmp.w	sl, #0
 800501e:	d10c      	bne.n	800503a <_scanf_float+0x1ce>
 8005020:	b977      	cbnz	r7, 8005040 <_scanf_float+0x1d4>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005028:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800502c:	d108      	bne.n	8005040 <_scanf_float+0x1d4>
 800502e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005032:	6022      	str	r2, [r4, #0]
 8005034:	f04f 0a01 	mov.w	sl, #1
 8005038:	e7e4      	b.n	8005004 <_scanf_float+0x198>
 800503a:	f1ba 0f02 	cmp.w	sl, #2
 800503e:	d050      	beq.n	80050e2 <_scanf_float+0x276>
 8005040:	2d01      	cmp	r5, #1
 8005042:	d002      	beq.n	800504a <_scanf_float+0x1de>
 8005044:	2d04      	cmp	r5, #4
 8005046:	f47f af44 	bne.w	8004ed2 <_scanf_float+0x66>
 800504a:	3501      	adds	r5, #1
 800504c:	b2ed      	uxtb	r5, r5
 800504e:	e7d9      	b.n	8005004 <_scanf_float+0x198>
 8005050:	f1ba 0f01 	cmp.w	sl, #1
 8005054:	f47f af3d 	bne.w	8004ed2 <_scanf_float+0x66>
 8005058:	f04f 0a02 	mov.w	sl, #2
 800505c:	e7d2      	b.n	8005004 <_scanf_float+0x198>
 800505e:	b975      	cbnz	r5, 800507e <_scanf_float+0x212>
 8005060:	2f00      	cmp	r7, #0
 8005062:	f47f af37 	bne.w	8004ed4 <_scanf_float+0x68>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800506c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005070:	f040 8103 	bne.w	800527a <_scanf_float+0x40e>
 8005074:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005078:	6022      	str	r2, [r4, #0]
 800507a:	2501      	movs	r5, #1
 800507c:	e7c2      	b.n	8005004 <_scanf_float+0x198>
 800507e:	2d03      	cmp	r5, #3
 8005080:	d0e3      	beq.n	800504a <_scanf_float+0x1de>
 8005082:	2d05      	cmp	r5, #5
 8005084:	e7df      	b.n	8005046 <_scanf_float+0x1da>
 8005086:	2d02      	cmp	r5, #2
 8005088:	f47f af23 	bne.w	8004ed2 <_scanf_float+0x66>
 800508c:	2503      	movs	r5, #3
 800508e:	e7b9      	b.n	8005004 <_scanf_float+0x198>
 8005090:	2d06      	cmp	r5, #6
 8005092:	f47f af1e 	bne.w	8004ed2 <_scanf_float+0x66>
 8005096:	2507      	movs	r5, #7
 8005098:	e7b4      	b.n	8005004 <_scanf_float+0x198>
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	0591      	lsls	r1, r2, #22
 800509e:	f57f af18 	bpl.w	8004ed2 <_scanf_float+0x66>
 80050a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80050a6:	6022      	str	r2, [r4, #0]
 80050a8:	9702      	str	r7, [sp, #8]
 80050aa:	e7ab      	b.n	8005004 <_scanf_float+0x198>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80050b2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80050b6:	d005      	beq.n	80050c4 <_scanf_float+0x258>
 80050b8:	0550      	lsls	r0, r2, #21
 80050ba:	f57f af0a 	bpl.w	8004ed2 <_scanf_float+0x66>
 80050be:	2f00      	cmp	r7, #0
 80050c0:	f000 80db 	beq.w	800527a <_scanf_float+0x40e>
 80050c4:	0591      	lsls	r1, r2, #22
 80050c6:	bf58      	it	pl
 80050c8:	9902      	ldrpl	r1, [sp, #8]
 80050ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80050ce:	bf58      	it	pl
 80050d0:	1a79      	subpl	r1, r7, r1
 80050d2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80050d6:	bf58      	it	pl
 80050d8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80050dc:	6022      	str	r2, [r4, #0]
 80050de:	2700      	movs	r7, #0
 80050e0:	e790      	b.n	8005004 <_scanf_float+0x198>
 80050e2:	f04f 0a03 	mov.w	sl, #3
 80050e6:	e78d      	b.n	8005004 <_scanf_float+0x198>
 80050e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80050ec:	4649      	mov	r1, r9
 80050ee:	4640      	mov	r0, r8
 80050f0:	4798      	blx	r3
 80050f2:	2800      	cmp	r0, #0
 80050f4:	f43f aedf 	beq.w	8004eb6 <_scanf_float+0x4a>
 80050f8:	e6eb      	b.n	8004ed2 <_scanf_float+0x66>
 80050fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005102:	464a      	mov	r2, r9
 8005104:	4640      	mov	r0, r8
 8005106:	4798      	blx	r3
 8005108:	6923      	ldr	r3, [r4, #16]
 800510a:	3b01      	subs	r3, #1
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	e6eb      	b.n	8004ee8 <_scanf_float+0x7c>
 8005110:	1e6b      	subs	r3, r5, #1
 8005112:	2b06      	cmp	r3, #6
 8005114:	d824      	bhi.n	8005160 <_scanf_float+0x2f4>
 8005116:	2d02      	cmp	r5, #2
 8005118:	d836      	bhi.n	8005188 <_scanf_float+0x31c>
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	429e      	cmp	r6, r3
 800511e:	f67f aee7 	bls.w	8004ef0 <_scanf_float+0x84>
 8005122:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005126:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800512a:	464a      	mov	r2, r9
 800512c:	4640      	mov	r0, r8
 800512e:	4798      	blx	r3
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	3b01      	subs	r3, #1
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	e7f0      	b.n	800511a <_scanf_float+0x2ae>
 8005138:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800513c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005140:	464a      	mov	r2, r9
 8005142:	4640      	mov	r0, r8
 8005144:	4798      	blx	r3
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	3b01      	subs	r3, #1
 800514a:	6123      	str	r3, [r4, #16]
 800514c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005150:	fa5f fa8a 	uxtb.w	sl, sl
 8005154:	f1ba 0f02 	cmp.w	sl, #2
 8005158:	d1ee      	bne.n	8005138 <_scanf_float+0x2cc>
 800515a:	3d03      	subs	r5, #3
 800515c:	b2ed      	uxtb	r5, r5
 800515e:	1b76      	subs	r6, r6, r5
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	05da      	lsls	r2, r3, #23
 8005164:	d530      	bpl.n	80051c8 <_scanf_float+0x35c>
 8005166:	055b      	lsls	r3, r3, #21
 8005168:	d511      	bpl.n	800518e <_scanf_float+0x322>
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	429e      	cmp	r6, r3
 800516e:	f67f aebf 	bls.w	8004ef0 <_scanf_float+0x84>
 8005172:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005176:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800517a:	464a      	mov	r2, r9
 800517c:	4640      	mov	r0, r8
 800517e:	4798      	blx	r3
 8005180:	6923      	ldr	r3, [r4, #16]
 8005182:	3b01      	subs	r3, #1
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	e7f0      	b.n	800516a <_scanf_float+0x2fe>
 8005188:	46aa      	mov	sl, r5
 800518a:	46b3      	mov	fp, r6
 800518c:	e7de      	b.n	800514c <_scanf_float+0x2e0>
 800518e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	2965      	cmp	r1, #101	@ 0x65
 8005196:	f103 33ff 	add.w	r3, r3, #4294967295
 800519a:	f106 35ff 	add.w	r5, r6, #4294967295
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	d00c      	beq.n	80051bc <_scanf_float+0x350>
 80051a2:	2945      	cmp	r1, #69	@ 0x45
 80051a4:	d00a      	beq.n	80051bc <_scanf_float+0x350>
 80051a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051aa:	464a      	mov	r2, r9
 80051ac:	4640      	mov	r0, r8
 80051ae:	4798      	blx	r3
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	1eb5      	subs	r5, r6, #2
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80051c0:	464a      	mov	r2, r9
 80051c2:	4640      	mov	r0, r8
 80051c4:	4798      	blx	r3
 80051c6:	462e      	mov	r6, r5
 80051c8:	6822      	ldr	r2, [r4, #0]
 80051ca:	f012 0210 	ands.w	r2, r2, #16
 80051ce:	d001      	beq.n	80051d4 <_scanf_float+0x368>
 80051d0:	2000      	movs	r0, #0
 80051d2:	e68e      	b.n	8004ef2 <_scanf_float+0x86>
 80051d4:	7032      	strb	r2, [r6, #0]
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e0:	d125      	bne.n	800522e <_scanf_float+0x3c2>
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	429f      	cmp	r7, r3
 80051e6:	d00a      	beq.n	80051fe <_scanf_float+0x392>
 80051e8:	1bda      	subs	r2, r3, r7
 80051ea:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80051ee:	429e      	cmp	r6, r3
 80051f0:	bf28      	it	cs
 80051f2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80051f6:	4922      	ldr	r1, [pc, #136]	@ (8005280 <_scanf_float+0x414>)
 80051f8:	4630      	mov	r0, r6
 80051fa:	f000 f907 	bl	800540c <siprintf>
 80051fe:	9901      	ldr	r1, [sp, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	4640      	mov	r0, r8
 8005204:	f002 fbf4 	bl	80079f0 <_strtod_r>
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	6821      	ldr	r1, [r4, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f011 0f02 	tst.w	r1, #2
 8005212:	ec57 6b10 	vmov	r6, r7, d0
 8005216:	f103 0204 	add.w	r2, r3, #4
 800521a:	d015      	beq.n	8005248 <_scanf_float+0x3dc>
 800521c:	9903      	ldr	r1, [sp, #12]
 800521e:	600a      	str	r2, [r1, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	e9c3 6700 	strd	r6, r7, [r3]
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	3301      	adds	r3, #1
 800522a:	60e3      	str	r3, [r4, #12]
 800522c:	e7d0      	b.n	80051d0 <_scanf_float+0x364>
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0e4      	beq.n	80051fe <_scanf_float+0x392>
 8005234:	9905      	ldr	r1, [sp, #20]
 8005236:	230a      	movs	r3, #10
 8005238:	3101      	adds	r1, #1
 800523a:	4640      	mov	r0, r8
 800523c:	f002 fc58 	bl	8007af0 <_strtol_r>
 8005240:	9b04      	ldr	r3, [sp, #16]
 8005242:	9e05      	ldr	r6, [sp, #20]
 8005244:	1ac2      	subs	r2, r0, r3
 8005246:	e7d0      	b.n	80051ea <_scanf_float+0x37e>
 8005248:	f011 0f04 	tst.w	r1, #4
 800524c:	9903      	ldr	r1, [sp, #12]
 800524e:	600a      	str	r2, [r1, #0]
 8005250:	d1e6      	bne.n	8005220 <_scanf_float+0x3b4>
 8005252:	681d      	ldr	r5, [r3, #0]
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fb fc6e 	bl	8000b3c <__aeabi_dcmpun>
 8005260:	b128      	cbz	r0, 800526e <_scanf_float+0x402>
 8005262:	4808      	ldr	r0, [pc, #32]	@ (8005284 <_scanf_float+0x418>)
 8005264:	f000 f9b8 	bl	80055d8 <nanf>
 8005268:	ed85 0a00 	vstr	s0, [r5]
 800526c:	e7db      	b.n	8005226 <_scanf_float+0x3ba>
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fb fcc1 	bl	8000bf8 <__aeabi_d2f>
 8005276:	6028      	str	r0, [r5, #0]
 8005278:	e7d5      	b.n	8005226 <_scanf_float+0x3ba>
 800527a:	2700      	movs	r7, #0
 800527c:	e62e      	b.n	8004edc <_scanf_float+0x70>
 800527e:	bf00      	nop
 8005280:	08008d3c 	.word	0x08008d3c
 8005284:	08008e7d 	.word	0x08008e7d

08005288 <std>:
 8005288:	2300      	movs	r3, #0
 800528a:	b510      	push	{r4, lr}
 800528c:	4604      	mov	r4, r0
 800528e:	e9c0 3300 	strd	r3, r3, [r0]
 8005292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005296:	6083      	str	r3, [r0, #8]
 8005298:	8181      	strh	r1, [r0, #12]
 800529a:	6643      	str	r3, [r0, #100]	@ 0x64
 800529c:	81c2      	strh	r2, [r0, #14]
 800529e:	6183      	str	r3, [r0, #24]
 80052a0:	4619      	mov	r1, r3
 80052a2:	2208      	movs	r2, #8
 80052a4:	305c      	adds	r0, #92	@ 0x5c
 80052a6:	f000 f916 	bl	80054d6 <memset>
 80052aa:	4b0d      	ldr	r3, [pc, #52]	@ (80052e0 <std+0x58>)
 80052ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ae:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <std+0x5c>)
 80052b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052b2:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <std+0x60>)
 80052b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <std+0x64>)
 80052b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <std+0x68>)
 80052bc:	6224      	str	r4, [r4, #32]
 80052be:	429c      	cmp	r4, r3
 80052c0:	d006      	beq.n	80052d0 <std+0x48>
 80052c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052c6:	4294      	cmp	r4, r2
 80052c8:	d002      	beq.n	80052d0 <std+0x48>
 80052ca:	33d0      	adds	r3, #208	@ 0xd0
 80052cc:	429c      	cmp	r4, r3
 80052ce:	d105      	bne.n	80052dc <std+0x54>
 80052d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d8:	f000 b97a 	b.w	80055d0 <__retarget_lock_init_recursive>
 80052dc:	bd10      	pop	{r4, pc}
 80052de:	bf00      	nop
 80052e0:	08005451 	.word	0x08005451
 80052e4:	08005473 	.word	0x08005473
 80052e8:	080054ab 	.word	0x080054ab
 80052ec:	080054cf 	.word	0x080054cf
 80052f0:	200002d0 	.word	0x200002d0

080052f4 <stdio_exit_handler>:
 80052f4:	4a02      	ldr	r2, [pc, #8]	@ (8005300 <stdio_exit_handler+0xc>)
 80052f6:	4903      	ldr	r1, [pc, #12]	@ (8005304 <stdio_exit_handler+0x10>)
 80052f8:	4803      	ldr	r0, [pc, #12]	@ (8005308 <stdio_exit_handler+0x14>)
 80052fa:	f000 b869 	b.w	80053d0 <_fwalk_sglue>
 80052fe:	bf00      	nop
 8005300:	2000000c 	.word	0x2000000c
 8005304:	08007ead 	.word	0x08007ead
 8005308:	2000001c 	.word	0x2000001c

0800530c <cleanup_stdio>:
 800530c:	6841      	ldr	r1, [r0, #4]
 800530e:	4b0c      	ldr	r3, [pc, #48]	@ (8005340 <cleanup_stdio+0x34>)
 8005310:	4299      	cmp	r1, r3
 8005312:	b510      	push	{r4, lr}
 8005314:	4604      	mov	r4, r0
 8005316:	d001      	beq.n	800531c <cleanup_stdio+0x10>
 8005318:	f002 fdc8 	bl	8007eac <_fflush_r>
 800531c:	68a1      	ldr	r1, [r4, #8]
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <cleanup_stdio+0x38>)
 8005320:	4299      	cmp	r1, r3
 8005322:	d002      	beq.n	800532a <cleanup_stdio+0x1e>
 8005324:	4620      	mov	r0, r4
 8005326:	f002 fdc1 	bl	8007eac <_fflush_r>
 800532a:	68e1      	ldr	r1, [r4, #12]
 800532c:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <cleanup_stdio+0x3c>)
 800532e:	4299      	cmp	r1, r3
 8005330:	d004      	beq.n	800533c <cleanup_stdio+0x30>
 8005332:	4620      	mov	r0, r4
 8005334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005338:	f002 bdb8 	b.w	8007eac <_fflush_r>
 800533c:	bd10      	pop	{r4, pc}
 800533e:	bf00      	nop
 8005340:	200002d0 	.word	0x200002d0
 8005344:	20000338 	.word	0x20000338
 8005348:	200003a0 	.word	0x200003a0

0800534c <global_stdio_init.part.0>:
 800534c:	b510      	push	{r4, lr}
 800534e:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <global_stdio_init.part.0+0x30>)
 8005350:	4c0b      	ldr	r4, [pc, #44]	@ (8005380 <global_stdio_init.part.0+0x34>)
 8005352:	4a0c      	ldr	r2, [pc, #48]	@ (8005384 <global_stdio_init.part.0+0x38>)
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	4620      	mov	r0, r4
 8005358:	2200      	movs	r2, #0
 800535a:	2104      	movs	r1, #4
 800535c:	f7ff ff94 	bl	8005288 <std>
 8005360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005364:	2201      	movs	r2, #1
 8005366:	2109      	movs	r1, #9
 8005368:	f7ff ff8e 	bl	8005288 <std>
 800536c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005370:	2202      	movs	r2, #2
 8005372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005376:	2112      	movs	r1, #18
 8005378:	f7ff bf86 	b.w	8005288 <std>
 800537c:	20000408 	.word	0x20000408
 8005380:	200002d0 	.word	0x200002d0
 8005384:	080052f5 	.word	0x080052f5

08005388 <__sfp_lock_acquire>:
 8005388:	4801      	ldr	r0, [pc, #4]	@ (8005390 <__sfp_lock_acquire+0x8>)
 800538a:	f000 b922 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 800538e:	bf00      	nop
 8005390:	20000411 	.word	0x20000411

08005394 <__sfp_lock_release>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__sfp_lock_release+0x8>)
 8005396:	f000 b91d 	b.w	80055d4 <__retarget_lock_release_recursive>
 800539a:	bf00      	nop
 800539c:	20000411 	.word	0x20000411

080053a0 <__sinit>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4604      	mov	r4, r0
 80053a4:	f7ff fff0 	bl	8005388 <__sfp_lock_acquire>
 80053a8:	6a23      	ldr	r3, [r4, #32]
 80053aa:	b11b      	cbz	r3, 80053b4 <__sinit+0x14>
 80053ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b0:	f7ff bff0 	b.w	8005394 <__sfp_lock_release>
 80053b4:	4b04      	ldr	r3, [pc, #16]	@ (80053c8 <__sinit+0x28>)
 80053b6:	6223      	str	r3, [r4, #32]
 80053b8:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <__sinit+0x2c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f5      	bne.n	80053ac <__sinit+0xc>
 80053c0:	f7ff ffc4 	bl	800534c <global_stdio_init.part.0>
 80053c4:	e7f2      	b.n	80053ac <__sinit+0xc>
 80053c6:	bf00      	nop
 80053c8:	0800530d 	.word	0x0800530d
 80053cc:	20000408 	.word	0x20000408

080053d0 <_fwalk_sglue>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4607      	mov	r7, r0
 80053d6:	4688      	mov	r8, r1
 80053d8:	4614      	mov	r4, r2
 80053da:	2600      	movs	r6, #0
 80053dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053e0:	f1b9 0901 	subs.w	r9, r9, #1
 80053e4:	d505      	bpl.n	80053f2 <_fwalk_sglue+0x22>
 80053e6:	6824      	ldr	r4, [r4, #0]
 80053e8:	2c00      	cmp	r4, #0
 80053ea:	d1f7      	bne.n	80053dc <_fwalk_sglue+0xc>
 80053ec:	4630      	mov	r0, r6
 80053ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053f2:	89ab      	ldrh	r3, [r5, #12]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d907      	bls.n	8005408 <_fwalk_sglue+0x38>
 80053f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053fc:	3301      	adds	r3, #1
 80053fe:	d003      	beq.n	8005408 <_fwalk_sglue+0x38>
 8005400:	4629      	mov	r1, r5
 8005402:	4638      	mov	r0, r7
 8005404:	47c0      	blx	r8
 8005406:	4306      	orrs	r6, r0
 8005408:	3568      	adds	r5, #104	@ 0x68
 800540a:	e7e9      	b.n	80053e0 <_fwalk_sglue+0x10>

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	b510      	push	{r4, lr}
 8005410:	b09d      	sub	sp, #116	@ 0x74
 8005412:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	9006      	str	r0, [sp, #24]
 8005418:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800541c:	480a      	ldr	r0, [pc, #40]	@ (8005448 <siprintf+0x3c>)
 800541e:	9107      	str	r1, [sp, #28]
 8005420:	9104      	str	r1, [sp, #16]
 8005422:	490a      	ldr	r1, [pc, #40]	@ (800544c <siprintf+0x40>)
 8005424:	f853 2b04 	ldr.w	r2, [r3], #4
 8005428:	9105      	str	r1, [sp, #20]
 800542a:	2400      	movs	r4, #0
 800542c:	a902      	add	r1, sp, #8
 800542e:	6800      	ldr	r0, [r0, #0]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005434:	f002 fbba 	bl	8007bac <_svfiprintf_r>
 8005438:	9b02      	ldr	r3, [sp, #8]
 800543a:	701c      	strb	r4, [r3, #0]
 800543c:	b01d      	add	sp, #116	@ 0x74
 800543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005442:	b003      	add	sp, #12
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000018 	.word	0x20000018
 800544c:	ffff0208 	.word	0xffff0208

08005450 <__sread>:
 8005450:	b510      	push	{r4, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	f000 f86c 	bl	8005534 <_read_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	bfab      	itete	ge
 8005460:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005462:	89a3      	ldrhlt	r3, [r4, #12]
 8005464:	181b      	addge	r3, r3, r0
 8005466:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800546a:	bfac      	ite	ge
 800546c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800546e:	81a3      	strhlt	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__swrite>:
 8005472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	461f      	mov	r7, r3
 8005478:	898b      	ldrh	r3, [r1, #12]
 800547a:	05db      	lsls	r3, r3, #23
 800547c:	4605      	mov	r5, r0
 800547e:	460c      	mov	r4, r1
 8005480:	4616      	mov	r6, r2
 8005482:	d505      	bpl.n	8005490 <__swrite+0x1e>
 8005484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005488:	2302      	movs	r3, #2
 800548a:	2200      	movs	r2, #0
 800548c:	f000 f840 	bl	8005510 <_lseek_r>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005496:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	4632      	mov	r2, r6
 800549e:	463b      	mov	r3, r7
 80054a0:	4628      	mov	r0, r5
 80054a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	f000 b857 	b.w	8005558 <_write_r>

080054aa <__sseek>:
 80054aa:	b510      	push	{r4, lr}
 80054ac:	460c      	mov	r4, r1
 80054ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b2:	f000 f82d 	bl	8005510 <_lseek_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	bf15      	itete	ne
 80054bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054c6:	81a3      	strheq	r3, [r4, #12]
 80054c8:	bf18      	it	ne
 80054ca:	81a3      	strhne	r3, [r4, #12]
 80054cc:	bd10      	pop	{r4, pc}

080054ce <__sclose>:
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 b80d 	b.w	80054f0 <_close_r>

080054d6 <memset>:
 80054d6:	4402      	add	r2, r0
 80054d8:	4603      	mov	r3, r0
 80054da:	4293      	cmp	r3, r2
 80054dc:	d100      	bne.n	80054e0 <memset+0xa>
 80054de:	4770      	bx	lr
 80054e0:	f803 1b01 	strb.w	r1, [r3], #1
 80054e4:	e7f9      	b.n	80054da <memset+0x4>
	...

080054e8 <_localeconv_r>:
 80054e8:	4800      	ldr	r0, [pc, #0]	@ (80054ec <_localeconv_r+0x4>)
 80054ea:	4770      	bx	lr
 80054ec:	20000158 	.word	0x20000158

080054f0 <_close_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	@ (800550c <_close_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fc f878 	bl	80015f0 <_close>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_close_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_close_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	2000040c 	.word	0x2000040c

08005510 <_lseek_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4d07      	ldr	r5, [pc, #28]	@ (8005530 <_lseek_r+0x20>)
 8005514:	4604      	mov	r4, r0
 8005516:	4608      	mov	r0, r1
 8005518:	4611      	mov	r1, r2
 800551a:	2200      	movs	r2, #0
 800551c:	602a      	str	r2, [r5, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fc f88d 	bl	800163e <_lseek>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_lseek_r+0x1e>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_lseek_r+0x1e>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	2000040c 	.word	0x2000040c

08005534 <_read_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	@ (8005554 <_read_r+0x20>)
 8005538:	4604      	mov	r4, r0
 800553a:	4608      	mov	r0, r1
 800553c:	4611      	mov	r1, r2
 800553e:	2200      	movs	r2, #0
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fc f81b 	bl	800157e <_read>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_read_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_read_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	2000040c 	.word	0x2000040c

08005558 <_write_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d07      	ldr	r5, [pc, #28]	@ (8005578 <_write_r+0x20>)
 800555c:	4604      	mov	r4, r0
 800555e:	4608      	mov	r0, r1
 8005560:	4611      	mov	r1, r2
 8005562:	2200      	movs	r2, #0
 8005564:	602a      	str	r2, [r5, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f7fc f826 	bl	80015b8 <_write>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_write_r+0x1e>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_write_r+0x1e>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	2000040c 	.word	0x2000040c

0800557c <__errno>:
 800557c:	4b01      	ldr	r3, [pc, #4]	@ (8005584 <__errno+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4d0d      	ldr	r5, [pc, #52]	@ (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	@ (80055c4 <__libc_init_array+0x3c>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2600      	movs	r6, #0
 8005594:	42a6      	cmp	r6, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4d0b      	ldr	r5, [pc, #44]	@ (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	@ (80055cc <__libc_init_array+0x44>)
 800559c:	f003 fb76 	bl	8008c8c <_init>
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2600      	movs	r6, #0
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b0:	4798      	blx	r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ba:	4798      	blx	r3
 80055bc:	3601      	adds	r6, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	0800913c 	.word	0x0800913c
 80055c4:	0800913c 	.word	0x0800913c
 80055c8:	0800913c 	.word	0x0800913c
 80055cc:	08009140 	.word	0x08009140

080055d0 <__retarget_lock_init_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_acquire_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <__retarget_lock_release_recursive>:
 80055d4:	4770      	bx	lr
	...

080055d8 <nanf>:
 80055d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80055e0 <nanf+0x8>
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	7fc00000 	.word	0x7fc00000

080055e4 <quorem>:
 80055e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	6903      	ldr	r3, [r0, #16]
 80055ea:	690c      	ldr	r4, [r1, #16]
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	4607      	mov	r7, r0
 80055f0:	db7e      	blt.n	80056f0 <quorem+0x10c>
 80055f2:	3c01      	subs	r4, #1
 80055f4:	f101 0814 	add.w	r8, r1, #20
 80055f8:	00a3      	lsls	r3, r4, #2
 80055fa:	f100 0514 	add.w	r5, r0, #20
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800560a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800560e:	3301      	adds	r3, #1
 8005610:	429a      	cmp	r2, r3
 8005612:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005616:	fbb2 f6f3 	udiv	r6, r2, r3
 800561a:	d32e      	bcc.n	800567a <quorem+0x96>
 800561c:	f04f 0a00 	mov.w	sl, #0
 8005620:	46c4      	mov	ip, r8
 8005622:	46ae      	mov	lr, r5
 8005624:	46d3      	mov	fp, sl
 8005626:	f85c 3b04 	ldr.w	r3, [ip], #4
 800562a:	b298      	uxth	r0, r3
 800562c:	fb06 a000 	mla	r0, r6, r0, sl
 8005630:	0c02      	lsrs	r2, r0, #16
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	fb06 2303 	mla	r3, r6, r3, r2
 8005638:	f8de 2000 	ldr.w	r2, [lr]
 800563c:	b280      	uxth	r0, r0
 800563e:	b292      	uxth	r2, r2
 8005640:	1a12      	subs	r2, r2, r0
 8005642:	445a      	add	r2, fp
 8005644:	f8de 0000 	ldr.w	r0, [lr]
 8005648:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800564c:	b29b      	uxth	r3, r3
 800564e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005652:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005656:	b292      	uxth	r2, r2
 8005658:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800565c:	45e1      	cmp	r9, ip
 800565e:	f84e 2b04 	str.w	r2, [lr], #4
 8005662:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005666:	d2de      	bcs.n	8005626 <quorem+0x42>
 8005668:	9b00      	ldr	r3, [sp, #0]
 800566a:	58eb      	ldr	r3, [r5, r3]
 800566c:	b92b      	cbnz	r3, 800567a <quorem+0x96>
 800566e:	9b01      	ldr	r3, [sp, #4]
 8005670:	3b04      	subs	r3, #4
 8005672:	429d      	cmp	r5, r3
 8005674:	461a      	mov	r2, r3
 8005676:	d32f      	bcc.n	80056d8 <quorem+0xf4>
 8005678:	613c      	str	r4, [r7, #16]
 800567a:	4638      	mov	r0, r7
 800567c:	f001 f9c8 	bl	8006a10 <__mcmp>
 8005680:	2800      	cmp	r0, #0
 8005682:	db25      	blt.n	80056d0 <quorem+0xec>
 8005684:	4629      	mov	r1, r5
 8005686:	2000      	movs	r0, #0
 8005688:	f858 2b04 	ldr.w	r2, [r8], #4
 800568c:	f8d1 c000 	ldr.w	ip, [r1]
 8005690:	fa1f fe82 	uxth.w	lr, r2
 8005694:	fa1f f38c 	uxth.w	r3, ip
 8005698:	eba3 030e 	sub.w	r3, r3, lr
 800569c:	4403      	add	r3, r0
 800569e:	0c12      	lsrs	r2, r2, #16
 80056a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80056a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ae:	45c1      	cmp	r9, r8
 80056b0:	f841 3b04 	str.w	r3, [r1], #4
 80056b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056b8:	d2e6      	bcs.n	8005688 <quorem+0xa4>
 80056ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c2:	b922      	cbnz	r2, 80056ce <quorem+0xea>
 80056c4:	3b04      	subs	r3, #4
 80056c6:	429d      	cmp	r5, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	d30b      	bcc.n	80056e4 <quorem+0x100>
 80056cc:	613c      	str	r4, [r7, #16]
 80056ce:	3601      	adds	r6, #1
 80056d0:	4630      	mov	r0, r6
 80056d2:	b003      	add	sp, #12
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	6812      	ldr	r2, [r2, #0]
 80056da:	3b04      	subs	r3, #4
 80056dc:	2a00      	cmp	r2, #0
 80056de:	d1cb      	bne.n	8005678 <quorem+0x94>
 80056e0:	3c01      	subs	r4, #1
 80056e2:	e7c6      	b.n	8005672 <quorem+0x8e>
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	3b04      	subs	r3, #4
 80056e8:	2a00      	cmp	r2, #0
 80056ea:	d1ef      	bne.n	80056cc <quorem+0xe8>
 80056ec:	3c01      	subs	r4, #1
 80056ee:	e7ea      	b.n	80056c6 <quorem+0xe2>
 80056f0:	2000      	movs	r0, #0
 80056f2:	e7ee      	b.n	80056d2 <quorem+0xee>
 80056f4:	0000      	movs	r0, r0
	...

080056f8 <_dtoa_r>:
 80056f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fc:	69c7      	ldr	r7, [r0, #28]
 80056fe:	b097      	sub	sp, #92	@ 0x5c
 8005700:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005704:	ec55 4b10 	vmov	r4, r5, d0
 8005708:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800570a:	9107      	str	r1, [sp, #28]
 800570c:	4681      	mov	r9, r0
 800570e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005710:	9311      	str	r3, [sp, #68]	@ 0x44
 8005712:	b97f      	cbnz	r7, 8005734 <_dtoa_r+0x3c>
 8005714:	2010      	movs	r0, #16
 8005716:	f000 fe09 	bl	800632c <malloc>
 800571a:	4602      	mov	r2, r0
 800571c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005720:	b920      	cbnz	r0, 800572c <_dtoa_r+0x34>
 8005722:	4ba9      	ldr	r3, [pc, #676]	@ (80059c8 <_dtoa_r+0x2d0>)
 8005724:	21ef      	movs	r1, #239	@ 0xef
 8005726:	48a9      	ldr	r0, [pc, #676]	@ (80059cc <_dtoa_r+0x2d4>)
 8005728:	f002 fc3a 	bl	8007fa0 <__assert_func>
 800572c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005730:	6007      	str	r7, [r0, #0]
 8005732:	60c7      	str	r7, [r0, #12]
 8005734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	b159      	cbz	r1, 8005754 <_dtoa_r+0x5c>
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	604a      	str	r2, [r1, #4]
 8005740:	2301      	movs	r3, #1
 8005742:	4093      	lsls	r3, r2
 8005744:	608b      	str	r3, [r1, #8]
 8005746:	4648      	mov	r0, r9
 8005748:	f000 fee6 	bl	8006518 <_Bfree>
 800574c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	1e2b      	subs	r3, r5, #0
 8005756:	bfb9      	ittee	lt
 8005758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800575c:	9305      	strlt	r3, [sp, #20]
 800575e:	2300      	movge	r3, #0
 8005760:	6033      	strge	r3, [r6, #0]
 8005762:	9f05      	ldr	r7, [sp, #20]
 8005764:	4b9a      	ldr	r3, [pc, #616]	@ (80059d0 <_dtoa_r+0x2d8>)
 8005766:	bfbc      	itt	lt
 8005768:	2201      	movlt	r2, #1
 800576a:	6032      	strlt	r2, [r6, #0]
 800576c:	43bb      	bics	r3, r7
 800576e:	d112      	bne.n	8005796 <_dtoa_r+0x9e>
 8005770:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800577c:	4323      	orrs	r3, r4
 800577e:	f000 855a 	beq.w	8006236 <_dtoa_r+0xb3e>
 8005782:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005784:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80059e4 <_dtoa_r+0x2ec>
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 855c 	beq.w	8006246 <_dtoa_r+0xb4e>
 800578e:	f10a 0303 	add.w	r3, sl, #3
 8005792:	f000 bd56 	b.w	8006242 <_dtoa_r+0xb4a>
 8005796:	ed9d 7b04 	vldr	d7, [sp, #16]
 800579a:	2200      	movs	r2, #0
 800579c:	ec51 0b17 	vmov	r0, r1, d7
 80057a0:	2300      	movs	r3, #0
 80057a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80057a6:	f7fb f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80057aa:	4680      	mov	r8, r0
 80057ac:	b158      	cbz	r0, 80057c6 <_dtoa_r+0xce>
 80057ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80057b0:	2301      	movs	r3, #1
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057b6:	b113      	cbz	r3, 80057be <_dtoa_r+0xc6>
 80057b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80057ba:	4b86      	ldr	r3, [pc, #536]	@ (80059d4 <_dtoa_r+0x2dc>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80059e8 <_dtoa_r+0x2f0>
 80057c2:	f000 bd40 	b.w	8006246 <_dtoa_r+0xb4e>
 80057c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80057ca:	aa14      	add	r2, sp, #80	@ 0x50
 80057cc:	a915      	add	r1, sp, #84	@ 0x54
 80057ce:	4648      	mov	r0, r9
 80057d0:	f001 fa3e 	bl	8006c50 <__d2b>
 80057d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057d8:	9002      	str	r0, [sp, #8]
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d078      	beq.n	80058d0 <_dtoa_r+0x1d8>
 80057de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80057e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057f8:	4619      	mov	r1, r3
 80057fa:	2200      	movs	r2, #0
 80057fc:	4b76      	ldr	r3, [pc, #472]	@ (80059d8 <_dtoa_r+0x2e0>)
 80057fe:	f7fa fd4b 	bl	8000298 <__aeabi_dsub>
 8005802:	a36b      	add	r3, pc, #428	@ (adr r3, 80059b0 <_dtoa_r+0x2b8>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa fefe 	bl	8000608 <__aeabi_dmul>
 800580c:	a36a      	add	r3, pc, #424	@ (adr r3, 80059b8 <_dtoa_r+0x2c0>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f7fa fd43 	bl	800029c <__adddf3>
 8005816:	4604      	mov	r4, r0
 8005818:	4630      	mov	r0, r6
 800581a:	460d      	mov	r5, r1
 800581c:	f7fa fe8a 	bl	8000534 <__aeabi_i2d>
 8005820:	a367      	add	r3, pc, #412	@ (adr r3, 80059c0 <_dtoa_r+0x2c8>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	f7fa feef 	bl	8000608 <__aeabi_dmul>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4620      	mov	r0, r4
 8005830:	4629      	mov	r1, r5
 8005832:	f7fa fd33 	bl	800029c <__adddf3>
 8005836:	4604      	mov	r4, r0
 8005838:	460d      	mov	r5, r1
 800583a:	f7fb f995 	bl	8000b68 <__aeabi_d2iz>
 800583e:	2200      	movs	r2, #0
 8005840:	4607      	mov	r7, r0
 8005842:	2300      	movs	r3, #0
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fb f950 	bl	8000aec <__aeabi_dcmplt>
 800584c:	b140      	cbz	r0, 8005860 <_dtoa_r+0x168>
 800584e:	4638      	mov	r0, r7
 8005850:	f7fa fe70 	bl	8000534 <__aeabi_i2d>
 8005854:	4622      	mov	r2, r4
 8005856:	462b      	mov	r3, r5
 8005858:	f7fb f93e 	bl	8000ad8 <__aeabi_dcmpeq>
 800585c:	b900      	cbnz	r0, 8005860 <_dtoa_r+0x168>
 800585e:	3f01      	subs	r7, #1
 8005860:	2f16      	cmp	r7, #22
 8005862:	d852      	bhi.n	800590a <_dtoa_r+0x212>
 8005864:	4b5d      	ldr	r3, [pc, #372]	@ (80059dc <_dtoa_r+0x2e4>)
 8005866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005872:	f7fb f93b 	bl	8000aec <__aeabi_dcmplt>
 8005876:	2800      	cmp	r0, #0
 8005878:	d049      	beq.n	800590e <_dtoa_r+0x216>
 800587a:	3f01      	subs	r7, #1
 800587c:	2300      	movs	r3, #0
 800587e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005882:	1b9b      	subs	r3, r3, r6
 8005884:	1e5a      	subs	r2, r3, #1
 8005886:	bf45      	ittet	mi
 8005888:	f1c3 0301 	rsbmi	r3, r3, #1
 800588c:	9300      	strmi	r3, [sp, #0]
 800588e:	2300      	movpl	r3, #0
 8005890:	2300      	movmi	r3, #0
 8005892:	9206      	str	r2, [sp, #24]
 8005894:	bf54      	ite	pl
 8005896:	9300      	strpl	r3, [sp, #0]
 8005898:	9306      	strmi	r3, [sp, #24]
 800589a:	2f00      	cmp	r7, #0
 800589c:	db39      	blt.n	8005912 <_dtoa_r+0x21a>
 800589e:	9b06      	ldr	r3, [sp, #24]
 80058a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80058a2:	443b      	add	r3, r7
 80058a4:	9306      	str	r3, [sp, #24]
 80058a6:	2300      	movs	r3, #0
 80058a8:	9308      	str	r3, [sp, #32]
 80058aa:	9b07      	ldr	r3, [sp, #28]
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	d863      	bhi.n	8005978 <_dtoa_r+0x280>
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	bfc4      	itt	gt
 80058b4:	3b04      	subgt	r3, #4
 80058b6:	9307      	strgt	r3, [sp, #28]
 80058b8:	9b07      	ldr	r3, [sp, #28]
 80058ba:	f1a3 0302 	sub.w	r3, r3, #2
 80058be:	bfcc      	ite	gt
 80058c0:	2400      	movgt	r4, #0
 80058c2:	2401      	movle	r4, #1
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d863      	bhi.n	8005990 <_dtoa_r+0x298>
 80058c8:	e8df f003 	tbb	[pc, r3]
 80058cc:	2b375452 	.word	0x2b375452
 80058d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058d4:	441e      	add	r6, r3
 80058d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058da:	2b20      	cmp	r3, #32
 80058dc:	bfc1      	itttt	gt
 80058de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058e2:	409f      	lslgt	r7, r3
 80058e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058ec:	bfd6      	itet	le
 80058ee:	f1c3 0320 	rsble	r3, r3, #32
 80058f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80058f6:	fa04 f003 	lslle.w	r0, r4, r3
 80058fa:	f7fa fe0b 	bl	8000514 <__aeabi_ui2d>
 80058fe:	2201      	movs	r2, #1
 8005900:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005904:	3e01      	subs	r6, #1
 8005906:	9212      	str	r2, [sp, #72]	@ 0x48
 8005908:	e776      	b.n	80057f8 <_dtoa_r+0x100>
 800590a:	2301      	movs	r3, #1
 800590c:	e7b7      	b.n	800587e <_dtoa_r+0x186>
 800590e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005910:	e7b6      	b.n	8005880 <_dtoa_r+0x188>
 8005912:	9b00      	ldr	r3, [sp, #0]
 8005914:	1bdb      	subs	r3, r3, r7
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	427b      	negs	r3, r7
 800591a:	9308      	str	r3, [sp, #32]
 800591c:	2300      	movs	r3, #0
 800591e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005920:	e7c3      	b.n	80058aa <_dtoa_r+0x1b2>
 8005922:	2301      	movs	r3, #1
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005928:	eb07 0b03 	add.w	fp, r7, r3
 800592c:	f10b 0301 	add.w	r3, fp, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	bfb8      	it	lt
 8005936:	2301      	movlt	r3, #1
 8005938:	e006      	b.n	8005948 <_dtoa_r+0x250>
 800593a:	2301      	movs	r3, #1
 800593c:	9309      	str	r3, [sp, #36]	@ 0x24
 800593e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	dd28      	ble.n	8005996 <_dtoa_r+0x29e>
 8005944:	469b      	mov	fp, r3
 8005946:	9303      	str	r3, [sp, #12]
 8005948:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800594c:	2100      	movs	r1, #0
 800594e:	2204      	movs	r2, #4
 8005950:	f102 0514 	add.w	r5, r2, #20
 8005954:	429d      	cmp	r5, r3
 8005956:	d926      	bls.n	80059a6 <_dtoa_r+0x2ae>
 8005958:	6041      	str	r1, [r0, #4]
 800595a:	4648      	mov	r0, r9
 800595c:	f000 fd9c 	bl	8006498 <_Balloc>
 8005960:	4682      	mov	sl, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	d142      	bne.n	80059ec <_dtoa_r+0x2f4>
 8005966:	4b1e      	ldr	r3, [pc, #120]	@ (80059e0 <_dtoa_r+0x2e8>)
 8005968:	4602      	mov	r2, r0
 800596a:	f240 11af 	movw	r1, #431	@ 0x1af
 800596e:	e6da      	b.n	8005726 <_dtoa_r+0x2e>
 8005970:	2300      	movs	r3, #0
 8005972:	e7e3      	b.n	800593c <_dtoa_r+0x244>
 8005974:	2300      	movs	r3, #0
 8005976:	e7d5      	b.n	8005924 <_dtoa_r+0x22c>
 8005978:	2401      	movs	r4, #1
 800597a:	2300      	movs	r3, #0
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005980:	f04f 3bff 	mov.w	fp, #4294967295
 8005984:	2200      	movs	r2, #0
 8005986:	f8cd b00c 	str.w	fp, [sp, #12]
 800598a:	2312      	movs	r3, #18
 800598c:	920c      	str	r2, [sp, #48]	@ 0x30
 800598e:	e7db      	b.n	8005948 <_dtoa_r+0x250>
 8005990:	2301      	movs	r3, #1
 8005992:	9309      	str	r3, [sp, #36]	@ 0x24
 8005994:	e7f4      	b.n	8005980 <_dtoa_r+0x288>
 8005996:	f04f 0b01 	mov.w	fp, #1
 800599a:	f8cd b00c 	str.w	fp, [sp, #12]
 800599e:	465b      	mov	r3, fp
 80059a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80059a4:	e7d0      	b.n	8005948 <_dtoa_r+0x250>
 80059a6:	3101      	adds	r1, #1
 80059a8:	0052      	lsls	r2, r2, #1
 80059aa:	e7d1      	b.n	8005950 <_dtoa_r+0x258>
 80059ac:	f3af 8000 	nop.w
 80059b0:	636f4361 	.word	0x636f4361
 80059b4:	3fd287a7 	.word	0x3fd287a7
 80059b8:	8b60c8b3 	.word	0x8b60c8b3
 80059bc:	3fc68a28 	.word	0x3fc68a28
 80059c0:	509f79fb 	.word	0x509f79fb
 80059c4:	3fd34413 	.word	0x3fd34413
 80059c8:	08008d4e 	.word	0x08008d4e
 80059cc:	08008d65 	.word	0x08008d65
 80059d0:	7ff00000 	.word	0x7ff00000
 80059d4:	08008d19 	.word	0x08008d19
 80059d8:	3ff80000 	.word	0x3ff80000
 80059dc:	08008f18 	.word	0x08008f18
 80059e0:	08008dbd 	.word	0x08008dbd
 80059e4:	08008d4a 	.word	0x08008d4a
 80059e8:	08008d18 	.word	0x08008d18
 80059ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059f0:	6018      	str	r0, [r3, #0]
 80059f2:	9b03      	ldr	r3, [sp, #12]
 80059f4:	2b0e      	cmp	r3, #14
 80059f6:	f200 80a1 	bhi.w	8005b3c <_dtoa_r+0x444>
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	f000 809e 	beq.w	8005b3c <_dtoa_r+0x444>
 8005a00:	2f00      	cmp	r7, #0
 8005a02:	dd33      	ble.n	8005a6c <_dtoa_r+0x374>
 8005a04:	4b9c      	ldr	r3, [pc, #624]	@ (8005c78 <_dtoa_r+0x580>)
 8005a06:	f007 020f 	and.w	r2, r7, #15
 8005a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a0e:	ed93 7b00 	vldr	d7, [r3]
 8005a12:	05f8      	lsls	r0, r7, #23
 8005a14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005a18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a1c:	d516      	bpl.n	8005a4c <_dtoa_r+0x354>
 8005a1e:	4b97      	ldr	r3, [pc, #604]	@ (8005c7c <_dtoa_r+0x584>)
 8005a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a28:	f7fa ff18 	bl	800085c <__aeabi_ddiv>
 8005a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a30:	f004 040f 	and.w	r4, r4, #15
 8005a34:	2603      	movs	r6, #3
 8005a36:	4d91      	ldr	r5, [pc, #580]	@ (8005c7c <_dtoa_r+0x584>)
 8005a38:	b954      	cbnz	r4, 8005a50 <_dtoa_r+0x358>
 8005a3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a42:	f7fa ff0b 	bl	800085c <__aeabi_ddiv>
 8005a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a4a:	e028      	b.n	8005a9e <_dtoa_r+0x3a6>
 8005a4c:	2602      	movs	r6, #2
 8005a4e:	e7f2      	b.n	8005a36 <_dtoa_r+0x33e>
 8005a50:	07e1      	lsls	r1, r4, #31
 8005a52:	d508      	bpl.n	8005a66 <_dtoa_r+0x36e>
 8005a54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a5c:	f7fa fdd4 	bl	8000608 <__aeabi_dmul>
 8005a60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a64:	3601      	adds	r6, #1
 8005a66:	1064      	asrs	r4, r4, #1
 8005a68:	3508      	adds	r5, #8
 8005a6a:	e7e5      	b.n	8005a38 <_dtoa_r+0x340>
 8005a6c:	f000 80af 	beq.w	8005bce <_dtoa_r+0x4d6>
 8005a70:	427c      	negs	r4, r7
 8005a72:	4b81      	ldr	r3, [pc, #516]	@ (8005c78 <_dtoa_r+0x580>)
 8005a74:	4d81      	ldr	r5, [pc, #516]	@ (8005c7c <_dtoa_r+0x584>)
 8005a76:	f004 020f 	and.w	r2, r4, #15
 8005a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a86:	f7fa fdbf 	bl	8000608 <__aeabi_dmul>
 8005a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a8e:	1124      	asrs	r4, r4, #4
 8005a90:	2300      	movs	r3, #0
 8005a92:	2602      	movs	r6, #2
 8005a94:	2c00      	cmp	r4, #0
 8005a96:	f040 808f 	bne.w	8005bb8 <_dtoa_r+0x4c0>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1d3      	bne.n	8005a46 <_dtoa_r+0x34e>
 8005a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005aa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 8094 	beq.w	8005bd2 <_dtoa_r+0x4da>
 8005aaa:	4b75      	ldr	r3, [pc, #468]	@ (8005c80 <_dtoa_r+0x588>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fb f81b 	bl	8000aec <__aeabi_dcmplt>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f000 808b 	beq.w	8005bd2 <_dtoa_r+0x4da>
 8005abc:	9b03      	ldr	r3, [sp, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 8087 	beq.w	8005bd2 <_dtoa_r+0x4da>
 8005ac4:	f1bb 0f00 	cmp.w	fp, #0
 8005ac8:	dd34      	ble.n	8005b34 <_dtoa_r+0x43c>
 8005aca:	4620      	mov	r0, r4
 8005acc:	4b6d      	ldr	r3, [pc, #436]	@ (8005c84 <_dtoa_r+0x58c>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	f7fa fd99 	bl	8000608 <__aeabi_dmul>
 8005ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ada:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ade:	3601      	adds	r6, #1
 8005ae0:	465c      	mov	r4, fp
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7fa fd26 	bl	8000534 <__aeabi_i2d>
 8005ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aec:	f7fa fd8c 	bl	8000608 <__aeabi_dmul>
 8005af0:	4b65      	ldr	r3, [pc, #404]	@ (8005c88 <_dtoa_r+0x590>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	f7fa fbd2 	bl	800029c <__adddf3>
 8005af8:	4605      	mov	r5, r0
 8005afa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005afe:	2c00      	cmp	r4, #0
 8005b00:	d16a      	bne.n	8005bd8 <_dtoa_r+0x4e0>
 8005b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b06:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <_dtoa_r+0x594>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f7fa fbc5 	bl	8000298 <__aeabi_dsub>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b16:	462a      	mov	r2, r5
 8005b18:	4633      	mov	r3, r6
 8005b1a:	f7fb f805 	bl	8000b28 <__aeabi_dcmpgt>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	f040 8298 	bne.w	8006054 <_dtoa_r+0x95c>
 8005b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b28:	462a      	mov	r2, r5
 8005b2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b2e:	f7fa ffdd 	bl	8000aec <__aeabi_dcmplt>
 8005b32:	bb38      	cbnz	r0, 8005b84 <_dtoa_r+0x48c>
 8005b34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005b38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f2c0 8157 	blt.w	8005df2 <_dtoa_r+0x6fa>
 8005b44:	2f0e      	cmp	r7, #14
 8005b46:	f300 8154 	bgt.w	8005df2 <_dtoa_r+0x6fa>
 8005b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <_dtoa_r+0x580>)
 8005b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b50:	ed93 7b00 	vldr	d7, [r3]
 8005b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	ed8d 7b00 	vstr	d7, [sp]
 8005b5c:	f280 80e5 	bge.w	8005d2a <_dtoa_r+0x632>
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f300 80e1 	bgt.w	8005d2a <_dtoa_r+0x632>
 8005b68:	d10c      	bne.n	8005b84 <_dtoa_r+0x48c>
 8005b6a:	4b48      	ldr	r3, [pc, #288]	@ (8005c8c <_dtoa_r+0x594>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	ec51 0b17 	vmov	r0, r1, d7
 8005b72:	f7fa fd49 	bl	8000608 <__aeabi_dmul>
 8005b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7a:	f7fa ffcb 	bl	8000b14 <__aeabi_dcmpge>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f000 8266 	beq.w	8006050 <_dtoa_r+0x958>
 8005b84:	2400      	movs	r4, #0
 8005b86:	4625      	mov	r5, r4
 8005b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b8a:	4656      	mov	r6, sl
 8005b8c:	ea6f 0803 	mvn.w	r8, r3
 8005b90:	2700      	movs	r7, #0
 8005b92:	4621      	mov	r1, r4
 8005b94:	4648      	mov	r0, r9
 8005b96:	f000 fcbf 	bl	8006518 <_Bfree>
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	f000 80bd 	beq.w	8005d1a <_dtoa_r+0x622>
 8005ba0:	b12f      	cbz	r7, 8005bae <_dtoa_r+0x4b6>
 8005ba2:	42af      	cmp	r7, r5
 8005ba4:	d003      	beq.n	8005bae <_dtoa_r+0x4b6>
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	4648      	mov	r0, r9
 8005baa:	f000 fcb5 	bl	8006518 <_Bfree>
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4648      	mov	r0, r9
 8005bb2:	f000 fcb1 	bl	8006518 <_Bfree>
 8005bb6:	e0b0      	b.n	8005d1a <_dtoa_r+0x622>
 8005bb8:	07e2      	lsls	r2, r4, #31
 8005bba:	d505      	bpl.n	8005bc8 <_dtoa_r+0x4d0>
 8005bbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bc0:	f7fa fd22 	bl	8000608 <__aeabi_dmul>
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	1064      	asrs	r4, r4, #1
 8005bca:	3508      	adds	r5, #8
 8005bcc:	e762      	b.n	8005a94 <_dtoa_r+0x39c>
 8005bce:	2602      	movs	r6, #2
 8005bd0:	e765      	b.n	8005a9e <_dtoa_r+0x3a6>
 8005bd2:	9c03      	ldr	r4, [sp, #12]
 8005bd4:	46b8      	mov	r8, r7
 8005bd6:	e784      	b.n	8005ae2 <_dtoa_r+0x3ea>
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <_dtoa_r+0x580>)
 8005bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005be4:	4454      	add	r4, sl
 8005be6:	2900      	cmp	r1, #0
 8005be8:	d054      	beq.n	8005c94 <_dtoa_r+0x59c>
 8005bea:	4929      	ldr	r1, [pc, #164]	@ (8005c90 <_dtoa_r+0x598>)
 8005bec:	2000      	movs	r0, #0
 8005bee:	f7fa fe35 	bl	800085c <__aeabi_ddiv>
 8005bf2:	4633      	mov	r3, r6
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	f7fa fb4f 	bl	8000298 <__aeabi_dsub>
 8005bfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005bfe:	4656      	mov	r6, sl
 8005c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c04:	f7fa ffb0 	bl	8000b68 <__aeabi_d2iz>
 8005c08:	4605      	mov	r5, r0
 8005c0a:	f7fa fc93 	bl	8000534 <__aeabi_i2d>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c16:	f7fa fb3f 	bl	8000298 <__aeabi_dsub>
 8005c1a:	3530      	adds	r5, #48	@ 0x30
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c24:	f806 5b01 	strb.w	r5, [r6], #1
 8005c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c2c:	f7fa ff5e 	bl	8000aec <__aeabi_dcmplt>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d172      	bne.n	8005d1a <_dtoa_r+0x622>
 8005c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c38:	4911      	ldr	r1, [pc, #68]	@ (8005c80 <_dtoa_r+0x588>)
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fa fb2c 	bl	8000298 <__aeabi_dsub>
 8005c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c44:	f7fa ff52 	bl	8000aec <__aeabi_dcmplt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f040 80b4 	bne.w	8005db6 <_dtoa_r+0x6be>
 8005c4e:	42a6      	cmp	r6, r4
 8005c50:	f43f af70 	beq.w	8005b34 <_dtoa_r+0x43c>
 8005c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c58:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <_dtoa_r+0x58c>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f7fa fcd4 	bl	8000608 <__aeabi_dmul>
 8005c60:	4b08      	ldr	r3, [pc, #32]	@ (8005c84 <_dtoa_r+0x58c>)
 8005c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c66:	2200      	movs	r2, #0
 8005c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c6c:	f7fa fccc 	bl	8000608 <__aeabi_dmul>
 8005c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c74:	e7c4      	b.n	8005c00 <_dtoa_r+0x508>
 8005c76:	bf00      	nop
 8005c78:	08008f18 	.word	0x08008f18
 8005c7c:	08008ef0 	.word	0x08008ef0
 8005c80:	3ff00000 	.word	0x3ff00000
 8005c84:	40240000 	.word	0x40240000
 8005c88:	401c0000 	.word	0x401c0000
 8005c8c:	40140000 	.word	0x40140000
 8005c90:	3fe00000 	.word	0x3fe00000
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7fa fcb6 	bl	8000608 <__aeabi_dmul>
 8005c9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005ca0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005ca2:	4656      	mov	r6, sl
 8005ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca8:	f7fa ff5e 	bl	8000b68 <__aeabi_d2iz>
 8005cac:	4605      	mov	r5, r0
 8005cae:	f7fa fc41 	bl	8000534 <__aeabi_i2d>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cba:	f7fa faed 	bl	8000298 <__aeabi_dsub>
 8005cbe:	3530      	adds	r5, #48	@ 0x30
 8005cc0:	f806 5b01 	strb.w	r5, [r6], #1
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	d124      	bne.n	8005d1e <_dtoa_r+0x626>
 8005cd4:	4baf      	ldr	r3, [pc, #700]	@ (8005f94 <_dtoa_r+0x89c>)
 8005cd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005cda:	f7fa fadf 	bl	800029c <__adddf3>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ce6:	f7fa ff1f 	bl	8000b28 <__aeabi_dcmpgt>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d163      	bne.n	8005db6 <_dtoa_r+0x6be>
 8005cee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005cf2:	49a8      	ldr	r1, [pc, #672]	@ (8005f94 <_dtoa_r+0x89c>)
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f7fa facf 	bl	8000298 <__aeabi_dsub>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d02:	f7fa fef3 	bl	8000aec <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f43f af14 	beq.w	8005b34 <_dtoa_r+0x43c>
 8005d0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d0e:	1e73      	subs	r3, r6, #1
 8005d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d16:	2b30      	cmp	r3, #48	@ 0x30
 8005d18:	d0f8      	beq.n	8005d0c <_dtoa_r+0x614>
 8005d1a:	4647      	mov	r7, r8
 8005d1c:	e03b      	b.n	8005d96 <_dtoa_r+0x69e>
 8005d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005f98 <_dtoa_r+0x8a0>)
 8005d20:	f7fa fc72 	bl	8000608 <__aeabi_dmul>
 8005d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d28:	e7bc      	b.n	8005ca4 <_dtoa_r+0x5ac>
 8005d2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005d2e:	4656      	mov	r6, sl
 8005d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d34:	4620      	mov	r0, r4
 8005d36:	4629      	mov	r1, r5
 8005d38:	f7fa fd90 	bl	800085c <__aeabi_ddiv>
 8005d3c:	f7fa ff14 	bl	8000b68 <__aeabi_d2iz>
 8005d40:	4680      	mov	r8, r0
 8005d42:	f7fa fbf7 	bl	8000534 <__aeabi_i2d>
 8005d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d4a:	f7fa fc5d 	bl	8000608 <__aeabi_dmul>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d5a:	f7fa fa9d 	bl	8000298 <__aeabi_dsub>
 8005d5e:	f806 4b01 	strb.w	r4, [r6], #1
 8005d62:	9d03      	ldr	r5, [sp, #12]
 8005d64:	eba6 040a 	sub.w	r4, r6, sl
 8005d68:	42a5      	cmp	r5, r4
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	d133      	bne.n	8005dd8 <_dtoa_r+0x6e0>
 8005d70:	f7fa fa94 	bl	800029c <__adddf3>
 8005d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	f7fa fed4 	bl	8000b28 <__aeabi_dcmpgt>
 8005d80:	b9c0      	cbnz	r0, 8005db4 <_dtoa_r+0x6bc>
 8005d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d86:	4620      	mov	r0, r4
 8005d88:	4629      	mov	r1, r5
 8005d8a:	f7fa fea5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d8e:	b110      	cbz	r0, 8005d96 <_dtoa_r+0x69e>
 8005d90:	f018 0f01 	tst.w	r8, #1
 8005d94:	d10e      	bne.n	8005db4 <_dtoa_r+0x6bc>
 8005d96:	9902      	ldr	r1, [sp, #8]
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f000 fbbd 	bl	8006518 <_Bfree>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	7033      	strb	r3, [r6, #0]
 8005da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005da4:	3701      	adds	r7, #1
 8005da6:	601f      	str	r7, [r3, #0]
 8005da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 824b 	beq.w	8006246 <_dtoa_r+0xb4e>
 8005db0:	601e      	str	r6, [r3, #0]
 8005db2:	e248      	b.n	8006246 <_dtoa_r+0xb4e>
 8005db4:	46b8      	mov	r8, r7
 8005db6:	4633      	mov	r3, r6
 8005db8:	461e      	mov	r6, r3
 8005dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dbe:	2a39      	cmp	r2, #57	@ 0x39
 8005dc0:	d106      	bne.n	8005dd0 <_dtoa_r+0x6d8>
 8005dc2:	459a      	cmp	sl, r3
 8005dc4:	d1f8      	bne.n	8005db8 <_dtoa_r+0x6c0>
 8005dc6:	2230      	movs	r2, #48	@ 0x30
 8005dc8:	f108 0801 	add.w	r8, r8, #1
 8005dcc:	f88a 2000 	strb.w	r2, [sl]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	3201      	adds	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e7a0      	b.n	8005d1a <_dtoa_r+0x622>
 8005dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f98 <_dtoa_r+0x8a0>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7fa fc14 	bl	8000608 <__aeabi_dmul>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	f7fa fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d09f      	beq.n	8005d30 <_dtoa_r+0x638>
 8005df0:	e7d1      	b.n	8005d96 <_dtoa_r+0x69e>
 8005df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	f000 80ea 	beq.w	8005fce <_dtoa_r+0x8d6>
 8005dfa:	9a07      	ldr	r2, [sp, #28]
 8005dfc:	2a01      	cmp	r2, #1
 8005dfe:	f300 80cd 	bgt.w	8005f9c <_dtoa_r+0x8a4>
 8005e02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	f000 80c1 	beq.w	8005f8c <_dtoa_r+0x894>
 8005e0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005e0e:	9c08      	ldr	r4, [sp, #32]
 8005e10:	9e00      	ldr	r6, [sp, #0]
 8005e12:	9a00      	ldr	r2, [sp, #0]
 8005e14:	441a      	add	r2, r3
 8005e16:	9200      	str	r2, [sp, #0]
 8005e18:	9a06      	ldr	r2, [sp, #24]
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	441a      	add	r2, r3
 8005e1e:	4648      	mov	r0, r9
 8005e20:	9206      	str	r2, [sp, #24]
 8005e22:	f000 fc77 	bl	8006714 <__i2b>
 8005e26:	4605      	mov	r5, r0
 8005e28:	b166      	cbz	r6, 8005e44 <_dtoa_r+0x74c>
 8005e2a:	9b06      	ldr	r3, [sp, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dd09      	ble.n	8005e44 <_dtoa_r+0x74c>
 8005e30:	42b3      	cmp	r3, r6
 8005e32:	9a00      	ldr	r2, [sp, #0]
 8005e34:	bfa8      	it	ge
 8005e36:	4633      	movge	r3, r6
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	9200      	str	r2, [sp, #0]
 8005e3c:	9a06      	ldr	r2, [sp, #24]
 8005e3e:	1af6      	subs	r6, r6, r3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	9306      	str	r3, [sp, #24]
 8005e44:	9b08      	ldr	r3, [sp, #32]
 8005e46:	b30b      	cbz	r3, 8005e8c <_dtoa_r+0x794>
 8005e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80c6 	beq.w	8005fdc <_dtoa_r+0x8e4>
 8005e50:	2c00      	cmp	r4, #0
 8005e52:	f000 80c0 	beq.w	8005fd6 <_dtoa_r+0x8de>
 8005e56:	4629      	mov	r1, r5
 8005e58:	4622      	mov	r2, r4
 8005e5a:	4648      	mov	r0, r9
 8005e5c:	f000 fd12 	bl	8006884 <__pow5mult>
 8005e60:	9a02      	ldr	r2, [sp, #8]
 8005e62:	4601      	mov	r1, r0
 8005e64:	4605      	mov	r5, r0
 8005e66:	4648      	mov	r0, r9
 8005e68:	f000 fc6a 	bl	8006740 <__multiply>
 8005e6c:	9902      	ldr	r1, [sp, #8]
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4648      	mov	r0, r9
 8005e72:	f000 fb51 	bl	8006518 <_Bfree>
 8005e76:	9b08      	ldr	r3, [sp, #32]
 8005e78:	1b1b      	subs	r3, r3, r4
 8005e7a:	9308      	str	r3, [sp, #32]
 8005e7c:	f000 80b1 	beq.w	8005fe2 <_dtoa_r+0x8ea>
 8005e80:	9a08      	ldr	r2, [sp, #32]
 8005e82:	4641      	mov	r1, r8
 8005e84:	4648      	mov	r0, r9
 8005e86:	f000 fcfd 	bl	8006884 <__pow5mult>
 8005e8a:	9002      	str	r0, [sp, #8]
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f000 fc40 	bl	8006714 <__i2b>
 8005e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e96:	4604      	mov	r4, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 81d8 	beq.w	800624e <_dtoa_r+0xb56>
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4601      	mov	r1, r0
 8005ea2:	4648      	mov	r0, r9
 8005ea4:	f000 fcee 	bl	8006884 <__pow5mult>
 8005ea8:	9b07      	ldr	r3, [sp, #28]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	4604      	mov	r4, r0
 8005eae:	f300 809f 	bgt.w	8005ff0 <_dtoa_r+0x8f8>
 8005eb2:	9b04      	ldr	r3, [sp, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 8097 	bne.w	8005fe8 <_dtoa_r+0x8f0>
 8005eba:	9b05      	ldr	r3, [sp, #20]
 8005ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 8093 	bne.w	8005fec <_dtoa_r+0x8f4>
 8005ec6:	9b05      	ldr	r3, [sp, #20]
 8005ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ecc:	0d1b      	lsrs	r3, r3, #20
 8005ece:	051b      	lsls	r3, r3, #20
 8005ed0:	b133      	cbz	r3, 8005ee0 <_dtoa_r+0x7e8>
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	3301      	adds	r3, #1
 8005edc:	9306      	str	r3, [sp, #24]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	9308      	str	r3, [sp, #32]
 8005ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 81b8 	beq.w	800625a <_dtoa_r+0xb62>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ef0:	6918      	ldr	r0, [r3, #16]
 8005ef2:	f000 fbc3 	bl	800667c <__hi0bits>
 8005ef6:	f1c0 0020 	rsb	r0, r0, #32
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	4418      	add	r0, r3
 8005efe:	f010 001f 	ands.w	r0, r0, #31
 8005f02:	f000 8082 	beq.w	800600a <_dtoa_r+0x912>
 8005f06:	f1c0 0320 	rsb	r3, r0, #32
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	dd73      	ble.n	8005ff6 <_dtoa_r+0x8fe>
 8005f0e:	9b00      	ldr	r3, [sp, #0]
 8005f10:	f1c0 001c 	rsb	r0, r0, #28
 8005f14:	4403      	add	r3, r0
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	9b06      	ldr	r3, [sp, #24]
 8005f1a:	4403      	add	r3, r0
 8005f1c:	4406      	add	r6, r0
 8005f1e:	9306      	str	r3, [sp, #24]
 8005f20:	9b00      	ldr	r3, [sp, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dd05      	ble.n	8005f32 <_dtoa_r+0x83a>
 8005f26:	9902      	ldr	r1, [sp, #8]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4648      	mov	r0, r9
 8005f2c:	f000 fd04 	bl	8006938 <__lshift>
 8005f30:	9002      	str	r0, [sp, #8]
 8005f32:	9b06      	ldr	r3, [sp, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	dd05      	ble.n	8005f44 <_dtoa_r+0x84c>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4648      	mov	r0, r9
 8005f3e:	f000 fcfb 	bl	8006938 <__lshift>
 8005f42:	4604      	mov	r4, r0
 8005f44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d061      	beq.n	800600e <_dtoa_r+0x916>
 8005f4a:	9802      	ldr	r0, [sp, #8]
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f000 fd5f 	bl	8006a10 <__mcmp>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	da5b      	bge.n	800600e <_dtoa_r+0x916>
 8005f56:	2300      	movs	r3, #0
 8005f58:	9902      	ldr	r1, [sp, #8]
 8005f5a:	220a      	movs	r2, #10
 8005f5c:	4648      	mov	r0, r9
 8005f5e:	f000 fafd 	bl	800655c <__multadd>
 8005f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f64:	9002      	str	r0, [sp, #8]
 8005f66:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8177 	beq.w	800625e <_dtoa_r+0xb66>
 8005f70:	4629      	mov	r1, r5
 8005f72:	2300      	movs	r3, #0
 8005f74:	220a      	movs	r2, #10
 8005f76:	4648      	mov	r0, r9
 8005f78:	f000 faf0 	bl	800655c <__multadd>
 8005f7c:	f1bb 0f00 	cmp.w	fp, #0
 8005f80:	4605      	mov	r5, r0
 8005f82:	dc6f      	bgt.n	8006064 <_dtoa_r+0x96c>
 8005f84:	9b07      	ldr	r3, [sp, #28]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	dc49      	bgt.n	800601e <_dtoa_r+0x926>
 8005f8a:	e06b      	b.n	8006064 <_dtoa_r+0x96c>
 8005f8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f92:	e73c      	b.n	8005e0e <_dtoa_r+0x716>
 8005f94:	3fe00000 	.word	0x3fe00000
 8005f98:	40240000 	.word	0x40240000
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	1e5c      	subs	r4, r3, #1
 8005fa0:	9b08      	ldr	r3, [sp, #32]
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	db09      	blt.n	8005fba <_dtoa_r+0x8c2>
 8005fa6:	1b1c      	subs	r4, r3, r4
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f6bf af30 	bge.w	8005e10 <_dtoa_r+0x718>
 8005fb0:	9b00      	ldr	r3, [sp, #0]
 8005fb2:	9a03      	ldr	r2, [sp, #12]
 8005fb4:	1a9e      	subs	r6, r3, r2
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e72b      	b.n	8005e12 <_dtoa_r+0x71a>
 8005fba:	9b08      	ldr	r3, [sp, #32]
 8005fbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fbe:	9408      	str	r4, [sp, #32]
 8005fc0:	1ae3      	subs	r3, r4, r3
 8005fc2:	441a      	add	r2, r3
 8005fc4:	9e00      	ldr	r6, [sp, #0]
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8005fca:	2400      	movs	r4, #0
 8005fcc:	e721      	b.n	8005e12 <_dtoa_r+0x71a>
 8005fce:	9c08      	ldr	r4, [sp, #32]
 8005fd0:	9e00      	ldr	r6, [sp, #0]
 8005fd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005fd4:	e728      	b.n	8005e28 <_dtoa_r+0x730>
 8005fd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005fda:	e751      	b.n	8005e80 <_dtoa_r+0x788>
 8005fdc:	9a08      	ldr	r2, [sp, #32]
 8005fde:	9902      	ldr	r1, [sp, #8]
 8005fe0:	e750      	b.n	8005e84 <_dtoa_r+0x78c>
 8005fe2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005fe6:	e751      	b.n	8005e8c <_dtoa_r+0x794>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e779      	b.n	8005ee0 <_dtoa_r+0x7e8>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	e777      	b.n	8005ee0 <_dtoa_r+0x7e8>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9308      	str	r3, [sp, #32]
 8005ff4:	e779      	b.n	8005eea <_dtoa_r+0x7f2>
 8005ff6:	d093      	beq.n	8005f20 <_dtoa_r+0x828>
 8005ff8:	9a00      	ldr	r2, [sp, #0]
 8005ffa:	331c      	adds	r3, #28
 8005ffc:	441a      	add	r2, r3
 8005ffe:	9200      	str	r2, [sp, #0]
 8006000:	9a06      	ldr	r2, [sp, #24]
 8006002:	441a      	add	r2, r3
 8006004:	441e      	add	r6, r3
 8006006:	9206      	str	r2, [sp, #24]
 8006008:	e78a      	b.n	8005f20 <_dtoa_r+0x828>
 800600a:	4603      	mov	r3, r0
 800600c:	e7f4      	b.n	8005ff8 <_dtoa_r+0x900>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	46b8      	mov	r8, r7
 8006014:	dc20      	bgt.n	8006058 <_dtoa_r+0x960>
 8006016:	469b      	mov	fp, r3
 8006018:	9b07      	ldr	r3, [sp, #28]
 800601a:	2b02      	cmp	r3, #2
 800601c:	dd1e      	ble.n	800605c <_dtoa_r+0x964>
 800601e:	f1bb 0f00 	cmp.w	fp, #0
 8006022:	f47f adb1 	bne.w	8005b88 <_dtoa_r+0x490>
 8006026:	4621      	mov	r1, r4
 8006028:	465b      	mov	r3, fp
 800602a:	2205      	movs	r2, #5
 800602c:	4648      	mov	r0, r9
 800602e:	f000 fa95 	bl	800655c <__multadd>
 8006032:	4601      	mov	r1, r0
 8006034:	4604      	mov	r4, r0
 8006036:	9802      	ldr	r0, [sp, #8]
 8006038:	f000 fcea 	bl	8006a10 <__mcmp>
 800603c:	2800      	cmp	r0, #0
 800603e:	f77f ada3 	ble.w	8005b88 <_dtoa_r+0x490>
 8006042:	4656      	mov	r6, sl
 8006044:	2331      	movs	r3, #49	@ 0x31
 8006046:	f806 3b01 	strb.w	r3, [r6], #1
 800604a:	f108 0801 	add.w	r8, r8, #1
 800604e:	e59f      	b.n	8005b90 <_dtoa_r+0x498>
 8006050:	9c03      	ldr	r4, [sp, #12]
 8006052:	46b8      	mov	r8, r7
 8006054:	4625      	mov	r5, r4
 8006056:	e7f4      	b.n	8006042 <_dtoa_r+0x94a>
 8006058:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800605c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8101 	beq.w	8006266 <_dtoa_r+0xb6e>
 8006064:	2e00      	cmp	r6, #0
 8006066:	dd05      	ble.n	8006074 <_dtoa_r+0x97c>
 8006068:	4629      	mov	r1, r5
 800606a:	4632      	mov	r2, r6
 800606c:	4648      	mov	r0, r9
 800606e:	f000 fc63 	bl	8006938 <__lshift>
 8006072:	4605      	mov	r5, r0
 8006074:	9b08      	ldr	r3, [sp, #32]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d05c      	beq.n	8006134 <_dtoa_r+0xa3c>
 800607a:	6869      	ldr	r1, [r5, #4]
 800607c:	4648      	mov	r0, r9
 800607e:	f000 fa0b 	bl	8006498 <_Balloc>
 8006082:	4606      	mov	r6, r0
 8006084:	b928      	cbnz	r0, 8006092 <_dtoa_r+0x99a>
 8006086:	4b82      	ldr	r3, [pc, #520]	@ (8006290 <_dtoa_r+0xb98>)
 8006088:	4602      	mov	r2, r0
 800608a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800608e:	f7ff bb4a 	b.w	8005726 <_dtoa_r+0x2e>
 8006092:	692a      	ldr	r2, [r5, #16]
 8006094:	3202      	adds	r2, #2
 8006096:	0092      	lsls	r2, r2, #2
 8006098:	f105 010c 	add.w	r1, r5, #12
 800609c:	300c      	adds	r0, #12
 800609e:	f001 ff69 	bl	8007f74 <memcpy>
 80060a2:	2201      	movs	r2, #1
 80060a4:	4631      	mov	r1, r6
 80060a6:	4648      	mov	r0, r9
 80060a8:	f000 fc46 	bl	8006938 <__lshift>
 80060ac:	f10a 0301 	add.w	r3, sl, #1
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	eb0a 030b 	add.w	r3, sl, fp
 80060b6:	9308      	str	r3, [sp, #32]
 80060b8:	9b04      	ldr	r3, [sp, #16]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	462f      	mov	r7, r5
 80060c0:	9306      	str	r3, [sp, #24]
 80060c2:	4605      	mov	r5, r0
 80060c4:	9b00      	ldr	r3, [sp, #0]
 80060c6:	9802      	ldr	r0, [sp, #8]
 80060c8:	4621      	mov	r1, r4
 80060ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80060ce:	f7ff fa89 	bl	80055e4 <quorem>
 80060d2:	4603      	mov	r3, r0
 80060d4:	3330      	adds	r3, #48	@ 0x30
 80060d6:	9003      	str	r0, [sp, #12]
 80060d8:	4639      	mov	r1, r7
 80060da:	9802      	ldr	r0, [sp, #8]
 80060dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060de:	f000 fc97 	bl	8006a10 <__mcmp>
 80060e2:	462a      	mov	r2, r5
 80060e4:	9004      	str	r0, [sp, #16]
 80060e6:	4621      	mov	r1, r4
 80060e8:	4648      	mov	r0, r9
 80060ea:	f000 fcad 	bl	8006a48 <__mdiff>
 80060ee:	68c2      	ldr	r2, [r0, #12]
 80060f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f2:	4606      	mov	r6, r0
 80060f4:	bb02      	cbnz	r2, 8006138 <_dtoa_r+0xa40>
 80060f6:	4601      	mov	r1, r0
 80060f8:	9802      	ldr	r0, [sp, #8]
 80060fa:	f000 fc89 	bl	8006a10 <__mcmp>
 80060fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006100:	4602      	mov	r2, r0
 8006102:	4631      	mov	r1, r6
 8006104:	4648      	mov	r0, r9
 8006106:	920c      	str	r2, [sp, #48]	@ 0x30
 8006108:	9309      	str	r3, [sp, #36]	@ 0x24
 800610a:	f000 fa05 	bl	8006518 <_Bfree>
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006112:	9e00      	ldr	r6, [sp, #0]
 8006114:	ea42 0103 	orr.w	r1, r2, r3
 8006118:	9b06      	ldr	r3, [sp, #24]
 800611a:	4319      	orrs	r1, r3
 800611c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800611e:	d10d      	bne.n	800613c <_dtoa_r+0xa44>
 8006120:	2b39      	cmp	r3, #57	@ 0x39
 8006122:	d027      	beq.n	8006174 <_dtoa_r+0xa7c>
 8006124:	9a04      	ldr	r2, [sp, #16]
 8006126:	2a00      	cmp	r2, #0
 8006128:	dd01      	ble.n	800612e <_dtoa_r+0xa36>
 800612a:	9b03      	ldr	r3, [sp, #12]
 800612c:	3331      	adds	r3, #49	@ 0x31
 800612e:	f88b 3000 	strb.w	r3, [fp]
 8006132:	e52e      	b.n	8005b92 <_dtoa_r+0x49a>
 8006134:	4628      	mov	r0, r5
 8006136:	e7b9      	b.n	80060ac <_dtoa_r+0x9b4>
 8006138:	2201      	movs	r2, #1
 800613a:	e7e2      	b.n	8006102 <_dtoa_r+0xa0a>
 800613c:	9904      	ldr	r1, [sp, #16]
 800613e:	2900      	cmp	r1, #0
 8006140:	db04      	blt.n	800614c <_dtoa_r+0xa54>
 8006142:	9807      	ldr	r0, [sp, #28]
 8006144:	4301      	orrs	r1, r0
 8006146:	9806      	ldr	r0, [sp, #24]
 8006148:	4301      	orrs	r1, r0
 800614a:	d120      	bne.n	800618e <_dtoa_r+0xa96>
 800614c:	2a00      	cmp	r2, #0
 800614e:	ddee      	ble.n	800612e <_dtoa_r+0xa36>
 8006150:	9902      	ldr	r1, [sp, #8]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2201      	movs	r2, #1
 8006156:	4648      	mov	r0, r9
 8006158:	f000 fbee 	bl	8006938 <__lshift>
 800615c:	4621      	mov	r1, r4
 800615e:	9002      	str	r0, [sp, #8]
 8006160:	f000 fc56 	bl	8006a10 <__mcmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	dc02      	bgt.n	8006170 <_dtoa_r+0xa78>
 800616a:	d1e0      	bne.n	800612e <_dtoa_r+0xa36>
 800616c:	07da      	lsls	r2, r3, #31
 800616e:	d5de      	bpl.n	800612e <_dtoa_r+0xa36>
 8006170:	2b39      	cmp	r3, #57	@ 0x39
 8006172:	d1da      	bne.n	800612a <_dtoa_r+0xa32>
 8006174:	2339      	movs	r3, #57	@ 0x39
 8006176:	f88b 3000 	strb.w	r3, [fp]
 800617a:	4633      	mov	r3, r6
 800617c:	461e      	mov	r6, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006184:	2a39      	cmp	r2, #57	@ 0x39
 8006186:	d04e      	beq.n	8006226 <_dtoa_r+0xb2e>
 8006188:	3201      	adds	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	e501      	b.n	8005b92 <_dtoa_r+0x49a>
 800618e:	2a00      	cmp	r2, #0
 8006190:	dd03      	ble.n	800619a <_dtoa_r+0xaa2>
 8006192:	2b39      	cmp	r3, #57	@ 0x39
 8006194:	d0ee      	beq.n	8006174 <_dtoa_r+0xa7c>
 8006196:	3301      	adds	r3, #1
 8006198:	e7c9      	b.n	800612e <_dtoa_r+0xa36>
 800619a:	9a00      	ldr	r2, [sp, #0]
 800619c:	9908      	ldr	r1, [sp, #32]
 800619e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061a2:	428a      	cmp	r2, r1
 80061a4:	d028      	beq.n	80061f8 <_dtoa_r+0xb00>
 80061a6:	9902      	ldr	r1, [sp, #8]
 80061a8:	2300      	movs	r3, #0
 80061aa:	220a      	movs	r2, #10
 80061ac:	4648      	mov	r0, r9
 80061ae:	f000 f9d5 	bl	800655c <__multadd>
 80061b2:	42af      	cmp	r7, r5
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	f04f 020a 	mov.w	r2, #10
 80061be:	4639      	mov	r1, r7
 80061c0:	4648      	mov	r0, r9
 80061c2:	d107      	bne.n	80061d4 <_dtoa_r+0xadc>
 80061c4:	f000 f9ca 	bl	800655c <__multadd>
 80061c8:	4607      	mov	r7, r0
 80061ca:	4605      	mov	r5, r0
 80061cc:	9b00      	ldr	r3, [sp, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	e777      	b.n	80060c4 <_dtoa_r+0x9cc>
 80061d4:	f000 f9c2 	bl	800655c <__multadd>
 80061d8:	4629      	mov	r1, r5
 80061da:	4607      	mov	r7, r0
 80061dc:	2300      	movs	r3, #0
 80061de:	220a      	movs	r2, #10
 80061e0:	4648      	mov	r0, r9
 80061e2:	f000 f9bb 	bl	800655c <__multadd>
 80061e6:	4605      	mov	r5, r0
 80061e8:	e7f0      	b.n	80061cc <_dtoa_r+0xad4>
 80061ea:	f1bb 0f00 	cmp.w	fp, #0
 80061ee:	bfcc      	ite	gt
 80061f0:	465e      	movgt	r6, fp
 80061f2:	2601      	movle	r6, #1
 80061f4:	4456      	add	r6, sl
 80061f6:	2700      	movs	r7, #0
 80061f8:	9902      	ldr	r1, [sp, #8]
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2201      	movs	r2, #1
 80061fe:	4648      	mov	r0, r9
 8006200:	f000 fb9a 	bl	8006938 <__lshift>
 8006204:	4621      	mov	r1, r4
 8006206:	9002      	str	r0, [sp, #8]
 8006208:	f000 fc02 	bl	8006a10 <__mcmp>
 800620c:	2800      	cmp	r0, #0
 800620e:	dcb4      	bgt.n	800617a <_dtoa_r+0xa82>
 8006210:	d102      	bne.n	8006218 <_dtoa_r+0xb20>
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	07db      	lsls	r3, r3, #31
 8006216:	d4b0      	bmi.n	800617a <_dtoa_r+0xa82>
 8006218:	4633      	mov	r3, r6
 800621a:	461e      	mov	r6, r3
 800621c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006220:	2a30      	cmp	r2, #48	@ 0x30
 8006222:	d0fa      	beq.n	800621a <_dtoa_r+0xb22>
 8006224:	e4b5      	b.n	8005b92 <_dtoa_r+0x49a>
 8006226:	459a      	cmp	sl, r3
 8006228:	d1a8      	bne.n	800617c <_dtoa_r+0xa84>
 800622a:	2331      	movs	r3, #49	@ 0x31
 800622c:	f108 0801 	add.w	r8, r8, #1
 8006230:	f88a 3000 	strb.w	r3, [sl]
 8006234:	e4ad      	b.n	8005b92 <_dtoa_r+0x49a>
 8006236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006238:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006294 <_dtoa_r+0xb9c>
 800623c:	b11b      	cbz	r3, 8006246 <_dtoa_r+0xb4e>
 800623e:	f10a 0308 	add.w	r3, sl, #8
 8006242:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4650      	mov	r0, sl
 8006248:	b017      	add	sp, #92	@ 0x5c
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	9b07      	ldr	r3, [sp, #28]
 8006250:	2b01      	cmp	r3, #1
 8006252:	f77f ae2e 	ble.w	8005eb2 <_dtoa_r+0x7ba>
 8006256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006258:	9308      	str	r3, [sp, #32]
 800625a:	2001      	movs	r0, #1
 800625c:	e64d      	b.n	8005efa <_dtoa_r+0x802>
 800625e:	f1bb 0f00 	cmp.w	fp, #0
 8006262:	f77f aed9 	ble.w	8006018 <_dtoa_r+0x920>
 8006266:	4656      	mov	r6, sl
 8006268:	9802      	ldr	r0, [sp, #8]
 800626a:	4621      	mov	r1, r4
 800626c:	f7ff f9ba 	bl	80055e4 <quorem>
 8006270:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006274:	f806 3b01 	strb.w	r3, [r6], #1
 8006278:	eba6 020a 	sub.w	r2, r6, sl
 800627c:	4593      	cmp	fp, r2
 800627e:	ddb4      	ble.n	80061ea <_dtoa_r+0xaf2>
 8006280:	9902      	ldr	r1, [sp, #8]
 8006282:	2300      	movs	r3, #0
 8006284:	220a      	movs	r2, #10
 8006286:	4648      	mov	r0, r9
 8006288:	f000 f968 	bl	800655c <__multadd>
 800628c:	9002      	str	r0, [sp, #8]
 800628e:	e7eb      	b.n	8006268 <_dtoa_r+0xb70>
 8006290:	08008dbd 	.word	0x08008dbd
 8006294:	08008d41 	.word	0x08008d41

08006298 <_free_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4605      	mov	r5, r0
 800629c:	2900      	cmp	r1, #0
 800629e:	d041      	beq.n	8006324 <_free_r+0x8c>
 80062a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a4:	1f0c      	subs	r4, r1, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfb8      	it	lt
 80062aa:	18e4      	addlt	r4, r4, r3
 80062ac:	f000 f8e8 	bl	8006480 <__malloc_lock>
 80062b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <_free_r+0x90>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	b933      	cbnz	r3, 80062c4 <_free_r+0x2c>
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	4628      	mov	r0, r5
 80062bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c0:	f000 b8e4 	b.w	800648c <__malloc_unlock>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x42>
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	1821      	adds	r1, r4, r0
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf01      	itttt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	1809      	addeq	r1, r1, r0
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	e7ed      	b.n	80062b6 <_free_r+0x1e>
 80062da:	461a      	mov	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b10b      	cbz	r3, 80062e4 <_free_r+0x4c>
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x42>
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	1850      	adds	r0, r2, r1
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x6c>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	4401      	add	r1, r0
 80062f0:	1850      	adds	r0, r2, r1
 80062f2:	4283      	cmp	r3, r0
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	d1e0      	bne.n	80062ba <_free_r+0x22>
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	6053      	str	r3, [r2, #4]
 80062fe:	4408      	add	r0, r1
 8006300:	6010      	str	r0, [r2, #0]
 8006302:	e7da      	b.n	80062ba <_free_r+0x22>
 8006304:	d902      	bls.n	800630c <_free_r+0x74>
 8006306:	230c      	movs	r3, #12
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	e7d6      	b.n	80062ba <_free_r+0x22>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	1821      	adds	r1, r4, r0
 8006310:	428b      	cmp	r3, r1
 8006312:	bf04      	itt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	6063      	str	r3, [r4, #4]
 800631a:	bf04      	itt	eq
 800631c:	1809      	addeq	r1, r1, r0
 800631e:	6021      	streq	r1, [r4, #0]
 8006320:	6054      	str	r4, [r2, #4]
 8006322:	e7ca      	b.n	80062ba <_free_r+0x22>
 8006324:	bd38      	pop	{r3, r4, r5, pc}
 8006326:	bf00      	nop
 8006328:	20000418 	.word	0x20000418

0800632c <malloc>:
 800632c:	4b02      	ldr	r3, [pc, #8]	@ (8006338 <malloc+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f000 b825 	b.w	8006380 <_malloc_r>
 8006336:	bf00      	nop
 8006338:	20000018 	.word	0x20000018

0800633c <sbrk_aligned>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4e0f      	ldr	r6, [pc, #60]	@ (800637c <sbrk_aligned+0x40>)
 8006340:	460c      	mov	r4, r1
 8006342:	6831      	ldr	r1, [r6, #0]
 8006344:	4605      	mov	r5, r0
 8006346:	b911      	cbnz	r1, 800634e <sbrk_aligned+0x12>
 8006348:	f001 fe04 	bl	8007f54 <_sbrk_r>
 800634c:	6030      	str	r0, [r6, #0]
 800634e:	4621      	mov	r1, r4
 8006350:	4628      	mov	r0, r5
 8006352:	f001 fdff 	bl	8007f54 <_sbrk_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	d103      	bne.n	8006362 <sbrk_aligned+0x26>
 800635a:	f04f 34ff 	mov.w	r4, #4294967295
 800635e:	4620      	mov	r0, r4
 8006360:	bd70      	pop	{r4, r5, r6, pc}
 8006362:	1cc4      	adds	r4, r0, #3
 8006364:	f024 0403 	bic.w	r4, r4, #3
 8006368:	42a0      	cmp	r0, r4
 800636a:	d0f8      	beq.n	800635e <sbrk_aligned+0x22>
 800636c:	1a21      	subs	r1, r4, r0
 800636e:	4628      	mov	r0, r5
 8006370:	f001 fdf0 	bl	8007f54 <_sbrk_r>
 8006374:	3001      	adds	r0, #1
 8006376:	d1f2      	bne.n	800635e <sbrk_aligned+0x22>
 8006378:	e7ef      	b.n	800635a <sbrk_aligned+0x1e>
 800637a:	bf00      	nop
 800637c:	20000414 	.word	0x20000414

08006380 <_malloc_r>:
 8006380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006384:	1ccd      	adds	r5, r1, #3
 8006386:	f025 0503 	bic.w	r5, r5, #3
 800638a:	3508      	adds	r5, #8
 800638c:	2d0c      	cmp	r5, #12
 800638e:	bf38      	it	cc
 8006390:	250c      	movcc	r5, #12
 8006392:	2d00      	cmp	r5, #0
 8006394:	4606      	mov	r6, r0
 8006396:	db01      	blt.n	800639c <_malloc_r+0x1c>
 8006398:	42a9      	cmp	r1, r5
 800639a:	d904      	bls.n	80063a6 <_malloc_r+0x26>
 800639c:	230c      	movs	r3, #12
 800639e:	6033      	str	r3, [r6, #0]
 80063a0:	2000      	movs	r0, #0
 80063a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800647c <_malloc_r+0xfc>
 80063aa:	f000 f869 	bl	8006480 <__malloc_lock>
 80063ae:	f8d8 3000 	ldr.w	r3, [r8]
 80063b2:	461c      	mov	r4, r3
 80063b4:	bb44      	cbnz	r4, 8006408 <_malloc_r+0x88>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4630      	mov	r0, r6
 80063ba:	f7ff ffbf 	bl	800633c <sbrk_aligned>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	4604      	mov	r4, r0
 80063c2:	d158      	bne.n	8006476 <_malloc_r+0xf6>
 80063c4:	f8d8 4000 	ldr.w	r4, [r8]
 80063c8:	4627      	mov	r7, r4
 80063ca:	2f00      	cmp	r7, #0
 80063cc:	d143      	bne.n	8006456 <_malloc_r+0xd6>
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	d04b      	beq.n	800646a <_malloc_r+0xea>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	4639      	mov	r1, r7
 80063d6:	4630      	mov	r0, r6
 80063d8:	eb04 0903 	add.w	r9, r4, r3
 80063dc:	f001 fdba 	bl	8007f54 <_sbrk_r>
 80063e0:	4581      	cmp	r9, r0
 80063e2:	d142      	bne.n	800646a <_malloc_r+0xea>
 80063e4:	6821      	ldr	r1, [r4, #0]
 80063e6:	1a6d      	subs	r5, r5, r1
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ffa6 	bl	800633c <sbrk_aligned>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d03a      	beq.n	800646a <_malloc_r+0xea>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	442b      	add	r3, r5
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	f8d8 3000 	ldr.w	r3, [r8]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	bb62      	cbnz	r2, 800645c <_malloc_r+0xdc>
 8006402:	f8c8 7000 	str.w	r7, [r8]
 8006406:	e00f      	b.n	8006428 <_malloc_r+0xa8>
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	1b52      	subs	r2, r2, r5
 800640c:	d420      	bmi.n	8006450 <_malloc_r+0xd0>
 800640e:	2a0b      	cmp	r2, #11
 8006410:	d917      	bls.n	8006442 <_malloc_r+0xc2>
 8006412:	1961      	adds	r1, r4, r5
 8006414:	42a3      	cmp	r3, r4
 8006416:	6025      	str	r5, [r4, #0]
 8006418:	bf18      	it	ne
 800641a:	6059      	strne	r1, [r3, #4]
 800641c:	6863      	ldr	r3, [r4, #4]
 800641e:	bf08      	it	eq
 8006420:	f8c8 1000 	streq.w	r1, [r8]
 8006424:	5162      	str	r2, [r4, r5]
 8006426:	604b      	str	r3, [r1, #4]
 8006428:	4630      	mov	r0, r6
 800642a:	f000 f82f 	bl	800648c <__malloc_unlock>
 800642e:	f104 000b 	add.w	r0, r4, #11
 8006432:	1d23      	adds	r3, r4, #4
 8006434:	f020 0007 	bic.w	r0, r0, #7
 8006438:	1ac2      	subs	r2, r0, r3
 800643a:	bf1c      	itt	ne
 800643c:	1a1b      	subne	r3, r3, r0
 800643e:	50a3      	strne	r3, [r4, r2]
 8006440:	e7af      	b.n	80063a2 <_malloc_r+0x22>
 8006442:	6862      	ldr	r2, [r4, #4]
 8006444:	42a3      	cmp	r3, r4
 8006446:	bf0c      	ite	eq
 8006448:	f8c8 2000 	streq.w	r2, [r8]
 800644c:	605a      	strne	r2, [r3, #4]
 800644e:	e7eb      	b.n	8006428 <_malloc_r+0xa8>
 8006450:	4623      	mov	r3, r4
 8006452:	6864      	ldr	r4, [r4, #4]
 8006454:	e7ae      	b.n	80063b4 <_malloc_r+0x34>
 8006456:	463c      	mov	r4, r7
 8006458:	687f      	ldr	r7, [r7, #4]
 800645a:	e7b6      	b.n	80063ca <_malloc_r+0x4a>
 800645c:	461a      	mov	r2, r3
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	42a3      	cmp	r3, r4
 8006462:	d1fb      	bne.n	800645c <_malloc_r+0xdc>
 8006464:	2300      	movs	r3, #0
 8006466:	6053      	str	r3, [r2, #4]
 8006468:	e7de      	b.n	8006428 <_malloc_r+0xa8>
 800646a:	230c      	movs	r3, #12
 800646c:	6033      	str	r3, [r6, #0]
 800646e:	4630      	mov	r0, r6
 8006470:	f000 f80c 	bl	800648c <__malloc_unlock>
 8006474:	e794      	b.n	80063a0 <_malloc_r+0x20>
 8006476:	6005      	str	r5, [r0, #0]
 8006478:	e7d6      	b.n	8006428 <_malloc_r+0xa8>
 800647a:	bf00      	nop
 800647c:	20000418 	.word	0x20000418

08006480 <__malloc_lock>:
 8006480:	4801      	ldr	r0, [pc, #4]	@ (8006488 <__malloc_lock+0x8>)
 8006482:	f7ff b8a6 	b.w	80055d2 <__retarget_lock_acquire_recursive>
 8006486:	bf00      	nop
 8006488:	20000410 	.word	0x20000410

0800648c <__malloc_unlock>:
 800648c:	4801      	ldr	r0, [pc, #4]	@ (8006494 <__malloc_unlock+0x8>)
 800648e:	f7ff b8a1 	b.w	80055d4 <__retarget_lock_release_recursive>
 8006492:	bf00      	nop
 8006494:	20000410 	.word	0x20000410

08006498 <_Balloc>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	69c6      	ldr	r6, [r0, #28]
 800649c:	4604      	mov	r4, r0
 800649e:	460d      	mov	r5, r1
 80064a0:	b976      	cbnz	r6, 80064c0 <_Balloc+0x28>
 80064a2:	2010      	movs	r0, #16
 80064a4:	f7ff ff42 	bl	800632c <malloc>
 80064a8:	4602      	mov	r2, r0
 80064aa:	61e0      	str	r0, [r4, #28]
 80064ac:	b920      	cbnz	r0, 80064b8 <_Balloc+0x20>
 80064ae:	4b18      	ldr	r3, [pc, #96]	@ (8006510 <_Balloc+0x78>)
 80064b0:	4818      	ldr	r0, [pc, #96]	@ (8006514 <_Balloc+0x7c>)
 80064b2:	216b      	movs	r1, #107	@ 0x6b
 80064b4:	f001 fd74 	bl	8007fa0 <__assert_func>
 80064b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064bc:	6006      	str	r6, [r0, #0]
 80064be:	60c6      	str	r6, [r0, #12]
 80064c0:	69e6      	ldr	r6, [r4, #28]
 80064c2:	68f3      	ldr	r3, [r6, #12]
 80064c4:	b183      	cbz	r3, 80064e8 <_Balloc+0x50>
 80064c6:	69e3      	ldr	r3, [r4, #28]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064ce:	b9b8      	cbnz	r0, 8006500 <_Balloc+0x68>
 80064d0:	2101      	movs	r1, #1
 80064d2:	fa01 f605 	lsl.w	r6, r1, r5
 80064d6:	1d72      	adds	r2, r6, #5
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	4620      	mov	r0, r4
 80064dc:	f001 fd7e 	bl	8007fdc <_calloc_r>
 80064e0:	b160      	cbz	r0, 80064fc <_Balloc+0x64>
 80064e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064e6:	e00e      	b.n	8006506 <_Balloc+0x6e>
 80064e8:	2221      	movs	r2, #33	@ 0x21
 80064ea:	2104      	movs	r1, #4
 80064ec:	4620      	mov	r0, r4
 80064ee:	f001 fd75 	bl	8007fdc <_calloc_r>
 80064f2:	69e3      	ldr	r3, [r4, #28]
 80064f4:	60f0      	str	r0, [r6, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e4      	bne.n	80064c6 <_Balloc+0x2e>
 80064fc:	2000      	movs	r0, #0
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	6802      	ldr	r2, [r0, #0]
 8006502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006506:	2300      	movs	r3, #0
 8006508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800650c:	e7f7      	b.n	80064fe <_Balloc+0x66>
 800650e:	bf00      	nop
 8006510:	08008d4e 	.word	0x08008d4e
 8006514:	08008dce 	.word	0x08008dce

08006518 <_Bfree>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	69c6      	ldr	r6, [r0, #28]
 800651c:	4605      	mov	r5, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b976      	cbnz	r6, 8006540 <_Bfree+0x28>
 8006522:	2010      	movs	r0, #16
 8006524:	f7ff ff02 	bl	800632c <malloc>
 8006528:	4602      	mov	r2, r0
 800652a:	61e8      	str	r0, [r5, #28]
 800652c:	b920      	cbnz	r0, 8006538 <_Bfree+0x20>
 800652e:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <_Bfree+0x3c>)
 8006530:	4809      	ldr	r0, [pc, #36]	@ (8006558 <_Bfree+0x40>)
 8006532:	218f      	movs	r1, #143	@ 0x8f
 8006534:	f001 fd34 	bl	8007fa0 <__assert_func>
 8006538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800653c:	6006      	str	r6, [r0, #0]
 800653e:	60c6      	str	r6, [r0, #12]
 8006540:	b13c      	cbz	r4, 8006552 <_Bfree+0x3a>
 8006542:	69eb      	ldr	r3, [r5, #28]
 8006544:	6862      	ldr	r2, [r4, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800654c:	6021      	str	r1, [r4, #0]
 800654e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	08008d4e 	.word	0x08008d4e
 8006558:	08008dce 	.word	0x08008dce

0800655c <__multadd>:
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	690d      	ldr	r5, [r1, #16]
 8006562:	4607      	mov	r7, r0
 8006564:	460c      	mov	r4, r1
 8006566:	461e      	mov	r6, r3
 8006568:	f101 0c14 	add.w	ip, r1, #20
 800656c:	2000      	movs	r0, #0
 800656e:	f8dc 3000 	ldr.w	r3, [ip]
 8006572:	b299      	uxth	r1, r3
 8006574:	fb02 6101 	mla	r1, r2, r1, r6
 8006578:	0c1e      	lsrs	r6, r3, #16
 800657a:	0c0b      	lsrs	r3, r1, #16
 800657c:	fb02 3306 	mla	r3, r2, r6, r3
 8006580:	b289      	uxth	r1, r1
 8006582:	3001      	adds	r0, #1
 8006584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006588:	4285      	cmp	r5, r0
 800658a:	f84c 1b04 	str.w	r1, [ip], #4
 800658e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006592:	dcec      	bgt.n	800656e <__multadd+0x12>
 8006594:	b30e      	cbz	r6, 80065da <__multadd+0x7e>
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc19      	bgt.n	80065d0 <__multadd+0x74>
 800659c:	6861      	ldr	r1, [r4, #4]
 800659e:	4638      	mov	r0, r7
 80065a0:	3101      	adds	r1, #1
 80065a2:	f7ff ff79 	bl	8006498 <_Balloc>
 80065a6:	4680      	mov	r8, r0
 80065a8:	b928      	cbnz	r0, 80065b6 <__multadd+0x5a>
 80065aa:	4602      	mov	r2, r0
 80065ac:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <__multadd+0x84>)
 80065ae:	480d      	ldr	r0, [pc, #52]	@ (80065e4 <__multadd+0x88>)
 80065b0:	21ba      	movs	r1, #186	@ 0xba
 80065b2:	f001 fcf5 	bl	8007fa0 <__assert_func>
 80065b6:	6922      	ldr	r2, [r4, #16]
 80065b8:	3202      	adds	r2, #2
 80065ba:	f104 010c 	add.w	r1, r4, #12
 80065be:	0092      	lsls	r2, r2, #2
 80065c0:	300c      	adds	r0, #12
 80065c2:	f001 fcd7 	bl	8007f74 <memcpy>
 80065c6:	4621      	mov	r1, r4
 80065c8:	4638      	mov	r0, r7
 80065ca:	f7ff ffa5 	bl	8006518 <_Bfree>
 80065ce:	4644      	mov	r4, r8
 80065d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d4:	3501      	adds	r5, #1
 80065d6:	615e      	str	r6, [r3, #20]
 80065d8:	6125      	str	r5, [r4, #16]
 80065da:	4620      	mov	r0, r4
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	08008dbd 	.word	0x08008dbd
 80065e4:	08008dce 	.word	0x08008dce

080065e8 <__s2b>:
 80065e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ec:	460c      	mov	r4, r1
 80065ee:	4615      	mov	r5, r2
 80065f0:	461f      	mov	r7, r3
 80065f2:	2209      	movs	r2, #9
 80065f4:	3308      	adds	r3, #8
 80065f6:	4606      	mov	r6, r0
 80065f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80065fc:	2100      	movs	r1, #0
 80065fe:	2201      	movs	r2, #1
 8006600:	429a      	cmp	r2, r3
 8006602:	db09      	blt.n	8006618 <__s2b+0x30>
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff ff47 	bl	8006498 <_Balloc>
 800660a:	b940      	cbnz	r0, 800661e <__s2b+0x36>
 800660c:	4602      	mov	r2, r0
 800660e:	4b19      	ldr	r3, [pc, #100]	@ (8006674 <__s2b+0x8c>)
 8006610:	4819      	ldr	r0, [pc, #100]	@ (8006678 <__s2b+0x90>)
 8006612:	21d3      	movs	r1, #211	@ 0xd3
 8006614:	f001 fcc4 	bl	8007fa0 <__assert_func>
 8006618:	0052      	lsls	r2, r2, #1
 800661a:	3101      	adds	r1, #1
 800661c:	e7f0      	b.n	8006600 <__s2b+0x18>
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	6143      	str	r3, [r0, #20]
 8006622:	2d09      	cmp	r5, #9
 8006624:	f04f 0301 	mov.w	r3, #1
 8006628:	6103      	str	r3, [r0, #16]
 800662a:	dd16      	ble.n	800665a <__s2b+0x72>
 800662c:	f104 0909 	add.w	r9, r4, #9
 8006630:	46c8      	mov	r8, r9
 8006632:	442c      	add	r4, r5
 8006634:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006638:	4601      	mov	r1, r0
 800663a:	3b30      	subs	r3, #48	@ 0x30
 800663c:	220a      	movs	r2, #10
 800663e:	4630      	mov	r0, r6
 8006640:	f7ff ff8c 	bl	800655c <__multadd>
 8006644:	45a0      	cmp	r8, r4
 8006646:	d1f5      	bne.n	8006634 <__s2b+0x4c>
 8006648:	f1a5 0408 	sub.w	r4, r5, #8
 800664c:	444c      	add	r4, r9
 800664e:	1b2d      	subs	r5, r5, r4
 8006650:	1963      	adds	r3, r4, r5
 8006652:	42bb      	cmp	r3, r7
 8006654:	db04      	blt.n	8006660 <__s2b+0x78>
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	340a      	adds	r4, #10
 800665c:	2509      	movs	r5, #9
 800665e:	e7f6      	b.n	800664e <__s2b+0x66>
 8006660:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006664:	4601      	mov	r1, r0
 8006666:	3b30      	subs	r3, #48	@ 0x30
 8006668:	220a      	movs	r2, #10
 800666a:	4630      	mov	r0, r6
 800666c:	f7ff ff76 	bl	800655c <__multadd>
 8006670:	e7ee      	b.n	8006650 <__s2b+0x68>
 8006672:	bf00      	nop
 8006674:	08008dbd 	.word	0x08008dbd
 8006678:	08008dce 	.word	0x08008dce

0800667c <__hi0bits>:
 800667c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006680:	4603      	mov	r3, r0
 8006682:	bf36      	itet	cc
 8006684:	0403      	lslcc	r3, r0, #16
 8006686:	2000      	movcs	r0, #0
 8006688:	2010      	movcc	r0, #16
 800668a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800668e:	bf3c      	itt	cc
 8006690:	021b      	lslcc	r3, r3, #8
 8006692:	3008      	addcc	r0, #8
 8006694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006698:	bf3c      	itt	cc
 800669a:	011b      	lslcc	r3, r3, #4
 800669c:	3004      	addcc	r0, #4
 800669e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a2:	bf3c      	itt	cc
 80066a4:	009b      	lslcc	r3, r3, #2
 80066a6:	3002      	addcc	r0, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	db05      	blt.n	80066b8 <__hi0bits+0x3c>
 80066ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066b0:	f100 0001 	add.w	r0, r0, #1
 80066b4:	bf08      	it	eq
 80066b6:	2020      	moveq	r0, #32
 80066b8:	4770      	bx	lr

080066ba <__lo0bits>:
 80066ba:	6803      	ldr	r3, [r0, #0]
 80066bc:	4602      	mov	r2, r0
 80066be:	f013 0007 	ands.w	r0, r3, #7
 80066c2:	d00b      	beq.n	80066dc <__lo0bits+0x22>
 80066c4:	07d9      	lsls	r1, r3, #31
 80066c6:	d421      	bmi.n	800670c <__lo0bits+0x52>
 80066c8:	0798      	lsls	r0, r3, #30
 80066ca:	bf49      	itett	mi
 80066cc:	085b      	lsrmi	r3, r3, #1
 80066ce:	089b      	lsrpl	r3, r3, #2
 80066d0:	2001      	movmi	r0, #1
 80066d2:	6013      	strmi	r3, [r2, #0]
 80066d4:	bf5c      	itt	pl
 80066d6:	6013      	strpl	r3, [r2, #0]
 80066d8:	2002      	movpl	r0, #2
 80066da:	4770      	bx	lr
 80066dc:	b299      	uxth	r1, r3
 80066de:	b909      	cbnz	r1, 80066e4 <__lo0bits+0x2a>
 80066e0:	0c1b      	lsrs	r3, r3, #16
 80066e2:	2010      	movs	r0, #16
 80066e4:	b2d9      	uxtb	r1, r3
 80066e6:	b909      	cbnz	r1, 80066ec <__lo0bits+0x32>
 80066e8:	3008      	adds	r0, #8
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	0719      	lsls	r1, r3, #28
 80066ee:	bf04      	itt	eq
 80066f0:	091b      	lsreq	r3, r3, #4
 80066f2:	3004      	addeq	r0, #4
 80066f4:	0799      	lsls	r1, r3, #30
 80066f6:	bf04      	itt	eq
 80066f8:	089b      	lsreq	r3, r3, #2
 80066fa:	3002      	addeq	r0, #2
 80066fc:	07d9      	lsls	r1, r3, #31
 80066fe:	d403      	bmi.n	8006708 <__lo0bits+0x4e>
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	f100 0001 	add.w	r0, r0, #1
 8006706:	d003      	beq.n	8006710 <__lo0bits+0x56>
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	4770      	bx	lr
 800670c:	2000      	movs	r0, #0
 800670e:	4770      	bx	lr
 8006710:	2020      	movs	r0, #32
 8006712:	4770      	bx	lr

08006714 <__i2b>:
 8006714:	b510      	push	{r4, lr}
 8006716:	460c      	mov	r4, r1
 8006718:	2101      	movs	r1, #1
 800671a:	f7ff febd 	bl	8006498 <_Balloc>
 800671e:	4602      	mov	r2, r0
 8006720:	b928      	cbnz	r0, 800672e <__i2b+0x1a>
 8006722:	4b05      	ldr	r3, [pc, #20]	@ (8006738 <__i2b+0x24>)
 8006724:	4805      	ldr	r0, [pc, #20]	@ (800673c <__i2b+0x28>)
 8006726:	f240 1145 	movw	r1, #325	@ 0x145
 800672a:	f001 fc39 	bl	8007fa0 <__assert_func>
 800672e:	2301      	movs	r3, #1
 8006730:	6144      	str	r4, [r0, #20]
 8006732:	6103      	str	r3, [r0, #16]
 8006734:	bd10      	pop	{r4, pc}
 8006736:	bf00      	nop
 8006738:	08008dbd 	.word	0x08008dbd
 800673c:	08008dce 	.word	0x08008dce

08006740 <__multiply>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	4617      	mov	r7, r2
 8006746:	690a      	ldr	r2, [r1, #16]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	429a      	cmp	r2, r3
 800674c:	bfa8      	it	ge
 800674e:	463b      	movge	r3, r7
 8006750:	4689      	mov	r9, r1
 8006752:	bfa4      	itt	ge
 8006754:	460f      	movge	r7, r1
 8006756:	4699      	movge	r9, r3
 8006758:	693d      	ldr	r5, [r7, #16]
 800675a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	eb05 060a 	add.w	r6, r5, sl
 8006766:	42b3      	cmp	r3, r6
 8006768:	b085      	sub	sp, #20
 800676a:	bfb8      	it	lt
 800676c:	3101      	addlt	r1, #1
 800676e:	f7ff fe93 	bl	8006498 <_Balloc>
 8006772:	b930      	cbnz	r0, 8006782 <__multiply+0x42>
 8006774:	4602      	mov	r2, r0
 8006776:	4b41      	ldr	r3, [pc, #260]	@ (800687c <__multiply+0x13c>)
 8006778:	4841      	ldr	r0, [pc, #260]	@ (8006880 <__multiply+0x140>)
 800677a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800677e:	f001 fc0f 	bl	8007fa0 <__assert_func>
 8006782:	f100 0414 	add.w	r4, r0, #20
 8006786:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800678a:	4623      	mov	r3, r4
 800678c:	2200      	movs	r2, #0
 800678e:	4573      	cmp	r3, lr
 8006790:	d320      	bcc.n	80067d4 <__multiply+0x94>
 8006792:	f107 0814 	add.w	r8, r7, #20
 8006796:	f109 0114 	add.w	r1, r9, #20
 800679a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800679e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80067a2:	9302      	str	r3, [sp, #8]
 80067a4:	1beb      	subs	r3, r5, r7
 80067a6:	3b15      	subs	r3, #21
 80067a8:	f023 0303 	bic.w	r3, r3, #3
 80067ac:	3304      	adds	r3, #4
 80067ae:	3715      	adds	r7, #21
 80067b0:	42bd      	cmp	r5, r7
 80067b2:	bf38      	it	cc
 80067b4:	2304      	movcc	r3, #4
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	9b02      	ldr	r3, [sp, #8]
 80067ba:	9103      	str	r1, [sp, #12]
 80067bc:	428b      	cmp	r3, r1
 80067be:	d80c      	bhi.n	80067da <__multiply+0x9a>
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	dd03      	ble.n	80067cc <__multiply+0x8c>
 80067c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d055      	beq.n	8006878 <__multiply+0x138>
 80067cc:	6106      	str	r6, [r0, #16]
 80067ce:	b005      	add	sp, #20
 80067d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	f843 2b04 	str.w	r2, [r3], #4
 80067d8:	e7d9      	b.n	800678e <__multiply+0x4e>
 80067da:	f8b1 a000 	ldrh.w	sl, [r1]
 80067de:	f1ba 0f00 	cmp.w	sl, #0
 80067e2:	d01f      	beq.n	8006824 <__multiply+0xe4>
 80067e4:	46c4      	mov	ip, r8
 80067e6:	46a1      	mov	r9, r4
 80067e8:	2700      	movs	r7, #0
 80067ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067ee:	f8d9 3000 	ldr.w	r3, [r9]
 80067f2:	fa1f fb82 	uxth.w	fp, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80067fc:	443b      	add	r3, r7
 80067fe:	f8d9 7000 	ldr.w	r7, [r9]
 8006802:	0c12      	lsrs	r2, r2, #16
 8006804:	0c3f      	lsrs	r7, r7, #16
 8006806:	fb0a 7202 	mla	r2, sl, r2, r7
 800680a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006814:	4565      	cmp	r5, ip
 8006816:	f849 3b04 	str.w	r3, [r9], #4
 800681a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800681e:	d8e4      	bhi.n	80067ea <__multiply+0xaa>
 8006820:	9b01      	ldr	r3, [sp, #4]
 8006822:	50e7      	str	r7, [r4, r3]
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800682a:	3104      	adds	r1, #4
 800682c:	f1b9 0f00 	cmp.w	r9, #0
 8006830:	d020      	beq.n	8006874 <__multiply+0x134>
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	4647      	mov	r7, r8
 8006836:	46a4      	mov	ip, r4
 8006838:	f04f 0a00 	mov.w	sl, #0
 800683c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006840:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006844:	fb09 220b 	mla	r2, r9, fp, r2
 8006848:	4452      	add	r2, sl
 800684a:	b29b      	uxth	r3, r3
 800684c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006850:	f84c 3b04 	str.w	r3, [ip], #4
 8006854:	f857 3b04 	ldr.w	r3, [r7], #4
 8006858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800685c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006860:	fb09 330a 	mla	r3, r9, sl, r3
 8006864:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006868:	42bd      	cmp	r5, r7
 800686a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800686e:	d8e5      	bhi.n	800683c <__multiply+0xfc>
 8006870:	9a01      	ldr	r2, [sp, #4]
 8006872:	50a3      	str	r3, [r4, r2]
 8006874:	3404      	adds	r4, #4
 8006876:	e79f      	b.n	80067b8 <__multiply+0x78>
 8006878:	3e01      	subs	r6, #1
 800687a:	e7a1      	b.n	80067c0 <__multiply+0x80>
 800687c:	08008dbd 	.word	0x08008dbd
 8006880:	08008dce 	.word	0x08008dce

08006884 <__pow5mult>:
 8006884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006888:	4615      	mov	r5, r2
 800688a:	f012 0203 	ands.w	r2, r2, #3
 800688e:	4607      	mov	r7, r0
 8006890:	460e      	mov	r6, r1
 8006892:	d007      	beq.n	80068a4 <__pow5mult+0x20>
 8006894:	4c25      	ldr	r4, [pc, #148]	@ (800692c <__pow5mult+0xa8>)
 8006896:	3a01      	subs	r2, #1
 8006898:	2300      	movs	r3, #0
 800689a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800689e:	f7ff fe5d 	bl	800655c <__multadd>
 80068a2:	4606      	mov	r6, r0
 80068a4:	10ad      	asrs	r5, r5, #2
 80068a6:	d03d      	beq.n	8006924 <__pow5mult+0xa0>
 80068a8:	69fc      	ldr	r4, [r7, #28]
 80068aa:	b97c      	cbnz	r4, 80068cc <__pow5mult+0x48>
 80068ac:	2010      	movs	r0, #16
 80068ae:	f7ff fd3d 	bl	800632c <malloc>
 80068b2:	4602      	mov	r2, r0
 80068b4:	61f8      	str	r0, [r7, #28]
 80068b6:	b928      	cbnz	r0, 80068c4 <__pow5mult+0x40>
 80068b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006930 <__pow5mult+0xac>)
 80068ba:	481e      	ldr	r0, [pc, #120]	@ (8006934 <__pow5mult+0xb0>)
 80068bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80068c0:	f001 fb6e 	bl	8007fa0 <__assert_func>
 80068c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068c8:	6004      	str	r4, [r0, #0]
 80068ca:	60c4      	str	r4, [r0, #12]
 80068cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80068d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068d4:	b94c      	cbnz	r4, 80068ea <__pow5mult+0x66>
 80068d6:	f240 2171 	movw	r1, #625	@ 0x271
 80068da:	4638      	mov	r0, r7
 80068dc:	f7ff ff1a 	bl	8006714 <__i2b>
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80068e6:	4604      	mov	r4, r0
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	f04f 0900 	mov.w	r9, #0
 80068ee:	07eb      	lsls	r3, r5, #31
 80068f0:	d50a      	bpl.n	8006908 <__pow5mult+0x84>
 80068f2:	4631      	mov	r1, r6
 80068f4:	4622      	mov	r2, r4
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7ff ff22 	bl	8006740 <__multiply>
 80068fc:	4631      	mov	r1, r6
 80068fe:	4680      	mov	r8, r0
 8006900:	4638      	mov	r0, r7
 8006902:	f7ff fe09 	bl	8006518 <_Bfree>
 8006906:	4646      	mov	r6, r8
 8006908:	106d      	asrs	r5, r5, #1
 800690a:	d00b      	beq.n	8006924 <__pow5mult+0xa0>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	b938      	cbnz	r0, 8006920 <__pow5mult+0x9c>
 8006910:	4622      	mov	r2, r4
 8006912:	4621      	mov	r1, r4
 8006914:	4638      	mov	r0, r7
 8006916:	f7ff ff13 	bl	8006740 <__multiply>
 800691a:	6020      	str	r0, [r4, #0]
 800691c:	f8c0 9000 	str.w	r9, [r0]
 8006920:	4604      	mov	r4, r0
 8006922:	e7e4      	b.n	80068ee <__pow5mult+0x6a>
 8006924:	4630      	mov	r0, r6
 8006926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692a:	bf00      	nop
 800692c:	08008ee0 	.word	0x08008ee0
 8006930:	08008d4e 	.word	0x08008d4e
 8006934:	08008dce 	.word	0x08008dce

08006938 <__lshift>:
 8006938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	460c      	mov	r4, r1
 800693e:	6849      	ldr	r1, [r1, #4]
 8006940:	6923      	ldr	r3, [r4, #16]
 8006942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006946:	68a3      	ldr	r3, [r4, #8]
 8006948:	4607      	mov	r7, r0
 800694a:	4691      	mov	r9, r2
 800694c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006950:	f108 0601 	add.w	r6, r8, #1
 8006954:	42b3      	cmp	r3, r6
 8006956:	db0b      	blt.n	8006970 <__lshift+0x38>
 8006958:	4638      	mov	r0, r7
 800695a:	f7ff fd9d 	bl	8006498 <_Balloc>
 800695e:	4605      	mov	r5, r0
 8006960:	b948      	cbnz	r0, 8006976 <__lshift+0x3e>
 8006962:	4602      	mov	r2, r0
 8006964:	4b28      	ldr	r3, [pc, #160]	@ (8006a08 <__lshift+0xd0>)
 8006966:	4829      	ldr	r0, [pc, #164]	@ (8006a0c <__lshift+0xd4>)
 8006968:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800696c:	f001 fb18 	bl	8007fa0 <__assert_func>
 8006970:	3101      	adds	r1, #1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	e7ee      	b.n	8006954 <__lshift+0x1c>
 8006976:	2300      	movs	r3, #0
 8006978:	f100 0114 	add.w	r1, r0, #20
 800697c:	f100 0210 	add.w	r2, r0, #16
 8006980:	4618      	mov	r0, r3
 8006982:	4553      	cmp	r3, sl
 8006984:	db33      	blt.n	80069ee <__lshift+0xb6>
 8006986:	6920      	ldr	r0, [r4, #16]
 8006988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800698c:	f104 0314 	add.w	r3, r4, #20
 8006990:	f019 091f 	ands.w	r9, r9, #31
 8006994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800699c:	d02b      	beq.n	80069f6 <__lshift+0xbe>
 800699e:	f1c9 0e20 	rsb	lr, r9, #32
 80069a2:	468a      	mov	sl, r1
 80069a4:	2200      	movs	r2, #0
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	fa00 f009 	lsl.w	r0, r0, r9
 80069ac:	4310      	orrs	r0, r2
 80069ae:	f84a 0b04 	str.w	r0, [sl], #4
 80069b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b6:	459c      	cmp	ip, r3
 80069b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80069bc:	d8f3      	bhi.n	80069a6 <__lshift+0x6e>
 80069be:	ebac 0304 	sub.w	r3, ip, r4
 80069c2:	3b15      	subs	r3, #21
 80069c4:	f023 0303 	bic.w	r3, r3, #3
 80069c8:	3304      	adds	r3, #4
 80069ca:	f104 0015 	add.w	r0, r4, #21
 80069ce:	4560      	cmp	r0, ip
 80069d0:	bf88      	it	hi
 80069d2:	2304      	movhi	r3, #4
 80069d4:	50ca      	str	r2, [r1, r3]
 80069d6:	b10a      	cbz	r2, 80069dc <__lshift+0xa4>
 80069d8:	f108 0602 	add.w	r6, r8, #2
 80069dc:	3e01      	subs	r6, #1
 80069de:	4638      	mov	r0, r7
 80069e0:	612e      	str	r6, [r5, #16]
 80069e2:	4621      	mov	r1, r4
 80069e4:	f7ff fd98 	bl	8006518 <_Bfree>
 80069e8:	4628      	mov	r0, r5
 80069ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80069f2:	3301      	adds	r3, #1
 80069f4:	e7c5      	b.n	8006982 <__lshift+0x4a>
 80069f6:	3904      	subs	r1, #4
 80069f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a00:	459c      	cmp	ip, r3
 8006a02:	d8f9      	bhi.n	80069f8 <__lshift+0xc0>
 8006a04:	e7ea      	b.n	80069dc <__lshift+0xa4>
 8006a06:	bf00      	nop
 8006a08:	08008dbd 	.word	0x08008dbd
 8006a0c:	08008dce 	.word	0x08008dce

08006a10 <__mcmp>:
 8006a10:	690a      	ldr	r2, [r1, #16]
 8006a12:	4603      	mov	r3, r0
 8006a14:	6900      	ldr	r0, [r0, #16]
 8006a16:	1a80      	subs	r0, r0, r2
 8006a18:	b530      	push	{r4, r5, lr}
 8006a1a:	d10e      	bne.n	8006a3a <__mcmp+0x2a>
 8006a1c:	3314      	adds	r3, #20
 8006a1e:	3114      	adds	r1, #20
 8006a20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a30:	4295      	cmp	r5, r2
 8006a32:	d003      	beq.n	8006a3c <__mcmp+0x2c>
 8006a34:	d205      	bcs.n	8006a42 <__mcmp+0x32>
 8006a36:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3a:	bd30      	pop	{r4, r5, pc}
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	d3f3      	bcc.n	8006a28 <__mcmp+0x18>
 8006a40:	e7fb      	b.n	8006a3a <__mcmp+0x2a>
 8006a42:	2001      	movs	r0, #1
 8006a44:	e7f9      	b.n	8006a3a <__mcmp+0x2a>
	...

08006a48 <__mdiff>:
 8006a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4611      	mov	r1, r2
 8006a52:	4648      	mov	r0, r9
 8006a54:	4614      	mov	r4, r2
 8006a56:	f7ff ffdb 	bl	8006a10 <__mcmp>
 8006a5a:	1e05      	subs	r5, r0, #0
 8006a5c:	d112      	bne.n	8006a84 <__mdiff+0x3c>
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff fd19 	bl	8006498 <_Balloc>
 8006a66:	4602      	mov	r2, r0
 8006a68:	b928      	cbnz	r0, 8006a76 <__mdiff+0x2e>
 8006a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b68 <__mdiff+0x120>)
 8006a6c:	f240 2137 	movw	r1, #567	@ 0x237
 8006a70:	483e      	ldr	r0, [pc, #248]	@ (8006b6c <__mdiff+0x124>)
 8006a72:	f001 fa95 	bl	8007fa0 <__assert_func>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	b003      	add	sp, #12
 8006a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a84:	bfbc      	itt	lt
 8006a86:	464b      	movlt	r3, r9
 8006a88:	46a1      	movlt	r9, r4
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006a90:	bfba      	itte	lt
 8006a92:	461c      	movlt	r4, r3
 8006a94:	2501      	movlt	r5, #1
 8006a96:	2500      	movge	r5, #0
 8006a98:	f7ff fcfe 	bl	8006498 <_Balloc>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	b918      	cbnz	r0, 8006aa8 <__mdiff+0x60>
 8006aa0:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <__mdiff+0x120>)
 8006aa2:	f240 2145 	movw	r1, #581	@ 0x245
 8006aa6:	e7e3      	b.n	8006a70 <__mdiff+0x28>
 8006aa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006aac:	6926      	ldr	r6, [r4, #16]
 8006aae:	60c5      	str	r5, [r0, #12]
 8006ab0:	f109 0310 	add.w	r3, r9, #16
 8006ab4:	f109 0514 	add.w	r5, r9, #20
 8006ab8:	f104 0e14 	add.w	lr, r4, #20
 8006abc:	f100 0b14 	add.w	fp, r0, #20
 8006ac0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006ac4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	46d9      	mov	r9, fp
 8006acc:	f04f 0c00 	mov.w	ip, #0
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ad6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006ada:	9301      	str	r3, [sp, #4]
 8006adc:	fa1f f38a 	uxth.w	r3, sl
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	b283      	uxth	r3, r0
 8006ae4:	1acb      	subs	r3, r1, r3
 8006ae6:	0c00      	lsrs	r0, r0, #16
 8006ae8:	4463      	add	r3, ip
 8006aea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006aee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006af8:	4576      	cmp	r6, lr
 8006afa:	f849 3b04 	str.w	r3, [r9], #4
 8006afe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b02:	d8e5      	bhi.n	8006ad0 <__mdiff+0x88>
 8006b04:	1b33      	subs	r3, r6, r4
 8006b06:	3b15      	subs	r3, #21
 8006b08:	f023 0303 	bic.w	r3, r3, #3
 8006b0c:	3415      	adds	r4, #21
 8006b0e:	3304      	adds	r3, #4
 8006b10:	42a6      	cmp	r6, r4
 8006b12:	bf38      	it	cc
 8006b14:	2304      	movcc	r3, #4
 8006b16:	441d      	add	r5, r3
 8006b18:	445b      	add	r3, fp
 8006b1a:	461e      	mov	r6, r3
 8006b1c:	462c      	mov	r4, r5
 8006b1e:	4544      	cmp	r4, r8
 8006b20:	d30e      	bcc.n	8006b40 <__mdiff+0xf8>
 8006b22:	f108 0103 	add.w	r1, r8, #3
 8006b26:	1b49      	subs	r1, r1, r5
 8006b28:	f021 0103 	bic.w	r1, r1, #3
 8006b2c:	3d03      	subs	r5, #3
 8006b2e:	45a8      	cmp	r8, r5
 8006b30:	bf38      	it	cc
 8006b32:	2100      	movcc	r1, #0
 8006b34:	440b      	add	r3, r1
 8006b36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b3a:	b191      	cbz	r1, 8006b62 <__mdiff+0x11a>
 8006b3c:	6117      	str	r7, [r2, #16]
 8006b3e:	e79d      	b.n	8006a7c <__mdiff+0x34>
 8006b40:	f854 1b04 	ldr.w	r1, [r4], #4
 8006b44:	46e6      	mov	lr, ip
 8006b46:	0c08      	lsrs	r0, r1, #16
 8006b48:	fa1c fc81 	uxtah	ip, ip, r1
 8006b4c:	4471      	add	r1, lr
 8006b4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006b52:	b289      	uxth	r1, r1
 8006b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006b58:	f846 1b04 	str.w	r1, [r6], #4
 8006b5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b60:	e7dd      	b.n	8006b1e <__mdiff+0xd6>
 8006b62:	3f01      	subs	r7, #1
 8006b64:	e7e7      	b.n	8006b36 <__mdiff+0xee>
 8006b66:	bf00      	nop
 8006b68:	08008dbd 	.word	0x08008dbd
 8006b6c:	08008dce 	.word	0x08008dce

08006b70 <__ulp>:
 8006b70:	b082      	sub	sp, #8
 8006b72:	ed8d 0b00 	vstr	d0, [sp]
 8006b76:	9a01      	ldr	r2, [sp, #4]
 8006b78:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb8 <__ulp+0x48>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dc08      	bgt.n	8006b96 <__ulp+0x26>
 8006b84:	425b      	negs	r3, r3
 8006b86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006b8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006b8e:	da04      	bge.n	8006b9a <__ulp+0x2a>
 8006b90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006b94:	4113      	asrs	r3, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	e008      	b.n	8006bac <__ulp+0x3c>
 8006b9a:	f1a2 0314 	sub.w	r3, r2, #20
 8006b9e:	2b1e      	cmp	r3, #30
 8006ba0:	bfda      	itte	le
 8006ba2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006ba6:	40da      	lsrle	r2, r3
 8006ba8:	2201      	movgt	r2, #1
 8006baa:	2300      	movs	r3, #0
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	ec41 0b10 	vmov	d0, r0, r1
 8006bb4:	b002      	add	sp, #8
 8006bb6:	4770      	bx	lr
 8006bb8:	7ff00000 	.word	0x7ff00000

08006bbc <__b2d>:
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	6906      	ldr	r6, [r0, #16]
 8006bc2:	f100 0814 	add.w	r8, r0, #20
 8006bc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006bca:	1f37      	subs	r7, r6, #4
 8006bcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f7ff fd53 	bl	800667c <__hi0bits>
 8006bd6:	f1c0 0320 	rsb	r3, r0, #32
 8006bda:	280a      	cmp	r0, #10
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	491b      	ldr	r1, [pc, #108]	@ (8006c4c <__b2d+0x90>)
 8006be0:	dc15      	bgt.n	8006c0e <__b2d+0x52>
 8006be2:	f1c0 0c0b 	rsb	ip, r0, #11
 8006be6:	fa22 f30c 	lsr.w	r3, r2, ip
 8006bea:	45b8      	cmp	r8, r7
 8006bec:	ea43 0501 	orr.w	r5, r3, r1
 8006bf0:	bf34      	ite	cc
 8006bf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006bf6:	2300      	movcs	r3, #0
 8006bf8:	3015      	adds	r0, #21
 8006bfa:	fa02 f000 	lsl.w	r0, r2, r0
 8006bfe:	fa23 f30c 	lsr.w	r3, r3, ip
 8006c02:	4303      	orrs	r3, r0
 8006c04:	461c      	mov	r4, r3
 8006c06:	ec45 4b10 	vmov	d0, r4, r5
 8006c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c0e:	45b8      	cmp	r8, r7
 8006c10:	bf3a      	itte	cc
 8006c12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006c16:	f1a6 0708 	subcc.w	r7, r6, #8
 8006c1a:	2300      	movcs	r3, #0
 8006c1c:	380b      	subs	r0, #11
 8006c1e:	d012      	beq.n	8006c46 <__b2d+0x8a>
 8006c20:	f1c0 0120 	rsb	r1, r0, #32
 8006c24:	fa23 f401 	lsr.w	r4, r3, r1
 8006c28:	4082      	lsls	r2, r0
 8006c2a:	4322      	orrs	r2, r4
 8006c2c:	4547      	cmp	r7, r8
 8006c2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006c32:	bf8c      	ite	hi
 8006c34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006c38:	2200      	movls	r2, #0
 8006c3a:	4083      	lsls	r3, r0
 8006c3c:	40ca      	lsrs	r2, r1
 8006c3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006c42:	4313      	orrs	r3, r2
 8006c44:	e7de      	b.n	8006c04 <__b2d+0x48>
 8006c46:	ea42 0501 	orr.w	r5, r2, r1
 8006c4a:	e7db      	b.n	8006c04 <__b2d+0x48>
 8006c4c:	3ff00000 	.word	0x3ff00000

08006c50 <__d2b>:
 8006c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c54:	460f      	mov	r7, r1
 8006c56:	2101      	movs	r1, #1
 8006c58:	ec59 8b10 	vmov	r8, r9, d0
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	f7ff fc1b 	bl	8006498 <_Balloc>
 8006c62:	4604      	mov	r4, r0
 8006c64:	b930      	cbnz	r0, 8006c74 <__d2b+0x24>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b23      	ldr	r3, [pc, #140]	@ (8006cf8 <__d2b+0xa8>)
 8006c6a:	4824      	ldr	r0, [pc, #144]	@ (8006cfc <__d2b+0xac>)
 8006c6c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c70:	f001 f996 	bl	8007fa0 <__assert_func>
 8006c74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c7c:	b10d      	cbz	r5, 8006c82 <__d2b+0x32>
 8006c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	f1b8 0300 	subs.w	r3, r8, #0
 8006c88:	d023      	beq.n	8006cd2 <__d2b+0x82>
 8006c8a:	4668      	mov	r0, sp
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	f7ff fd14 	bl	80066ba <__lo0bits>
 8006c92:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c96:	b1d0      	cbz	r0, 8006cce <__d2b+0x7e>
 8006c98:	f1c0 0320 	rsb	r3, r0, #32
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	40c2      	lsrs	r2, r0
 8006ca4:	6163      	str	r3, [r4, #20]
 8006ca6:	9201      	str	r2, [sp, #4]
 8006ca8:	9b01      	ldr	r3, [sp, #4]
 8006caa:	61a3      	str	r3, [r4, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	bf0c      	ite	eq
 8006cb0:	2201      	moveq	r2, #1
 8006cb2:	2202      	movne	r2, #2
 8006cb4:	6122      	str	r2, [r4, #16]
 8006cb6:	b1a5      	cbz	r5, 8006ce2 <__d2b+0x92>
 8006cb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006cbc:	4405      	add	r5, r0
 8006cbe:	603d      	str	r5, [r7, #0]
 8006cc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006cc4:	6030      	str	r0, [r6, #0]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	b003      	add	sp, #12
 8006cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cce:	6161      	str	r1, [r4, #20]
 8006cd0:	e7ea      	b.n	8006ca8 <__d2b+0x58>
 8006cd2:	a801      	add	r0, sp, #4
 8006cd4:	f7ff fcf1 	bl	80066ba <__lo0bits>
 8006cd8:	9b01      	ldr	r3, [sp, #4]
 8006cda:	6163      	str	r3, [r4, #20]
 8006cdc:	3020      	adds	r0, #32
 8006cde:	2201      	movs	r2, #1
 8006ce0:	e7e8      	b.n	8006cb4 <__d2b+0x64>
 8006ce2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ce6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006cea:	6038      	str	r0, [r7, #0]
 8006cec:	6918      	ldr	r0, [r3, #16]
 8006cee:	f7ff fcc5 	bl	800667c <__hi0bits>
 8006cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006cf6:	e7e5      	b.n	8006cc4 <__d2b+0x74>
 8006cf8:	08008dbd 	.word	0x08008dbd
 8006cfc:	08008dce 	.word	0x08008dce

08006d00 <__ratio>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	b085      	sub	sp, #20
 8006d06:	e9cd 1000 	strd	r1, r0, [sp]
 8006d0a:	a902      	add	r1, sp, #8
 8006d0c:	f7ff ff56 	bl	8006bbc <__b2d>
 8006d10:	9800      	ldr	r0, [sp, #0]
 8006d12:	a903      	add	r1, sp, #12
 8006d14:	ec55 4b10 	vmov	r4, r5, d0
 8006d18:	f7ff ff50 	bl	8006bbc <__b2d>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	6919      	ldr	r1, [r3, #16]
 8006d20:	9b00      	ldr	r3, [sp, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	1ac9      	subs	r1, r1, r3
 8006d26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	ec5b ab10 	vmov	sl, fp, d0
 8006d30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfce      	itee	gt
 8006d38:	462a      	movgt	r2, r5
 8006d3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d3e:	465a      	movle	r2, fp
 8006d40:	462f      	mov	r7, r5
 8006d42:	46d9      	mov	r9, fp
 8006d44:	bfcc      	ite	gt
 8006d46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006d4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006d4e:	464b      	mov	r3, r9
 8006d50:	4652      	mov	r2, sl
 8006d52:	4620      	mov	r0, r4
 8006d54:	4639      	mov	r1, r7
 8006d56:	f7f9 fd81 	bl	800085c <__aeabi_ddiv>
 8006d5a:	ec41 0b10 	vmov	d0, r0, r1
 8006d5e:	b005      	add	sp, #20
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006d64 <__copybits>:
 8006d64:	3901      	subs	r1, #1
 8006d66:	b570      	push	{r4, r5, r6, lr}
 8006d68:	1149      	asrs	r1, r1, #5
 8006d6a:	6914      	ldr	r4, [r2, #16]
 8006d6c:	3101      	adds	r1, #1
 8006d6e:	f102 0314 	add.w	r3, r2, #20
 8006d72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006d76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006d7a:	1f05      	subs	r5, r0, #4
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d30c      	bcc.n	8006d9a <__copybits+0x36>
 8006d80:	1aa3      	subs	r3, r4, r2
 8006d82:	3b11      	subs	r3, #17
 8006d84:	f023 0303 	bic.w	r3, r3, #3
 8006d88:	3211      	adds	r2, #17
 8006d8a:	42a2      	cmp	r2, r4
 8006d8c:	bf88      	it	hi
 8006d8e:	2300      	movhi	r3, #0
 8006d90:	4418      	add	r0, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	4288      	cmp	r0, r1
 8006d96:	d305      	bcc.n	8006da4 <__copybits+0x40>
 8006d98:	bd70      	pop	{r4, r5, r6, pc}
 8006d9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006d9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8006da2:	e7eb      	b.n	8006d7c <__copybits+0x18>
 8006da4:	f840 3b04 	str.w	r3, [r0], #4
 8006da8:	e7f4      	b.n	8006d94 <__copybits+0x30>

08006daa <__any_on>:
 8006daa:	f100 0214 	add.w	r2, r0, #20
 8006dae:	6900      	ldr	r0, [r0, #16]
 8006db0:	114b      	asrs	r3, r1, #5
 8006db2:	4298      	cmp	r0, r3
 8006db4:	b510      	push	{r4, lr}
 8006db6:	db11      	blt.n	8006ddc <__any_on+0x32>
 8006db8:	dd0a      	ble.n	8006dd0 <__any_on+0x26>
 8006dba:	f011 011f 	ands.w	r1, r1, #31
 8006dbe:	d007      	beq.n	8006dd0 <__any_on+0x26>
 8006dc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006dc4:	fa24 f001 	lsr.w	r0, r4, r1
 8006dc8:	fa00 f101 	lsl.w	r1, r0, r1
 8006dcc:	428c      	cmp	r4, r1
 8006dce:	d10b      	bne.n	8006de8 <__any_on+0x3e>
 8006dd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d803      	bhi.n	8006de0 <__any_on+0x36>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	bd10      	pop	{r4, pc}
 8006ddc:	4603      	mov	r3, r0
 8006dde:	e7f7      	b.n	8006dd0 <__any_on+0x26>
 8006de0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006de4:	2900      	cmp	r1, #0
 8006de6:	d0f5      	beq.n	8006dd4 <__any_on+0x2a>
 8006de8:	2001      	movs	r0, #1
 8006dea:	e7f6      	b.n	8006dda <__any_on+0x30>

08006dec <sulp>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4604      	mov	r4, r0
 8006df0:	460d      	mov	r5, r1
 8006df2:	ec45 4b10 	vmov	d0, r4, r5
 8006df6:	4616      	mov	r6, r2
 8006df8:	f7ff feba 	bl	8006b70 <__ulp>
 8006dfc:	ec51 0b10 	vmov	r0, r1, d0
 8006e00:	b17e      	cbz	r6, 8006e22 <sulp+0x36>
 8006e02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e06:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dd09      	ble.n	8006e22 <sulp+0x36>
 8006e0e:	051b      	lsls	r3, r3, #20
 8006e10:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006e14:	2400      	movs	r4, #0
 8006e16:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	f7f9 fbf3 	bl	8000608 <__aeabi_dmul>
 8006e22:	ec41 0b10 	vmov	d0, r0, r1
 8006e26:	bd70      	pop	{r4, r5, r6, pc}

08006e28 <_strtod_l>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	b09f      	sub	sp, #124	@ 0x7c
 8006e2e:	460c      	mov	r4, r1
 8006e30:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006e32:	2200      	movs	r2, #0
 8006e34:	921a      	str	r2, [sp, #104]	@ 0x68
 8006e36:	9005      	str	r0, [sp, #20]
 8006e38:	f04f 0a00 	mov.w	sl, #0
 8006e3c:	f04f 0b00 	mov.w	fp, #0
 8006e40:	460a      	mov	r2, r1
 8006e42:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e44:	7811      	ldrb	r1, [r2, #0]
 8006e46:	292b      	cmp	r1, #43	@ 0x2b
 8006e48:	d04a      	beq.n	8006ee0 <_strtod_l+0xb8>
 8006e4a:	d838      	bhi.n	8006ebe <_strtod_l+0x96>
 8006e4c:	290d      	cmp	r1, #13
 8006e4e:	d832      	bhi.n	8006eb6 <_strtod_l+0x8e>
 8006e50:	2908      	cmp	r1, #8
 8006e52:	d832      	bhi.n	8006eba <_strtod_l+0x92>
 8006e54:	2900      	cmp	r1, #0
 8006e56:	d03b      	beq.n	8006ed0 <_strtod_l+0xa8>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006e5e:	782a      	ldrb	r2, [r5, #0]
 8006e60:	2a30      	cmp	r2, #48	@ 0x30
 8006e62:	f040 80b2 	bne.w	8006fca <_strtod_l+0x1a2>
 8006e66:	786a      	ldrb	r2, [r5, #1]
 8006e68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006e6c:	2a58      	cmp	r2, #88	@ 0x58
 8006e6e:	d16e      	bne.n	8006f4e <_strtod_l+0x126>
 8006e70:	9302      	str	r3, [sp, #8]
 8006e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e74:	9301      	str	r3, [sp, #4]
 8006e76:	ab1a      	add	r3, sp, #104	@ 0x68
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	4a8f      	ldr	r2, [pc, #572]	@ (80070b8 <_strtod_l+0x290>)
 8006e7c:	9805      	ldr	r0, [sp, #20]
 8006e7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006e80:	a919      	add	r1, sp, #100	@ 0x64
 8006e82:	f001 f927 	bl	80080d4 <__gethex>
 8006e86:	f010 060f 	ands.w	r6, r0, #15
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	d005      	beq.n	8006e9a <_strtod_l+0x72>
 8006e8e:	2e06      	cmp	r6, #6
 8006e90:	d128      	bne.n	8006ee4 <_strtod_l+0xbc>
 8006e92:	3501      	adds	r5, #1
 8006e94:	2300      	movs	r3, #0
 8006e96:	9519      	str	r5, [sp, #100]	@ 0x64
 8006e98:	930e      	str	r3, [sp, #56]	@ 0x38
 8006e9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f040 858e 	bne.w	80079be <_strtod_l+0xb96>
 8006ea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ea4:	b1cb      	cbz	r3, 8006eda <_strtod_l+0xb2>
 8006ea6:	4652      	mov	r2, sl
 8006ea8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006eac:	ec43 2b10 	vmov	d0, r2, r3
 8006eb0:	b01f      	add	sp, #124	@ 0x7c
 8006eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb6:	2920      	cmp	r1, #32
 8006eb8:	d1ce      	bne.n	8006e58 <_strtod_l+0x30>
 8006eba:	3201      	adds	r2, #1
 8006ebc:	e7c1      	b.n	8006e42 <_strtod_l+0x1a>
 8006ebe:	292d      	cmp	r1, #45	@ 0x2d
 8006ec0:	d1ca      	bne.n	8006e58 <_strtod_l+0x30>
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	910e      	str	r1, [sp, #56]	@ 0x38
 8006ec6:	1c51      	adds	r1, r2, #1
 8006ec8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006eca:	7852      	ldrb	r2, [r2, #1]
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d1c5      	bne.n	8006e5c <_strtod_l+0x34>
 8006ed0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ed2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f040 8570 	bne.w	80079ba <_strtod_l+0xb92>
 8006eda:	4652      	mov	r2, sl
 8006edc:	465b      	mov	r3, fp
 8006ede:	e7e5      	b.n	8006eac <_strtod_l+0x84>
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	e7ef      	b.n	8006ec4 <_strtod_l+0x9c>
 8006ee4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ee6:	b13a      	cbz	r2, 8006ef8 <_strtod_l+0xd0>
 8006ee8:	2135      	movs	r1, #53	@ 0x35
 8006eea:	a81c      	add	r0, sp, #112	@ 0x70
 8006eec:	f7ff ff3a 	bl	8006d64 <__copybits>
 8006ef0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ef2:	9805      	ldr	r0, [sp, #20]
 8006ef4:	f7ff fb10 	bl	8006518 <_Bfree>
 8006ef8:	3e01      	subs	r6, #1
 8006efa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006efc:	2e04      	cmp	r6, #4
 8006efe:	d806      	bhi.n	8006f0e <_strtod_l+0xe6>
 8006f00:	e8df f006 	tbb	[pc, r6]
 8006f04:	201d0314 	.word	0x201d0314
 8006f08:	14          	.byte	0x14
 8006f09:	00          	.byte	0x00
 8006f0a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006f0e:	05e1      	lsls	r1, r4, #23
 8006f10:	bf48      	it	mi
 8006f12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006f16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f1a:	0d1b      	lsrs	r3, r3, #20
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1bb      	bne.n	8006e9a <_strtod_l+0x72>
 8006f22:	f7fe fb2b 	bl	800557c <__errno>
 8006f26:	2322      	movs	r3, #34	@ 0x22
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	e7b6      	b.n	8006e9a <_strtod_l+0x72>
 8006f2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006f30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006f34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f3c:	e7e7      	b.n	8006f0e <_strtod_l+0xe6>
 8006f3e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80070c0 <_strtod_l+0x298>
 8006f42:	e7e4      	b.n	8006f0e <_strtod_l+0xe6>
 8006f44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006f48:	f04f 3aff 	mov.w	sl, #4294967295
 8006f4c:	e7df      	b.n	8006f0e <_strtod_l+0xe6>
 8006f4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	2b30      	cmp	r3, #48	@ 0x30
 8006f58:	d0f9      	beq.n	8006f4e <_strtod_l+0x126>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d09d      	beq.n	8006e9a <_strtod_l+0x72>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	2700      	movs	r7, #0
 8006f62:	9308      	str	r3, [sp, #32]
 8006f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006f66:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f68:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006f6a:	46b9      	mov	r9, r7
 8006f6c:	220a      	movs	r2, #10
 8006f6e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006f70:	7805      	ldrb	r5, [r0, #0]
 8006f72:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	2909      	cmp	r1, #9
 8006f7a:	d928      	bls.n	8006fce <_strtod_l+0x1a6>
 8006f7c:	494f      	ldr	r1, [pc, #316]	@ (80070bc <_strtod_l+0x294>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f000 ffd6 	bl	8007f30 <strncmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d032      	beq.n	8006fee <_strtod_l+0x1c6>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f8e:	464d      	mov	r5, r9
 8006f90:	4603      	mov	r3, r0
 8006f92:	2a65      	cmp	r2, #101	@ 0x65
 8006f94:	d001      	beq.n	8006f9a <_strtod_l+0x172>
 8006f96:	2a45      	cmp	r2, #69	@ 0x45
 8006f98:	d114      	bne.n	8006fc4 <_strtod_l+0x19c>
 8006f9a:	b91d      	cbnz	r5, 8006fa4 <_strtod_l+0x17c>
 8006f9c:	9a08      	ldr	r2, [sp, #32]
 8006f9e:	4302      	orrs	r2, r0
 8006fa0:	d096      	beq.n	8006ed0 <_strtod_l+0xa8>
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006fa6:	1c62      	adds	r2, r4, #1
 8006fa8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006faa:	7862      	ldrb	r2, [r4, #1]
 8006fac:	2a2b      	cmp	r2, #43	@ 0x2b
 8006fae:	d07a      	beq.n	80070a6 <_strtod_l+0x27e>
 8006fb0:	2a2d      	cmp	r2, #45	@ 0x2d
 8006fb2:	d07e      	beq.n	80070b2 <_strtod_l+0x28a>
 8006fb4:	f04f 0c00 	mov.w	ip, #0
 8006fb8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006fbc:	2909      	cmp	r1, #9
 8006fbe:	f240 8085 	bls.w	80070cc <_strtod_l+0x2a4>
 8006fc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006fc4:	f04f 0800 	mov.w	r8, #0
 8006fc8:	e0a5      	b.n	8007116 <_strtod_l+0x2ee>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e7c8      	b.n	8006f60 <_strtod_l+0x138>
 8006fce:	f1b9 0f08 	cmp.w	r9, #8
 8006fd2:	bfd8      	it	le
 8006fd4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006fd6:	f100 0001 	add.w	r0, r0, #1
 8006fda:	bfda      	itte	le
 8006fdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006fe0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006fe2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006fe6:	f109 0901 	add.w	r9, r9, #1
 8006fea:	9019      	str	r0, [sp, #100]	@ 0x64
 8006fec:	e7bf      	b.n	8006f6e <_strtod_l+0x146>
 8006fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ff4:	785a      	ldrb	r2, [r3, #1]
 8006ff6:	f1b9 0f00 	cmp.w	r9, #0
 8006ffa:	d03b      	beq.n	8007074 <_strtod_l+0x24c>
 8006ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ffe:	464d      	mov	r5, r9
 8007000:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007004:	2b09      	cmp	r3, #9
 8007006:	d912      	bls.n	800702e <_strtod_l+0x206>
 8007008:	2301      	movs	r3, #1
 800700a:	e7c2      	b.n	8006f92 <_strtod_l+0x16a>
 800700c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	9219      	str	r2, [sp, #100]	@ 0x64
 8007012:	785a      	ldrb	r2, [r3, #1]
 8007014:	3001      	adds	r0, #1
 8007016:	2a30      	cmp	r2, #48	@ 0x30
 8007018:	d0f8      	beq.n	800700c <_strtod_l+0x1e4>
 800701a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800701e:	2b08      	cmp	r3, #8
 8007020:	f200 84d2 	bhi.w	80079c8 <_strtod_l+0xba0>
 8007024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007026:	900a      	str	r0, [sp, #40]	@ 0x28
 8007028:	2000      	movs	r0, #0
 800702a:	930c      	str	r3, [sp, #48]	@ 0x30
 800702c:	4605      	mov	r5, r0
 800702e:	3a30      	subs	r2, #48	@ 0x30
 8007030:	f100 0301 	add.w	r3, r0, #1
 8007034:	d018      	beq.n	8007068 <_strtod_l+0x240>
 8007036:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007038:	4419      	add	r1, r3
 800703a:	910a      	str	r1, [sp, #40]	@ 0x28
 800703c:	462e      	mov	r6, r5
 800703e:	f04f 0e0a 	mov.w	lr, #10
 8007042:	1c71      	adds	r1, r6, #1
 8007044:	eba1 0c05 	sub.w	ip, r1, r5
 8007048:	4563      	cmp	r3, ip
 800704a:	dc15      	bgt.n	8007078 <_strtod_l+0x250>
 800704c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007050:	182b      	adds	r3, r5, r0
 8007052:	2b08      	cmp	r3, #8
 8007054:	f105 0501 	add.w	r5, r5, #1
 8007058:	4405      	add	r5, r0
 800705a:	dc1a      	bgt.n	8007092 <_strtod_l+0x26a>
 800705c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800705e:	230a      	movs	r3, #10
 8007060:	fb03 2301 	mla	r3, r3, r1, r2
 8007064:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007066:	2300      	movs	r3, #0
 8007068:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800706a:	1c51      	adds	r1, r2, #1
 800706c:	9119      	str	r1, [sp, #100]	@ 0x64
 800706e:	7852      	ldrb	r2, [r2, #1]
 8007070:	4618      	mov	r0, r3
 8007072:	e7c5      	b.n	8007000 <_strtod_l+0x1d8>
 8007074:	4648      	mov	r0, r9
 8007076:	e7ce      	b.n	8007016 <_strtod_l+0x1ee>
 8007078:	2e08      	cmp	r6, #8
 800707a:	dc05      	bgt.n	8007088 <_strtod_l+0x260>
 800707c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800707e:	fb0e f606 	mul.w	r6, lr, r6
 8007082:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007084:	460e      	mov	r6, r1
 8007086:	e7dc      	b.n	8007042 <_strtod_l+0x21a>
 8007088:	2910      	cmp	r1, #16
 800708a:	bfd8      	it	le
 800708c:	fb0e f707 	mulle.w	r7, lr, r7
 8007090:	e7f8      	b.n	8007084 <_strtod_l+0x25c>
 8007092:	2b0f      	cmp	r3, #15
 8007094:	bfdc      	itt	le
 8007096:	230a      	movle	r3, #10
 8007098:	fb03 2707 	mlale	r7, r3, r7, r2
 800709c:	e7e3      	b.n	8007066 <_strtod_l+0x23e>
 800709e:	2300      	movs	r3, #0
 80070a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a2:	2301      	movs	r3, #1
 80070a4:	e77a      	b.n	8006f9c <_strtod_l+0x174>
 80070a6:	f04f 0c00 	mov.w	ip, #0
 80070aa:	1ca2      	adds	r2, r4, #2
 80070ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80070ae:	78a2      	ldrb	r2, [r4, #2]
 80070b0:	e782      	b.n	8006fb8 <_strtod_l+0x190>
 80070b2:	f04f 0c01 	mov.w	ip, #1
 80070b6:	e7f8      	b.n	80070aa <_strtod_l+0x282>
 80070b8:	08008ff4 	.word	0x08008ff4
 80070bc:	08008e27 	.word	0x08008e27
 80070c0:	7ff00000 	.word	0x7ff00000
 80070c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070c6:	1c51      	adds	r1, r2, #1
 80070c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80070ca:	7852      	ldrb	r2, [r2, #1]
 80070cc:	2a30      	cmp	r2, #48	@ 0x30
 80070ce:	d0f9      	beq.n	80070c4 <_strtod_l+0x29c>
 80070d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80070d4:	2908      	cmp	r1, #8
 80070d6:	f63f af75 	bhi.w	8006fc4 <_strtod_l+0x19c>
 80070da:	3a30      	subs	r2, #48	@ 0x30
 80070dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80070de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80070e2:	f04f 080a 	mov.w	r8, #10
 80070e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80070e8:	1c56      	adds	r6, r2, #1
 80070ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80070ec:	7852      	ldrb	r2, [r2, #1]
 80070ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80070f2:	f1be 0f09 	cmp.w	lr, #9
 80070f6:	d939      	bls.n	800716c <_strtod_l+0x344>
 80070f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80070fa:	1a76      	subs	r6, r6, r1
 80070fc:	2e08      	cmp	r6, #8
 80070fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007102:	dc03      	bgt.n	800710c <_strtod_l+0x2e4>
 8007104:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007106:	4588      	cmp	r8, r1
 8007108:	bfa8      	it	ge
 800710a:	4688      	movge	r8, r1
 800710c:	f1bc 0f00 	cmp.w	ip, #0
 8007110:	d001      	beq.n	8007116 <_strtod_l+0x2ee>
 8007112:	f1c8 0800 	rsb	r8, r8, #0
 8007116:	2d00      	cmp	r5, #0
 8007118:	d14e      	bne.n	80071b8 <_strtod_l+0x390>
 800711a:	9908      	ldr	r1, [sp, #32]
 800711c:	4308      	orrs	r0, r1
 800711e:	f47f aebc 	bne.w	8006e9a <_strtod_l+0x72>
 8007122:	2b00      	cmp	r3, #0
 8007124:	f47f aed4 	bne.w	8006ed0 <_strtod_l+0xa8>
 8007128:	2a69      	cmp	r2, #105	@ 0x69
 800712a:	d028      	beq.n	800717e <_strtod_l+0x356>
 800712c:	dc25      	bgt.n	800717a <_strtod_l+0x352>
 800712e:	2a49      	cmp	r2, #73	@ 0x49
 8007130:	d025      	beq.n	800717e <_strtod_l+0x356>
 8007132:	2a4e      	cmp	r2, #78	@ 0x4e
 8007134:	f47f aecc 	bne.w	8006ed0 <_strtod_l+0xa8>
 8007138:	499a      	ldr	r1, [pc, #616]	@ (80073a4 <_strtod_l+0x57c>)
 800713a:	a819      	add	r0, sp, #100	@ 0x64
 800713c:	f001 f9ec 	bl	8008518 <__match>
 8007140:	2800      	cmp	r0, #0
 8007142:	f43f aec5 	beq.w	8006ed0 <_strtod_l+0xa8>
 8007146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b28      	cmp	r3, #40	@ 0x28
 800714c:	d12e      	bne.n	80071ac <_strtod_l+0x384>
 800714e:	4996      	ldr	r1, [pc, #600]	@ (80073a8 <_strtod_l+0x580>)
 8007150:	aa1c      	add	r2, sp, #112	@ 0x70
 8007152:	a819      	add	r0, sp, #100	@ 0x64
 8007154:	f001 f9f4 	bl	8008540 <__hexnan>
 8007158:	2805      	cmp	r0, #5
 800715a:	d127      	bne.n	80071ac <_strtod_l+0x384>
 800715c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800715e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007162:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007166:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800716a:	e696      	b.n	8006e9a <_strtod_l+0x72>
 800716c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800716e:	fb08 2101 	mla	r1, r8, r1, r2
 8007172:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007176:	9209      	str	r2, [sp, #36]	@ 0x24
 8007178:	e7b5      	b.n	80070e6 <_strtod_l+0x2be>
 800717a:	2a6e      	cmp	r2, #110	@ 0x6e
 800717c:	e7da      	b.n	8007134 <_strtod_l+0x30c>
 800717e:	498b      	ldr	r1, [pc, #556]	@ (80073ac <_strtod_l+0x584>)
 8007180:	a819      	add	r0, sp, #100	@ 0x64
 8007182:	f001 f9c9 	bl	8008518 <__match>
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f aea2 	beq.w	8006ed0 <_strtod_l+0xa8>
 800718c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800718e:	4988      	ldr	r1, [pc, #544]	@ (80073b0 <_strtod_l+0x588>)
 8007190:	3b01      	subs	r3, #1
 8007192:	a819      	add	r0, sp, #100	@ 0x64
 8007194:	9319      	str	r3, [sp, #100]	@ 0x64
 8007196:	f001 f9bf 	bl	8008518 <__match>
 800719a:	b910      	cbnz	r0, 80071a2 <_strtod_l+0x37a>
 800719c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800719e:	3301      	adds	r3, #1
 80071a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80071a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80073c0 <_strtod_l+0x598>
 80071a6:	f04f 0a00 	mov.w	sl, #0
 80071aa:	e676      	b.n	8006e9a <_strtod_l+0x72>
 80071ac:	4881      	ldr	r0, [pc, #516]	@ (80073b4 <_strtod_l+0x58c>)
 80071ae:	f000 feef 	bl	8007f90 <nan>
 80071b2:	ec5b ab10 	vmov	sl, fp, d0
 80071b6:	e670      	b.n	8006e9a <_strtod_l+0x72>
 80071b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80071bc:	eba8 0303 	sub.w	r3, r8, r3
 80071c0:	f1b9 0f00 	cmp.w	r9, #0
 80071c4:	bf08      	it	eq
 80071c6:	46a9      	moveq	r9, r5
 80071c8:	2d10      	cmp	r5, #16
 80071ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80071cc:	462c      	mov	r4, r5
 80071ce:	bfa8      	it	ge
 80071d0:	2410      	movge	r4, #16
 80071d2:	f7f9 f99f 	bl	8000514 <__aeabi_ui2d>
 80071d6:	2d09      	cmp	r5, #9
 80071d8:	4682      	mov	sl, r0
 80071da:	468b      	mov	fp, r1
 80071dc:	dc13      	bgt.n	8007206 <_strtod_l+0x3de>
 80071de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f43f ae5a 	beq.w	8006e9a <_strtod_l+0x72>
 80071e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e8:	dd78      	ble.n	80072dc <_strtod_l+0x4b4>
 80071ea:	2b16      	cmp	r3, #22
 80071ec:	dc5f      	bgt.n	80072ae <_strtod_l+0x486>
 80071ee:	4972      	ldr	r1, [pc, #456]	@ (80073b8 <_strtod_l+0x590>)
 80071f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f8:	4652      	mov	r2, sl
 80071fa:	465b      	mov	r3, fp
 80071fc:	f7f9 fa04 	bl	8000608 <__aeabi_dmul>
 8007200:	4682      	mov	sl, r0
 8007202:	468b      	mov	fp, r1
 8007204:	e649      	b.n	8006e9a <_strtod_l+0x72>
 8007206:	4b6c      	ldr	r3, [pc, #432]	@ (80073b8 <_strtod_l+0x590>)
 8007208:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800720c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007210:	f7f9 f9fa 	bl	8000608 <__aeabi_dmul>
 8007214:	4682      	mov	sl, r0
 8007216:	4638      	mov	r0, r7
 8007218:	468b      	mov	fp, r1
 800721a:	f7f9 f97b 	bl	8000514 <__aeabi_ui2d>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4650      	mov	r0, sl
 8007224:	4659      	mov	r1, fp
 8007226:	f7f9 f839 	bl	800029c <__adddf3>
 800722a:	2d0f      	cmp	r5, #15
 800722c:	4682      	mov	sl, r0
 800722e:	468b      	mov	fp, r1
 8007230:	ddd5      	ble.n	80071de <_strtod_l+0x3b6>
 8007232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007234:	1b2c      	subs	r4, r5, r4
 8007236:	441c      	add	r4, r3
 8007238:	2c00      	cmp	r4, #0
 800723a:	f340 8093 	ble.w	8007364 <_strtod_l+0x53c>
 800723e:	f014 030f 	ands.w	r3, r4, #15
 8007242:	d00a      	beq.n	800725a <_strtod_l+0x432>
 8007244:	495c      	ldr	r1, [pc, #368]	@ (80073b8 <_strtod_l+0x590>)
 8007246:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800724a:	4652      	mov	r2, sl
 800724c:	465b      	mov	r3, fp
 800724e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007252:	f7f9 f9d9 	bl	8000608 <__aeabi_dmul>
 8007256:	4682      	mov	sl, r0
 8007258:	468b      	mov	fp, r1
 800725a:	f034 040f 	bics.w	r4, r4, #15
 800725e:	d073      	beq.n	8007348 <_strtod_l+0x520>
 8007260:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007264:	dd49      	ble.n	80072fa <_strtod_l+0x4d2>
 8007266:	2400      	movs	r4, #0
 8007268:	46a0      	mov	r8, r4
 800726a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800726c:	46a1      	mov	r9, r4
 800726e:	9a05      	ldr	r2, [sp, #20]
 8007270:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80073c0 <_strtod_l+0x598>
 8007274:	2322      	movs	r3, #34	@ 0x22
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	f04f 0a00 	mov.w	sl, #0
 800727c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	f43f ae0b 	beq.w	8006e9a <_strtod_l+0x72>
 8007284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007286:	9805      	ldr	r0, [sp, #20]
 8007288:	f7ff f946 	bl	8006518 <_Bfree>
 800728c:	9805      	ldr	r0, [sp, #20]
 800728e:	4649      	mov	r1, r9
 8007290:	f7ff f942 	bl	8006518 <_Bfree>
 8007294:	9805      	ldr	r0, [sp, #20]
 8007296:	4641      	mov	r1, r8
 8007298:	f7ff f93e 	bl	8006518 <_Bfree>
 800729c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800729e:	9805      	ldr	r0, [sp, #20]
 80072a0:	f7ff f93a 	bl	8006518 <_Bfree>
 80072a4:	9805      	ldr	r0, [sp, #20]
 80072a6:	4621      	mov	r1, r4
 80072a8:	f7ff f936 	bl	8006518 <_Bfree>
 80072ac:	e5f5      	b.n	8006e9a <_strtod_l+0x72>
 80072ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80072b4:	4293      	cmp	r3, r2
 80072b6:	dbbc      	blt.n	8007232 <_strtod_l+0x40a>
 80072b8:	4c3f      	ldr	r4, [pc, #252]	@ (80073b8 <_strtod_l+0x590>)
 80072ba:	f1c5 050f 	rsb	r5, r5, #15
 80072be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80072c2:	4652      	mov	r2, sl
 80072c4:	465b      	mov	r3, fp
 80072c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ca:	f7f9 f99d 	bl	8000608 <__aeabi_dmul>
 80072ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d0:	1b5d      	subs	r5, r3, r5
 80072d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072da:	e78f      	b.n	80071fc <_strtod_l+0x3d4>
 80072dc:	3316      	adds	r3, #22
 80072de:	dba8      	blt.n	8007232 <_strtod_l+0x40a>
 80072e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072e2:	eba3 0808 	sub.w	r8, r3, r8
 80072e6:	4b34      	ldr	r3, [pc, #208]	@ (80073b8 <_strtod_l+0x590>)
 80072e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80072ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 80072f0:	4650      	mov	r0, sl
 80072f2:	4659      	mov	r1, fp
 80072f4:	f7f9 fab2 	bl	800085c <__aeabi_ddiv>
 80072f8:	e782      	b.n	8007200 <_strtod_l+0x3d8>
 80072fa:	2300      	movs	r3, #0
 80072fc:	4f2f      	ldr	r7, [pc, #188]	@ (80073bc <_strtod_l+0x594>)
 80072fe:	1124      	asrs	r4, r4, #4
 8007300:	4650      	mov	r0, sl
 8007302:	4659      	mov	r1, fp
 8007304:	461e      	mov	r6, r3
 8007306:	2c01      	cmp	r4, #1
 8007308:	dc21      	bgt.n	800734e <_strtod_l+0x526>
 800730a:	b10b      	cbz	r3, 8007310 <_strtod_l+0x4e8>
 800730c:	4682      	mov	sl, r0
 800730e:	468b      	mov	fp, r1
 8007310:	492a      	ldr	r1, [pc, #168]	@ (80073bc <_strtod_l+0x594>)
 8007312:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007316:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800731a:	4652      	mov	r2, sl
 800731c:	465b      	mov	r3, fp
 800731e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007322:	f7f9 f971 	bl	8000608 <__aeabi_dmul>
 8007326:	4b26      	ldr	r3, [pc, #152]	@ (80073c0 <_strtod_l+0x598>)
 8007328:	460a      	mov	r2, r1
 800732a:	400b      	ands	r3, r1
 800732c:	4925      	ldr	r1, [pc, #148]	@ (80073c4 <_strtod_l+0x59c>)
 800732e:	428b      	cmp	r3, r1
 8007330:	4682      	mov	sl, r0
 8007332:	d898      	bhi.n	8007266 <_strtod_l+0x43e>
 8007334:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007338:	428b      	cmp	r3, r1
 800733a:	bf86      	itte	hi
 800733c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80073c8 <_strtod_l+0x5a0>
 8007340:	f04f 3aff 	movhi.w	sl, #4294967295
 8007344:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007348:	2300      	movs	r3, #0
 800734a:	9308      	str	r3, [sp, #32]
 800734c:	e076      	b.n	800743c <_strtod_l+0x614>
 800734e:	07e2      	lsls	r2, r4, #31
 8007350:	d504      	bpl.n	800735c <_strtod_l+0x534>
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	f7f9 f957 	bl	8000608 <__aeabi_dmul>
 800735a:	2301      	movs	r3, #1
 800735c:	3601      	adds	r6, #1
 800735e:	1064      	asrs	r4, r4, #1
 8007360:	3708      	adds	r7, #8
 8007362:	e7d0      	b.n	8007306 <_strtod_l+0x4de>
 8007364:	d0f0      	beq.n	8007348 <_strtod_l+0x520>
 8007366:	4264      	negs	r4, r4
 8007368:	f014 020f 	ands.w	r2, r4, #15
 800736c:	d00a      	beq.n	8007384 <_strtod_l+0x55c>
 800736e:	4b12      	ldr	r3, [pc, #72]	@ (80073b8 <_strtod_l+0x590>)
 8007370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007374:	4650      	mov	r0, sl
 8007376:	4659      	mov	r1, fp
 8007378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737c:	f7f9 fa6e 	bl	800085c <__aeabi_ddiv>
 8007380:	4682      	mov	sl, r0
 8007382:	468b      	mov	fp, r1
 8007384:	1124      	asrs	r4, r4, #4
 8007386:	d0df      	beq.n	8007348 <_strtod_l+0x520>
 8007388:	2c1f      	cmp	r4, #31
 800738a:	dd1f      	ble.n	80073cc <_strtod_l+0x5a4>
 800738c:	2400      	movs	r4, #0
 800738e:	46a0      	mov	r8, r4
 8007390:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007392:	46a1      	mov	r9, r4
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	2322      	movs	r3, #34	@ 0x22
 8007398:	f04f 0a00 	mov.w	sl, #0
 800739c:	f04f 0b00 	mov.w	fp, #0
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	e76b      	b.n	800727c <_strtod_l+0x454>
 80073a4:	08008d15 	.word	0x08008d15
 80073a8:	08008fe0 	.word	0x08008fe0
 80073ac:	08008d0d 	.word	0x08008d0d
 80073b0:	08008d44 	.word	0x08008d44
 80073b4:	08008e7d 	.word	0x08008e7d
 80073b8:	08008f18 	.word	0x08008f18
 80073bc:	08008ef0 	.word	0x08008ef0
 80073c0:	7ff00000 	.word	0x7ff00000
 80073c4:	7ca00000 	.word	0x7ca00000
 80073c8:	7fefffff 	.word	0x7fefffff
 80073cc:	f014 0310 	ands.w	r3, r4, #16
 80073d0:	bf18      	it	ne
 80073d2:	236a      	movne	r3, #106	@ 0x6a
 80073d4:	4ea9      	ldr	r6, [pc, #676]	@ (800767c <_strtod_l+0x854>)
 80073d6:	9308      	str	r3, [sp, #32]
 80073d8:	4650      	mov	r0, sl
 80073da:	4659      	mov	r1, fp
 80073dc:	2300      	movs	r3, #0
 80073de:	07e7      	lsls	r7, r4, #31
 80073e0:	d504      	bpl.n	80073ec <_strtod_l+0x5c4>
 80073e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80073e6:	f7f9 f90f 	bl	8000608 <__aeabi_dmul>
 80073ea:	2301      	movs	r3, #1
 80073ec:	1064      	asrs	r4, r4, #1
 80073ee:	f106 0608 	add.w	r6, r6, #8
 80073f2:	d1f4      	bne.n	80073de <_strtod_l+0x5b6>
 80073f4:	b10b      	cbz	r3, 80073fa <_strtod_l+0x5d2>
 80073f6:	4682      	mov	sl, r0
 80073f8:	468b      	mov	fp, r1
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	b1b3      	cbz	r3, 800742c <_strtod_l+0x604>
 80073fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007402:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007406:	2b00      	cmp	r3, #0
 8007408:	4659      	mov	r1, fp
 800740a:	dd0f      	ble.n	800742c <_strtod_l+0x604>
 800740c:	2b1f      	cmp	r3, #31
 800740e:	dd56      	ble.n	80074be <_strtod_l+0x696>
 8007410:	2b34      	cmp	r3, #52	@ 0x34
 8007412:	bfde      	ittt	le
 8007414:	f04f 33ff 	movle.w	r3, #4294967295
 8007418:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800741c:	4093      	lslle	r3, r2
 800741e:	f04f 0a00 	mov.w	sl, #0
 8007422:	bfcc      	ite	gt
 8007424:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007428:	ea03 0b01 	andle.w	fp, r3, r1
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	4650      	mov	r0, sl
 8007432:	4659      	mov	r1, fp
 8007434:	f7f9 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8007438:	2800      	cmp	r0, #0
 800743a:	d1a7      	bne.n	800738c <_strtod_l+0x564>
 800743c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007442:	9805      	ldr	r0, [sp, #20]
 8007444:	462b      	mov	r3, r5
 8007446:	464a      	mov	r2, r9
 8007448:	f7ff f8ce 	bl	80065e8 <__s2b>
 800744c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800744e:	2800      	cmp	r0, #0
 8007450:	f43f af09 	beq.w	8007266 <_strtod_l+0x43e>
 8007454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007456:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007458:	2a00      	cmp	r2, #0
 800745a:	eba3 0308 	sub.w	r3, r3, r8
 800745e:	bfa8      	it	ge
 8007460:	2300      	movge	r3, #0
 8007462:	9312      	str	r3, [sp, #72]	@ 0x48
 8007464:	2400      	movs	r4, #0
 8007466:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800746a:	9316      	str	r3, [sp, #88]	@ 0x58
 800746c:	46a0      	mov	r8, r4
 800746e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007470:	9805      	ldr	r0, [sp, #20]
 8007472:	6859      	ldr	r1, [r3, #4]
 8007474:	f7ff f810 	bl	8006498 <_Balloc>
 8007478:	4681      	mov	r9, r0
 800747a:	2800      	cmp	r0, #0
 800747c:	f43f aef7 	beq.w	800726e <_strtod_l+0x446>
 8007480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	3202      	adds	r2, #2
 8007486:	f103 010c 	add.w	r1, r3, #12
 800748a:	0092      	lsls	r2, r2, #2
 800748c:	300c      	adds	r0, #12
 800748e:	f000 fd71 	bl	8007f74 <memcpy>
 8007492:	ec4b ab10 	vmov	d0, sl, fp
 8007496:	9805      	ldr	r0, [sp, #20]
 8007498:	aa1c      	add	r2, sp, #112	@ 0x70
 800749a:	a91b      	add	r1, sp, #108	@ 0x6c
 800749c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80074a0:	f7ff fbd6 	bl	8006c50 <__d2b>
 80074a4:	901a      	str	r0, [sp, #104]	@ 0x68
 80074a6:	2800      	cmp	r0, #0
 80074a8:	f43f aee1 	beq.w	800726e <_strtod_l+0x446>
 80074ac:	9805      	ldr	r0, [sp, #20]
 80074ae:	2101      	movs	r1, #1
 80074b0:	f7ff f930 	bl	8006714 <__i2b>
 80074b4:	4680      	mov	r8, r0
 80074b6:	b948      	cbnz	r0, 80074cc <_strtod_l+0x6a4>
 80074b8:	f04f 0800 	mov.w	r8, #0
 80074bc:	e6d7      	b.n	800726e <_strtod_l+0x446>
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	ea03 0a0a 	and.w	sl, r3, sl
 80074ca:	e7af      	b.n	800742c <_strtod_l+0x604>
 80074cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80074ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80074d0:	2d00      	cmp	r5, #0
 80074d2:	bfab      	itete	ge
 80074d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80074d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80074d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80074da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80074dc:	bfac      	ite	ge
 80074de:	18ef      	addge	r7, r5, r3
 80074e0:	1b5e      	sublt	r6, r3, r5
 80074e2:	9b08      	ldr	r3, [sp, #32]
 80074e4:	1aed      	subs	r5, r5, r3
 80074e6:	4415      	add	r5, r2
 80074e8:	4b65      	ldr	r3, [pc, #404]	@ (8007680 <_strtod_l+0x858>)
 80074ea:	3d01      	subs	r5, #1
 80074ec:	429d      	cmp	r5, r3
 80074ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80074f2:	da50      	bge.n	8007596 <_strtod_l+0x76e>
 80074f4:	1b5b      	subs	r3, r3, r5
 80074f6:	2b1f      	cmp	r3, #31
 80074f8:	eba2 0203 	sub.w	r2, r2, r3
 80074fc:	f04f 0101 	mov.w	r1, #1
 8007500:	dc3d      	bgt.n	800757e <_strtod_l+0x756>
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007508:	2300      	movs	r3, #0
 800750a:	9310      	str	r3, [sp, #64]	@ 0x40
 800750c:	18bd      	adds	r5, r7, r2
 800750e:	9b08      	ldr	r3, [sp, #32]
 8007510:	42af      	cmp	r7, r5
 8007512:	4416      	add	r6, r2
 8007514:	441e      	add	r6, r3
 8007516:	463b      	mov	r3, r7
 8007518:	bfa8      	it	ge
 800751a:	462b      	movge	r3, r5
 800751c:	42b3      	cmp	r3, r6
 800751e:	bfa8      	it	ge
 8007520:	4633      	movge	r3, r6
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfc2      	ittt	gt
 8007526:	1aed      	subgt	r5, r5, r3
 8007528:	1af6      	subgt	r6, r6, r3
 800752a:	1aff      	subgt	r7, r7, r3
 800752c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd16      	ble.n	8007560 <_strtod_l+0x738>
 8007532:	4641      	mov	r1, r8
 8007534:	9805      	ldr	r0, [sp, #20]
 8007536:	461a      	mov	r2, r3
 8007538:	f7ff f9a4 	bl	8006884 <__pow5mult>
 800753c:	4680      	mov	r8, r0
 800753e:	2800      	cmp	r0, #0
 8007540:	d0ba      	beq.n	80074b8 <_strtod_l+0x690>
 8007542:	4601      	mov	r1, r0
 8007544:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007546:	9805      	ldr	r0, [sp, #20]
 8007548:	f7ff f8fa 	bl	8006740 <__multiply>
 800754c:	900a      	str	r0, [sp, #40]	@ 0x28
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f ae8d 	beq.w	800726e <_strtod_l+0x446>
 8007554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007556:	9805      	ldr	r0, [sp, #20]
 8007558:	f7fe ffde 	bl	8006518 <_Bfree>
 800755c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007560:	2d00      	cmp	r5, #0
 8007562:	dc1d      	bgt.n	80075a0 <_strtod_l+0x778>
 8007564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	dd23      	ble.n	80075b2 <_strtod_l+0x78a>
 800756a:	4649      	mov	r1, r9
 800756c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800756e:	9805      	ldr	r0, [sp, #20]
 8007570:	f7ff f988 	bl	8006884 <__pow5mult>
 8007574:	4681      	mov	r9, r0
 8007576:	b9e0      	cbnz	r0, 80075b2 <_strtod_l+0x78a>
 8007578:	f04f 0900 	mov.w	r9, #0
 800757c:	e677      	b.n	800726e <_strtod_l+0x446>
 800757e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007582:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007586:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800758a:	35e2      	adds	r5, #226	@ 0xe2
 800758c:	fa01 f305 	lsl.w	r3, r1, r5
 8007590:	9310      	str	r3, [sp, #64]	@ 0x40
 8007592:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007594:	e7ba      	b.n	800750c <_strtod_l+0x6e4>
 8007596:	2300      	movs	r3, #0
 8007598:	9310      	str	r3, [sp, #64]	@ 0x40
 800759a:	2301      	movs	r3, #1
 800759c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800759e:	e7b5      	b.n	800750c <_strtod_l+0x6e4>
 80075a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075a2:	9805      	ldr	r0, [sp, #20]
 80075a4:	462a      	mov	r2, r5
 80075a6:	f7ff f9c7 	bl	8006938 <__lshift>
 80075aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d1d9      	bne.n	8007564 <_strtod_l+0x73c>
 80075b0:	e65d      	b.n	800726e <_strtod_l+0x446>
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	dd07      	ble.n	80075c6 <_strtod_l+0x79e>
 80075b6:	4649      	mov	r1, r9
 80075b8:	9805      	ldr	r0, [sp, #20]
 80075ba:	4632      	mov	r2, r6
 80075bc:	f7ff f9bc 	bl	8006938 <__lshift>
 80075c0:	4681      	mov	r9, r0
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0d8      	beq.n	8007578 <_strtod_l+0x750>
 80075c6:	2f00      	cmp	r7, #0
 80075c8:	dd08      	ble.n	80075dc <_strtod_l+0x7b4>
 80075ca:	4641      	mov	r1, r8
 80075cc:	9805      	ldr	r0, [sp, #20]
 80075ce:	463a      	mov	r2, r7
 80075d0:	f7ff f9b2 	bl	8006938 <__lshift>
 80075d4:	4680      	mov	r8, r0
 80075d6:	2800      	cmp	r0, #0
 80075d8:	f43f ae49 	beq.w	800726e <_strtod_l+0x446>
 80075dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80075de:	9805      	ldr	r0, [sp, #20]
 80075e0:	464a      	mov	r2, r9
 80075e2:	f7ff fa31 	bl	8006a48 <__mdiff>
 80075e6:	4604      	mov	r4, r0
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f43f ae40 	beq.w	800726e <_strtod_l+0x446>
 80075ee:	68c3      	ldr	r3, [r0, #12]
 80075f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075f2:	2300      	movs	r3, #0
 80075f4:	60c3      	str	r3, [r0, #12]
 80075f6:	4641      	mov	r1, r8
 80075f8:	f7ff fa0a 	bl	8006a10 <__mcmp>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	da45      	bge.n	800768c <_strtod_l+0x864>
 8007600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007602:	ea53 030a 	orrs.w	r3, r3, sl
 8007606:	d16b      	bne.n	80076e0 <_strtod_l+0x8b8>
 8007608:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800760c:	2b00      	cmp	r3, #0
 800760e:	d167      	bne.n	80076e0 <_strtod_l+0x8b8>
 8007610:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007614:	0d1b      	lsrs	r3, r3, #20
 8007616:	051b      	lsls	r3, r3, #20
 8007618:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800761c:	d960      	bls.n	80076e0 <_strtod_l+0x8b8>
 800761e:	6963      	ldr	r3, [r4, #20]
 8007620:	b913      	cbnz	r3, 8007628 <_strtod_l+0x800>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	2b01      	cmp	r3, #1
 8007626:	dd5b      	ble.n	80076e0 <_strtod_l+0x8b8>
 8007628:	4621      	mov	r1, r4
 800762a:	2201      	movs	r2, #1
 800762c:	9805      	ldr	r0, [sp, #20]
 800762e:	f7ff f983 	bl	8006938 <__lshift>
 8007632:	4641      	mov	r1, r8
 8007634:	4604      	mov	r4, r0
 8007636:	f7ff f9eb 	bl	8006a10 <__mcmp>
 800763a:	2800      	cmp	r0, #0
 800763c:	dd50      	ble.n	80076e0 <_strtod_l+0x8b8>
 800763e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007642:	9a08      	ldr	r2, [sp, #32]
 8007644:	0d1b      	lsrs	r3, r3, #20
 8007646:	051b      	lsls	r3, r3, #20
 8007648:	2a00      	cmp	r2, #0
 800764a:	d06a      	beq.n	8007722 <_strtod_l+0x8fa>
 800764c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007650:	d867      	bhi.n	8007722 <_strtod_l+0x8fa>
 8007652:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007656:	f67f ae9d 	bls.w	8007394 <_strtod_l+0x56c>
 800765a:	4b0a      	ldr	r3, [pc, #40]	@ (8007684 <_strtod_l+0x85c>)
 800765c:	4650      	mov	r0, sl
 800765e:	4659      	mov	r1, fp
 8007660:	2200      	movs	r2, #0
 8007662:	f7f8 ffd1 	bl	8000608 <__aeabi_dmul>
 8007666:	4b08      	ldr	r3, [pc, #32]	@ (8007688 <_strtod_l+0x860>)
 8007668:	400b      	ands	r3, r1
 800766a:	4682      	mov	sl, r0
 800766c:	468b      	mov	fp, r1
 800766e:	2b00      	cmp	r3, #0
 8007670:	f47f ae08 	bne.w	8007284 <_strtod_l+0x45c>
 8007674:	9a05      	ldr	r2, [sp, #20]
 8007676:	2322      	movs	r3, #34	@ 0x22
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e603      	b.n	8007284 <_strtod_l+0x45c>
 800767c:	08009008 	.word	0x08009008
 8007680:	fffffc02 	.word	0xfffffc02
 8007684:	39500000 	.word	0x39500000
 8007688:	7ff00000 	.word	0x7ff00000
 800768c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007690:	d165      	bne.n	800775e <_strtod_l+0x936>
 8007692:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007698:	b35a      	cbz	r2, 80076f2 <_strtod_l+0x8ca>
 800769a:	4a9f      	ldr	r2, [pc, #636]	@ (8007918 <_strtod_l+0xaf0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d12b      	bne.n	80076f8 <_strtod_l+0x8d0>
 80076a0:	9b08      	ldr	r3, [sp, #32]
 80076a2:	4651      	mov	r1, sl
 80076a4:	b303      	cbz	r3, 80076e8 <_strtod_l+0x8c0>
 80076a6:	4b9d      	ldr	r3, [pc, #628]	@ (800791c <_strtod_l+0xaf4>)
 80076a8:	465a      	mov	r2, fp
 80076aa:	4013      	ands	r3, r2
 80076ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80076b0:	f04f 32ff 	mov.w	r2, #4294967295
 80076b4:	d81b      	bhi.n	80076ee <_strtod_l+0x8c6>
 80076b6:	0d1b      	lsrs	r3, r3, #20
 80076b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	4299      	cmp	r1, r3
 80076c2:	d119      	bne.n	80076f8 <_strtod_l+0x8d0>
 80076c4:	4b96      	ldr	r3, [pc, #600]	@ (8007920 <_strtod_l+0xaf8>)
 80076c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d102      	bne.n	80076d2 <_strtod_l+0x8aa>
 80076cc:	3101      	adds	r1, #1
 80076ce:	f43f adce 	beq.w	800726e <_strtod_l+0x446>
 80076d2:	4b92      	ldr	r3, [pc, #584]	@ (800791c <_strtod_l+0xaf4>)
 80076d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076d6:	401a      	ands	r2, r3
 80076d8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80076dc:	f04f 0a00 	mov.w	sl, #0
 80076e0:	9b08      	ldr	r3, [sp, #32]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1b9      	bne.n	800765a <_strtod_l+0x832>
 80076e6:	e5cd      	b.n	8007284 <_strtod_l+0x45c>
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ec:	e7e8      	b.n	80076c0 <_strtod_l+0x898>
 80076ee:	4613      	mov	r3, r2
 80076f0:	e7e6      	b.n	80076c0 <_strtod_l+0x898>
 80076f2:	ea53 030a 	orrs.w	r3, r3, sl
 80076f6:	d0a2      	beq.n	800763e <_strtod_l+0x816>
 80076f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076fa:	b1db      	cbz	r3, 8007734 <_strtod_l+0x90c>
 80076fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076fe:	4213      	tst	r3, r2
 8007700:	d0ee      	beq.n	80076e0 <_strtod_l+0x8b8>
 8007702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007704:	9a08      	ldr	r2, [sp, #32]
 8007706:	4650      	mov	r0, sl
 8007708:	4659      	mov	r1, fp
 800770a:	b1bb      	cbz	r3, 800773c <_strtod_l+0x914>
 800770c:	f7ff fb6e 	bl	8006dec <sulp>
 8007710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007714:	ec53 2b10 	vmov	r2, r3, d0
 8007718:	f7f8 fdc0 	bl	800029c <__adddf3>
 800771c:	4682      	mov	sl, r0
 800771e:	468b      	mov	fp, r1
 8007720:	e7de      	b.n	80076e0 <_strtod_l+0x8b8>
 8007722:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007726:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800772a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800772e:	f04f 3aff 	mov.w	sl, #4294967295
 8007732:	e7d5      	b.n	80076e0 <_strtod_l+0x8b8>
 8007734:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007736:	ea13 0f0a 	tst.w	r3, sl
 800773a:	e7e1      	b.n	8007700 <_strtod_l+0x8d8>
 800773c:	f7ff fb56 	bl	8006dec <sulp>
 8007740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007744:	ec53 2b10 	vmov	r2, r3, d0
 8007748:	f7f8 fda6 	bl	8000298 <__aeabi_dsub>
 800774c:	2200      	movs	r2, #0
 800774e:	2300      	movs	r3, #0
 8007750:	4682      	mov	sl, r0
 8007752:	468b      	mov	fp, r1
 8007754:	f7f9 f9c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0c1      	beq.n	80076e0 <_strtod_l+0x8b8>
 800775c:	e61a      	b.n	8007394 <_strtod_l+0x56c>
 800775e:	4641      	mov	r1, r8
 8007760:	4620      	mov	r0, r4
 8007762:	f7ff facd 	bl	8006d00 <__ratio>
 8007766:	ec57 6b10 	vmov	r6, r7, d0
 800776a:	2200      	movs	r2, #0
 800776c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 f9c4 	bl	8000b00 <__aeabi_dcmple>
 8007778:	2800      	cmp	r0, #0
 800777a:	d06f      	beq.n	800785c <_strtod_l+0xa34>
 800777c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d17a      	bne.n	8007878 <_strtod_l+0xa50>
 8007782:	f1ba 0f00 	cmp.w	sl, #0
 8007786:	d158      	bne.n	800783a <_strtod_l+0xa12>
 8007788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800778a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800778e:	2b00      	cmp	r3, #0
 8007790:	d15a      	bne.n	8007848 <_strtod_l+0xa20>
 8007792:	4b64      	ldr	r3, [pc, #400]	@ (8007924 <_strtod_l+0xafc>)
 8007794:	2200      	movs	r2, #0
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	f7f9 f9a7 	bl	8000aec <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	d159      	bne.n	8007856 <_strtod_l+0xa2e>
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	4b60      	ldr	r3, [pc, #384]	@ (8007928 <_strtod_l+0xb00>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f7f8 ff2d 	bl	8000608 <__aeabi_dmul>
 80077ae:	4606      	mov	r6, r0
 80077b0:	460f      	mov	r7, r1
 80077b2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80077b6:	9606      	str	r6, [sp, #24]
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077be:	4d57      	ldr	r5, [pc, #348]	@ (800791c <_strtod_l+0xaf4>)
 80077c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80077c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077c6:	401d      	ands	r5, r3
 80077c8:	4b58      	ldr	r3, [pc, #352]	@ (800792c <_strtod_l+0xb04>)
 80077ca:	429d      	cmp	r5, r3
 80077cc:	f040 80b2 	bne.w	8007934 <_strtod_l+0xb0c>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80077d6:	ec4b ab10 	vmov	d0, sl, fp
 80077da:	f7ff f9c9 	bl	8006b70 <__ulp>
 80077de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077e2:	ec51 0b10 	vmov	r0, r1, d0
 80077e6:	f7f8 ff0f 	bl	8000608 <__aeabi_dmul>
 80077ea:	4652      	mov	r2, sl
 80077ec:	465b      	mov	r3, fp
 80077ee:	f7f8 fd55 	bl	800029c <__adddf3>
 80077f2:	460b      	mov	r3, r1
 80077f4:	4949      	ldr	r1, [pc, #292]	@ (800791c <_strtod_l+0xaf4>)
 80077f6:	4a4e      	ldr	r2, [pc, #312]	@ (8007930 <_strtod_l+0xb08>)
 80077f8:	4019      	ands	r1, r3
 80077fa:	4291      	cmp	r1, r2
 80077fc:	4682      	mov	sl, r0
 80077fe:	d942      	bls.n	8007886 <_strtod_l+0xa5e>
 8007800:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007802:	4b47      	ldr	r3, [pc, #284]	@ (8007920 <_strtod_l+0xaf8>)
 8007804:	429a      	cmp	r2, r3
 8007806:	d103      	bne.n	8007810 <_strtod_l+0x9e8>
 8007808:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800780a:	3301      	adds	r3, #1
 800780c:	f43f ad2f 	beq.w	800726e <_strtod_l+0x446>
 8007810:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007920 <_strtod_l+0xaf8>
 8007814:	f04f 3aff 	mov.w	sl, #4294967295
 8007818:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800781a:	9805      	ldr	r0, [sp, #20]
 800781c:	f7fe fe7c 	bl	8006518 <_Bfree>
 8007820:	9805      	ldr	r0, [sp, #20]
 8007822:	4649      	mov	r1, r9
 8007824:	f7fe fe78 	bl	8006518 <_Bfree>
 8007828:	9805      	ldr	r0, [sp, #20]
 800782a:	4641      	mov	r1, r8
 800782c:	f7fe fe74 	bl	8006518 <_Bfree>
 8007830:	9805      	ldr	r0, [sp, #20]
 8007832:	4621      	mov	r1, r4
 8007834:	f7fe fe70 	bl	8006518 <_Bfree>
 8007838:	e619      	b.n	800746e <_strtod_l+0x646>
 800783a:	f1ba 0f01 	cmp.w	sl, #1
 800783e:	d103      	bne.n	8007848 <_strtod_l+0xa20>
 8007840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	f43f ada6 	beq.w	8007394 <_strtod_l+0x56c>
 8007848:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80078f8 <_strtod_l+0xad0>
 800784c:	4f35      	ldr	r7, [pc, #212]	@ (8007924 <_strtod_l+0xafc>)
 800784e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007852:	2600      	movs	r6, #0
 8007854:	e7b1      	b.n	80077ba <_strtod_l+0x992>
 8007856:	4f34      	ldr	r7, [pc, #208]	@ (8007928 <_strtod_l+0xb00>)
 8007858:	2600      	movs	r6, #0
 800785a:	e7aa      	b.n	80077b2 <_strtod_l+0x98a>
 800785c:	4b32      	ldr	r3, [pc, #200]	@ (8007928 <_strtod_l+0xb00>)
 800785e:	4630      	mov	r0, r6
 8007860:	4639      	mov	r1, r7
 8007862:	2200      	movs	r2, #0
 8007864:	f7f8 fed0 	bl	8000608 <__aeabi_dmul>
 8007868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800786a:	4606      	mov	r6, r0
 800786c:	460f      	mov	r7, r1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d09f      	beq.n	80077b2 <_strtod_l+0x98a>
 8007872:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007876:	e7a0      	b.n	80077ba <_strtod_l+0x992>
 8007878:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007900 <_strtod_l+0xad8>
 800787c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007880:	ec57 6b17 	vmov	r6, r7, d7
 8007884:	e799      	b.n	80077ba <_strtod_l+0x992>
 8007886:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1c1      	bne.n	8007818 <_strtod_l+0x9f0>
 8007894:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007898:	0d1b      	lsrs	r3, r3, #20
 800789a:	051b      	lsls	r3, r3, #20
 800789c:	429d      	cmp	r5, r3
 800789e:	d1bb      	bne.n	8007818 <_strtod_l+0x9f0>
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f9 f9f8 	bl	8000c98 <__aeabi_d2lz>
 80078a8:	f7f8 fe80 	bl	80005ac <__aeabi_l2d>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4630      	mov	r0, r6
 80078b2:	4639      	mov	r1, r7
 80078b4:	f7f8 fcf0 	bl	8000298 <__aeabi_dsub>
 80078b8:	460b      	mov	r3, r1
 80078ba:	4602      	mov	r2, r0
 80078bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80078c0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80078c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078c6:	ea46 060a 	orr.w	r6, r6, sl
 80078ca:	431e      	orrs	r6, r3
 80078cc:	d06f      	beq.n	80079ae <_strtod_l+0xb86>
 80078ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007908 <_strtod_l+0xae0>)
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f9 f90a 	bl	8000aec <__aeabi_dcmplt>
 80078d8:	2800      	cmp	r0, #0
 80078da:	f47f acd3 	bne.w	8007284 <_strtod_l+0x45c>
 80078de:	a30c      	add	r3, pc, #48	@ (adr r3, 8007910 <_strtod_l+0xae8>)
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078e8:	f7f9 f91e 	bl	8000b28 <__aeabi_dcmpgt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d093      	beq.n	8007818 <_strtod_l+0x9f0>
 80078f0:	e4c8      	b.n	8007284 <_strtod_l+0x45c>
 80078f2:	bf00      	nop
 80078f4:	f3af 8000 	nop.w
 80078f8:	00000000 	.word	0x00000000
 80078fc:	bff00000 	.word	0xbff00000
 8007900:	00000000 	.word	0x00000000
 8007904:	3ff00000 	.word	0x3ff00000
 8007908:	94a03595 	.word	0x94a03595
 800790c:	3fdfffff 	.word	0x3fdfffff
 8007910:	35afe535 	.word	0x35afe535
 8007914:	3fe00000 	.word	0x3fe00000
 8007918:	000fffff 	.word	0x000fffff
 800791c:	7ff00000 	.word	0x7ff00000
 8007920:	7fefffff 	.word	0x7fefffff
 8007924:	3ff00000 	.word	0x3ff00000
 8007928:	3fe00000 	.word	0x3fe00000
 800792c:	7fe00000 	.word	0x7fe00000
 8007930:	7c9fffff 	.word	0x7c9fffff
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	b323      	cbz	r3, 8007982 <_strtod_l+0xb5a>
 8007938:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800793c:	d821      	bhi.n	8007982 <_strtod_l+0xb5a>
 800793e:	a328      	add	r3, pc, #160	@ (adr r3, 80079e0 <_strtod_l+0xbb8>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f9 f8da 	bl	8000b00 <__aeabi_dcmple>
 800794c:	b1a0      	cbz	r0, 8007978 <_strtod_l+0xb50>
 800794e:	4639      	mov	r1, r7
 8007950:	4630      	mov	r0, r6
 8007952:	f7f9 f931 	bl	8000bb8 <__aeabi_d2uiz>
 8007956:	2801      	cmp	r0, #1
 8007958:	bf38      	it	cc
 800795a:	2001      	movcc	r0, #1
 800795c:	f7f8 fdda 	bl	8000514 <__aeabi_ui2d>
 8007960:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007962:	4606      	mov	r6, r0
 8007964:	460f      	mov	r7, r1
 8007966:	b9fb      	cbnz	r3, 80079a8 <_strtod_l+0xb80>
 8007968:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800796c:	9014      	str	r0, [sp, #80]	@ 0x50
 800796e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007970:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007974:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007978:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800797a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800797e:	1b5b      	subs	r3, r3, r5
 8007980:	9311      	str	r3, [sp, #68]	@ 0x44
 8007982:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007986:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800798a:	f7ff f8f1 	bl	8006b70 <__ulp>
 800798e:	4650      	mov	r0, sl
 8007990:	ec53 2b10 	vmov	r2, r3, d0
 8007994:	4659      	mov	r1, fp
 8007996:	f7f8 fe37 	bl	8000608 <__aeabi_dmul>
 800799a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800799e:	f7f8 fc7d 	bl	800029c <__adddf3>
 80079a2:	4682      	mov	sl, r0
 80079a4:	468b      	mov	fp, r1
 80079a6:	e770      	b.n	800788a <_strtod_l+0xa62>
 80079a8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80079ac:	e7e0      	b.n	8007970 <_strtod_l+0xb48>
 80079ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80079e8 <_strtod_l+0xbc0>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f9 f89a 	bl	8000aec <__aeabi_dcmplt>
 80079b8:	e798      	b.n	80078ec <_strtod_l+0xac4>
 80079ba:	2300      	movs	r3, #0
 80079bc:	930e      	str	r3, [sp, #56]	@ 0x38
 80079be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80079c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	f7ff ba6d 	b.w	8006ea2 <_strtod_l+0x7a>
 80079c8:	2a65      	cmp	r2, #101	@ 0x65
 80079ca:	f43f ab68 	beq.w	800709e <_strtod_l+0x276>
 80079ce:	2a45      	cmp	r2, #69	@ 0x45
 80079d0:	f43f ab65 	beq.w	800709e <_strtod_l+0x276>
 80079d4:	2301      	movs	r3, #1
 80079d6:	f7ff bba0 	b.w	800711a <_strtod_l+0x2f2>
 80079da:	bf00      	nop
 80079dc:	f3af 8000 	nop.w
 80079e0:	ffc00000 	.word	0xffc00000
 80079e4:	41dfffff 	.word	0x41dfffff
 80079e8:	94a03595 	.word	0x94a03595
 80079ec:	3fcfffff 	.word	0x3fcfffff

080079f0 <_strtod_r>:
 80079f0:	4b01      	ldr	r3, [pc, #4]	@ (80079f8 <_strtod_r+0x8>)
 80079f2:	f7ff ba19 	b.w	8006e28 <_strtod_l>
 80079f6:	bf00      	nop
 80079f8:	20000068 	.word	0x20000068

080079fc <_strtol_l.isra.0>:
 80079fc:	2b24      	cmp	r3, #36	@ 0x24
 80079fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a02:	4686      	mov	lr, r0
 8007a04:	4690      	mov	r8, r2
 8007a06:	d801      	bhi.n	8007a0c <_strtol_l.isra.0+0x10>
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <_strtol_l.isra.0+0x1e>
 8007a0c:	f7fd fdb6 	bl	800557c <__errno>
 8007a10:	2316      	movs	r3, #22
 8007a12:	6003      	str	r3, [r0, #0]
 8007a14:	2000      	movs	r0, #0
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	4834      	ldr	r0, [pc, #208]	@ (8007aec <_strtol_l.isra.0+0xf0>)
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	462a      	mov	r2, r5
 8007a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a24:	5d06      	ldrb	r6, [r0, r4]
 8007a26:	f016 0608 	ands.w	r6, r6, #8
 8007a2a:	d1f8      	bne.n	8007a1e <_strtol_l.isra.0+0x22>
 8007a2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007a2e:	d110      	bne.n	8007a52 <_strtol_l.isra.0+0x56>
 8007a30:	782c      	ldrb	r4, [r5, #0]
 8007a32:	2601      	movs	r6, #1
 8007a34:	1c95      	adds	r5, r2, #2
 8007a36:	f033 0210 	bics.w	r2, r3, #16
 8007a3a:	d115      	bne.n	8007a68 <_strtol_l.isra.0+0x6c>
 8007a3c:	2c30      	cmp	r4, #48	@ 0x30
 8007a3e:	d10d      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007a40:	782a      	ldrb	r2, [r5, #0]
 8007a42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007a46:	2a58      	cmp	r2, #88	@ 0x58
 8007a48:	d108      	bne.n	8007a5c <_strtol_l.isra.0+0x60>
 8007a4a:	786c      	ldrb	r4, [r5, #1]
 8007a4c:	3502      	adds	r5, #2
 8007a4e:	2310      	movs	r3, #16
 8007a50:	e00a      	b.n	8007a68 <_strtol_l.isra.0+0x6c>
 8007a52:	2c2b      	cmp	r4, #43	@ 0x2b
 8007a54:	bf04      	itt	eq
 8007a56:	782c      	ldrbeq	r4, [r5, #0]
 8007a58:	1c95      	addeq	r5, r2, #2
 8007a5a:	e7ec      	b.n	8007a36 <_strtol_l.isra.0+0x3a>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f6      	bne.n	8007a4e <_strtol_l.isra.0+0x52>
 8007a60:	2c30      	cmp	r4, #48	@ 0x30
 8007a62:	bf14      	ite	ne
 8007a64:	230a      	movne	r3, #10
 8007a66:	2308      	moveq	r3, #8
 8007a68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007a6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007a70:	2200      	movs	r2, #0
 8007a72:	fbbc f9f3 	udiv	r9, ip, r3
 8007a76:	4610      	mov	r0, r2
 8007a78:	fb03 ca19 	mls	sl, r3, r9, ip
 8007a7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007a80:	2f09      	cmp	r7, #9
 8007a82:	d80f      	bhi.n	8007aa4 <_strtol_l.isra.0+0xa8>
 8007a84:	463c      	mov	r4, r7
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	dd1b      	ble.n	8007ac2 <_strtol_l.isra.0+0xc6>
 8007a8a:	1c57      	adds	r7, r2, #1
 8007a8c:	d007      	beq.n	8007a9e <_strtol_l.isra.0+0xa2>
 8007a8e:	4581      	cmp	r9, r0
 8007a90:	d314      	bcc.n	8007abc <_strtol_l.isra.0+0xc0>
 8007a92:	d101      	bne.n	8007a98 <_strtol_l.isra.0+0x9c>
 8007a94:	45a2      	cmp	sl, r4
 8007a96:	db11      	blt.n	8007abc <_strtol_l.isra.0+0xc0>
 8007a98:	fb00 4003 	mla	r0, r0, r3, r4
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007aa2:	e7eb      	b.n	8007a7c <_strtol_l.isra.0+0x80>
 8007aa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007aa8:	2f19      	cmp	r7, #25
 8007aaa:	d801      	bhi.n	8007ab0 <_strtol_l.isra.0+0xb4>
 8007aac:	3c37      	subs	r4, #55	@ 0x37
 8007aae:	e7ea      	b.n	8007a86 <_strtol_l.isra.0+0x8a>
 8007ab0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ab4:	2f19      	cmp	r7, #25
 8007ab6:	d804      	bhi.n	8007ac2 <_strtol_l.isra.0+0xc6>
 8007ab8:	3c57      	subs	r4, #87	@ 0x57
 8007aba:	e7e4      	b.n	8007a86 <_strtol_l.isra.0+0x8a>
 8007abc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ac0:	e7ed      	b.n	8007a9e <_strtol_l.isra.0+0xa2>
 8007ac2:	1c53      	adds	r3, r2, #1
 8007ac4:	d108      	bne.n	8007ad8 <_strtol_l.isra.0+0xdc>
 8007ac6:	2322      	movs	r3, #34	@ 0x22
 8007ac8:	f8ce 3000 	str.w	r3, [lr]
 8007acc:	4660      	mov	r0, ip
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	d0a0      	beq.n	8007a16 <_strtol_l.isra.0+0x1a>
 8007ad4:	1e69      	subs	r1, r5, #1
 8007ad6:	e006      	b.n	8007ae6 <_strtol_l.isra.0+0xea>
 8007ad8:	b106      	cbz	r6, 8007adc <_strtol_l.isra.0+0xe0>
 8007ada:	4240      	negs	r0, r0
 8007adc:	f1b8 0f00 	cmp.w	r8, #0
 8007ae0:	d099      	beq.n	8007a16 <_strtol_l.isra.0+0x1a>
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d1f6      	bne.n	8007ad4 <_strtol_l.isra.0+0xd8>
 8007ae6:	f8c8 1000 	str.w	r1, [r8]
 8007aea:	e794      	b.n	8007a16 <_strtol_l.isra.0+0x1a>
 8007aec:	08009031 	.word	0x08009031

08007af0 <_strtol_r>:
 8007af0:	f7ff bf84 	b.w	80079fc <_strtol_l.isra.0>

08007af4 <__ssputs_r>:
 8007af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	688e      	ldr	r6, [r1, #8]
 8007afa:	461f      	mov	r7, r3
 8007afc:	42be      	cmp	r6, r7
 8007afe:	680b      	ldr	r3, [r1, #0]
 8007b00:	4682      	mov	sl, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4690      	mov	r8, r2
 8007b06:	d82d      	bhi.n	8007b64 <__ssputs_r+0x70>
 8007b08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b10:	d026      	beq.n	8007b60 <__ssputs_r+0x6c>
 8007b12:	6965      	ldr	r5, [r4, #20]
 8007b14:	6909      	ldr	r1, [r1, #16]
 8007b16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b1a:	eba3 0901 	sub.w	r9, r3, r1
 8007b1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	444b      	add	r3, r9
 8007b26:	106d      	asrs	r5, r5, #1
 8007b28:	429d      	cmp	r5, r3
 8007b2a:	bf38      	it	cc
 8007b2c:	461d      	movcc	r5, r3
 8007b2e:	0553      	lsls	r3, r2, #21
 8007b30:	d527      	bpl.n	8007b82 <__ssputs_r+0x8e>
 8007b32:	4629      	mov	r1, r5
 8007b34:	f7fe fc24 	bl	8006380 <_malloc_r>
 8007b38:	4606      	mov	r6, r0
 8007b3a:	b360      	cbz	r0, 8007b96 <__ssputs_r+0xa2>
 8007b3c:	6921      	ldr	r1, [r4, #16]
 8007b3e:	464a      	mov	r2, r9
 8007b40:	f000 fa18 	bl	8007f74 <memcpy>
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	6126      	str	r6, [r4, #16]
 8007b52:	6165      	str	r5, [r4, #20]
 8007b54:	444e      	add	r6, r9
 8007b56:	eba5 0509 	sub.w	r5, r5, r9
 8007b5a:	6026      	str	r6, [r4, #0]
 8007b5c:	60a5      	str	r5, [r4, #8]
 8007b5e:	463e      	mov	r6, r7
 8007b60:	42be      	cmp	r6, r7
 8007b62:	d900      	bls.n	8007b66 <__ssputs_r+0x72>
 8007b64:	463e      	mov	r6, r7
 8007b66:	6820      	ldr	r0, [r4, #0]
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4641      	mov	r1, r8
 8007b6c:	f000 f9c6 	bl	8007efc <memmove>
 8007b70:	68a3      	ldr	r3, [r4, #8]
 8007b72:	1b9b      	subs	r3, r3, r6
 8007b74:	60a3      	str	r3, [r4, #8]
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	4433      	add	r3, r6
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b82:	462a      	mov	r2, r5
 8007b84:	f000 fd89 	bl	800869a <_realloc_r>
 8007b88:	4606      	mov	r6, r0
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	d1e0      	bne.n	8007b50 <__ssputs_r+0x5c>
 8007b8e:	6921      	ldr	r1, [r4, #16]
 8007b90:	4650      	mov	r0, sl
 8007b92:	f7fe fb81 	bl	8006298 <_free_r>
 8007b96:	230c      	movs	r3, #12
 8007b98:	f8ca 3000 	str.w	r3, [sl]
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	e7e9      	b.n	8007b7e <__ssputs_r+0x8a>
	...

08007bac <_svfiprintf_r>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	898b      	ldrh	r3, [r1, #12]
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	b09d      	sub	sp, #116	@ 0x74
 8007bb8:	4607      	mov	r7, r0
 8007bba:	460d      	mov	r5, r1
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	d510      	bpl.n	8007be2 <_svfiprintf_r+0x36>
 8007bc0:	690b      	ldr	r3, [r1, #16]
 8007bc2:	b973      	cbnz	r3, 8007be2 <_svfiprintf_r+0x36>
 8007bc4:	2140      	movs	r1, #64	@ 0x40
 8007bc6:	f7fe fbdb 	bl	8006380 <_malloc_r>
 8007bca:	6028      	str	r0, [r5, #0]
 8007bcc:	6128      	str	r0, [r5, #16]
 8007bce:	b930      	cbnz	r0, 8007bde <_svfiprintf_r+0x32>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b01d      	add	sp, #116	@ 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	2340      	movs	r3, #64	@ 0x40
 8007be0:	616b      	str	r3, [r5, #20]
 8007be2:	2300      	movs	r3, #0
 8007be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007be6:	2320      	movs	r3, #32
 8007be8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf0:	2330      	movs	r3, #48	@ 0x30
 8007bf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d90 <_svfiprintf_r+0x1e4>
 8007bf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bfa:	f04f 0901 	mov.w	r9, #1
 8007bfe:	4623      	mov	r3, r4
 8007c00:	469a      	mov	sl, r3
 8007c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c06:	b10a      	cbz	r2, 8007c0c <_svfiprintf_r+0x60>
 8007c08:	2a25      	cmp	r2, #37	@ 0x25
 8007c0a:	d1f9      	bne.n	8007c00 <_svfiprintf_r+0x54>
 8007c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c10:	d00b      	beq.n	8007c2a <_svfiprintf_r+0x7e>
 8007c12:	465b      	mov	r3, fp
 8007c14:	4622      	mov	r2, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff ff6b 	bl	8007af4 <__ssputs_r>
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f000 80a7 	beq.w	8007d72 <_svfiprintf_r+0x1c6>
 8007c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c26:	445a      	add	r2, fp
 8007c28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 809f 	beq.w	8007d72 <_svfiprintf_r+0x1c6>
 8007c34:	2300      	movs	r3, #0
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c3e:	f10a 0a01 	add.w	sl, sl, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	9307      	str	r3, [sp, #28]
 8007c46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c4c:	4654      	mov	r4, sl
 8007c4e:	2205      	movs	r2, #5
 8007c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c54:	484e      	ldr	r0, [pc, #312]	@ (8007d90 <_svfiprintf_r+0x1e4>)
 8007c56:	f7f8 fac3 	bl	80001e0 <memchr>
 8007c5a:	9a04      	ldr	r2, [sp, #16]
 8007c5c:	b9d8      	cbnz	r0, 8007c96 <_svfiprintf_r+0xea>
 8007c5e:	06d0      	lsls	r0, r2, #27
 8007c60:	bf44      	itt	mi
 8007c62:	2320      	movmi	r3, #32
 8007c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c68:	0711      	lsls	r1, r2, #28
 8007c6a:	bf44      	itt	mi
 8007c6c:	232b      	movmi	r3, #43	@ 0x2b
 8007c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c72:	f89a 3000 	ldrb.w	r3, [sl]
 8007c76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c78:	d015      	beq.n	8007ca6 <_svfiprintf_r+0xfa>
 8007c7a:	9a07      	ldr	r2, [sp, #28]
 8007c7c:	4654      	mov	r4, sl
 8007c7e:	2000      	movs	r0, #0
 8007c80:	f04f 0c0a 	mov.w	ip, #10
 8007c84:	4621      	mov	r1, r4
 8007c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c8a:	3b30      	subs	r3, #48	@ 0x30
 8007c8c:	2b09      	cmp	r3, #9
 8007c8e:	d94b      	bls.n	8007d28 <_svfiprintf_r+0x17c>
 8007c90:	b1b0      	cbz	r0, 8007cc0 <_svfiprintf_r+0x114>
 8007c92:	9207      	str	r2, [sp, #28]
 8007c94:	e014      	b.n	8007cc0 <_svfiprintf_r+0x114>
 8007c96:	eba0 0308 	sub.w	r3, r0, r8
 8007c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	46a2      	mov	sl, r4
 8007ca4:	e7d2      	b.n	8007c4c <_svfiprintf_r+0xa0>
 8007ca6:	9b03      	ldr	r3, [sp, #12]
 8007ca8:	1d19      	adds	r1, r3, #4
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	9103      	str	r1, [sp, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bfbb      	ittet	lt
 8007cb2:	425b      	neglt	r3, r3
 8007cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cb8:	9307      	strge	r3, [sp, #28]
 8007cba:	9307      	strlt	r3, [sp, #28]
 8007cbc:	bfb8      	it	lt
 8007cbe:	9204      	strlt	r2, [sp, #16]
 8007cc0:	7823      	ldrb	r3, [r4, #0]
 8007cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cc4:	d10a      	bne.n	8007cdc <_svfiprintf_r+0x130>
 8007cc6:	7863      	ldrb	r3, [r4, #1]
 8007cc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cca:	d132      	bne.n	8007d32 <_svfiprintf_r+0x186>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	9203      	str	r2, [sp, #12]
 8007cd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cd8:	3402      	adds	r4, #2
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007da0 <_svfiprintf_r+0x1f4>
 8007ce0:	7821      	ldrb	r1, [r4, #0]
 8007ce2:	2203      	movs	r2, #3
 8007ce4:	4650      	mov	r0, sl
 8007ce6:	f7f8 fa7b 	bl	80001e0 <memchr>
 8007cea:	b138      	cbz	r0, 8007cfc <_svfiprintf_r+0x150>
 8007cec:	9b04      	ldr	r3, [sp, #16]
 8007cee:	eba0 000a 	sub.w	r0, r0, sl
 8007cf2:	2240      	movs	r2, #64	@ 0x40
 8007cf4:	4082      	lsls	r2, r0
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	3401      	adds	r4, #1
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	4824      	ldr	r0, [pc, #144]	@ (8007d94 <_svfiprintf_r+0x1e8>)
 8007d02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d06:	2206      	movs	r2, #6
 8007d08:	f7f8 fa6a 	bl	80001e0 <memchr>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d036      	beq.n	8007d7e <_svfiprintf_r+0x1d2>
 8007d10:	4b21      	ldr	r3, [pc, #132]	@ (8007d98 <_svfiprintf_r+0x1ec>)
 8007d12:	bb1b      	cbnz	r3, 8007d5c <_svfiprintf_r+0x1b0>
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	3307      	adds	r3, #7
 8007d18:	f023 0307 	bic.w	r3, r3, #7
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d22:	4433      	add	r3, r6
 8007d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d26:	e76a      	b.n	8007bfe <_svfiprintf_r+0x52>
 8007d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	2001      	movs	r0, #1
 8007d30:	e7a8      	b.n	8007c84 <_svfiprintf_r+0xd8>
 8007d32:	2300      	movs	r3, #0
 8007d34:	3401      	adds	r4, #1
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f04f 0c0a 	mov.w	ip, #10
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d44:	3a30      	subs	r2, #48	@ 0x30
 8007d46:	2a09      	cmp	r2, #9
 8007d48:	d903      	bls.n	8007d52 <_svfiprintf_r+0x1a6>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0c6      	beq.n	8007cdc <_svfiprintf_r+0x130>
 8007d4e:	9105      	str	r1, [sp, #20]
 8007d50:	e7c4      	b.n	8007cdc <_svfiprintf_r+0x130>
 8007d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d56:	4604      	mov	r4, r0
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e7f0      	b.n	8007d3e <_svfiprintf_r+0x192>
 8007d5c:	ab03      	add	r3, sp, #12
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	462a      	mov	r2, r5
 8007d62:	4b0e      	ldr	r3, [pc, #56]	@ (8007d9c <_svfiprintf_r+0x1f0>)
 8007d64:	a904      	add	r1, sp, #16
 8007d66:	4638      	mov	r0, r7
 8007d68:	f7fc fcca 	bl	8004700 <_printf_float>
 8007d6c:	1c42      	adds	r2, r0, #1
 8007d6e:	4606      	mov	r6, r0
 8007d70:	d1d6      	bne.n	8007d20 <_svfiprintf_r+0x174>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	065b      	lsls	r3, r3, #25
 8007d76:	f53f af2d 	bmi.w	8007bd4 <_svfiprintf_r+0x28>
 8007d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d7c:	e72c      	b.n	8007bd8 <_svfiprintf_r+0x2c>
 8007d7e:	ab03      	add	r3, sp, #12
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	462a      	mov	r2, r5
 8007d84:	4b05      	ldr	r3, [pc, #20]	@ (8007d9c <_svfiprintf_r+0x1f0>)
 8007d86:	a904      	add	r1, sp, #16
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7fc ff51 	bl	8004c30 <_printf_i>
 8007d8e:	e7ed      	b.n	8007d6c <_svfiprintf_r+0x1c0>
 8007d90:	08008e29 	.word	0x08008e29
 8007d94:	08008e33 	.word	0x08008e33
 8007d98:	08004701 	.word	0x08004701
 8007d9c:	08007af5 	.word	0x08007af5
 8007da0:	08008e2f 	.word	0x08008e2f

08007da4 <__sflush_r>:
 8007da4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dac:	0716      	lsls	r6, r2, #28
 8007dae:	4605      	mov	r5, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	d454      	bmi.n	8007e5e <__sflush_r+0xba>
 8007db4:	684b      	ldr	r3, [r1, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dc02      	bgt.n	8007dc0 <__sflush_r+0x1c>
 8007dba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dd48      	ble.n	8007e52 <__sflush_r+0xae>
 8007dc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	d045      	beq.n	8007e52 <__sflush_r+0xae>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007dcc:	682f      	ldr	r7, [r5, #0]
 8007dce:	6a21      	ldr	r1, [r4, #32]
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	d030      	beq.n	8007e36 <__sflush_r+0x92>
 8007dd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	0759      	lsls	r1, r3, #29
 8007dda:	d505      	bpl.n	8007de8 <__sflush_r+0x44>
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007de2:	b10b      	cbz	r3, 8007de8 <__sflush_r+0x44>
 8007de4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	2300      	movs	r3, #0
 8007dea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dec:	6a21      	ldr	r1, [r4, #32]
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b0      	blx	r6
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	89a3      	ldrh	r3, [r4, #12]
 8007df6:	d106      	bne.n	8007e06 <__sflush_r+0x62>
 8007df8:	6829      	ldr	r1, [r5, #0]
 8007dfa:	291d      	cmp	r1, #29
 8007dfc:	d82b      	bhi.n	8007e56 <__sflush_r+0xb2>
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea8 <__sflush_r+0x104>)
 8007e00:	40ca      	lsrs	r2, r1
 8007e02:	07d6      	lsls	r6, r2, #31
 8007e04:	d527      	bpl.n	8007e56 <__sflush_r+0xb2>
 8007e06:	2200      	movs	r2, #0
 8007e08:	6062      	str	r2, [r4, #4]
 8007e0a:	04d9      	lsls	r1, r3, #19
 8007e0c:	6922      	ldr	r2, [r4, #16]
 8007e0e:	6022      	str	r2, [r4, #0]
 8007e10:	d504      	bpl.n	8007e1c <__sflush_r+0x78>
 8007e12:	1c42      	adds	r2, r0, #1
 8007e14:	d101      	bne.n	8007e1a <__sflush_r+0x76>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	b903      	cbnz	r3, 8007e1c <__sflush_r+0x78>
 8007e1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e1e:	602f      	str	r7, [r5, #0]
 8007e20:	b1b9      	cbz	r1, 8007e52 <__sflush_r+0xae>
 8007e22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e26:	4299      	cmp	r1, r3
 8007e28:	d002      	beq.n	8007e30 <__sflush_r+0x8c>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f7fe fa34 	bl	8006298 <_free_r>
 8007e30:	2300      	movs	r3, #0
 8007e32:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e34:	e00d      	b.n	8007e52 <__sflush_r+0xae>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4628      	mov	r0, r5
 8007e3a:	47b0      	blx	r6
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	1c50      	adds	r0, r2, #1
 8007e40:	d1c9      	bne.n	8007dd6 <__sflush_r+0x32>
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0c6      	beq.n	8007dd6 <__sflush_r+0x32>
 8007e48:	2b1d      	cmp	r3, #29
 8007e4a:	d001      	beq.n	8007e50 <__sflush_r+0xac>
 8007e4c:	2b16      	cmp	r3, #22
 8007e4e:	d11e      	bne.n	8007e8e <__sflush_r+0xea>
 8007e50:	602f      	str	r7, [r5, #0]
 8007e52:	2000      	movs	r0, #0
 8007e54:	e022      	b.n	8007e9c <__sflush_r+0xf8>
 8007e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e5a:	b21b      	sxth	r3, r3
 8007e5c:	e01b      	b.n	8007e96 <__sflush_r+0xf2>
 8007e5e:	690f      	ldr	r7, [r1, #16]
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	d0f6      	beq.n	8007e52 <__sflush_r+0xae>
 8007e64:	0793      	lsls	r3, r2, #30
 8007e66:	680e      	ldr	r6, [r1, #0]
 8007e68:	bf08      	it	eq
 8007e6a:	694b      	ldreq	r3, [r1, #20]
 8007e6c:	600f      	str	r7, [r1, #0]
 8007e6e:	bf18      	it	ne
 8007e70:	2300      	movne	r3, #0
 8007e72:	eba6 0807 	sub.w	r8, r6, r7
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	f1b8 0f00 	cmp.w	r8, #0
 8007e7c:	dde9      	ble.n	8007e52 <__sflush_r+0xae>
 8007e7e:	6a21      	ldr	r1, [r4, #32]
 8007e80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e82:	4643      	mov	r3, r8
 8007e84:	463a      	mov	r2, r7
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b0      	blx	r6
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	dc08      	bgt.n	8007ea0 <__sflush_r+0xfc>
 8007e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	4407      	add	r7, r0
 8007ea2:	eba8 0800 	sub.w	r8, r8, r0
 8007ea6:	e7e7      	b.n	8007e78 <__sflush_r+0xd4>
 8007ea8:	20400001 	.word	0x20400001

08007eac <_fflush_r>:
 8007eac:	b538      	push	{r3, r4, r5, lr}
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	b913      	cbnz	r3, 8007ebc <_fflush_r+0x10>
 8007eb6:	2500      	movs	r5, #0
 8007eb8:	4628      	mov	r0, r5
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	b118      	cbz	r0, 8007ec6 <_fflush_r+0x1a>
 8007ebe:	6a03      	ldr	r3, [r0, #32]
 8007ec0:	b90b      	cbnz	r3, 8007ec6 <_fflush_r+0x1a>
 8007ec2:	f7fd fa6d 	bl	80053a0 <__sinit>
 8007ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d0f3      	beq.n	8007eb6 <_fflush_r+0xa>
 8007ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ed0:	07d0      	lsls	r0, r2, #31
 8007ed2:	d404      	bmi.n	8007ede <_fflush_r+0x32>
 8007ed4:	0599      	lsls	r1, r3, #22
 8007ed6:	d402      	bmi.n	8007ede <_fflush_r+0x32>
 8007ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eda:	f7fd fb7a 	bl	80055d2 <__retarget_lock_acquire_recursive>
 8007ede:	4628      	mov	r0, r5
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f7ff ff5f 	bl	8007da4 <__sflush_r>
 8007ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ee8:	07da      	lsls	r2, r3, #31
 8007eea:	4605      	mov	r5, r0
 8007eec:	d4e4      	bmi.n	8007eb8 <_fflush_r+0xc>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	059b      	lsls	r3, r3, #22
 8007ef2:	d4e1      	bmi.n	8007eb8 <_fflush_r+0xc>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef6:	f7fd fb6d 	bl	80055d4 <__retarget_lock_release_recursive>
 8007efa:	e7dd      	b.n	8007eb8 <_fflush_r+0xc>

08007efc <memmove>:
 8007efc:	4288      	cmp	r0, r1
 8007efe:	b510      	push	{r4, lr}
 8007f00:	eb01 0402 	add.w	r4, r1, r2
 8007f04:	d902      	bls.n	8007f0c <memmove+0x10>
 8007f06:	4284      	cmp	r4, r0
 8007f08:	4623      	mov	r3, r4
 8007f0a:	d807      	bhi.n	8007f1c <memmove+0x20>
 8007f0c:	1e43      	subs	r3, r0, #1
 8007f0e:	42a1      	cmp	r1, r4
 8007f10:	d008      	beq.n	8007f24 <memmove+0x28>
 8007f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f1a:	e7f8      	b.n	8007f0e <memmove+0x12>
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4601      	mov	r1, r0
 8007f20:	428a      	cmp	r2, r1
 8007f22:	d100      	bne.n	8007f26 <memmove+0x2a>
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f2e:	e7f7      	b.n	8007f20 <memmove+0x24>

08007f30 <strncmp>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	b16a      	cbz	r2, 8007f50 <strncmp+0x20>
 8007f34:	3901      	subs	r1, #1
 8007f36:	1884      	adds	r4, r0, r2
 8007f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d103      	bne.n	8007f4c <strncmp+0x1c>
 8007f44:	42a0      	cmp	r0, r4
 8007f46:	d001      	beq.n	8007f4c <strncmp+0x1c>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d1f5      	bne.n	8007f38 <strncmp+0x8>
 8007f4c:	1ad0      	subs	r0, r2, r3
 8007f4e:	bd10      	pop	{r4, pc}
 8007f50:	4610      	mov	r0, r2
 8007f52:	e7fc      	b.n	8007f4e <strncmp+0x1e>

08007f54 <_sbrk_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d06      	ldr	r5, [pc, #24]	@ (8007f70 <_sbrk_r+0x1c>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	602b      	str	r3, [r5, #0]
 8007f60:	f7f9 fb7a 	bl	8001658 <_sbrk>
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	d102      	bne.n	8007f6e <_sbrk_r+0x1a>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	b103      	cbz	r3, 8007f6e <_sbrk_r+0x1a>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	bd38      	pop	{r3, r4, r5, pc}
 8007f70:	2000040c 	.word	0x2000040c

08007f74 <memcpy>:
 8007f74:	440a      	add	r2, r1
 8007f76:	4291      	cmp	r1, r2
 8007f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f7c:	d100      	bne.n	8007f80 <memcpy+0xc>
 8007f7e:	4770      	bx	lr
 8007f80:	b510      	push	{r4, lr}
 8007f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f8a:	4291      	cmp	r1, r2
 8007f8c:	d1f9      	bne.n	8007f82 <memcpy+0xe>
 8007f8e:	bd10      	pop	{r4, pc}

08007f90 <nan>:
 8007f90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007f98 <nan+0x8>
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	00000000 	.word	0x00000000
 8007f9c:	7ff80000 	.word	0x7ff80000

08007fa0 <__assert_func>:
 8007fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b09      	ldr	r3, [pc, #36]	@ (8007fcc <__assert_func+0x2c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4605      	mov	r5, r0
 8007fac:	68d8      	ldr	r0, [r3, #12]
 8007fae:	b14c      	cbz	r4, 8007fc4 <__assert_func+0x24>
 8007fb0:	4b07      	ldr	r3, [pc, #28]	@ (8007fd0 <__assert_func+0x30>)
 8007fb2:	9100      	str	r1, [sp, #0]
 8007fb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fb8:	4906      	ldr	r1, [pc, #24]	@ (8007fd4 <__assert_func+0x34>)
 8007fba:	462b      	mov	r3, r5
 8007fbc:	f000 fba8 	bl	8008710 <fiprintf>
 8007fc0:	f000 fbb8 	bl	8008734 <abort>
 8007fc4:	4b04      	ldr	r3, [pc, #16]	@ (8007fd8 <__assert_func+0x38>)
 8007fc6:	461c      	mov	r4, r3
 8007fc8:	e7f3      	b.n	8007fb2 <__assert_func+0x12>
 8007fca:	bf00      	nop
 8007fcc:	20000018 	.word	0x20000018
 8007fd0:	08008e42 	.word	0x08008e42
 8007fd4:	08008e4f 	.word	0x08008e4f
 8007fd8:	08008e7d 	.word	0x08008e7d

08007fdc <_calloc_r>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	fba1 5402 	umull	r5, r4, r1, r2
 8007fe2:	b934      	cbnz	r4, 8007ff2 <_calloc_r+0x16>
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	f7fe f9cb 	bl	8006380 <_malloc_r>
 8007fea:	4606      	mov	r6, r0
 8007fec:	b928      	cbnz	r0, 8007ffa <_calloc_r+0x1e>
 8007fee:	4630      	mov	r0, r6
 8007ff0:	bd70      	pop	{r4, r5, r6, pc}
 8007ff2:	220c      	movs	r2, #12
 8007ff4:	6002      	str	r2, [r0, #0]
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	e7f9      	b.n	8007fee <_calloc_r+0x12>
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	f7fd fa6a 	bl	80054d6 <memset>
 8008002:	e7f4      	b.n	8007fee <_calloc_r+0x12>

08008004 <rshift>:
 8008004:	6903      	ldr	r3, [r0, #16]
 8008006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800800a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800800e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008012:	f100 0414 	add.w	r4, r0, #20
 8008016:	dd45      	ble.n	80080a4 <rshift+0xa0>
 8008018:	f011 011f 	ands.w	r1, r1, #31
 800801c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008020:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008024:	d10c      	bne.n	8008040 <rshift+0x3c>
 8008026:	f100 0710 	add.w	r7, r0, #16
 800802a:	4629      	mov	r1, r5
 800802c:	42b1      	cmp	r1, r6
 800802e:	d334      	bcc.n	800809a <rshift+0x96>
 8008030:	1a9b      	subs	r3, r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	1eea      	subs	r2, r5, #3
 8008036:	4296      	cmp	r6, r2
 8008038:	bf38      	it	cc
 800803a:	2300      	movcc	r3, #0
 800803c:	4423      	add	r3, r4
 800803e:	e015      	b.n	800806c <rshift+0x68>
 8008040:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008044:	f1c1 0820 	rsb	r8, r1, #32
 8008048:	40cf      	lsrs	r7, r1
 800804a:	f105 0e04 	add.w	lr, r5, #4
 800804e:	46a1      	mov	r9, r4
 8008050:	4576      	cmp	r6, lr
 8008052:	46f4      	mov	ip, lr
 8008054:	d815      	bhi.n	8008082 <rshift+0x7e>
 8008056:	1a9a      	subs	r2, r3, r2
 8008058:	0092      	lsls	r2, r2, #2
 800805a:	3a04      	subs	r2, #4
 800805c:	3501      	adds	r5, #1
 800805e:	42ae      	cmp	r6, r5
 8008060:	bf38      	it	cc
 8008062:	2200      	movcc	r2, #0
 8008064:	18a3      	adds	r3, r4, r2
 8008066:	50a7      	str	r7, [r4, r2]
 8008068:	b107      	cbz	r7, 800806c <rshift+0x68>
 800806a:	3304      	adds	r3, #4
 800806c:	1b1a      	subs	r2, r3, r4
 800806e:	42a3      	cmp	r3, r4
 8008070:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008074:	bf08      	it	eq
 8008076:	2300      	moveq	r3, #0
 8008078:	6102      	str	r2, [r0, #16]
 800807a:	bf08      	it	eq
 800807c:	6143      	streq	r3, [r0, #20]
 800807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008082:	f8dc c000 	ldr.w	ip, [ip]
 8008086:	fa0c fc08 	lsl.w	ip, ip, r8
 800808a:	ea4c 0707 	orr.w	r7, ip, r7
 800808e:	f849 7b04 	str.w	r7, [r9], #4
 8008092:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008096:	40cf      	lsrs	r7, r1
 8008098:	e7da      	b.n	8008050 <rshift+0x4c>
 800809a:	f851 cb04 	ldr.w	ip, [r1], #4
 800809e:	f847 cf04 	str.w	ip, [r7, #4]!
 80080a2:	e7c3      	b.n	800802c <rshift+0x28>
 80080a4:	4623      	mov	r3, r4
 80080a6:	e7e1      	b.n	800806c <rshift+0x68>

080080a8 <__hexdig_fun>:
 80080a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d802      	bhi.n	80080b6 <__hexdig_fun+0xe>
 80080b0:	3820      	subs	r0, #32
 80080b2:	b2c0      	uxtb	r0, r0
 80080b4:	4770      	bx	lr
 80080b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	d801      	bhi.n	80080c2 <__hexdig_fun+0x1a>
 80080be:	3847      	subs	r0, #71	@ 0x47
 80080c0:	e7f7      	b.n	80080b2 <__hexdig_fun+0xa>
 80080c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80080c6:	2b05      	cmp	r3, #5
 80080c8:	d801      	bhi.n	80080ce <__hexdig_fun+0x26>
 80080ca:	3827      	subs	r0, #39	@ 0x27
 80080cc:	e7f1      	b.n	80080b2 <__hexdig_fun+0xa>
 80080ce:	2000      	movs	r0, #0
 80080d0:	4770      	bx	lr
	...

080080d4 <__gethex>:
 80080d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	b085      	sub	sp, #20
 80080da:	468a      	mov	sl, r1
 80080dc:	9302      	str	r3, [sp, #8]
 80080de:	680b      	ldr	r3, [r1, #0]
 80080e0:	9001      	str	r0, [sp, #4]
 80080e2:	4690      	mov	r8, r2
 80080e4:	1c9c      	adds	r4, r3, #2
 80080e6:	46a1      	mov	r9, r4
 80080e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80080ec:	2830      	cmp	r0, #48	@ 0x30
 80080ee:	d0fa      	beq.n	80080e6 <__gethex+0x12>
 80080f0:	eba9 0303 	sub.w	r3, r9, r3
 80080f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80080f8:	f7ff ffd6 	bl	80080a8 <__hexdig_fun>
 80080fc:	4605      	mov	r5, r0
 80080fe:	2800      	cmp	r0, #0
 8008100:	d168      	bne.n	80081d4 <__gethex+0x100>
 8008102:	49a0      	ldr	r1, [pc, #640]	@ (8008384 <__gethex+0x2b0>)
 8008104:	2201      	movs	r2, #1
 8008106:	4648      	mov	r0, r9
 8008108:	f7ff ff12 	bl	8007f30 <strncmp>
 800810c:	4607      	mov	r7, r0
 800810e:	2800      	cmp	r0, #0
 8008110:	d167      	bne.n	80081e2 <__gethex+0x10e>
 8008112:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008116:	4626      	mov	r6, r4
 8008118:	f7ff ffc6 	bl	80080a8 <__hexdig_fun>
 800811c:	2800      	cmp	r0, #0
 800811e:	d062      	beq.n	80081e6 <__gethex+0x112>
 8008120:	4623      	mov	r3, r4
 8008122:	7818      	ldrb	r0, [r3, #0]
 8008124:	2830      	cmp	r0, #48	@ 0x30
 8008126:	4699      	mov	r9, r3
 8008128:	f103 0301 	add.w	r3, r3, #1
 800812c:	d0f9      	beq.n	8008122 <__gethex+0x4e>
 800812e:	f7ff ffbb 	bl	80080a8 <__hexdig_fun>
 8008132:	fab0 f580 	clz	r5, r0
 8008136:	096d      	lsrs	r5, r5, #5
 8008138:	f04f 0b01 	mov.w	fp, #1
 800813c:	464a      	mov	r2, r9
 800813e:	4616      	mov	r6, r2
 8008140:	3201      	adds	r2, #1
 8008142:	7830      	ldrb	r0, [r6, #0]
 8008144:	f7ff ffb0 	bl	80080a8 <__hexdig_fun>
 8008148:	2800      	cmp	r0, #0
 800814a:	d1f8      	bne.n	800813e <__gethex+0x6a>
 800814c:	498d      	ldr	r1, [pc, #564]	@ (8008384 <__gethex+0x2b0>)
 800814e:	2201      	movs	r2, #1
 8008150:	4630      	mov	r0, r6
 8008152:	f7ff feed 	bl	8007f30 <strncmp>
 8008156:	2800      	cmp	r0, #0
 8008158:	d13f      	bne.n	80081da <__gethex+0x106>
 800815a:	b944      	cbnz	r4, 800816e <__gethex+0x9a>
 800815c:	1c74      	adds	r4, r6, #1
 800815e:	4622      	mov	r2, r4
 8008160:	4616      	mov	r6, r2
 8008162:	3201      	adds	r2, #1
 8008164:	7830      	ldrb	r0, [r6, #0]
 8008166:	f7ff ff9f 	bl	80080a8 <__hexdig_fun>
 800816a:	2800      	cmp	r0, #0
 800816c:	d1f8      	bne.n	8008160 <__gethex+0x8c>
 800816e:	1ba4      	subs	r4, r4, r6
 8008170:	00a7      	lsls	r7, r4, #2
 8008172:	7833      	ldrb	r3, [r6, #0]
 8008174:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008178:	2b50      	cmp	r3, #80	@ 0x50
 800817a:	d13e      	bne.n	80081fa <__gethex+0x126>
 800817c:	7873      	ldrb	r3, [r6, #1]
 800817e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008180:	d033      	beq.n	80081ea <__gethex+0x116>
 8008182:	2b2d      	cmp	r3, #45	@ 0x2d
 8008184:	d034      	beq.n	80081f0 <__gethex+0x11c>
 8008186:	1c71      	adds	r1, r6, #1
 8008188:	2400      	movs	r4, #0
 800818a:	7808      	ldrb	r0, [r1, #0]
 800818c:	f7ff ff8c 	bl	80080a8 <__hexdig_fun>
 8008190:	1e43      	subs	r3, r0, #1
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b18      	cmp	r3, #24
 8008196:	d830      	bhi.n	80081fa <__gethex+0x126>
 8008198:	f1a0 0210 	sub.w	r2, r0, #16
 800819c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80081a0:	f7ff ff82 	bl	80080a8 <__hexdig_fun>
 80081a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80081a8:	fa5f fc8c 	uxtb.w	ip, ip
 80081ac:	f1bc 0f18 	cmp.w	ip, #24
 80081b0:	f04f 030a 	mov.w	r3, #10
 80081b4:	d91e      	bls.n	80081f4 <__gethex+0x120>
 80081b6:	b104      	cbz	r4, 80081ba <__gethex+0xe6>
 80081b8:	4252      	negs	r2, r2
 80081ba:	4417      	add	r7, r2
 80081bc:	f8ca 1000 	str.w	r1, [sl]
 80081c0:	b1ed      	cbz	r5, 80081fe <__gethex+0x12a>
 80081c2:	f1bb 0f00 	cmp.w	fp, #0
 80081c6:	bf0c      	ite	eq
 80081c8:	2506      	moveq	r5, #6
 80081ca:	2500      	movne	r5, #0
 80081cc:	4628      	mov	r0, r5
 80081ce:	b005      	add	sp, #20
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	2500      	movs	r5, #0
 80081d6:	462c      	mov	r4, r5
 80081d8:	e7b0      	b.n	800813c <__gethex+0x68>
 80081da:	2c00      	cmp	r4, #0
 80081dc:	d1c7      	bne.n	800816e <__gethex+0x9a>
 80081de:	4627      	mov	r7, r4
 80081e0:	e7c7      	b.n	8008172 <__gethex+0x9e>
 80081e2:	464e      	mov	r6, r9
 80081e4:	462f      	mov	r7, r5
 80081e6:	2501      	movs	r5, #1
 80081e8:	e7c3      	b.n	8008172 <__gethex+0x9e>
 80081ea:	2400      	movs	r4, #0
 80081ec:	1cb1      	adds	r1, r6, #2
 80081ee:	e7cc      	b.n	800818a <__gethex+0xb6>
 80081f0:	2401      	movs	r4, #1
 80081f2:	e7fb      	b.n	80081ec <__gethex+0x118>
 80081f4:	fb03 0002 	mla	r0, r3, r2, r0
 80081f8:	e7ce      	b.n	8008198 <__gethex+0xc4>
 80081fa:	4631      	mov	r1, r6
 80081fc:	e7de      	b.n	80081bc <__gethex+0xe8>
 80081fe:	eba6 0309 	sub.w	r3, r6, r9
 8008202:	3b01      	subs	r3, #1
 8008204:	4629      	mov	r1, r5
 8008206:	2b07      	cmp	r3, #7
 8008208:	dc0a      	bgt.n	8008220 <__gethex+0x14c>
 800820a:	9801      	ldr	r0, [sp, #4]
 800820c:	f7fe f944 	bl	8006498 <_Balloc>
 8008210:	4604      	mov	r4, r0
 8008212:	b940      	cbnz	r0, 8008226 <__gethex+0x152>
 8008214:	4b5c      	ldr	r3, [pc, #368]	@ (8008388 <__gethex+0x2b4>)
 8008216:	4602      	mov	r2, r0
 8008218:	21e4      	movs	r1, #228	@ 0xe4
 800821a:	485c      	ldr	r0, [pc, #368]	@ (800838c <__gethex+0x2b8>)
 800821c:	f7ff fec0 	bl	8007fa0 <__assert_func>
 8008220:	3101      	adds	r1, #1
 8008222:	105b      	asrs	r3, r3, #1
 8008224:	e7ef      	b.n	8008206 <__gethex+0x132>
 8008226:	f100 0a14 	add.w	sl, r0, #20
 800822a:	2300      	movs	r3, #0
 800822c:	4655      	mov	r5, sl
 800822e:	469b      	mov	fp, r3
 8008230:	45b1      	cmp	r9, r6
 8008232:	d337      	bcc.n	80082a4 <__gethex+0x1d0>
 8008234:	f845 bb04 	str.w	fp, [r5], #4
 8008238:	eba5 050a 	sub.w	r5, r5, sl
 800823c:	10ad      	asrs	r5, r5, #2
 800823e:	6125      	str	r5, [r4, #16]
 8008240:	4658      	mov	r0, fp
 8008242:	f7fe fa1b 	bl	800667c <__hi0bits>
 8008246:	016d      	lsls	r5, r5, #5
 8008248:	f8d8 6000 	ldr.w	r6, [r8]
 800824c:	1a2d      	subs	r5, r5, r0
 800824e:	42b5      	cmp	r5, r6
 8008250:	dd54      	ble.n	80082fc <__gethex+0x228>
 8008252:	1bad      	subs	r5, r5, r6
 8008254:	4629      	mov	r1, r5
 8008256:	4620      	mov	r0, r4
 8008258:	f7fe fda7 	bl	8006daa <__any_on>
 800825c:	4681      	mov	r9, r0
 800825e:	b178      	cbz	r0, 8008280 <__gethex+0x1ac>
 8008260:	1e6b      	subs	r3, r5, #1
 8008262:	1159      	asrs	r1, r3, #5
 8008264:	f003 021f 	and.w	r2, r3, #31
 8008268:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800826c:	f04f 0901 	mov.w	r9, #1
 8008270:	fa09 f202 	lsl.w	r2, r9, r2
 8008274:	420a      	tst	r2, r1
 8008276:	d003      	beq.n	8008280 <__gethex+0x1ac>
 8008278:	454b      	cmp	r3, r9
 800827a:	dc36      	bgt.n	80082ea <__gethex+0x216>
 800827c:	f04f 0902 	mov.w	r9, #2
 8008280:	4629      	mov	r1, r5
 8008282:	4620      	mov	r0, r4
 8008284:	f7ff febe 	bl	8008004 <rshift>
 8008288:	442f      	add	r7, r5
 800828a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800828e:	42bb      	cmp	r3, r7
 8008290:	da42      	bge.n	8008318 <__gethex+0x244>
 8008292:	9801      	ldr	r0, [sp, #4]
 8008294:	4621      	mov	r1, r4
 8008296:	f7fe f93f 	bl	8006518 <_Bfree>
 800829a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800829c:	2300      	movs	r3, #0
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	25a3      	movs	r5, #163	@ 0xa3
 80082a2:	e793      	b.n	80081cc <__gethex+0xf8>
 80082a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80082a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80082aa:	d012      	beq.n	80082d2 <__gethex+0x1fe>
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d104      	bne.n	80082ba <__gethex+0x1e6>
 80082b0:	f845 bb04 	str.w	fp, [r5], #4
 80082b4:	f04f 0b00 	mov.w	fp, #0
 80082b8:	465b      	mov	r3, fp
 80082ba:	7830      	ldrb	r0, [r6, #0]
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	f7ff fef3 	bl	80080a8 <__hexdig_fun>
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	f000 000f 	and.w	r0, r0, #15
 80082c8:	4098      	lsls	r0, r3
 80082ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80082ce:	3304      	adds	r3, #4
 80082d0:	e7ae      	b.n	8008230 <__gethex+0x15c>
 80082d2:	45b1      	cmp	r9, r6
 80082d4:	d8ea      	bhi.n	80082ac <__gethex+0x1d8>
 80082d6:	492b      	ldr	r1, [pc, #172]	@ (8008384 <__gethex+0x2b0>)
 80082d8:	9303      	str	r3, [sp, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	4630      	mov	r0, r6
 80082de:	f7ff fe27 	bl	8007f30 <strncmp>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1e1      	bne.n	80082ac <__gethex+0x1d8>
 80082e8:	e7a2      	b.n	8008230 <__gethex+0x15c>
 80082ea:	1ea9      	subs	r1, r5, #2
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7fe fd5c 	bl	8006daa <__any_on>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0c2      	beq.n	800827c <__gethex+0x1a8>
 80082f6:	f04f 0903 	mov.w	r9, #3
 80082fa:	e7c1      	b.n	8008280 <__gethex+0x1ac>
 80082fc:	da09      	bge.n	8008312 <__gethex+0x23e>
 80082fe:	1b75      	subs	r5, r6, r5
 8008300:	4621      	mov	r1, r4
 8008302:	9801      	ldr	r0, [sp, #4]
 8008304:	462a      	mov	r2, r5
 8008306:	f7fe fb17 	bl	8006938 <__lshift>
 800830a:	1b7f      	subs	r7, r7, r5
 800830c:	4604      	mov	r4, r0
 800830e:	f100 0a14 	add.w	sl, r0, #20
 8008312:	f04f 0900 	mov.w	r9, #0
 8008316:	e7b8      	b.n	800828a <__gethex+0x1b6>
 8008318:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800831c:	42bd      	cmp	r5, r7
 800831e:	dd6f      	ble.n	8008400 <__gethex+0x32c>
 8008320:	1bed      	subs	r5, r5, r7
 8008322:	42ae      	cmp	r6, r5
 8008324:	dc34      	bgt.n	8008390 <__gethex+0x2bc>
 8008326:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d022      	beq.n	8008374 <__gethex+0x2a0>
 800832e:	2b03      	cmp	r3, #3
 8008330:	d024      	beq.n	800837c <__gethex+0x2a8>
 8008332:	2b01      	cmp	r3, #1
 8008334:	d115      	bne.n	8008362 <__gethex+0x28e>
 8008336:	42ae      	cmp	r6, r5
 8008338:	d113      	bne.n	8008362 <__gethex+0x28e>
 800833a:	2e01      	cmp	r6, #1
 800833c:	d10b      	bne.n	8008356 <__gethex+0x282>
 800833e:	9a02      	ldr	r2, [sp, #8]
 8008340:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	2301      	movs	r3, #1
 8008348:	6123      	str	r3, [r4, #16]
 800834a:	f8ca 3000 	str.w	r3, [sl]
 800834e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008350:	2562      	movs	r5, #98	@ 0x62
 8008352:	601c      	str	r4, [r3, #0]
 8008354:	e73a      	b.n	80081cc <__gethex+0xf8>
 8008356:	1e71      	subs	r1, r6, #1
 8008358:	4620      	mov	r0, r4
 800835a:	f7fe fd26 	bl	8006daa <__any_on>
 800835e:	2800      	cmp	r0, #0
 8008360:	d1ed      	bne.n	800833e <__gethex+0x26a>
 8008362:	9801      	ldr	r0, [sp, #4]
 8008364:	4621      	mov	r1, r4
 8008366:	f7fe f8d7 	bl	8006518 <_Bfree>
 800836a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800836c:	2300      	movs	r3, #0
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	2550      	movs	r5, #80	@ 0x50
 8008372:	e72b      	b.n	80081cc <__gethex+0xf8>
 8008374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f3      	bne.n	8008362 <__gethex+0x28e>
 800837a:	e7e0      	b.n	800833e <__gethex+0x26a>
 800837c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1dd      	bne.n	800833e <__gethex+0x26a>
 8008382:	e7ee      	b.n	8008362 <__gethex+0x28e>
 8008384:	08008e27 	.word	0x08008e27
 8008388:	08008dbd 	.word	0x08008dbd
 800838c:	08008e7e 	.word	0x08008e7e
 8008390:	1e6f      	subs	r7, r5, #1
 8008392:	f1b9 0f00 	cmp.w	r9, #0
 8008396:	d130      	bne.n	80083fa <__gethex+0x326>
 8008398:	b127      	cbz	r7, 80083a4 <__gethex+0x2d0>
 800839a:	4639      	mov	r1, r7
 800839c:	4620      	mov	r0, r4
 800839e:	f7fe fd04 	bl	8006daa <__any_on>
 80083a2:	4681      	mov	r9, r0
 80083a4:	117a      	asrs	r2, r7, #5
 80083a6:	2301      	movs	r3, #1
 80083a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80083ac:	f007 071f 	and.w	r7, r7, #31
 80083b0:	40bb      	lsls	r3, r7
 80083b2:	4213      	tst	r3, r2
 80083b4:	4629      	mov	r1, r5
 80083b6:	4620      	mov	r0, r4
 80083b8:	bf18      	it	ne
 80083ba:	f049 0902 	orrne.w	r9, r9, #2
 80083be:	f7ff fe21 	bl	8008004 <rshift>
 80083c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80083c6:	1b76      	subs	r6, r6, r5
 80083c8:	2502      	movs	r5, #2
 80083ca:	f1b9 0f00 	cmp.w	r9, #0
 80083ce:	d047      	beq.n	8008460 <__gethex+0x38c>
 80083d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d015      	beq.n	8008404 <__gethex+0x330>
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d017      	beq.n	800840c <__gethex+0x338>
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d109      	bne.n	80083f4 <__gethex+0x320>
 80083e0:	f019 0f02 	tst.w	r9, #2
 80083e4:	d006      	beq.n	80083f4 <__gethex+0x320>
 80083e6:	f8da 3000 	ldr.w	r3, [sl]
 80083ea:	ea49 0903 	orr.w	r9, r9, r3
 80083ee:	f019 0f01 	tst.w	r9, #1
 80083f2:	d10e      	bne.n	8008412 <__gethex+0x33e>
 80083f4:	f045 0510 	orr.w	r5, r5, #16
 80083f8:	e032      	b.n	8008460 <__gethex+0x38c>
 80083fa:	f04f 0901 	mov.w	r9, #1
 80083fe:	e7d1      	b.n	80083a4 <__gethex+0x2d0>
 8008400:	2501      	movs	r5, #1
 8008402:	e7e2      	b.n	80083ca <__gethex+0x2f6>
 8008404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008406:	f1c3 0301 	rsb	r3, r3, #1
 800840a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800840c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f0      	beq.n	80083f4 <__gethex+0x320>
 8008412:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008416:	f104 0314 	add.w	r3, r4, #20
 800841a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800841e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008422:	f04f 0c00 	mov.w	ip, #0
 8008426:	4618      	mov	r0, r3
 8008428:	f853 2b04 	ldr.w	r2, [r3], #4
 800842c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008430:	d01b      	beq.n	800846a <__gethex+0x396>
 8008432:	3201      	adds	r2, #1
 8008434:	6002      	str	r2, [r0, #0]
 8008436:	2d02      	cmp	r5, #2
 8008438:	f104 0314 	add.w	r3, r4, #20
 800843c:	d13c      	bne.n	80084b8 <__gethex+0x3e4>
 800843e:	f8d8 2000 	ldr.w	r2, [r8]
 8008442:	3a01      	subs	r2, #1
 8008444:	42b2      	cmp	r2, r6
 8008446:	d109      	bne.n	800845c <__gethex+0x388>
 8008448:	1171      	asrs	r1, r6, #5
 800844a:	2201      	movs	r2, #1
 800844c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008450:	f006 061f 	and.w	r6, r6, #31
 8008454:	fa02 f606 	lsl.w	r6, r2, r6
 8008458:	421e      	tst	r6, r3
 800845a:	d13a      	bne.n	80084d2 <__gethex+0x3fe>
 800845c:	f045 0520 	orr.w	r5, r5, #32
 8008460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008462:	601c      	str	r4, [r3, #0]
 8008464:	9b02      	ldr	r3, [sp, #8]
 8008466:	601f      	str	r7, [r3, #0]
 8008468:	e6b0      	b.n	80081cc <__gethex+0xf8>
 800846a:	4299      	cmp	r1, r3
 800846c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008470:	d8d9      	bhi.n	8008426 <__gethex+0x352>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	459b      	cmp	fp, r3
 8008476:	db17      	blt.n	80084a8 <__gethex+0x3d4>
 8008478:	6861      	ldr	r1, [r4, #4]
 800847a:	9801      	ldr	r0, [sp, #4]
 800847c:	3101      	adds	r1, #1
 800847e:	f7fe f80b 	bl	8006498 <_Balloc>
 8008482:	4681      	mov	r9, r0
 8008484:	b918      	cbnz	r0, 800848e <__gethex+0x3ba>
 8008486:	4b1a      	ldr	r3, [pc, #104]	@ (80084f0 <__gethex+0x41c>)
 8008488:	4602      	mov	r2, r0
 800848a:	2184      	movs	r1, #132	@ 0x84
 800848c:	e6c5      	b.n	800821a <__gethex+0x146>
 800848e:	6922      	ldr	r2, [r4, #16]
 8008490:	3202      	adds	r2, #2
 8008492:	f104 010c 	add.w	r1, r4, #12
 8008496:	0092      	lsls	r2, r2, #2
 8008498:	300c      	adds	r0, #12
 800849a:	f7ff fd6b 	bl	8007f74 <memcpy>
 800849e:	4621      	mov	r1, r4
 80084a0:	9801      	ldr	r0, [sp, #4]
 80084a2:	f7fe f839 	bl	8006518 <_Bfree>
 80084a6:	464c      	mov	r4, r9
 80084a8:	6923      	ldr	r3, [r4, #16]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084b0:	6122      	str	r2, [r4, #16]
 80084b2:	2201      	movs	r2, #1
 80084b4:	615a      	str	r2, [r3, #20]
 80084b6:	e7be      	b.n	8008436 <__gethex+0x362>
 80084b8:	6922      	ldr	r2, [r4, #16]
 80084ba:	455a      	cmp	r2, fp
 80084bc:	dd0b      	ble.n	80084d6 <__gethex+0x402>
 80084be:	2101      	movs	r1, #1
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7ff fd9f 	bl	8008004 <rshift>
 80084c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084ca:	3701      	adds	r7, #1
 80084cc:	42bb      	cmp	r3, r7
 80084ce:	f6ff aee0 	blt.w	8008292 <__gethex+0x1be>
 80084d2:	2501      	movs	r5, #1
 80084d4:	e7c2      	b.n	800845c <__gethex+0x388>
 80084d6:	f016 061f 	ands.w	r6, r6, #31
 80084da:	d0fa      	beq.n	80084d2 <__gethex+0x3fe>
 80084dc:	4453      	add	r3, sl
 80084de:	f1c6 0620 	rsb	r6, r6, #32
 80084e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80084e6:	f7fe f8c9 	bl	800667c <__hi0bits>
 80084ea:	42b0      	cmp	r0, r6
 80084ec:	dbe7      	blt.n	80084be <__gethex+0x3ea>
 80084ee:	e7f0      	b.n	80084d2 <__gethex+0x3fe>
 80084f0:	08008dbd 	.word	0x08008dbd

080084f4 <L_shift>:
 80084f4:	f1c2 0208 	rsb	r2, r2, #8
 80084f8:	0092      	lsls	r2, r2, #2
 80084fa:	b570      	push	{r4, r5, r6, lr}
 80084fc:	f1c2 0620 	rsb	r6, r2, #32
 8008500:	6843      	ldr	r3, [r0, #4]
 8008502:	6804      	ldr	r4, [r0, #0]
 8008504:	fa03 f506 	lsl.w	r5, r3, r6
 8008508:	432c      	orrs	r4, r5
 800850a:	40d3      	lsrs	r3, r2
 800850c:	6004      	str	r4, [r0, #0]
 800850e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008512:	4288      	cmp	r0, r1
 8008514:	d3f4      	bcc.n	8008500 <L_shift+0xc>
 8008516:	bd70      	pop	{r4, r5, r6, pc}

08008518 <__match>:
 8008518:	b530      	push	{r4, r5, lr}
 800851a:	6803      	ldr	r3, [r0, #0]
 800851c:	3301      	adds	r3, #1
 800851e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008522:	b914      	cbnz	r4, 800852a <__match+0x12>
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	2001      	movs	r0, #1
 8008528:	bd30      	pop	{r4, r5, pc}
 800852a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008532:	2d19      	cmp	r5, #25
 8008534:	bf98      	it	ls
 8008536:	3220      	addls	r2, #32
 8008538:	42a2      	cmp	r2, r4
 800853a:	d0f0      	beq.n	800851e <__match+0x6>
 800853c:	2000      	movs	r0, #0
 800853e:	e7f3      	b.n	8008528 <__match+0x10>

08008540 <__hexnan>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	680b      	ldr	r3, [r1, #0]
 8008546:	6801      	ldr	r1, [r0, #0]
 8008548:	115e      	asrs	r6, r3, #5
 800854a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800854e:	f013 031f 	ands.w	r3, r3, #31
 8008552:	b087      	sub	sp, #28
 8008554:	bf18      	it	ne
 8008556:	3604      	addne	r6, #4
 8008558:	2500      	movs	r5, #0
 800855a:	1f37      	subs	r7, r6, #4
 800855c:	4682      	mov	sl, r0
 800855e:	4690      	mov	r8, r2
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	f846 5c04 	str.w	r5, [r6, #-4]
 8008566:	46b9      	mov	r9, r7
 8008568:	463c      	mov	r4, r7
 800856a:	9502      	str	r5, [sp, #8]
 800856c:	46ab      	mov	fp, r5
 800856e:	784a      	ldrb	r2, [r1, #1]
 8008570:	1c4b      	adds	r3, r1, #1
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	b342      	cbz	r2, 80085c8 <__hexnan+0x88>
 8008576:	4610      	mov	r0, r2
 8008578:	9105      	str	r1, [sp, #20]
 800857a:	9204      	str	r2, [sp, #16]
 800857c:	f7ff fd94 	bl	80080a8 <__hexdig_fun>
 8008580:	2800      	cmp	r0, #0
 8008582:	d151      	bne.n	8008628 <__hexnan+0xe8>
 8008584:	9a04      	ldr	r2, [sp, #16]
 8008586:	9905      	ldr	r1, [sp, #20]
 8008588:	2a20      	cmp	r2, #32
 800858a:	d818      	bhi.n	80085be <__hexnan+0x7e>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	459b      	cmp	fp, r3
 8008590:	dd13      	ble.n	80085ba <__hexnan+0x7a>
 8008592:	454c      	cmp	r4, r9
 8008594:	d206      	bcs.n	80085a4 <__hexnan+0x64>
 8008596:	2d07      	cmp	r5, #7
 8008598:	dc04      	bgt.n	80085a4 <__hexnan+0x64>
 800859a:	462a      	mov	r2, r5
 800859c:	4649      	mov	r1, r9
 800859e:	4620      	mov	r0, r4
 80085a0:	f7ff ffa8 	bl	80084f4 <L_shift>
 80085a4:	4544      	cmp	r4, r8
 80085a6:	d952      	bls.n	800864e <__hexnan+0x10e>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f1a4 0904 	sub.w	r9, r4, #4
 80085ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80085b2:	f8cd b008 	str.w	fp, [sp, #8]
 80085b6:	464c      	mov	r4, r9
 80085b8:	461d      	mov	r5, r3
 80085ba:	9903      	ldr	r1, [sp, #12]
 80085bc:	e7d7      	b.n	800856e <__hexnan+0x2e>
 80085be:	2a29      	cmp	r2, #41	@ 0x29
 80085c0:	d157      	bne.n	8008672 <__hexnan+0x132>
 80085c2:	3102      	adds	r1, #2
 80085c4:	f8ca 1000 	str.w	r1, [sl]
 80085c8:	f1bb 0f00 	cmp.w	fp, #0
 80085cc:	d051      	beq.n	8008672 <__hexnan+0x132>
 80085ce:	454c      	cmp	r4, r9
 80085d0:	d206      	bcs.n	80085e0 <__hexnan+0xa0>
 80085d2:	2d07      	cmp	r5, #7
 80085d4:	dc04      	bgt.n	80085e0 <__hexnan+0xa0>
 80085d6:	462a      	mov	r2, r5
 80085d8:	4649      	mov	r1, r9
 80085da:	4620      	mov	r0, r4
 80085dc:	f7ff ff8a 	bl	80084f4 <L_shift>
 80085e0:	4544      	cmp	r4, r8
 80085e2:	d936      	bls.n	8008652 <__hexnan+0x112>
 80085e4:	f1a8 0204 	sub.w	r2, r8, #4
 80085e8:	4623      	mov	r3, r4
 80085ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80085ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80085f2:	429f      	cmp	r7, r3
 80085f4:	d2f9      	bcs.n	80085ea <__hexnan+0xaa>
 80085f6:	1b3b      	subs	r3, r7, r4
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	3304      	adds	r3, #4
 80085fe:	3401      	adds	r4, #1
 8008600:	3e03      	subs	r6, #3
 8008602:	42b4      	cmp	r4, r6
 8008604:	bf88      	it	hi
 8008606:	2304      	movhi	r3, #4
 8008608:	4443      	add	r3, r8
 800860a:	2200      	movs	r2, #0
 800860c:	f843 2b04 	str.w	r2, [r3], #4
 8008610:	429f      	cmp	r7, r3
 8008612:	d2fb      	bcs.n	800860c <__hexnan+0xcc>
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	b91b      	cbnz	r3, 8008620 <__hexnan+0xe0>
 8008618:	4547      	cmp	r7, r8
 800861a:	d128      	bne.n	800866e <__hexnan+0x12e>
 800861c:	2301      	movs	r3, #1
 800861e:	603b      	str	r3, [r7, #0]
 8008620:	2005      	movs	r0, #5
 8008622:	b007      	add	sp, #28
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	3501      	adds	r5, #1
 800862a:	2d08      	cmp	r5, #8
 800862c:	f10b 0b01 	add.w	fp, fp, #1
 8008630:	dd06      	ble.n	8008640 <__hexnan+0x100>
 8008632:	4544      	cmp	r4, r8
 8008634:	d9c1      	bls.n	80085ba <__hexnan+0x7a>
 8008636:	2300      	movs	r3, #0
 8008638:	f844 3c04 	str.w	r3, [r4, #-4]
 800863c:	2501      	movs	r5, #1
 800863e:	3c04      	subs	r4, #4
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	f000 000f 	and.w	r0, r0, #15
 8008646:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800864a:	6020      	str	r0, [r4, #0]
 800864c:	e7b5      	b.n	80085ba <__hexnan+0x7a>
 800864e:	2508      	movs	r5, #8
 8008650:	e7b3      	b.n	80085ba <__hexnan+0x7a>
 8008652:	9b01      	ldr	r3, [sp, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d0dd      	beq.n	8008614 <__hexnan+0xd4>
 8008658:	f1c3 0320 	rsb	r3, r3, #32
 800865c:	f04f 32ff 	mov.w	r2, #4294967295
 8008660:	40da      	lsrs	r2, r3
 8008662:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008666:	4013      	ands	r3, r2
 8008668:	f846 3c04 	str.w	r3, [r6, #-4]
 800866c:	e7d2      	b.n	8008614 <__hexnan+0xd4>
 800866e:	3f04      	subs	r7, #4
 8008670:	e7d0      	b.n	8008614 <__hexnan+0xd4>
 8008672:	2004      	movs	r0, #4
 8008674:	e7d5      	b.n	8008622 <__hexnan+0xe2>

08008676 <__ascii_mbtowc>:
 8008676:	b082      	sub	sp, #8
 8008678:	b901      	cbnz	r1, 800867c <__ascii_mbtowc+0x6>
 800867a:	a901      	add	r1, sp, #4
 800867c:	b142      	cbz	r2, 8008690 <__ascii_mbtowc+0x1a>
 800867e:	b14b      	cbz	r3, 8008694 <__ascii_mbtowc+0x1e>
 8008680:	7813      	ldrb	r3, [r2, #0]
 8008682:	600b      	str	r3, [r1, #0]
 8008684:	7812      	ldrb	r2, [r2, #0]
 8008686:	1e10      	subs	r0, r2, #0
 8008688:	bf18      	it	ne
 800868a:	2001      	movne	r0, #1
 800868c:	b002      	add	sp, #8
 800868e:	4770      	bx	lr
 8008690:	4610      	mov	r0, r2
 8008692:	e7fb      	b.n	800868c <__ascii_mbtowc+0x16>
 8008694:	f06f 0001 	mvn.w	r0, #1
 8008698:	e7f8      	b.n	800868c <__ascii_mbtowc+0x16>

0800869a <_realloc_r>:
 800869a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869e:	4607      	mov	r7, r0
 80086a0:	4614      	mov	r4, r2
 80086a2:	460d      	mov	r5, r1
 80086a4:	b921      	cbnz	r1, 80086b0 <_realloc_r+0x16>
 80086a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086aa:	4611      	mov	r1, r2
 80086ac:	f7fd be68 	b.w	8006380 <_malloc_r>
 80086b0:	b92a      	cbnz	r2, 80086be <_realloc_r+0x24>
 80086b2:	f7fd fdf1 	bl	8006298 <_free_r>
 80086b6:	4625      	mov	r5, r4
 80086b8:	4628      	mov	r0, r5
 80086ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086be:	f000 f840 	bl	8008742 <_malloc_usable_size_r>
 80086c2:	4284      	cmp	r4, r0
 80086c4:	4606      	mov	r6, r0
 80086c6:	d802      	bhi.n	80086ce <_realloc_r+0x34>
 80086c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086cc:	d8f4      	bhi.n	80086b8 <_realloc_r+0x1e>
 80086ce:	4621      	mov	r1, r4
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7fd fe55 	bl	8006380 <_malloc_r>
 80086d6:	4680      	mov	r8, r0
 80086d8:	b908      	cbnz	r0, 80086de <_realloc_r+0x44>
 80086da:	4645      	mov	r5, r8
 80086dc:	e7ec      	b.n	80086b8 <_realloc_r+0x1e>
 80086de:	42b4      	cmp	r4, r6
 80086e0:	4622      	mov	r2, r4
 80086e2:	4629      	mov	r1, r5
 80086e4:	bf28      	it	cs
 80086e6:	4632      	movcs	r2, r6
 80086e8:	f7ff fc44 	bl	8007f74 <memcpy>
 80086ec:	4629      	mov	r1, r5
 80086ee:	4638      	mov	r0, r7
 80086f0:	f7fd fdd2 	bl	8006298 <_free_r>
 80086f4:	e7f1      	b.n	80086da <_realloc_r+0x40>

080086f6 <__ascii_wctomb>:
 80086f6:	4603      	mov	r3, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	b141      	cbz	r1, 800870e <__ascii_wctomb+0x18>
 80086fc:	2aff      	cmp	r2, #255	@ 0xff
 80086fe:	d904      	bls.n	800870a <__ascii_wctomb+0x14>
 8008700:	228a      	movs	r2, #138	@ 0x8a
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	4770      	bx	lr
 800870a:	700a      	strb	r2, [r1, #0]
 800870c:	2001      	movs	r0, #1
 800870e:	4770      	bx	lr

08008710 <fiprintf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b503      	push	{r0, r1, lr}
 8008714:	4601      	mov	r1, r0
 8008716:	ab03      	add	r3, sp, #12
 8008718:	4805      	ldr	r0, [pc, #20]	@ (8008730 <fiprintf+0x20>)
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f000 f83f 	bl	80087a4 <_vfiprintf_r>
 8008726:	b002      	add	sp, #8
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	20000018 	.word	0x20000018

08008734 <abort>:
 8008734:	b508      	push	{r3, lr}
 8008736:	2006      	movs	r0, #6
 8008738:	f000 fa08 	bl	8008b4c <raise>
 800873c:	2001      	movs	r0, #1
 800873e:	f7f8 ff13 	bl	8001568 <_exit>

08008742 <_malloc_usable_size_r>:
 8008742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008746:	1f18      	subs	r0, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	bfbc      	itt	lt
 800874c:	580b      	ldrlt	r3, [r1, r0]
 800874e:	18c0      	addlt	r0, r0, r3
 8008750:	4770      	bx	lr

08008752 <__sfputc_r>:
 8008752:	6893      	ldr	r3, [r2, #8]
 8008754:	3b01      	subs	r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	b410      	push	{r4}
 800875a:	6093      	str	r3, [r2, #8]
 800875c:	da08      	bge.n	8008770 <__sfputc_r+0x1e>
 800875e:	6994      	ldr	r4, [r2, #24]
 8008760:	42a3      	cmp	r3, r4
 8008762:	db01      	blt.n	8008768 <__sfputc_r+0x16>
 8008764:	290a      	cmp	r1, #10
 8008766:	d103      	bne.n	8008770 <__sfputc_r+0x1e>
 8008768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876c:	f000 b932 	b.w	80089d4 <__swbuf_r>
 8008770:	6813      	ldr	r3, [r2, #0]
 8008772:	1c58      	adds	r0, r3, #1
 8008774:	6010      	str	r0, [r2, #0]
 8008776:	7019      	strb	r1, [r3, #0]
 8008778:	4608      	mov	r0, r1
 800877a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877e:	4770      	bx	lr

08008780 <__sfputs_r>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	4606      	mov	r6, r0
 8008784:	460f      	mov	r7, r1
 8008786:	4614      	mov	r4, r2
 8008788:	18d5      	adds	r5, r2, r3
 800878a:	42ac      	cmp	r4, r5
 800878c:	d101      	bne.n	8008792 <__sfputs_r+0x12>
 800878e:	2000      	movs	r0, #0
 8008790:	e007      	b.n	80087a2 <__sfputs_r+0x22>
 8008792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008796:	463a      	mov	r2, r7
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ffda 	bl	8008752 <__sfputc_r>
 800879e:	1c43      	adds	r3, r0, #1
 80087a0:	d1f3      	bne.n	800878a <__sfputs_r+0xa>
 80087a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087a4 <_vfiprintf_r>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	460d      	mov	r5, r1
 80087aa:	b09d      	sub	sp, #116	@ 0x74
 80087ac:	4614      	mov	r4, r2
 80087ae:	4698      	mov	r8, r3
 80087b0:	4606      	mov	r6, r0
 80087b2:	b118      	cbz	r0, 80087bc <_vfiprintf_r+0x18>
 80087b4:	6a03      	ldr	r3, [r0, #32]
 80087b6:	b90b      	cbnz	r3, 80087bc <_vfiprintf_r+0x18>
 80087b8:	f7fc fdf2 	bl	80053a0 <__sinit>
 80087bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	d405      	bmi.n	80087ce <_vfiprintf_r+0x2a>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	059a      	lsls	r2, r3, #22
 80087c6:	d402      	bmi.n	80087ce <_vfiprintf_r+0x2a>
 80087c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ca:	f7fc ff02 	bl	80055d2 <__retarget_lock_acquire_recursive>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	071b      	lsls	r3, r3, #28
 80087d2:	d501      	bpl.n	80087d8 <_vfiprintf_r+0x34>
 80087d4:	692b      	ldr	r3, [r5, #16]
 80087d6:	b99b      	cbnz	r3, 8008800 <_vfiprintf_r+0x5c>
 80087d8:	4629      	mov	r1, r5
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 f938 	bl	8008a50 <__swsetup_r>
 80087e0:	b170      	cbz	r0, 8008800 <_vfiprintf_r+0x5c>
 80087e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087e4:	07dc      	lsls	r4, r3, #31
 80087e6:	d504      	bpl.n	80087f2 <_vfiprintf_r+0x4e>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	b01d      	add	sp, #116	@ 0x74
 80087ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f2:	89ab      	ldrh	r3, [r5, #12]
 80087f4:	0598      	lsls	r0, r3, #22
 80087f6:	d4f7      	bmi.n	80087e8 <_vfiprintf_r+0x44>
 80087f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087fa:	f7fc feeb 	bl	80055d4 <__retarget_lock_release_recursive>
 80087fe:	e7f3      	b.n	80087e8 <_vfiprintf_r+0x44>
 8008800:	2300      	movs	r3, #0
 8008802:	9309      	str	r3, [sp, #36]	@ 0x24
 8008804:	2320      	movs	r3, #32
 8008806:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800880a:	f8cd 800c 	str.w	r8, [sp, #12]
 800880e:	2330      	movs	r3, #48	@ 0x30
 8008810:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089c0 <_vfiprintf_r+0x21c>
 8008814:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008818:	f04f 0901 	mov.w	r9, #1
 800881c:	4623      	mov	r3, r4
 800881e:	469a      	mov	sl, r3
 8008820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008824:	b10a      	cbz	r2, 800882a <_vfiprintf_r+0x86>
 8008826:	2a25      	cmp	r2, #37	@ 0x25
 8008828:	d1f9      	bne.n	800881e <_vfiprintf_r+0x7a>
 800882a:	ebba 0b04 	subs.w	fp, sl, r4
 800882e:	d00b      	beq.n	8008848 <_vfiprintf_r+0xa4>
 8008830:	465b      	mov	r3, fp
 8008832:	4622      	mov	r2, r4
 8008834:	4629      	mov	r1, r5
 8008836:	4630      	mov	r0, r6
 8008838:	f7ff ffa2 	bl	8008780 <__sfputs_r>
 800883c:	3001      	adds	r0, #1
 800883e:	f000 80a7 	beq.w	8008990 <_vfiprintf_r+0x1ec>
 8008842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008844:	445a      	add	r2, fp
 8008846:	9209      	str	r2, [sp, #36]	@ 0x24
 8008848:	f89a 3000 	ldrb.w	r3, [sl]
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 809f 	beq.w	8008990 <_vfiprintf_r+0x1ec>
 8008852:	2300      	movs	r3, #0
 8008854:	f04f 32ff 	mov.w	r2, #4294967295
 8008858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885c:	f10a 0a01 	add.w	sl, sl, #1
 8008860:	9304      	str	r3, [sp, #16]
 8008862:	9307      	str	r3, [sp, #28]
 8008864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008868:	931a      	str	r3, [sp, #104]	@ 0x68
 800886a:	4654      	mov	r4, sl
 800886c:	2205      	movs	r2, #5
 800886e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008872:	4853      	ldr	r0, [pc, #332]	@ (80089c0 <_vfiprintf_r+0x21c>)
 8008874:	f7f7 fcb4 	bl	80001e0 <memchr>
 8008878:	9a04      	ldr	r2, [sp, #16]
 800887a:	b9d8      	cbnz	r0, 80088b4 <_vfiprintf_r+0x110>
 800887c:	06d1      	lsls	r1, r2, #27
 800887e:	bf44      	itt	mi
 8008880:	2320      	movmi	r3, #32
 8008882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008886:	0713      	lsls	r3, r2, #28
 8008888:	bf44      	itt	mi
 800888a:	232b      	movmi	r3, #43	@ 0x2b
 800888c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008890:	f89a 3000 	ldrb.w	r3, [sl]
 8008894:	2b2a      	cmp	r3, #42	@ 0x2a
 8008896:	d015      	beq.n	80088c4 <_vfiprintf_r+0x120>
 8008898:	9a07      	ldr	r2, [sp, #28]
 800889a:	4654      	mov	r4, sl
 800889c:	2000      	movs	r0, #0
 800889e:	f04f 0c0a 	mov.w	ip, #10
 80088a2:	4621      	mov	r1, r4
 80088a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088a8:	3b30      	subs	r3, #48	@ 0x30
 80088aa:	2b09      	cmp	r3, #9
 80088ac:	d94b      	bls.n	8008946 <_vfiprintf_r+0x1a2>
 80088ae:	b1b0      	cbz	r0, 80088de <_vfiprintf_r+0x13a>
 80088b0:	9207      	str	r2, [sp, #28]
 80088b2:	e014      	b.n	80088de <_vfiprintf_r+0x13a>
 80088b4:	eba0 0308 	sub.w	r3, r0, r8
 80088b8:	fa09 f303 	lsl.w	r3, r9, r3
 80088bc:	4313      	orrs	r3, r2
 80088be:	9304      	str	r3, [sp, #16]
 80088c0:	46a2      	mov	sl, r4
 80088c2:	e7d2      	b.n	800886a <_vfiprintf_r+0xc6>
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1d19      	adds	r1, r3, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	9103      	str	r1, [sp, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	bfbb      	ittet	lt
 80088d0:	425b      	neglt	r3, r3
 80088d2:	f042 0202 	orrlt.w	r2, r2, #2
 80088d6:	9307      	strge	r3, [sp, #28]
 80088d8:	9307      	strlt	r3, [sp, #28]
 80088da:	bfb8      	it	lt
 80088dc:	9204      	strlt	r2, [sp, #16]
 80088de:	7823      	ldrb	r3, [r4, #0]
 80088e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e2:	d10a      	bne.n	80088fa <_vfiprintf_r+0x156>
 80088e4:	7863      	ldrb	r3, [r4, #1]
 80088e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088e8:	d132      	bne.n	8008950 <_vfiprintf_r+0x1ac>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	1d1a      	adds	r2, r3, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	9203      	str	r2, [sp, #12]
 80088f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088f6:	3402      	adds	r4, #2
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089d0 <_vfiprintf_r+0x22c>
 80088fe:	7821      	ldrb	r1, [r4, #0]
 8008900:	2203      	movs	r2, #3
 8008902:	4650      	mov	r0, sl
 8008904:	f7f7 fc6c 	bl	80001e0 <memchr>
 8008908:	b138      	cbz	r0, 800891a <_vfiprintf_r+0x176>
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	eba0 000a 	sub.w	r0, r0, sl
 8008910:	2240      	movs	r2, #64	@ 0x40
 8008912:	4082      	lsls	r2, r0
 8008914:	4313      	orrs	r3, r2
 8008916:	3401      	adds	r4, #1
 8008918:	9304      	str	r3, [sp, #16]
 800891a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891e:	4829      	ldr	r0, [pc, #164]	@ (80089c4 <_vfiprintf_r+0x220>)
 8008920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008924:	2206      	movs	r2, #6
 8008926:	f7f7 fc5b 	bl	80001e0 <memchr>
 800892a:	2800      	cmp	r0, #0
 800892c:	d03f      	beq.n	80089ae <_vfiprintf_r+0x20a>
 800892e:	4b26      	ldr	r3, [pc, #152]	@ (80089c8 <_vfiprintf_r+0x224>)
 8008930:	bb1b      	cbnz	r3, 800897a <_vfiprintf_r+0x1d6>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	3307      	adds	r3, #7
 8008936:	f023 0307 	bic.w	r3, r3, #7
 800893a:	3308      	adds	r3, #8
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008940:	443b      	add	r3, r7
 8008942:	9309      	str	r3, [sp, #36]	@ 0x24
 8008944:	e76a      	b.n	800881c <_vfiprintf_r+0x78>
 8008946:	fb0c 3202 	mla	r2, ip, r2, r3
 800894a:	460c      	mov	r4, r1
 800894c:	2001      	movs	r0, #1
 800894e:	e7a8      	b.n	80088a2 <_vfiprintf_r+0xfe>
 8008950:	2300      	movs	r3, #0
 8008952:	3401      	adds	r4, #1
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	4619      	mov	r1, r3
 8008958:	f04f 0c0a 	mov.w	ip, #10
 800895c:	4620      	mov	r0, r4
 800895e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008962:	3a30      	subs	r2, #48	@ 0x30
 8008964:	2a09      	cmp	r2, #9
 8008966:	d903      	bls.n	8008970 <_vfiprintf_r+0x1cc>
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0c6      	beq.n	80088fa <_vfiprintf_r+0x156>
 800896c:	9105      	str	r1, [sp, #20]
 800896e:	e7c4      	b.n	80088fa <_vfiprintf_r+0x156>
 8008970:	fb0c 2101 	mla	r1, ip, r1, r2
 8008974:	4604      	mov	r4, r0
 8008976:	2301      	movs	r3, #1
 8008978:	e7f0      	b.n	800895c <_vfiprintf_r+0x1b8>
 800897a:	ab03      	add	r3, sp, #12
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	462a      	mov	r2, r5
 8008980:	4b12      	ldr	r3, [pc, #72]	@ (80089cc <_vfiprintf_r+0x228>)
 8008982:	a904      	add	r1, sp, #16
 8008984:	4630      	mov	r0, r6
 8008986:	f7fb febb 	bl	8004700 <_printf_float>
 800898a:	4607      	mov	r7, r0
 800898c:	1c78      	adds	r0, r7, #1
 800898e:	d1d6      	bne.n	800893e <_vfiprintf_r+0x19a>
 8008990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008992:	07d9      	lsls	r1, r3, #31
 8008994:	d405      	bmi.n	80089a2 <_vfiprintf_r+0x1fe>
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	059a      	lsls	r2, r3, #22
 800899a:	d402      	bmi.n	80089a2 <_vfiprintf_r+0x1fe>
 800899c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800899e:	f7fc fe19 	bl	80055d4 <__retarget_lock_release_recursive>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	065b      	lsls	r3, r3, #25
 80089a6:	f53f af1f 	bmi.w	80087e8 <_vfiprintf_r+0x44>
 80089aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089ac:	e71e      	b.n	80087ec <_vfiprintf_r+0x48>
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4b05      	ldr	r3, [pc, #20]	@ (80089cc <_vfiprintf_r+0x228>)
 80089b6:	a904      	add	r1, sp, #16
 80089b8:	4630      	mov	r0, r6
 80089ba:	f7fc f939 	bl	8004c30 <_printf_i>
 80089be:	e7e4      	b.n	800898a <_vfiprintf_r+0x1e6>
 80089c0:	08008e29 	.word	0x08008e29
 80089c4:	08008e33 	.word	0x08008e33
 80089c8:	08004701 	.word	0x08004701
 80089cc:	08008781 	.word	0x08008781
 80089d0:	08008e2f 	.word	0x08008e2f

080089d4 <__swbuf_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	460e      	mov	r6, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	4605      	mov	r5, r0
 80089dc:	b118      	cbz	r0, 80089e6 <__swbuf_r+0x12>
 80089de:	6a03      	ldr	r3, [r0, #32]
 80089e0:	b90b      	cbnz	r3, 80089e6 <__swbuf_r+0x12>
 80089e2:	f7fc fcdd 	bl	80053a0 <__sinit>
 80089e6:	69a3      	ldr	r3, [r4, #24]
 80089e8:	60a3      	str	r3, [r4, #8]
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	071a      	lsls	r2, r3, #28
 80089ee:	d501      	bpl.n	80089f4 <__swbuf_r+0x20>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	b943      	cbnz	r3, 8008a06 <__swbuf_r+0x32>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f82a 	bl	8008a50 <__swsetup_r>
 80089fc:	b118      	cbz	r0, 8008a06 <__swbuf_r+0x32>
 80089fe:	f04f 37ff 	mov.w	r7, #4294967295
 8008a02:	4638      	mov	r0, r7
 8008a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	6922      	ldr	r2, [r4, #16]
 8008a0a:	1a98      	subs	r0, r3, r2
 8008a0c:	6963      	ldr	r3, [r4, #20]
 8008a0e:	b2f6      	uxtb	r6, r6
 8008a10:	4283      	cmp	r3, r0
 8008a12:	4637      	mov	r7, r6
 8008a14:	dc05      	bgt.n	8008a22 <__swbuf_r+0x4e>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7ff fa47 	bl	8007eac <_fflush_r>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d1ed      	bne.n	80089fe <__swbuf_r+0x2a>
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	3b01      	subs	r3, #1
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	701e      	strb	r6, [r3, #0]
 8008a30:	6962      	ldr	r2, [r4, #20]
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d004      	beq.n	8008a42 <__swbuf_r+0x6e>
 8008a38:	89a3      	ldrh	r3, [r4, #12]
 8008a3a:	07db      	lsls	r3, r3, #31
 8008a3c:	d5e1      	bpl.n	8008a02 <__swbuf_r+0x2e>
 8008a3e:	2e0a      	cmp	r6, #10
 8008a40:	d1df      	bne.n	8008a02 <__swbuf_r+0x2e>
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f7ff fa31 	bl	8007eac <_fflush_r>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0d9      	beq.n	8008a02 <__swbuf_r+0x2e>
 8008a4e:	e7d6      	b.n	80089fe <__swbuf_r+0x2a>

08008a50 <__swsetup_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4b29      	ldr	r3, [pc, #164]	@ (8008af8 <__swsetup_r+0xa8>)
 8008a54:	4605      	mov	r5, r0
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	460c      	mov	r4, r1
 8008a5a:	b118      	cbz	r0, 8008a64 <__swsetup_r+0x14>
 8008a5c:	6a03      	ldr	r3, [r0, #32]
 8008a5e:	b90b      	cbnz	r3, 8008a64 <__swsetup_r+0x14>
 8008a60:	f7fc fc9e 	bl	80053a0 <__sinit>
 8008a64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a68:	0719      	lsls	r1, r3, #28
 8008a6a:	d422      	bmi.n	8008ab2 <__swsetup_r+0x62>
 8008a6c:	06da      	lsls	r2, r3, #27
 8008a6e:	d407      	bmi.n	8008a80 <__swsetup_r+0x30>
 8008a70:	2209      	movs	r2, #9
 8008a72:	602a      	str	r2, [r5, #0]
 8008a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a78:	81a3      	strh	r3, [r4, #12]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	e033      	b.n	8008ae8 <__swsetup_r+0x98>
 8008a80:	0758      	lsls	r0, r3, #29
 8008a82:	d512      	bpl.n	8008aaa <__swsetup_r+0x5a>
 8008a84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a86:	b141      	cbz	r1, 8008a9a <__swsetup_r+0x4a>
 8008a88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	d002      	beq.n	8008a96 <__swsetup_r+0x46>
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7fd fc01 	bl	8006298 <_free_r>
 8008a96:	2300      	movs	r3, #0
 8008a98:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008aa0:	81a3      	strh	r3, [r4, #12]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f043 0308 	orr.w	r3, r3, #8
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	6923      	ldr	r3, [r4, #16]
 8008ab4:	b94b      	cbnz	r3, 8008aca <__swsetup_r+0x7a>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac0:	d003      	beq.n	8008aca <__swsetup_r+0x7a>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 f883 	bl	8008bd0 <__smakebuf_r>
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	f013 0201 	ands.w	r2, r3, #1
 8008ad2:	d00a      	beq.n	8008aea <__swsetup_r+0x9a>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60a2      	str	r2, [r4, #8]
 8008ad8:	6962      	ldr	r2, [r4, #20]
 8008ada:	4252      	negs	r2, r2
 8008adc:	61a2      	str	r2, [r4, #24]
 8008ade:	6922      	ldr	r2, [r4, #16]
 8008ae0:	b942      	cbnz	r2, 8008af4 <__swsetup_r+0xa4>
 8008ae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ae6:	d1c5      	bne.n	8008a74 <__swsetup_r+0x24>
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	0799      	lsls	r1, r3, #30
 8008aec:	bf58      	it	pl
 8008aee:	6962      	ldrpl	r2, [r4, #20]
 8008af0:	60a2      	str	r2, [r4, #8]
 8008af2:	e7f4      	b.n	8008ade <__swsetup_r+0x8e>
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7f7      	b.n	8008ae8 <__swsetup_r+0x98>
 8008af8:	20000018 	.word	0x20000018

08008afc <_raise_r>:
 8008afc:	291f      	cmp	r1, #31
 8008afe:	b538      	push	{r3, r4, r5, lr}
 8008b00:	4605      	mov	r5, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	d904      	bls.n	8008b10 <_raise_r+0x14>
 8008b06:	2316      	movs	r3, #22
 8008b08:	6003      	str	r3, [r0, #0]
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}
 8008b10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b12:	b112      	cbz	r2, 8008b1a <_raise_r+0x1e>
 8008b14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b18:	b94b      	cbnz	r3, 8008b2e <_raise_r+0x32>
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f830 	bl	8008b80 <_getpid_r>
 8008b20:	4622      	mov	r2, r4
 8008b22:	4601      	mov	r1, r0
 8008b24:	4628      	mov	r0, r5
 8008b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b2a:	f000 b817 	b.w	8008b5c <_kill_r>
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d00a      	beq.n	8008b48 <_raise_r+0x4c>
 8008b32:	1c59      	adds	r1, r3, #1
 8008b34:	d103      	bne.n	8008b3e <_raise_r+0x42>
 8008b36:	2316      	movs	r3, #22
 8008b38:	6003      	str	r3, [r0, #0]
 8008b3a:	2001      	movs	r0, #1
 8008b3c:	e7e7      	b.n	8008b0e <_raise_r+0x12>
 8008b3e:	2100      	movs	r1, #0
 8008b40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008b44:	4620      	mov	r0, r4
 8008b46:	4798      	blx	r3
 8008b48:	2000      	movs	r0, #0
 8008b4a:	e7e0      	b.n	8008b0e <_raise_r+0x12>

08008b4c <raise>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	@ (8008b58 <raise+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f7ff bfd3 	b.w	8008afc <_raise_r>
 8008b56:	bf00      	nop
 8008b58:	20000018 	.word	0x20000018

08008b5c <_kill_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	@ (8008b7c <_kill_r+0x20>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	4611      	mov	r1, r2
 8008b68:	602b      	str	r3, [r5, #0]
 8008b6a:	f7f8 fced 	bl	8001548 <_kill>
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	d102      	bne.n	8008b78 <_kill_r+0x1c>
 8008b72:	682b      	ldr	r3, [r5, #0]
 8008b74:	b103      	cbz	r3, 8008b78 <_kill_r+0x1c>
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	bd38      	pop	{r3, r4, r5, pc}
 8008b7a:	bf00      	nop
 8008b7c:	2000040c 	.word	0x2000040c

08008b80 <_getpid_r>:
 8008b80:	f7f8 bcda 	b.w	8001538 <_getpid>

08008b84 <__swhatbuf_r>:
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	460c      	mov	r4, r1
 8008b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	b096      	sub	sp, #88	@ 0x58
 8008b90:	4615      	mov	r5, r2
 8008b92:	461e      	mov	r6, r3
 8008b94:	da0d      	bge.n	8008bb2 <__swhatbuf_r+0x2e>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b9c:	f04f 0100 	mov.w	r1, #0
 8008ba0:	bf14      	ite	ne
 8008ba2:	2340      	movne	r3, #64	@ 0x40
 8008ba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ba8:	2000      	movs	r0, #0
 8008baa:	6031      	str	r1, [r6, #0]
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	b016      	add	sp, #88	@ 0x58
 8008bb0:	bd70      	pop	{r4, r5, r6, pc}
 8008bb2:	466a      	mov	r2, sp
 8008bb4:	f000 f848 	bl	8008c48 <_fstat_r>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	dbec      	blt.n	8008b96 <__swhatbuf_r+0x12>
 8008bbc:	9901      	ldr	r1, [sp, #4]
 8008bbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bc6:	4259      	negs	r1, r3
 8008bc8:	4159      	adcs	r1, r3
 8008bca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bce:	e7eb      	b.n	8008ba8 <__swhatbuf_r+0x24>

08008bd0 <__smakebuf_r>:
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd4:	079d      	lsls	r5, r3, #30
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d507      	bpl.n	8008bec <__smakebuf_r+0x1c>
 8008bdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	2301      	movs	r3, #1
 8008be6:	6163      	str	r3, [r4, #20]
 8008be8:	b003      	add	sp, #12
 8008bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bec:	ab01      	add	r3, sp, #4
 8008bee:	466a      	mov	r2, sp
 8008bf0:	f7ff ffc8 	bl	8008b84 <__swhatbuf_r>
 8008bf4:	9f00      	ldr	r7, [sp, #0]
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7fd fbc0 	bl	8006380 <_malloc_r>
 8008c00:	b948      	cbnz	r0, 8008c16 <__smakebuf_r+0x46>
 8008c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c06:	059a      	lsls	r2, r3, #22
 8008c08:	d4ee      	bmi.n	8008be8 <__smakebuf_r+0x18>
 8008c0a:	f023 0303 	bic.w	r3, r3, #3
 8008c0e:	f043 0302 	orr.w	r3, r3, #2
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	e7e2      	b.n	8008bdc <__smakebuf_r+0xc>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	6020      	str	r0, [r4, #0]
 8008c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c26:	b15b      	cbz	r3, 8008c40 <__smakebuf_r+0x70>
 8008c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f81d 	bl	8008c6c <_isatty_r>
 8008c32:	b128      	cbz	r0, 8008c40 <__smakebuf_r+0x70>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f023 0303 	bic.w	r3, r3, #3
 8008c3a:	f043 0301 	orr.w	r3, r3, #1
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	431d      	orrs	r5, r3
 8008c44:	81a5      	strh	r5, [r4, #12]
 8008c46:	e7cf      	b.n	8008be8 <__smakebuf_r+0x18>

08008c48 <_fstat_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	@ (8008c68 <_fstat_r+0x20>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f7f8 fcd7 	bl	8001608 <_fstat>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d102      	bne.n	8008c64 <_fstat_r+0x1c>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	b103      	cbz	r3, 8008c64 <_fstat_r+0x1c>
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	bf00      	nop
 8008c68:	2000040c 	.word	0x2000040c

08008c6c <_isatty_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d06      	ldr	r5, [pc, #24]	@ (8008c88 <_isatty_r+0x1c>)
 8008c70:	2300      	movs	r3, #0
 8008c72:	4604      	mov	r4, r0
 8008c74:	4608      	mov	r0, r1
 8008c76:	602b      	str	r3, [r5, #0]
 8008c78:	f7f8 fcd6 	bl	8001628 <_isatty>
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	d102      	bne.n	8008c86 <_isatty_r+0x1a>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	b103      	cbz	r3, 8008c86 <_isatty_r+0x1a>
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	2000040c 	.word	0x2000040c

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr
