
lab03task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003520  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036b4  080036b4  000046b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ec  080036ec  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080036ec  080036ec  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080036ec  080036ec  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ec  080036ec  000046ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036f0  080036f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080036f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          000000f8  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000108  20000108  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de87  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1e  00000000  00000000  00012ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  000149e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000972  00000000  00000000  000155e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd71  00000000  00000000  00015f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f00f  00000000  00000000  00035ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6744  00000000  00000000  00044cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b41e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000328c  00000000  00000000  0010b464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a5  00000000  00000000  0010e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800369c 	.word	0x0800369c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800369c 	.word	0x0800369c

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fb12 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80e 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8d0 	bl	8000384 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f89e 	bl	8000324 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80001e8:	f000 f866 	bl	80002b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80001ec:	4802      	ldr	r0, [pc, #8]	@ (80001f8 <main+0x24>)
 80001ee:	f002 fafd 	bl	80027ec <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	bf00      	nop
 80001f4:	e7fd      	b.n	80001f2 <main+0x1e>
 80001f6:	bf00      	nop
 80001f8:	2000002c 	.word	0x2000002c

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b0a6      	sub	sp, #152	@ 0x98
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f003 fa19 	bl	8003642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2258      	movs	r2, #88	@ 0x58
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f003 fa0b 	bl	8003642 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022c:	2302      	movs	r3, #2
 800022e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000230:	2301      	movs	r3, #1
 8000232:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000234:	2310      	movs	r3, #16
 8000236:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000244:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000248:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800024c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fe1c 	bl	8000e98 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f9b5 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fe2a 	bl	8001ee0 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000292:	f000 f99f 	bl	80005d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000296:	2302      	movs	r3, #2
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f002 f82f 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002ac:	f000 f992 	bl	80005d4 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3798      	adds	r7, #152	@ 0x98
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <MX_TIM6_Init+0x64>)
 80002ca:	4a15      	ldr	r2, [pc, #84]	@ (8000320 <MX_TIM6_Init+0x68>)
 80002cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 80002ce:	4b13      	ldr	r3, [pc, #76]	@ (800031c <MX_TIM6_Init+0x64>)
 80002d0:	2209      	movs	r2, #9
 80002d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_TIM6_Init+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_TIM6_Init+0x64>)
 80002dc:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80002e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_TIM6_Init+0x64>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80002e8:	480c      	ldr	r0, [pc, #48]	@ (800031c <MX_TIM6_Init+0x64>)
 80002ea:	f002 fa27 	bl	800273c <HAL_TIM_Base_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80002f4:	f000 f96e 	bl	80005d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2300      	movs	r3, #0
 80002fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4619      	mov	r1, r3
 8000304:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_TIM6_Init+0x64>)
 8000306:	f002 fcb5 	bl	8002c74 <HAL_TIMEx_MasterConfigSynchronization>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000310:	f000 f960 	bl	80005d4 <Error_Handler>
  /* USER CODE BEGIN TIM6_Init 2 */
//  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
//  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE END TIM6_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	3710      	adds	r7, #16
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000002c 	.word	0x2000002c
 8000320:	40001000 	.word	0x40001000

08000324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000328:	4b14      	ldr	r3, [pc, #80]	@ (800037c <MX_USART2_UART_Init+0x58>)
 800032a:	4a15      	ldr	r2, [pc, #84]	@ (8000380 <MX_USART2_UART_Init+0x5c>)
 800032c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800032e:	4b13      	ldr	r3, [pc, #76]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000330:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b11      	ldr	r3, [pc, #68]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <MX_USART2_UART_Init+0x58>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b09      	ldr	r3, [pc, #36]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <MX_USART2_UART_Init+0x58>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000360:	4b06      	ldr	r3, [pc, #24]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	@ (800037c <MX_USART2_UART_Init+0x58>)
 8000368:	f002 fd2e 	bl	8002dc8 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000372:	f000 f92f 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000078 	.word	0x20000078
 8000380:	40004400 	.word	0x40004400

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b08a      	sub	sp, #40	@ 0x28
 8000388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039a:	4b4e      	ldr	r3, [pc, #312]	@ (80004d4 <MX_GPIO_Init+0x150>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a4d      	ldr	r2, [pc, #308]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b4b      	ldr	r3, [pc, #300]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003ae:	613b      	str	r3, [r7, #16]
 80003b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003b2:	4b48      	ldr	r3, [pc, #288]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a47      	ldr	r2, [pc, #284]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b45      	ldr	r3, [pc, #276]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b42      	ldr	r3, [pc, #264]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a41      	ldr	r2, [pc, #260]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b3f      	ldr	r3, [pc, #252]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b3c      	ldr	r3, [pc, #240]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a3b      	ldr	r2, [pc, #236]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b39      	ldr	r3, [pc, #228]	@ (80004d4 <MX_GPIO_Init+0x150>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2101      	movs	r1, #1
 80003fe:	4836      	ldr	r0, [pc, #216]	@ (80004d8 <MX_GPIO_Init+0x154>)
 8000400:	f000 fd00 	bl	8000e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2120      	movs	r1, #32
 8000408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040c:	f000 fcfa 	bl	8000e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_Pin|SFT_SER_Pin|LED_D4_Pin|LED_D2_Pin
 8000410:	2200      	movs	r2, #0
 8000412:	f248 41b8 	movw	r1, #33976	@ 0x84b8
 8000416:	4831      	ldr	r0, [pc, #196]	@ (80004dc <MX_GPIO_Init+0x158>)
 8000418:	f000 fcf4 	bl	8000e04 <HAL_GPIO_WritePin>
                          |LED_D3_Pin|SFT_RCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800041c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000422:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	4619      	mov	r1, r3
 8000432:	4829      	ldr	r0, [pc, #164]	@ (80004d8 <MX_GPIO_Init+0x154>)
 8000434:	f000 fb5c 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SFT_SRCLK_Pin */
  GPIO_InitStruct.Pin = SFT_SRCLK_Pin;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2300      	movs	r3, #0
 8000446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SFT_SRCLK_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0314 	add.w	r3, r7, #20
 800044c:	4619      	mov	r1, r3
 800044e:	4822      	ldr	r0, [pc, #136]	@ (80004d8 <MX_GPIO_Init+0x154>)
 8000450:	f000 fb4e 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000454:	2312      	movs	r3, #18
 8000456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000458:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	4619      	mov	r1, r3
 8000468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800046c:	f000 fb40 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000470:	2320      	movs	r3, #32
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048a:	f000 fb31 	bl	8000af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin SFT_SER_Pin LED_D4_Pin LED_D2_Pin
                           LED_D3_Pin SFT_RCLK_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|SFT_SER_Pin|LED_D4_Pin|LED_D2_Pin
 800048e:	f248 43b8 	movw	r3, #33976	@ 0x84b8
 8000492:	617b      	str	r3, [r7, #20]
                          |LED_D3_Pin|SFT_RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	480d      	ldr	r0, [pc, #52]	@ (80004dc <MX_GPIO_Init+0x158>)
 80004a8:	f000 fb22 	bl	8000af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	2007      	movs	r0, #7
 80004b2:	f000 fae6 	bl	8000a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004b6:	2007      	movs	r0, #7
 80004b8:	f000 faff 	bl	8000aba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	200a      	movs	r0, #10
 80004c2:	f000 fade 	bl	8000a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80004c6:	200a      	movs	r0, #10
 80004c8:	f000 faf7 	bl	8000aba <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004cc:	bf00      	nop
 80004ce:	3728      	adds	r7, #40	@ 0x28
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40021000 	.word	0x40021000
 80004d8:	48000800 	.word	0x48000800
 80004dc:	48000400 	.word	0x48000400

080004e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SW1_Pin) {
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d107      	bne.n	8000500 <HAL_GPIO_EXTI_Callback+0x20>
		period /= 2;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	085b      	lsrs	r3, r3, #1
 80004f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x40>)
 80004f8:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 80004fa:	480a      	ldr	r0, [pc, #40]	@ (8000524 <HAL_GPIO_EXTI_Callback+0x44>)
 80004fc:	f002 f976 	bl	80027ec <HAL_TIM_Base_Start_IT>
	}

	if (GPIO_Pin == SW2_Pin) {
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	2b10      	cmp	r3, #16
 8000504:	d107      	bne.n	8000516 <HAL_GPIO_EXTI_Callback+0x36>
		period *= 2;
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x40>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x40>)
 800050e:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 8000510:	4804      	ldr	r0, [pc, #16]	@ (8000524 <HAL_GPIO_EXTI_Callback+0x44>)
 8000512:	f002 f96b 	bl	80027ec <HAL_TIM_Base_Start_IT>
	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000
 8000524:	2000002c 	.word	0x2000002c

08000528 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	if (counter < period) {
 8000530:	4b24      	ldr	r3, [pc, #144]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d205      	bcs.n	8000548 <HAL_TIM_PeriodElapsedCallback+0x20>
		counter++;
 800053c:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	4a20      	ldr	r2, [pc, #128]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000544:	6013      	str	r3, [r2, #0]
		return;
 8000546:	e03a      	b.n	80005be <HAL_TIM_PeriodElapsedCallback+0x96>
	}

	HAL_GPIO_TogglePin(SFT_SER_GPIO_Port, SFT_SER_Pin);
 8000548:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800054c:	481f      	ldr	r0, [pc, #124]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800054e:	f000 fc71 	bl	8000e34 <HAL_GPIO_TogglePin>
	for (int i = 0; i < 16; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e00c      	b.n	8000572 <HAL_TIM_PeriodElapsedCallback+0x4a>
		HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	481c      	ldr	r0, [pc, #112]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800055e:	f000 fc51 	bl	8000e04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SFT_SRCLK_GPIO_Port, SFT_SRCLK_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2101      	movs	r1, #1
 8000566:	481a      	ldr	r0, [pc, #104]	@ (80005d0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000568:	f000 fc4c 	bl	8000e04 <HAL_GPIO_WritePin>
	for (int i = 0; i < 16; i++) {
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	3301      	adds	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	ddef      	ble.n	8000558 <HAL_TIM_PeriodElapsedCallback+0x30>
	}

	HAL_GPIO_TogglePin(LD2_Port, LD2_Pin);
 8000578:	2120      	movs	r1, #32
 800057a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057e:	f000 fc59 	bl	8000e34 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D1_GPIO_Port, LED_D1_Pin);
 8000582:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000586:	4811      	ldr	r0, [pc, #68]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000588:	f000 fc54 	bl	8000e34 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D2_GPIO_Port, LED_D2_Pin);
 800058c:	2110      	movs	r1, #16
 800058e:	480f      	ldr	r0, [pc, #60]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000590:	f000 fc50 	bl	8000e34 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D3_GPIO_Port, LED_D3_Pin);
 8000594:	2120      	movs	r1, #32
 8000596:	480d      	ldr	r0, [pc, #52]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000598:	f000 fc4c 	bl	8000e34 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);
 800059c:	2108      	movs	r1, #8
 800059e:	480b      	ldr	r0, [pc, #44]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005a0:	f000 fc48 	bl	8000e34 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(SFT_RCLK_GPIO_Port, SFT_RCLK_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	4808      	ldr	r0, [pc, #32]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005aa:	f000 fc2b 	bl	8000e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SFT_RCLK_GPIO_Port, SFT_RCLK_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2180      	movs	r1, #128	@ 0x80
 80005b2:	4806      	ldr	r0, [pc, #24]	@ (80005cc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80005b4:	f000 fc26 	bl	8000e04 <HAL_GPIO_WritePin>

	counter = 0;
 80005b8:	4b02      	ldr	r3, [pc, #8]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000100 	.word	0x20000100
 80005c8:	20000000 	.word	0x20000000
 80005cc:	48000400 	.word	0x48000400
 80005d0:	48000800 	.word	0x48000800

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <Error_Handler+0x8>

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x44>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000624 <HAL_MspInit+0x44>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <HAL_MspInit+0x44>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <HAL_MspInit+0x44>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_MspInit+0x44>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000616:	2007      	movs	r0, #7
 8000618:	f000 fa28 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <HAL_TIM_Base_MspInit+0x44>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d113      	bne.n	8000662 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <HAL_TIM_Base_MspInit+0x48>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a0c      	ldr	r2, [pc, #48]	@ (8000670 <HAL_TIM_Base_MspInit+0x48>)
 8000640:	f043 0310 	orr.w	r3, r3, #16
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_TIM_Base_MspInit+0x48>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0310 	and.w	r3, r3, #16
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2036      	movs	r0, #54	@ 0x36
 8000658:	f000 fa13 	bl	8000a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800065c:	2036      	movs	r0, #54	@ 0x36
 800065e:	f000 fa2c 	bl	8000aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40001000 	.word	0x40001000
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a17      	ldr	r2, [pc, #92]	@ (80006f0 <HAL_UART_MspInit+0x7c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d128      	bne.n	80006e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <HAL_UART_MspInit+0x80>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <HAL_UART_MspInit+0x80>)
 800069c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a0:	61d3      	str	r3, [r2, #28]
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <HAL_UART_MspInit+0x80>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <HAL_UART_MspInit+0x80>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <HAL_UART_MspInit+0x80>)
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <HAL_UART_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006c6:	230c      	movs	r3, #12
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006d6:	2307      	movs	r3, #7
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e4:	f000 fa04 	bl	8000af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e8:	bf00      	nop
 80006ea:	3728      	adds	r7, #40	@ 0x28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40004400 	.word	0x40004400
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074e:	f000 f89d 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}

08000756 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800075a:	2002      	movs	r0, #2
 800075c:	f000 fb84 	bl	8000e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8000768:	2010      	movs	r0, #16
 800076a:	f000 fb7d 	bl	8000e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <TIM6_DAC_IRQHandler+0x10>)
 800077a:	f002 f8a7 	bl	80028cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000002c 	.word	0x2000002c

08000788 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <SystemInit+0x20>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <SystemInit+0x20>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff ffea 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	@ (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	@ (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f002 ff3b 	bl	8003654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007de:	f7ff fcf9 	bl	80001d4 <main>

080007e2 <LoopForever>:

LoopForever:
    b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007f0:	080036f4 	.word	0x080036f4
  ldr r2, =_sbss
 80007f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007f8:	20000108 	.word	0x20000108

080007fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC1_2_IRQHandler>
	...

08000800 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f92b 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff fee0 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f943 	bl	8000ad6 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f90b 	bl	8000a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	@ (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000004 	.word	0x20000004
 8000884:	2000000c 	.word	0x2000000c
 8000888:	20000008 	.word	0x20000008

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	@ (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000000c 	.word	0x2000000c
 80008b0:	20000104 	.word	0x20000104

080008b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008b8:	4b03      	ldr	r3, [pc, #12]	@ (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000104 	.word	0x20000104

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4907      	ldr	r1, [pc, #28]	@ (8000968 <__NVIC_EnableIRQ+0x38>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000e100 	.word	0xe000e100

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	@ (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	@ 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff29 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a94:	f7ff ff3e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f7ff ff8e 	bl	80009c0 <NVIC_EncodePriority>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff5d 	bl	800096c <__NVIC_SetPriority>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff31 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffa2 	bl	8000a28 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	e160      	b.n	8000dc2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 8152 	beq.w	8000dbc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d005      	beq.n	8000b30 <HAL_GPIO_Init+0x40>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d130      	bne.n	8000b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b66:	2201      	movs	r2, #1
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	091b      	lsrs	r3, r3, #4
 8000b7c:	f003 0201 	and.w	r2, r3, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0303 	and.w	r3, r3, #3
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d017      	beq.n	8000bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43db      	mvns	r3, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d123      	bne.n	8000c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	08da      	lsrs	r2, r3, #3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3208      	adds	r2, #8
 8000be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	220f      	movs	r2, #15
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	691a      	ldr	r2, [r3, #16]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f003 0307 	and.w	r3, r3, #7
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	08da      	lsrs	r2, r3, #3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3208      	adds	r2, #8
 8000c1c:	6939      	ldr	r1, [r7, #16]
 8000c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0203 	and.w	r2, r3, #3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f000 80ac 	beq.w	8000dbc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c64:	4b5e      	ldr	r3, [pc, #376]	@ (8000de0 <HAL_GPIO_Init+0x2f0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a5d      	ldr	r2, [pc, #372]	@ (8000de0 <HAL_GPIO_Init+0x2f0>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b5b      	ldr	r3, [pc, #364]	@ (8000de0 <HAL_GPIO_Init+0x2f0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c7c:	4a59      	ldr	r2, [pc, #356]	@ (8000de4 <HAL_GPIO_Init+0x2f4>)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	3302      	adds	r3, #2
 8000c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ca6:	d025      	beq.n	8000cf4 <HAL_GPIO_Init+0x204>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a4f      	ldr	r2, [pc, #316]	@ (8000de8 <HAL_GPIO_Init+0x2f8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d01f      	beq.n	8000cf0 <HAL_GPIO_Init+0x200>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a4e      	ldr	r2, [pc, #312]	@ (8000dec <HAL_GPIO_Init+0x2fc>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d019      	beq.n	8000cec <HAL_GPIO_Init+0x1fc>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a4d      	ldr	r2, [pc, #308]	@ (8000df0 <HAL_GPIO_Init+0x300>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d013      	beq.n	8000ce8 <HAL_GPIO_Init+0x1f8>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8000df4 <HAL_GPIO_Init+0x304>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d00d      	beq.n	8000ce4 <HAL_GPIO_Init+0x1f4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a4b      	ldr	r2, [pc, #300]	@ (8000df8 <HAL_GPIO_Init+0x308>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x1f0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8000dfc <HAL_GPIO_Init+0x30c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_GPIO_Init+0x1ec>
 8000cd8:	2306      	movs	r3, #6
 8000cda:	e00c      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cdc:	2307      	movs	r3, #7
 8000cde:	e00a      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce0:	2305      	movs	r3, #5
 8000ce2:	e008      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e006      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x206>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d06:	4937      	ldr	r1, [pc, #220]	@ (8000de4 <HAL_GPIO_Init+0x2f4>)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d14:	4b3a      	ldr	r3, [pc, #232]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d003      	beq.n	8000d38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d38:	4a31      	ldr	r2, [pc, #196]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d62:	4a27      	ldr	r2, [pc, #156]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d68:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d92:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <HAL_GPIO_Init+0x310>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	f47f ae97 	bne.w	8000b00 <HAL_GPIO_Init+0x10>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	371c      	adds	r7, #28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40010000 	.word	0x40010000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48000c00 	.word	0x48000c00
 8000df4:	48001000 	.word	0x48001000
 8000df8:	48001400 	.word	0x48001400
 8000dfc:	48001800 	.word	0x48001800
 8000e00:	40010400 	.word	0x40010400

08000e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
 8000e10:	4613      	mov	r3, r2
 8000e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43d9      	mvns	r1, r3
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	400b      	ands	r3, r1
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	619a      	str	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d006      	beq.n	8000e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff fb2a 	bl	80004e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ea4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ea8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000eae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f001 b80a 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ec2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f000 8161 	beq.w	8001196 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ed4:	4bae      	ldr	r3, [pc, #696]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b04      	cmp	r3, #4
 8000ede:	d00c      	beq.n	8000efa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ee0:	4bab      	ldr	r3, [pc, #684]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	d157      	bne.n	8000f9c <HAL_RCC_OscConfig+0x104>
 8000eec:	4ba8      	ldr	r3, [pc, #672]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ef8:	d150      	bne.n	8000f9c <HAL_RCC_OscConfig+0x104>
 8000efa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000efe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f12:	fab3 f383 	clz	r3, r3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f1a:	d802      	bhi.n	8000f22 <HAL_RCC_OscConfig+0x8a>
 8000f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	e015      	b.n	8000f4e <HAL_RCC_OscConfig+0xb6>
 8000f22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f3a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f3e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f4a:	4b91      	ldr	r3, [pc, #580]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f52:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000f56:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000f5a:	fa92 f2a2 	rbit	r2, r2
 8000f5e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000f62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f66:	fab2 f282 	clz	r2, r2
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	f042 0220 	orr.w	r2, r2, #32
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	f002 021f 	and.w	r2, r2, #31
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8108 	beq.w	8001194 <HAL_RCC_OscConfig+0x2fc>
 8000f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 80ff 	bne.w	8001194 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	f000 bf9b 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fac:	d106      	bne.n	8000fbc <HAL_RCC_OscConfig+0x124>
 8000fae:	4b78      	ldr	r3, [pc, #480]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a77      	ldr	r2, [pc, #476]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e036      	b.n	800102a <HAL_RCC_OscConfig+0x192>
 8000fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10c      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x14e>
 8000fcc:	4b70      	ldr	r3, [pc, #448]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a6f      	ldr	r2, [pc, #444]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a6c      	ldr	r2, [pc, #432]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e021      	b.n	800102a <HAL_RCC_OscConfig+0x192>
 8000fe6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ff6:	d10c      	bne.n	8001012 <HAL_RCC_OscConfig+0x17a>
 8000ff8:	4b65      	ldr	r3, [pc, #404]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a64      	ldr	r2, [pc, #400]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8000ffe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b62      	ldr	r3, [pc, #392]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a61      	ldr	r2, [pc, #388]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e00b      	b.n	800102a <HAL_RCC_OscConfig+0x192>
 8001012:	4b5f      	ldr	r3, [pc, #380]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5e      	ldr	r2, [pc, #376]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b5c      	ldr	r3, [pc, #368]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a5b      	ldr	r2, [pc, #364]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001028:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800102e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d054      	beq.n	80010e4 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fc3b 	bl	80008b4 <HAL_GetTick>
 800103e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	e00a      	b.n	800105a <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001044:	f7ff fc36 	bl	80008b4 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b64      	cmp	r3, #100	@ 0x64
 8001052:	d902      	bls.n	800105a <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	f000 bf3c 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
 800105a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800105e:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800106e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b3f      	cmp	r3, #63	@ 0x3f
 800107a:	d802      	bhi.n	8001082 <HAL_RCC_OscConfig+0x1ea>
 800107c:	4b44      	ldr	r3, [pc, #272]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	e015      	b.n	80010ae <HAL_RCC_OscConfig+0x216>
 8001082:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001086:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001096:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800109a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800109e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010b2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80010b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80010ba:	fa92 f2a2 	rbit	r2, r2
 80010be:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80010c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80010c6:	fab2 f282 	clz	r2, r2
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	f002 021f 	and.w	r2, r2, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0b0      	beq.n	8001044 <HAL_RCC_OscConfig+0x1ac>
 80010e2:	e058      	b.n	8001196 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fbe6 	bl	80008b4 <HAL_GetTick>
 80010e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010ee:	f7ff fbe1 	bl	80008b4 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	@ 0x64
 80010fc:	d902      	bls.n	8001104 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	f000 bee7 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001108:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001118:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111c:	fab3 f383 	clz	r3, r3
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b3f      	cmp	r3, #63	@ 0x3f
 8001124:	d802      	bhi.n	800112c <HAL_RCC_OscConfig+0x294>
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	e015      	b.n	8001158 <HAL_RCC_OscConfig+0x2c0>
 800112c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001130:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001140:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001144:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001148:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001154:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_RCC_OscConfig+0x2f8>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001158:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800115c:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001160:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001164:	fa92 f2a2 	rbit	r2, r2
 8001168:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800116c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001170:	fab2 f282 	clz	r2, r2
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	f042 0220 	orr.w	r2, r2, #32
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	f002 021f 	and.w	r2, r2, #31
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	4013      	ands	r3, r2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1b0      	bne.n	80010ee <HAL_RCC_OscConfig+0x256>
 800118c:	e003      	b.n	8001196 <HAL_RCC_OscConfig+0x2fe>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001196:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800119a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 816d 	beq.w	8001486 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ac:	4bcd      	ldr	r3, [pc, #820]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011b8:	4bca      	ldr	r3, [pc, #808]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 030c 	and.w	r3, r3, #12
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d16e      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
 80011c4:	4bc7      	ldr	r3, [pc, #796]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80011cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011d0:	d167      	bne.n	80012a2 <HAL_RCC_OscConfig+0x40a>
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011dc:	fa93 f3a3 	rbit	r3, r3
 80011e0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80011e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80011f0:	d802      	bhi.n	80011f8 <HAL_RCC_OscConfig+0x360>
 80011f2:	4bbc      	ldr	r3, [pc, #752]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	e013      	b.n	8001220 <HAL_RCC_OscConfig+0x388>
 80011f8:	2302      	movs	r3, #2
 80011fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800120a:	2302      	movs	r3, #2
 800120c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001210:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800121c:	4bb1      	ldr	r3, [pc, #708]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 800121e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001220:	2202      	movs	r2, #2
 8001222:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001226:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800122a:	fa92 f2a2 	rbit	r2, r2
 800122e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001232:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001236:	fab2 f282 	clz	r2, r2
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	f042 0220 	orr.w	r2, r2, #32
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f002 021f 	and.w	r2, r2, #31
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00a      	beq.n	8001268 <HAL_RCC_OscConfig+0x3d0>
 8001252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001256:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d002      	beq.n	8001268 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	f000 be35 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b9e      	ldr	r3, [pc, #632]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001274:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	21f8      	movs	r1, #248	@ 0xf8
 800127e:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001286:	fa91 f1a1 	rbit	r1, r1
 800128a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800128e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001292:	fab1 f181 	clz	r1, r1
 8001296:	b2c9      	uxtb	r1, r1
 8001298:	408b      	lsls	r3, r1
 800129a:	4992      	ldr	r1, [pc, #584]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a0:	e0f1      	b.n	8001486 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8083 	beq.w	80013ba <HAL_RCC_OscConfig+0x522>
 80012b4:	2301      	movs	r3, #1
 80012b6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80012c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	2301      	movs	r3, #1
 80012de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fae8 	bl	80008b4 <HAL_GetTick>
 80012e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fae3 	bl	80008b4 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d902      	bls.n	8001300 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f000 bde9 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001312:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b3f      	cmp	r3, #63	@ 0x3f
 800131e:	d802      	bhi.n	8001326 <HAL_RCC_OscConfig+0x48e>
 8001320:	4b70      	ldr	r3, [pc, #448]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	e013      	b.n	800134e <HAL_RCC_OscConfig+0x4b6>
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800133e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800134a:	4b66      	ldr	r3, [pc, #408]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134e:	2202      	movs	r2, #2
 8001350:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001354:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001358:	fa92 f2a2 	rbit	r2, r2
 800135c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001360:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001364:	fab2 f282 	clz	r2, r2
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f042 0220 	orr.w	r2, r2, #32
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	f002 021f 	and.w	r2, r2, #31
 8001374:	2101      	movs	r1, #1
 8001376:	fa01 f202 	lsl.w	r2, r1, r2
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0b4      	beq.n	80012ea <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001380:	4b58      	ldr	r3, [pc, #352]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	21f8      	movs	r1, #248	@ 0xf8
 8001396:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800139a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800139e:	fa91 f1a1 	rbit	r1, r1
 80013a2:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80013a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80013aa:	fab1 f181 	clz	r1, r1
 80013ae:	b2c9      	uxtb	r1, r1
 80013b0:	408b      	lsls	r3, r1
 80013b2:	494c      	ldr	r1, [pc, #304]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e065      	b.n	8001486 <HAL_RCC_OscConfig+0x5ee>
 80013ba:	2301      	movs	r3, #1
 80013bc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80013cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d0:	fab3 f383 	clz	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	2300      	movs	r3, #0
 80013e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fa65 	bl	80008b4 <HAL_GetTick>
 80013ea:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fa60 	bl	80008b4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d902      	bls.n	8001406 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	f000 bd66 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001418:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b3f      	cmp	r3, #63	@ 0x3f
 8001424:	d802      	bhi.n	800142c <HAL_RCC_OscConfig+0x594>
 8001426:	4b2f      	ldr	r3, [pc, #188]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	e013      	b.n	8001454 <HAL_RCC_OscConfig+0x5bc>
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001432:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001436:	fa93 f3a3 	rbit	r3, r3
 800143a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800143e:	2302      	movs	r3, #2
 8001440:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001444:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001450:	4b24      	ldr	r3, [pc, #144]	@ (80014e4 <HAL_RCC_OscConfig+0x64c>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	2202      	movs	r2, #2
 8001456:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800145a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800145e:	fa92 f2a2 	rbit	r2, r2
 8001462:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001466:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800146a:	fab2 f282 	clz	r2, r2
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	f042 0220 	orr.w	r2, r2, #32
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f002 021f 	and.w	r2, r2, #31
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	4013      	ands	r3, r2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1b4      	bne.n	80013f0 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800148a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 8119 	beq.w	80016ce <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8082 	beq.w	80015b2 <HAL_RCC_OscConfig+0x71a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014b8:	fa93 f3a3 	rbit	r3, r3
 80014bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80014c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_RCC_OscConfig+0x650>)
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	461a      	mov	r2, r3
 80014d4:	2301      	movs	r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f9ec 	bl	80008b4 <HAL_GetTick>
 80014dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e0:	e00f      	b.n	8001502 <HAL_RCC_OscConfig+0x66a>
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff f9e2 	bl	80008b4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d902      	bls.n	8001502 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	f000 bce8 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001502:	2302      	movs	r3, #2
 8001504:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001514:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800151e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001542:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001546:	2202      	movs	r2, #2
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800154e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	fa93 f2a3 	rbit	r2, r3
 8001558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001560:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	4bb0      	ldr	r3, [pc, #704]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 8001564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800156e:	2102      	movs	r1, #2
 8001570:	6019      	str	r1, [r3, #0]
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f1a3 	rbit	r1, r3
 8001580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001584:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001588:	6019      	str	r1, [r3, #0]
  return result;
 800158a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800158e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d09d      	beq.n	80014ec <HAL_RCC_OscConfig+0x654>
 80015b0:	e08d      	b.n	80016ce <HAL_RCC_OscConfig+0x836>
 80015b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	fa93 f2a3 	rbit	r2, r3
 80015cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015d4:	601a      	str	r2, [r3, #0]
  return result;
 80015d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015de:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001828 <HAL_RCC_OscConfig+0x990>)
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	461a      	mov	r2, r3
 80015f0:	2300      	movs	r3, #0
 80015f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff f95e 	bl	80008b4 <HAL_GetTick>
 80015f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff f959 	bl	80008b4 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d902      	bls.n	8001614 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	f000 bc5f 	b.w	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001618:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800161c:	2202      	movs	r2, #2
 800161e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001624:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fa93 f2a3 	rbit	r2, r3
 800162e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001632:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001648:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	fa93 f2a3 	rbit	r2, r3
 8001652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001656:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001660:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fa93 f2a3 	rbit	r2, r3
 8001676:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800167e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b68      	ldr	r3, [pc, #416]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 8001682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001684:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001688:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800168c:	2102      	movs	r1, #2
 800168e:	6019      	str	r1, [r3, #0]
 8001690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001694:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f1a3 	rbit	r1, r3
 800169e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016a6:	6019      	str	r1, [r3, #0]
  return result;
 80016a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d197      	bne.n	80015fe <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 819c 	beq.w	8001a1c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d116      	bne.n	8001724 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b48      	ldr	r3, [pc, #288]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800170a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800171c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b41      	ldr	r3, [pc, #260]	@ (800182c <HAL_RCC_OscConfig+0x994>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d11a      	bne.n	8001766 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001730:	4b3e      	ldr	r3, [pc, #248]	@ (800182c <HAL_RCC_OscConfig+0x994>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a3d      	ldr	r2, [pc, #244]	@ (800182c <HAL_RCC_OscConfig+0x994>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173c:	f7ff f8ba 	bl	80008b4 <HAL_GetTick>
 8001740:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e009      	b.n	800175a <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff f8b5 	bl	80008b4 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	@ 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e3bb      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b34      	ldr	r3, [pc, #208]	@ (800182c <HAL_RCC_OscConfig+0x994>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0ef      	beq.n	8001746 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800176a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x8ec>
 8001776:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4a2a      	ldr	r2, [pc, #168]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6213      	str	r3, [r2, #32]
 8001782:	e035      	b.n	80017f0 <HAL_RCC_OscConfig+0x958>
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x916>
 8001794:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017a6:	f023 0304 	bic.w	r3, r3, #4
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e020      	b.n	80017f0 <HAL_RCC_OscConfig+0x958>
 80017ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x940>
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a18      	ldr	r2, [pc, #96]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6213      	str	r3, [r2, #32]
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x958>
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_RCC_OscConfig+0x98c>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 8085 	beq.w	800190c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff f857 	bl	80008b4 <HAL_GetTick>
 8001806:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	e011      	b.n	8001830 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff f852 	bl	80008b4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d907      	bls.n	8001830 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e356      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001824:	40021000 	.word	0x40021000
 8001828:	10908120 	.word	0x10908120
 800182c:	40007000 	.word	0x40007000
 8001830:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001834:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001840:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001858:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800185c:	2202      	movs	r2, #2
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001864:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f2a3 	rbit	r2, r3
 800186e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001872:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001876:	601a      	str	r2, [r3, #0]
  return result;
 8001878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800187c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001880:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_RCC_OscConfig+0xa00>
 8001892:	4b98      	ldr	r3, [pc, #608]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	e013      	b.n	80018c0 <HAL_RCC_OscConfig+0xa28>
 8001898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018a0:	2202      	movs	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	4b8d      	ldr	r3, [pc, #564]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018c8:	2102      	movs	r1, #2
 80018ca:	6011      	str	r1, [r2, #0]
 80018cc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018d0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	fa92 f1a2 	rbit	r1, r2
 80018da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018de:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80018e2:	6011      	str	r1, [r2, #0]
  return result;
 80018e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018e8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d080      	beq.n	800180c <HAL_RCC_OscConfig+0x974>
 800190a:	e07d      	b.n	8001a08 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7fe ffd2 	bl	80008b4 <HAL_GetTick>
 8001910:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001914:	e00b      	b.n	800192e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7fe ffcd 	bl	80008b4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e2d1      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
 800192e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001932:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001936:	2202      	movs	r2, #2
 8001938:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800193e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	fa93 f2a3 	rbit	r2, r3
 8001948:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800194c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001956:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800195a:	2202      	movs	r2, #2
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	fa93 f2a3 	rbit	r2, r3
 800196c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001970:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001974:	601a      	str	r2, [r3, #0]
  return result;
 8001976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800197a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800197e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <HAL_RCC_OscConfig+0xafe>
 8001990:	4b58      	ldr	r3, [pc, #352]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	e013      	b.n	80019be <HAL_RCC_OscConfig+0xb26>
 8001996:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800199a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b4:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	4b4e      	ldr	r3, [pc, #312]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019c2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019c6:	2102      	movs	r1, #2
 80019c8:	6011      	str	r1, [r2, #0]
 80019ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019ce:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	fa92 f1a2 	rbit	r1, r2
 80019d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019dc:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80019e0:	6011      	str	r1, [r2, #0]
  return result;
 80019e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019e6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fab2 f282 	clz	r2, r2
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	f002 021f 	and.w	r2, r2, #31
 80019fc:	2101      	movs	r1, #1
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d186      	bne.n	8001916 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a08:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a10:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	4a37      	ldr	r2, [pc, #220]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 8001a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8251 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2e:	4b31      	ldr	r3, [pc, #196]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	f000 820f 	beq.w	8001e5a <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f040 8165 	bne.w	8001d18 <HAL_RCC_OscConfig+0xe80>
 8001a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a52:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a56:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a60:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a78:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7fe ff0e 	bl	80008b4 <HAL_GetTick>
 8001a98:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe ff09 	bl	80008b4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e20f      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001ab2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ab6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001adc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aea:	d805      	bhi.n	8001af8 <HAL_RCC_OscConfig+0xc60>
 8001aec:	4b01      	ldr	r3, [pc, #4]	@ (8001af4 <HAL_RCC_OscConfig+0xc5c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e02a      	b.n	8001b48 <HAL_RCC_OscConfig+0xcb0>
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	fa93 f2a3 	rbit	r2, r3
 8001b14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b18:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	4bca      	ldr	r3, [pc, #808]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b4c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b50:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b54:	6011      	str	r1, [r2, #0]
 8001b56:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b5a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fa92 f1a2 	rbit	r1, r2
 8001b64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b68:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b6c:	6011      	str	r1, [r2, #0]
  return result;
 8001b6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b72:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	fab2 f282 	clz	r2, r2
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f002 021f 	and.w	r2, r2, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d184      	bne.n	8001a9e <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b94:	4bb6      	ldr	r3, [pc, #728]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	f023 020f 	bic.w	r2, r3, #15
 8001b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba8:	49b1      	ldr	r1, [pc, #708]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001bae:	4bb0      	ldr	r3, [pc, #704]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a19      	ldr	r1, [r3, #32]
 8001bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	49a7      	ldr	r1, [pc, #668]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	604b      	str	r3, [r1, #4]
 8001bd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bda:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001bde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bfa:	601a      	str	r2, [r3, #0]
  return result;
 8001bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c00:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c04:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c10:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	461a      	mov	r2, r3
 8001c18:	2301      	movs	r3, #1
 8001c1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fe4a 	bl	80008b4 <HAL_GetTick>
 8001c20:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	e009      	b.n	8001c3a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c26:	f7fe fe45 	bl	80008b4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e14b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c3e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c5e:	601a      	str	r2, [r3, #0]
  return result;
 8001c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c64:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c72:	d802      	bhi.n	8001c7a <HAL_RCC_OscConfig+0xde2>
 8001c74:	4b7e      	ldr	r3, [pc, #504]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e027      	b.n	8001cca <HAL_RCC_OscConfig+0xe32>
 8001c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c7e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	fa93 f2a3 	rbit	r2, r3
 8001c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc0:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001cd2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cd6:	6011      	str	r1, [r2, #0]
 8001cd8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cdc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fa92 f1a2 	rbit	r1, r2
 8001ce6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cea:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001cee:	6011      	str	r1, [r2, #0]
  return result;
 8001cf0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cf4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	fab2 f282 	clz	r2, r2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f042 0220 	orr.w	r2, r2, #32
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f002 021f 	and.w	r2, r2, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d087      	beq.n	8001c26 <HAL_RCC_OscConfig+0xd8e>
 8001d16:	e0db      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1038>
 8001d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d38:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d3c:	601a      	str	r2, [r3, #0]
  return result;
 8001d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d42:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d46:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d52:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7fe fda9 	bl	80008b4 <HAL_GetTick>
 8001d62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fda4 	bl	80008b4 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0aa      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001d7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d80:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d8e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d9c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001da0:	601a      	str	r2, [r3, #0]
  return result;
 8001da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001daa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001db4:	d802      	bhi.n	8001dbc <HAL_RCC_OscConfig+0xf24>
 8001db6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_OscConfig+0xf74>
 8001dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001dc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dce:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ddc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001dea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	fa93 f2a3 	rbit	r2, r3
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_RCC_OscConfig+0xfd8>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e10:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e14:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e18:	6011      	str	r1, [r2, #0]
 8001e1a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e1e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	fa92 f1a2 	rbit	r1, r2
 8001e28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e2c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e30:	6011      	str	r1, [r2, #0]
  return result;
 8001e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e36:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	f042 0220 	orr.w	r2, r2, #32
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	f002 021f 	and.w	r2, r2, #31
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d187      	bne.n	8001d68 <HAL_RCC_OscConfig+0xed0>
 8001e58:	e03a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d104      	bne.n	8001e74 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e031      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e74:	4b19      	ldr	r3, [pc, #100]	@ (8001edc <HAL_RCC_OscConfig+0x1044>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001e7c:	4b17      	ldr	r3, [pc, #92]	@ (8001edc <HAL_RCC_OscConfig+0x1044>)
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001e88:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d117      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ea0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ea4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09e      	sub	sp, #120	@ 0x78
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e154      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b89      	ldr	r3, [pc, #548]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b86      	ldr	r3, [pc, #536]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4984      	ldr	r1, [pc, #528]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b82      	ldr	r3, [pc, #520]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e13c      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b7b      	ldr	r3, [pc, #492]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4978      	ldr	r1, [pc, #480]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80cd 	beq.w	80020ee <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d137      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xec>
 8001f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f74:	d802      	bhi.n	8001f7c <HAL_RCC_ClockConfig+0x9c>
 8001f76:	4b6b      	ldr	r3, [pc, #428]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e00f      	b.n	8001f9c <HAL_RCC_ClockConfig+0xbc>
 8001f7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f98:	4b62      	ldr	r3, [pc, #392]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fa0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fa4:	fa92 f2a2 	rbit	r2, r2
 8001fa8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001faa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fac:	fab2 f282 	clz	r2, r2
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	f042 0220 	orr.w	r2, r2, #32
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f002 021f 	and.w	r2, r2, #31
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d171      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0ea      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d137      	bne.n	8002044 <HAL_RCC_ClockConfig+0x164>
 8001fd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fd8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fec:	d802      	bhi.n	8001ff4 <HAL_RCC_ClockConfig+0x114>
 8001fee:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_ClockConfig+0x134>
 8001ff4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	647b      	str	r3, [r7, #68]	@ 0x44
 8002002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002006:	643b      	str	r3, [r7, #64]	@ 0x40
 8002008:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002010:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002018:	63ba      	str	r2, [r7, #56]	@ 0x38
 800201a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800201c:	fa92 f2a2 	rbit	r2, r2
 8002020:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002022:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002024:	fab2 f282 	clz	r2, r2
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f042 0220 	orr.w	r2, r2, #32
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	f002 021f 	and.w	r2, r2, #31
 8002034:	2101      	movs	r1, #1
 8002036:	fa01 f202 	lsl.w	r2, r1, r2
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d135      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0ae      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
 8002044:	2302      	movs	r3, #2
 8002046:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b3f      	cmp	r3, #63	@ 0x3f
 800205a:	d802      	bhi.n	8002062 <HAL_RCC_ClockConfig+0x182>
 800205c:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e00d      	b.n	800207e <HAL_RCC_ClockConfig+0x19e>
 8002062:	2302      	movs	r3, #2
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	2202      	movs	r2, #2
 8002080:	61ba      	str	r2, [r7, #24]
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	fa92 f2a2 	rbit	r2, r2
 8002088:	617a      	str	r2, [r7, #20]
  return result;
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e07a      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 0203 	bic.w	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	491a      	ldr	r1, [pc, #104]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020be:	f7fe fbf9 	bl	80008b4 <HAL_GetTick>
 80020c2:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c6:	f7fe fbf5 	bl	80008b4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e062      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <HAL_RCC_ClockConfig+0x244>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 020c 	and.w	r2, r3, #12
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d1eb      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d215      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 0207 	bic.w	r2, r3, #7
 8002104:	4906      	ldr	r1, [pc, #24]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	4313      	orrs	r3, r2
 800210a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <HAL_RCC_ClockConfig+0x240>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d006      	beq.n	8002128 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e041      	b.n	80021a2 <HAL_RCC_ClockConfig+0x2c2>
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <HAL_RCC_ClockConfig+0x2cc>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	491a      	ldr	r1, [pc, #104]	@ (80021ac <HAL_RCC_ClockConfig+0x2cc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002152:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <HAL_RCC_ClockConfig+0x2cc>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4912      	ldr	r1, [pc, #72]	@ (80021ac <HAL_RCC_ClockConfig+0x2cc>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002166:	f000 f829 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <HAL_RCC_ClockConfig+0x2cc>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002174:	22f0      	movs	r2, #240	@ 0xf0
 8002176:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	fa92 f2a2 	rbit	r2, r2
 800217e:	60fa      	str	r2, [r7, #12]
  return result;
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	fab2 f282 	clz	r2, r2
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	40d3      	lsrs	r3, r2
 800218a:	4a09      	ldr	r2, [pc, #36]	@ (80021b0 <HAL_RCC_ClockConfig+0x2d0>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	fa21 f303 	lsr.w	r3, r1, r3
 8002192:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_RCC_ClockConfig+0x2d4>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002196:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_RCC_ClockConfig+0x2d8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fb46 	bl	800082c <HAL_InitTick>
  
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3778      	adds	r7, #120	@ 0x78
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	080036b4 	.word	0x080036b4
 80021b4:	20000004 	.word	0x20000004
 80021b8:	20000008 	.word	0x20000008

080021bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x30>
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ea:	e029      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ee:	613b      	str	r3, [r7, #16]
      break;
 80021f0:	e029      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	4a18      	ldr	r2, [pc, #96]	@ (800225c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021fc:	5cd3      	ldrb	r3, [r2, r3]
 80021fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002200:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x98>)
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	4a15      	ldr	r2, [pc, #84]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xa4>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002218:	4a0f      	ldr	r2, [pc, #60]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x9c>)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	fb02 f303 	mul.w	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e007      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800222a:	4a0b      	ldr	r2, [pc, #44]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x9c>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002242:	613b      	str	r3, [r7, #16]
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	080036cc 	.word	0x080036cc
 8002260:	080036dc 	.word	0x080036dc

08002264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <HAL_RCC_GetHCLKFreq+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002282:	f7ff ffef 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 8002286:	4601      	mov	r1, r0
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002290:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002294:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	603a      	str	r2, [r7, #0]
  return result;
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	40d3      	lsrs	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <HAL_RCC_GetPCLK1Freq+0x40>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	080036c4 	.word	0x080036c4

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022c6:	f7ff ffcd 	bl	8002264 <HAL_RCC_GetHCLKFreq>
 80022ca:	4601      	mov	r1, r0
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80022d4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80022d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	fa92 f2a2 	rbit	r2, r2
 80022e0:	603a      	str	r2, [r7, #0]
  return result;
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	40d3      	lsrs	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	080036c4 	.word	0x080036c4

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b092      	sub	sp, #72	@ 0x48
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80d2 	beq.w	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002328:	4b4d      	ldr	r3, [pc, #308]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10e      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a40      	ldr	r2, [pc, #256]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe faa3 	bl	80008b4 <HAL_GetTick>
 800236e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe fa9f 	bl	80008b4 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	@ 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1d4      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002390:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8082 	beq.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d07a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	2301      	movs	r3, #1
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80023ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2300      	movs	r3, #0
 8002400:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002402:	4a17      	ldr	r2, [pc, #92]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002406:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d049      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fa4f 	bl	80008b4 <HAL_GetTick>
 8002416:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fa4b 	bl	80008b4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e17e      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8002430:	2302      	movs	r3, #2
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	61fb      	str	r3, [r7, #28]
  return result;
 8002448:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d108      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800245a:	4b01      	ldr	r3, [pc, #4]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	e00d      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	10908100 	.word	0x10908100
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	4b9a      	ldr	r3, [pc, #616]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	2202      	movs	r2, #2
 800247e:	613a      	str	r2, [r7, #16]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	fa92 f2a2 	rbit	r2, r2
 8002486:	60fa      	str	r2, [r7, #12]
  return result;
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0b9      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024a6:	4b8f      	ldr	r3, [pc, #572]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	498c      	ldr	r1, [pc, #560]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d105      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c0:	4b88      	ldr	r3, [pc, #544]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	4a87      	ldr	r2, [pc, #540]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d8:	4b82      	ldr	r3, [pc, #520]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	f023 0203 	bic.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	497f      	ldr	r1, [pc, #508]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f6:	4b7b      	ldr	r3, [pc, #492]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	4978      	ldr	r1, [pc, #480]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002514:	4b73      	ldr	r3, [pc, #460]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	4970      	ldr	r1, [pc, #448]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002532:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f023 0210 	bic.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4969      	ldr	r1, [pc, #420]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002540:	4313      	orrs	r3, r2
 8002542:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002550:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800255c:	4961      	ldr	r1, [pc, #388]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800256e:	4b5d      	ldr	r3, [pc, #372]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f023 0220 	bic.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	495a      	ldr	r1, [pc, #360]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800258c:	4b55      	ldr	r3, [pc, #340]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002598:	4952      	ldr	r1, [pc, #328]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025aa:	4b4e      	ldr	r3, [pc, #312]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	494b      	ldr	r1, [pc, #300]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c8:	4b46      	ldr	r3, [pc, #280]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	4943      	ldr	r1, [pc, #268]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e6:	4b3f      	ldr	r3, [pc, #252]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	493c      	ldr	r1, [pc, #240]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002604:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	4934      	ldr	r1, [pc, #208]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d008      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002622:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	492d      	ldr	r1, [pc, #180]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002644:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264c:	4925      	ldr	r1, [pc, #148]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264e:	4313      	orrs	r3, r2
 8002650:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	491e      	ldr	r1, [pc, #120]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a6:	490f      	ldr	r1, [pc, #60]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c4:	4907      	ldr	r1, [pc, #28]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026d6:	4b03      	ldr	r3, [pc, #12]	@ (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	e002      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
 80026e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ea:	4913      	ldr	r1, [pc, #76]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002708:	490b      	ldr	r1, [pc, #44]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800270a:	4313      	orrs	r3, r2
 800270c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800271a:	4b07      	ldr	r3, [pc, #28]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002726:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002728:	4313      	orrs	r3, r2
 800272a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3748      	adds	r7, #72	@ 0x48
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000

0800273c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e049      	b.n	80027e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7fd ff60 	bl	8000628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3304      	adds	r3, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f000 f9d0 	bl	8002b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d001      	beq.n	8002804 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e04f      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a23      	ldr	r2, [pc, #140]	@ (80028b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x76>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800282e:	d018      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x76>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x76>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1e      	ldr	r2, [pc, #120]	@ (80028b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x76>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1c      	ldr	r2, [pc, #112]	@ (80028bc <HAL_TIM_Base_Start_IT+0xd0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x76>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1b      	ldr	r2, [pc, #108]	@ (80028c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_TIM_Base_Start_IT+0x76>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d115      	bne.n	800288e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d015      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0xb4>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287a:	d011      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	e008      	b.n	80028a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e000      	b.n	80028a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40000800 	.word	0x40000800
 80028bc:	40013400 	.word	0x40013400
 80028c0:	40014000 	.word	0x40014000
 80028c4:	40015000 	.word	0x40015000
 80028c8:	00010007 	.word	0x00010007

080028cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d020      	beq.n	8002930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0202 	mvn.w	r2, #2
 8002900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f8e4 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8d6 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f8e7 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d020      	beq.n	800297c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01b      	beq.n	800297c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0204 	mvn.w	r2, #4
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8be 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8b0 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f8c1 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d020      	beq.n	80029c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0208 	mvn.w	r2, #8
 8002998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2204      	movs	r2, #4
 800299e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f898 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 80029b4:	e005      	b.n	80029c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f88a 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f89b 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d020      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01b      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f872 	bl	8002ae4 <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f864 	bl	8002ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f875 	bl	8002af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0201 	mvn.w	r2, #1
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd fd78 	bl	8000528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00c      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f9a2 	bl	8002da0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00c      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f99a 	bl	8002db4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f834 	bl	8002b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0220 	mvn.w	r2, #32
 8002ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f962 	bl	8002d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a48      	ldr	r2, [pc, #288]	@ (8002c54 <TIM_Base_SetConfig+0x134>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d013      	beq.n	8002b60 <TIM_Base_SetConfig+0x40>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3e:	d00f      	beq.n	8002b60 <TIM_Base_SetConfig+0x40>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a45      	ldr	r2, [pc, #276]	@ (8002c58 <TIM_Base_SetConfig+0x138>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <TIM_Base_SetConfig+0x40>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a44      	ldr	r2, [pc, #272]	@ (8002c5c <TIM_Base_SetConfig+0x13c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d007      	beq.n	8002b60 <TIM_Base_SetConfig+0x40>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a43      	ldr	r2, [pc, #268]	@ (8002c60 <TIM_Base_SetConfig+0x140>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_Base_SetConfig+0x40>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a42      	ldr	r2, [pc, #264]	@ (8002c64 <TIM_Base_SetConfig+0x144>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d108      	bne.n	8002b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a37      	ldr	r2, [pc, #220]	@ (8002c54 <TIM_Base_SetConfig+0x134>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b80:	d01b      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a34      	ldr	r2, [pc, #208]	@ (8002c58 <TIM_Base_SetConfig+0x138>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d017      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a33      	ldr	r2, [pc, #204]	@ (8002c5c <TIM_Base_SetConfig+0x13c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a32      	ldr	r2, [pc, #200]	@ (8002c60 <TIM_Base_SetConfig+0x140>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00f      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a32      	ldr	r2, [pc, #200]	@ (8002c68 <TIM_Base_SetConfig+0x148>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a31      	ldr	r2, [pc, #196]	@ (8002c6c <TIM_Base_SetConfig+0x14c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a30      	ldr	r2, [pc, #192]	@ (8002c70 <TIM_Base_SetConfig+0x150>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d003      	beq.n	8002bba <TIM_Base_SetConfig+0x9a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c64 <TIM_Base_SetConfig+0x144>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d108      	bne.n	8002bcc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <TIM_Base_SetConfig+0x134>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <TIM_Base_SetConfig+0x100>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	@ (8002c60 <TIM_Base_SetConfig+0x140>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00f      	beq.n	8002c20 <TIM_Base_SetConfig+0x100>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <TIM_Base_SetConfig+0x148>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <TIM_Base_SetConfig+0x100>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <TIM_Base_SetConfig+0x14c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d007      	beq.n	8002c20 <TIM_Base_SetConfig+0x100>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a17      	ldr	r2, [pc, #92]	@ (8002c70 <TIM_Base_SetConfig+0x150>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d003      	beq.n	8002c20 <TIM_Base_SetConfig+0x100>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a12      	ldr	r2, [pc, #72]	@ (8002c64 <TIM_Base_SetConfig+0x144>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d103      	bne.n	8002c28 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d105      	bne.n	8002c46 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f023 0201 	bic.w	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	611a      	str	r2, [r3, #16]
  }
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40013400 	.word	0x40013400
 8002c64:	40015000 	.word	0x40015000
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e06d      	b.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2f      	ldr	r2, [pc, #188]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01d      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d08:	d018      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d013      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1a      	ldr	r2, [pc, #104]	@ (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d00e      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a15      	ldr	r2, [pc, #84]	@ (8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d009      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a16      	ldr	r2, [pc, #88]	@ (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a11      	ldr	r2, [pc, #68]	@ (8002d7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40012c00 	.word	0x40012c00
 8002d78:	40013400 	.word	0x40013400
 8002d7c:	40015000 	.word	0x40015000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40014000 	.word	0x40014000

08002d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e040      	b.n	8002e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd fc42 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	@ 0x24
 8002df4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9fc 	bl	800320c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f825 	bl	8002e64 <UART_SetConfig>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01b      	b.n	8002e5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fa7b 	bl	8003350 <UART_CheckIdleState>
 8002e5a:	4603      	mov	r3, r0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b92      	ldr	r3, [pc, #584]	@ (80030d8 <UART_SetConfig+0x274>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6812      	ldr	r2, [r2, #0]
 8002e96:	6979      	ldr	r1, [r7, #20]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a80      	ldr	r2, [pc, #512]	@ (80030dc <UART_SetConfig+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d120      	bne.n	8002f22 <UART_SetConfig+0xbe>
 8002ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80030e0 <UART_SetConfig+0x27c>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d817      	bhi.n	8002f1c <UART_SetConfig+0xb8>
 8002eec:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef4 <UART_SetConfig+0x90>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f17 	.word	0x08002f17
 8002f00:	08002f0b 	.word	0x08002f0b
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e0b5      	b.n	8003076 <UART_SetConfig+0x212>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	77fb      	strb	r3, [r7, #31]
 8002f0e:	e0b2      	b.n	8003076 <UART_SetConfig+0x212>
 8002f10:	2304      	movs	r3, #4
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e0af      	b.n	8003076 <UART_SetConfig+0x212>
 8002f16:	2308      	movs	r3, #8
 8002f18:	77fb      	strb	r3, [r7, #31]
 8002f1a:	e0ac      	b.n	8003076 <UART_SetConfig+0x212>
 8002f1c:	2310      	movs	r3, #16
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e0a9      	b.n	8003076 <UART_SetConfig+0x212>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a6f      	ldr	r2, [pc, #444]	@ (80030e4 <UART_SetConfig+0x280>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d124      	bne.n	8002f76 <UART_SetConfig+0x112>
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80030e0 <UART_SetConfig+0x27c>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f38:	d011      	beq.n	8002f5e <UART_SetConfig+0xfa>
 8002f3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f3e:	d817      	bhi.n	8002f70 <UART_SetConfig+0x10c>
 8002f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f44:	d011      	beq.n	8002f6a <UART_SetConfig+0x106>
 8002f46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f4a:	d811      	bhi.n	8002f70 <UART_SetConfig+0x10c>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <UART_SetConfig+0xf4>
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f54:	d006      	beq.n	8002f64 <UART_SetConfig+0x100>
 8002f56:	e00b      	b.n	8002f70 <UART_SetConfig+0x10c>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	77fb      	strb	r3, [r7, #31]
 8002f5c:	e08b      	b.n	8003076 <UART_SetConfig+0x212>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	e088      	b.n	8003076 <UART_SetConfig+0x212>
 8002f64:	2304      	movs	r3, #4
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	e085      	b.n	8003076 <UART_SetConfig+0x212>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	77fb      	strb	r3, [r7, #31]
 8002f6e:	e082      	b.n	8003076 <UART_SetConfig+0x212>
 8002f70:	2310      	movs	r3, #16
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	e07f      	b.n	8003076 <UART_SetConfig+0x212>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5b      	ldr	r2, [pc, #364]	@ (80030e8 <UART_SetConfig+0x284>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d124      	bne.n	8002fca <UART_SetConfig+0x166>
 8002f80:	4b57      	ldr	r3, [pc, #348]	@ (80030e0 <UART_SetConfig+0x27c>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002f88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f8c:	d011      	beq.n	8002fb2 <UART_SetConfig+0x14e>
 8002f8e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f92:	d817      	bhi.n	8002fc4 <UART_SetConfig+0x160>
 8002f94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f98:	d011      	beq.n	8002fbe <UART_SetConfig+0x15a>
 8002f9a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f9e:	d811      	bhi.n	8002fc4 <UART_SetConfig+0x160>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <UART_SetConfig+0x148>
 8002fa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002fa8:	d006      	beq.n	8002fb8 <UART_SetConfig+0x154>
 8002faa:	e00b      	b.n	8002fc4 <UART_SetConfig+0x160>
 8002fac:	2300      	movs	r3, #0
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e061      	b.n	8003076 <UART_SetConfig+0x212>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e05e      	b.n	8003076 <UART_SetConfig+0x212>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e05b      	b.n	8003076 <UART_SetConfig+0x212>
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e058      	b.n	8003076 <UART_SetConfig+0x212>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e055      	b.n	8003076 <UART_SetConfig+0x212>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a47      	ldr	r2, [pc, #284]	@ (80030ec <UART_SetConfig+0x288>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d124      	bne.n	800301e <UART_SetConfig+0x1ba>
 8002fd4:	4b42      	ldr	r3, [pc, #264]	@ (80030e0 <UART_SetConfig+0x27c>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002fdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fe0:	d011      	beq.n	8003006 <UART_SetConfig+0x1a2>
 8002fe2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002fe6:	d817      	bhi.n	8003018 <UART_SetConfig+0x1b4>
 8002fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fec:	d011      	beq.n	8003012 <UART_SetConfig+0x1ae>
 8002fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ff2:	d811      	bhi.n	8003018 <UART_SetConfig+0x1b4>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <UART_SetConfig+0x19c>
 8002ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ffc:	d006      	beq.n	800300c <UART_SetConfig+0x1a8>
 8002ffe:	e00b      	b.n	8003018 <UART_SetConfig+0x1b4>
 8003000:	2300      	movs	r3, #0
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e037      	b.n	8003076 <UART_SetConfig+0x212>
 8003006:	2302      	movs	r3, #2
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e034      	b.n	8003076 <UART_SetConfig+0x212>
 800300c:	2304      	movs	r3, #4
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e031      	b.n	8003076 <UART_SetConfig+0x212>
 8003012:	2308      	movs	r3, #8
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e02e      	b.n	8003076 <UART_SetConfig+0x212>
 8003018:	2310      	movs	r3, #16
 800301a:	77fb      	strb	r3, [r7, #31]
 800301c:	e02b      	b.n	8003076 <UART_SetConfig+0x212>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a33      	ldr	r2, [pc, #204]	@ (80030f0 <UART_SetConfig+0x28c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d124      	bne.n	8003072 <UART_SetConfig+0x20e>
 8003028:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <UART_SetConfig+0x27c>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003030:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003034:	d011      	beq.n	800305a <UART_SetConfig+0x1f6>
 8003036:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800303a:	d817      	bhi.n	800306c <UART_SetConfig+0x208>
 800303c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003040:	d011      	beq.n	8003066 <UART_SetConfig+0x202>
 8003042:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003046:	d811      	bhi.n	800306c <UART_SetConfig+0x208>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <UART_SetConfig+0x1f0>
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003050:	d006      	beq.n	8003060 <UART_SetConfig+0x1fc>
 8003052:	e00b      	b.n	800306c <UART_SetConfig+0x208>
 8003054:	2300      	movs	r3, #0
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e00d      	b.n	8003076 <UART_SetConfig+0x212>
 800305a:	2302      	movs	r3, #2
 800305c:	77fb      	strb	r3, [r7, #31]
 800305e:	e00a      	b.n	8003076 <UART_SetConfig+0x212>
 8003060:	2304      	movs	r3, #4
 8003062:	77fb      	strb	r3, [r7, #31]
 8003064:	e007      	b.n	8003076 <UART_SetConfig+0x212>
 8003066:	2308      	movs	r3, #8
 8003068:	77fb      	strb	r3, [r7, #31]
 800306a:	e004      	b.n	8003076 <UART_SetConfig+0x212>
 800306c:	2310      	movs	r3, #16
 800306e:	77fb      	strb	r3, [r7, #31]
 8003070:	e001      	b.n	8003076 <UART_SetConfig+0x212>
 8003072:	2310      	movs	r3, #16
 8003074:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800307e:	d16b      	bne.n	8003158 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003080:	7ffb      	ldrb	r3, [r7, #31]
 8003082:	2b08      	cmp	r3, #8
 8003084:	d838      	bhi.n	80030f8 <UART_SetConfig+0x294>
 8003086:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <UART_SetConfig+0x228>)
 8003088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308c:	080030b1 	.word	0x080030b1
 8003090:	080030b9 	.word	0x080030b9
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030f9 	.word	0x080030f9
 800309c:	080030c7 	.word	0x080030c7
 80030a0:	080030f9 	.word	0x080030f9
 80030a4:	080030f9 	.word	0x080030f9
 80030a8:	080030f9 	.word	0x080030f9
 80030ac:	080030cf 	.word	0x080030cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7ff f8e4 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 80030b4:	61b8      	str	r0, [r7, #24]
        break;
 80030b6:	e024      	b.n	8003102 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030b8:	f7ff f902 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 80030bc:	61b8      	str	r0, [r7, #24]
        break;
 80030be:	e020      	b.n	8003102 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <UART_SetConfig+0x290>)
 80030c2:	61bb      	str	r3, [r7, #24]
        break;
 80030c4:	e01d      	b.n	8003102 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030c6:	f7ff f879 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 80030ca:	61b8      	str	r0, [r7, #24]
        break;
 80030cc:	e019      	b.n	8003102 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030d2:	61bb      	str	r3, [r7, #24]
        break;
 80030d4:	e015      	b.n	8003102 <UART_SetConfig+0x29e>
 80030d6:	bf00      	nop
 80030d8:	efff69f3 	.word	0xefff69f3
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40004800 	.word	0x40004800
 80030ec:	40004c00 	.word	0x40004c00
 80030f0:	40005000 	.word	0x40005000
 80030f4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	77bb      	strb	r3, [r7, #30]
        break;
 8003100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d073      	beq.n	80031f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	005a      	lsls	r2, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	441a      	add	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d916      	bls.n	8003152 <UART_SetConfig+0x2ee>
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312a:	d212      	bcs.n	8003152 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	b29a      	uxth	r2, r3
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	4313      	orrs	r3, r2
 8003146:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	89fa      	ldrh	r2, [r7, #14]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e04e      	b.n	80031f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	77bb      	strb	r3, [r7, #30]
 8003156:	e04b      	b.n	80031f0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	2b08      	cmp	r3, #8
 800315c:	d827      	bhi.n	80031ae <UART_SetConfig+0x34a>
 800315e:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <UART_SetConfig+0x300>)
 8003160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003164:	08003189 	.word	0x08003189
 8003168:	08003191 	.word	0x08003191
 800316c:	08003199 	.word	0x08003199
 8003170:	080031af 	.word	0x080031af
 8003174:	0800319f 	.word	0x0800319f
 8003178:	080031af 	.word	0x080031af
 800317c:	080031af 	.word	0x080031af
 8003180:	080031af 	.word	0x080031af
 8003184:	080031a7 	.word	0x080031a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003188:	f7ff f878 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 800318c:	61b8      	str	r0, [r7, #24]
        break;
 800318e:	e013      	b.n	80031b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003190:	f7ff f896 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8003194:	61b8      	str	r0, [r7, #24]
        break;
 8003196:	e00f      	b.n	80031b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <UART_SetConfig+0x3a4>)
 800319a:	61bb      	str	r3, [r7, #24]
        break;
 800319c:	e00c      	b.n	80031b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff f80d 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 80031a2:	61b8      	str	r0, [r7, #24]
        break;
 80031a4:	e008      	b.n	80031b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031aa:	61bb      	str	r3, [r7, #24]
        break;
 80031ac:	e004      	b.n	80031b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	77bb      	strb	r3, [r7, #30]
        break;
 80031b6:	bf00      	nop
    }

    if (pclk != 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d018      	beq.n	80031f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	085a      	lsrs	r2, r3, #1
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	441a      	add	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d909      	bls.n	80031ec <UART_SetConfig+0x388>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031de:	d205      	bcs.n	80031ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e001      	b.n	80031f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3720      	adds	r7, #32
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	007a1200 	.word	0x007a1200

0800320c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01a      	beq.n	8003322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800330a:	d10a      	bne.n	8003322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b098      	sub	sp, #96	@ 0x60
 8003354:	af02      	add	r7, sp, #8
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003360:	f7fd faa8 	bl	80008b4 <HAL_GetTick>
 8003364:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b08      	cmp	r3, #8
 8003372:	d12e      	bne.n	80033d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	2200      	movs	r2, #0
 800337e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f88c 	bl	80034a0 <UART_WaitOnFlagUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d021      	beq.n	80033d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800339c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80033ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e6      	bne.n	800338e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e062      	b.n	8003498 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d149      	bne.n	8003474 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e8:	2200      	movs	r2, #0
 80033ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f856 	bl	80034a0 <UART_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d03c      	beq.n	8003474 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	623b      	str	r3, [r7, #32]
   return(result);
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800340e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003418:	633b      	str	r3, [r7, #48]	@ 0x30
 800341a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800341e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e6      	bne.n	80033fa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3308      	adds	r3, #8
 8003432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	e853 3f00 	ldrex	r3, [r3]
 800343a:	60fb      	str	r3, [r7, #12]
   return(result);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3308      	adds	r3, #8
 800344a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800344c:	61fa      	str	r2, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	69b9      	ldr	r1, [r7, #24]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	617b      	str	r3, [r7, #20]
   return(result);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e5      	bne.n	800342c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e011      	b.n	8003498 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3758      	adds	r7, #88	@ 0x58
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b0:	e04f      	b.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d04b      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fd f9fb 	bl	80008b4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e04e      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d037      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b80      	cmp	r3, #128	@ 0x80
 80034e6:	d034      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b40      	cmp	r3, #64	@ 0x40
 80034ec:	d031      	beq.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 0308 	and.w	r3, r3, #8
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d110      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2208      	movs	r2, #8
 8003502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f838 	bl	800357a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2208      	movs	r2, #8
 800350e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e029      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352c:	d111      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f81e 	bl	800357a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e00f      	b.n	8003572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69da      	ldr	r2, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	4013      	ands	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	429a      	cmp	r2, r3
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	429a      	cmp	r2, r3
 800356e:	d0a0      	beq.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800357a:	b480      	push	{r7}
 800357c:	b095      	sub	sp, #84	@ 0x54
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e6      	bne.n	8003582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3308      	adds	r3, #8
 80035ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d118      	bne.n	8003622 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f023 0310 	bic.w	r3, r3, #16
 8003604:	647b      	str	r3, [r7, #68]	@ 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	6979      	ldr	r1, [r7, #20]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	613b      	str	r3, [r7, #16]
   return(result);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e6      	bne.n	80035f0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003636:	bf00      	nop
 8003638:	3754      	adds	r7, #84	@ 0x54
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <memset>:
 8003642:	4402      	add	r2, r0
 8003644:	4603      	mov	r3, r0
 8003646:	4293      	cmp	r3, r2
 8003648:	d100      	bne.n	800364c <memset+0xa>
 800364a:	4770      	bx	lr
 800364c:	f803 1b01 	strb.w	r1, [r3], #1
 8003650:	e7f9      	b.n	8003646 <memset+0x4>
	...

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4d0d      	ldr	r5, [pc, #52]	@ (800368c <__libc_init_array+0x38>)
 8003658:	4c0d      	ldr	r4, [pc, #52]	@ (8003690 <__libc_init_array+0x3c>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	2600      	movs	r6, #0
 8003660:	42a6      	cmp	r6, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	4d0b      	ldr	r5, [pc, #44]	@ (8003694 <__libc_init_array+0x40>)
 8003666:	4c0c      	ldr	r4, [pc, #48]	@ (8003698 <__libc_init_array+0x44>)
 8003668:	f000 f818 	bl	800369c <_init>
 800366c:	1b64      	subs	r4, r4, r5
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	2600      	movs	r6, #0
 8003672:	42a6      	cmp	r6, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f855 3b04 	ldr.w	r3, [r5], #4
 800367c:	4798      	blx	r3
 800367e:	3601      	adds	r6, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f855 3b04 	ldr.w	r3, [r5], #4
 8003686:	4798      	blx	r3
 8003688:	3601      	adds	r6, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	080036ec 	.word	0x080036ec
 8003690:	080036ec 	.word	0x080036ec
 8003694:	080036ec 	.word	0x080036ec
 8003698:	080036f0 	.word	0x080036f0

0800369c <_init>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	bf00      	nop
 80036a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a2:	bc08      	pop	{r3}
 80036a4:	469e      	mov	lr, r3
 80036a6:	4770      	bx	lr

080036a8 <_fini>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	bf00      	nop
 80036ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ae:	bc08      	pop	{r3}
 80036b0:	469e      	mov	lr, r3
 80036b2:	4770      	bx	lr
