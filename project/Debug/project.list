
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005638  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080057d8  080057d8  000067d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058cc  080058cc  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058cc  080058cc  000068cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058d4  080058d4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d4  080058d4  000068d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058d8  080058d8  000068d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080058dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000002c0  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db74  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002452  00000000  00000000  00014c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00017060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a10  00000000  00000000  00017da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e34  00000000  00000000  000187b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ea9  00000000  00000000  0003a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbefa  00000000  00000000  0004c495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011838f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003acc  00000000  00000000  001183d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0011bea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057c0 	.word	0x080057c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080057c0 	.word	0x080057c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <generate_sound>:
 *      Author: Zhaoji Gou
 */

#include "main.h"
extern void coast_asm_delay(uint32_t milliseconds);
void generate_sound(uint16_t frequency, uint8_t duty_cycle, TIM_HandleTypeDef htim1) {
 8000280:	b082      	sub	sp, #8
 8000282:	b580      	push	{r7, lr}
 8000284:	b084      	sub	sp, #16
 8000286:	af00      	add	r7, sp, #0
 8000288:	f107 0c18 	add.w	ip, r7, #24
 800028c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000290:	4603      	mov	r3, r0
 8000292:	80fb      	strh	r3, [r7, #6]
 8000294:	460b      	mov	r3, r1
 8000296:	717b      	strb	r3, [r7, #5]
	/* protect the function from invalid frequency input */
	if (frequency == 0) return;
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d018      	beq.n	80002d0 <generate_sound+0x50>
	/* millisecond trigger period */
	uint32_t period = 72000 / frequency;
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	4a0f      	ldr	r2, [pc, #60]	@ (80002e0 <generate_sound+0x60>)
 80002a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80002a6:	60fb      	str	r3, [r7, #12]
	/* setup PWM channel and tim1 autoloader */
	TIM1->ARR = period - 1;
 80002a8:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <generate_sound+0x64>)
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = (period * duty_cycle) / 100;
 80002b0:	797b      	ldrb	r3, [r7, #5]
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	fb02 f303 	mul.w	r3, r2, r3
 80002b8:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <generate_sound+0x64>)
 80002ba:	490b      	ldr	r1, [pc, #44]	@ (80002e8 <generate_sound+0x68>)
 80002bc:	fba1 1303 	umull	r1, r3, r1, r3
 80002c0:	095b      	lsrs	r3, r3, #5
 80002c2:	6353      	str	r3, [r2, #52]	@ 0x34
	/* start the timer1 and buzzer */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002c4:	2108      	movs	r1, #8
 80002c6:	f107 0018 	add.w	r0, r7, #24
 80002ca:	f003 fe35 	bl	8003f38 <HAL_TIM_PWM_Start>
 80002ce:	e000      	b.n	80002d2 <generate_sound+0x52>
	if (frequency == 0) return;
 80002d0:	bf00      	nop
}
 80002d2:	3710      	adds	r7, #16
 80002d4:	46bd      	mov	sp, r7
 80002d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002da:	b002      	add	sp, #8
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	00011940 	.word	0x00011940
 80002e4:	40012c00 	.word	0x40012c00
 80002e8:	51eb851f 	.word	0x51eb851f

080002ec <stop_sound>:

void stop_sound(TIM_HandleTypeDef htim1) {
 80002ec:	b084      	sub	sp, #16
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	f107 0c08 	add.w	ip, r7, #8
 80002f6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* stop the timer1 and buzzer */
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80002fa:	2108      	movs	r1, #8
 80002fc:	f107 0008 	add.w	r0, r7, #8
 8000300:	f003 ff26 	bl	8004150 <HAL_TIM_PWM_Stop>
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <homePage>:
#include "lcd.h"

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void homePage() {
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

	LCD_SendStr("FITNESS ");
 8000316:	480e      	ldr	r0, [pc, #56]	@ (8000350 <homePage+0x40>)
 8000318:	f000 f96e 	bl	80005f8 <LCD_SendStr>

	char buff[16];

	int temp = 21; // placeholder
 800031c:	2315      	movs	r3, #21
 800031e:	617b      	str	r3, [r7, #20]
	sprintf(buff, "%dC ", temp);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	697a      	ldr	r2, [r7, #20]
 8000324:	490b      	ldr	r1, [pc, #44]	@ (8000354 <homePage+0x44>)
 8000326:	4618      	mov	r0, r3
 8000328:	f004 fdaa 	bl	8004e80 <siprintf>
	LCD_SendStr(buff);
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f962 	bl	80005f8 <LCD_SendStr>

	LCD_SendStr(" 57%");
 8000334:	4808      	ldr	r0, [pc, #32]	@ (8000358 <homePage+0x48>)
 8000336:	f000 f95f 	bl	80005f8 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 800033a:	20c0      	movs	r0, #192	@ 0xc0
 800033c:	f000 f920 	bl	8000580 <LCD_SendCmd>

	LCD_SendStr("OPT ");
 8000340:	4806      	ldr	r0, [pc, #24]	@ (800035c <homePage+0x4c>)
 8000342:	f000 f959 	bl	80005f8 <LCD_SendStr>

}
 8000346:	bf00      	nop
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	080057d8 	.word	0x080057d8
 8000354:	080057e4 	.word	0x080057e4
 8000358:	080057ec 	.word	0x080057ec
 800035c:	080057f4 	.word	0x080057f4

08000360 <check_double_press>:
                         bool is_holding[],
						 uint32_t decimal_second_count,
						 uint32_t double_press_interval,
						 uint32_t button_double_press_time[],
						 uint32_t button_holding_time[])
{
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	603b      	str	r3, [r7, #0]
    if (is_single_press[button_index] == true &&
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	68ba      	ldr	r2, [r7, #8]
 8000372:	4413      	add	r3, r2
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d022      	beq.n	80003c0 <check_double_press+0x60>
        is_double_press[button_index] == false &&
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	f083 0301 	eor.w	r3, r3, #1
 8000386:	b2db      	uxtb	r3, r3
    if (is_single_press[button_index] == true &&
 8000388:	2b00      	cmp	r3, #0
 800038a:	d019      	beq.n	80003c0 <check_double_press+0x60>
        (decimal_second_count - button_double_press_time[button_index]) <= double_press_interval) {
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	6a3a      	ldr	r2, [r7, #32]
 8000392:	4413      	add	r3, r2
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	69ba      	ldr	r2, [r7, #24]
 8000398:	1ad3      	subs	r3, r2, r3
        is_double_press[button_index] == false &&
 800039a:	69fa      	ldr	r2, [r7, #28]
 800039c:	429a      	cmp	r2, r3
 800039e:	d30f      	bcc.n	80003c0 <check_double_press+0x60>
        is_double_press[button_index] = true;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	687a      	ldr	r2, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
        is_single_press[button_index] = false;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	4413      	add	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
        is_holding[button_index] = false;
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	683a      	ldr	r2, [r7, #0]
 80003b8:	4413      	add	r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
 80003be:	e00e      	b.n	80003de <check_double_press+0x7e>

    } else {
        is_single_press[button_index] = true;
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	4413      	add	r3, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	701a      	strb	r2, [r3, #0]
        is_double_press[button_index] = false;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
        is_holding[button_index] = false;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	683a      	ldr	r2, [r7, #0]
 80003d8:	4413      	add	r3, r2
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
    }

    button_holding_time[button_index] = decimal_second_count;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80003e4:	4413      	add	r3, r2
 80003e6:	69ba      	ldr	r2, [r7, #24]
 80003e8:	601a      	str	r2, [r3, #0]
}
 80003ea:	bf00      	nop
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <check_holding>:
                   bool is_holding[],
                   uint32_t decimal_second_count,
                   uint32_t holding_bound,
                   uint32_t button_double_press_time[],
                   uint32_t button_holding_time[])
{
 80003f6:	b480      	push	{r7}
 80003f8:	b085      	sub	sp, #20
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
 8000402:	603b      	str	r3, [r7, #0]
    if ((decimal_second_count - button_holding_time[button_index]) >= holding_bound) {
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800040a:	4413      	add	r3, r2
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	69ba      	ldr	r2, [r7, #24]
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	69fa      	ldr	r2, [r7, #28]
 8000414:	429a      	cmp	r2, r3
 8000416:	d80f      	bhi.n	8000438 <check_holding+0x42>
        is_holding[button_index] = true;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	683a      	ldr	r2, [r7, #0]
 800041c:	4413      	add	r3, r2
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
        is_double_press[button_index] = false;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4413      	add	r3, r2
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
        is_single_press[button_index] = false;
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	4413      	add	r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
    } else {
        button_double_press_time[button_index] = decimal_second_count;
    }
}
 8000436:	e005      	b.n	8000444 <check_holding+0x4e>
        button_double_press_time[button_index] = decimal_second_count;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	6a3a      	ldr	r2, [r7, #32]
 800043e:	4413      	add	r3, r2
 8000440:	69ba      	ldr	r2, [r7, #24]
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	3714      	adds	r7, #20
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <coast_lcd_init>:

#include "main.h"
#include "coast.h"
#include "lcd.h"

void coast_lcd_init(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	// 1. wait for enough time to stabilise
	 HAL_Delay(50);
 8000454:	2032      	movs	r0, #50	@ 0x32
 8000456:	f001 f89b 	bl	8001590 <HAL_Delay>
	 // 2. send command 0011 (function set) and wait for >=4.1 ms (enough wait inside
	 // the pulse)
	 LCD_PutNibble(0b0011);
 800045a:	2003      	movs	r0, #3
 800045c:	f000 f83e 	bl	80004dc <LCD_PutNibble>
	 LCD_Pulse();
 8000460:	f000 f826 	bl	80004b0 <LCD_Pulse>
	 HAL_Delay(5);
 8000464:	2005      	movs	r0, #5
 8000466:	f001 f893 	bl	8001590 <HAL_Delay>
	 // 3. send command 0011 (function set) again and wait for >=100 us
	 // fill this
	 LCD_PutNibble(0b0011);
 800046a:	2003      	movs	r0, #3
 800046c:	f000 f836 	bl	80004dc <LCD_PutNibble>
	 LCD_Pulse();
 8000470:	f000 f81e 	bl	80004b0 <LCD_Pulse>
	 HAL_Delay(1);
 8000474:	2001      	movs	r0, #1
 8000476:	f001 f88b 	bl	8001590 <HAL_Delay>
	 // 4. send command 0011 (function set) again
	 // fill this
	 LCD_PutNibble(0b0011);
 800047a:	2003      	movs	r0, #3
 800047c:	f000 f82e 	bl	80004dc <LCD_PutNibble>
	 LCD_Pulse();
 8000480:	f000 f816 	bl	80004b0 <LCD_Pulse>
	 // 5. send command 0010 to set to 4-bit bus mode
	 // fill this
	 LCD_PutNibble(0b0010);
 8000484:	2002      	movs	r0, #2
 8000486:	f000 f829 	bl	80004dc <LCD_PutNibble>
	 LCD_Pulse();
 800048a:	f000 f811 	bl	80004b0 <LCD_Pulse>
	 // 6. send command 0010 1100 (function set: 4-bit mode, 2-lines, 5x8 font)
	 LCD_SendCmd(0b00101100);
 800048e:	202c      	movs	r0, #44	@ 0x2c
 8000490:	f000 f876 	bl	8000580 <LCD_SendCmd>
	 // 7. Send command 0000 1000 to display ON/OFF
	 LCD_SendCmd(0b00001000);
 8000494:	2008      	movs	r0, #8
 8000496:	f000 f873 	bl	8000580 <LCD_SendCmd>
	 // 8. Send command to clear the display
	 // fill this
	 LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800049a:	2001      	movs	r0, #1
 800049c:	f000 f870 	bl	8000580 <LCD_SendCmd>
	 // 9. Send command set entry mode (increment cursor, no display shift)
	 // fill this
	 LCD_SendCmd(0b00000110);
 80004a0:	2006      	movs	r0, #6
 80004a2:	f000 f86d 	bl	8000580 <LCD_SendCmd>
	 // 10. send command 0000 1111 to display on, cursor on, blink on
	 // fill this
	 LCD_SendCmd(0b00001111);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f000 f86a 	bl	8000580 <LCD_SendCmd>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <LCD_Pulse>:

void LCD_Pulse(){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2104      	movs	r1, #4
 80004b8:	4807      	ldr	r0, [pc, #28]	@ (80004d8 <LCD_Pulse+0x28>)
 80004ba:	f001 fb41 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004be:	2001      	movs	r0, #1
 80004c0:	f001 f866 	bl	8001590 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2104      	movs	r1, #4
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <LCD_Pulse+0x28>)
 80004ca:	f001 fb39 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f001 f85e 	bl	8001590 <HAL_Delay>
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	48000c00 	.word	0x48000c00

080004dc <LCD_PutNibble>:

void LCD_PutNibble(uint8_t nibble){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	uint8_t D4 = nibble & 1;
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	73fb      	strb	r3, [r7, #15]
	uint8_t D5 = (nibble >> 1) & 1;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	73bb      	strb	r3, [r7, #14]
	uint8_t D6 = (nibble >> 2) & 1;
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	089b      	lsrs	r3, r3, #2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	737b      	strb	r3, [r7, #13]
	uint8_t D7 = (nibble >> 3) & 1;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	b2db      	uxtb	r3, r3
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, D4? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b00      	cmp	r3, #0
 8000516:	bf14      	ite	ne
 8000518:	2301      	movne	r3, #1
 800051a:	2300      	moveq	r3, #0
 800051c:	b2db      	uxtb	r3, r3
 800051e:	461a      	mov	r2, r3
 8000520:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000524:	4815      	ldr	r0, [pc, #84]	@ (800057c <LCD_PutNibble+0xa0>)
 8000526:	f001 fb0b 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, D5? GPIO_PIN_SET : GPIO_PIN_RESET);
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	2b00      	cmp	r3, #0
 800052e:	bf14      	ite	ne
 8000530:	2301      	movne	r3, #1
 8000532:	2300      	moveq	r3, #0
 8000534:	b2db      	uxtb	r3, r3
 8000536:	461a      	mov	r2, r3
 8000538:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800053c:	480f      	ldr	r0, [pc, #60]	@ (800057c <LCD_PutNibble+0xa0>)
 800053e:	f001 faff 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, D6? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000542:	7b7b      	ldrb	r3, [r7, #13]
 8000544:	2b00      	cmp	r3, #0
 8000546:	bf14      	ite	ne
 8000548:	2301      	movne	r3, #1
 800054a:	2300      	moveq	r3, #0
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <LCD_PutNibble+0xa0>)
 8000556:	f001 faf3 	bl	8001b40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, D7? GPIO_PIN_SET : GPIO_PIN_RESET);
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	2b00      	cmp	r3, #0
 800055e:	bf14      	ite	ne
 8000560:	2301      	movne	r3, #1
 8000562:	2300      	moveq	r3, #0
 8000564:	b2db      	uxtb	r3, r3
 8000566:	461a      	mov	r2, r3
 8000568:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <LCD_PutNibble+0xa0>)
 800056e:	f001 fae7 	bl	8001b40 <HAL_GPIO_WritePin>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	48000800 	.word	0x48000800

08000580 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	LCD_PutNibble(c >> 4);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	091b      	lsrs	r3, r3, #4
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ffa3 	bl	80004dc <LCD_PutNibble>
	LCD_Pulse();
 8000596:	f7ff ff8b 	bl	80004b0 <LCD_Pulse>
	LCD_PutNibble(c);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff9d 	bl	80004dc <LCD_PutNibble>
	LCD_Pulse();
 80005a2:	f7ff ff85 	bl	80004b0 <LCD_Pulse>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <LCD_SendData>:


void LCD_SendData(uint8_t c){
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c2:	f001 fabd 	bl	8001b40 <HAL_GPIO_WritePin>
	LCD_PutNibble(c >> 4);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	091b      	lsrs	r3, r3, #4
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ff85 	bl	80004dc <LCD_PutNibble>
	LCD_Pulse();
 80005d2:	f7ff ff6d 	bl	80004b0 <LCD_Pulse>
	LCD_PutNibble(c);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff7f 	bl	80004dc <LCD_PutNibble>
	LCD_Pulse();
 80005de:	f7ff ff67 	bl	80004b0 <LCD_Pulse>
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f001 faa8 	bl	8001b40 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <LCD_SendStr>:

// send string to LCD data
void LCD_SendStr(char *str){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e00f      	b.n	8000626 <LCD_SendStr+0x2e>
		if (i == 15) {
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b0f      	cmp	r3, #15
 800060a:	d102      	bne.n	8000612 <LCD_SendStr+0x1a>
			LCD_SendCmd(LCD_SECOND_LINE);
 800060c:	20c0      	movs	r0, #192	@ 0xc0
 800060e:	f7ff ffb7 	bl	8000580 <LCD_SendCmd>
		}
		LCD_SendData((uint8_t)str[i]);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffc7 	bl	80005ae <LCD_SendData>
	for (int i = 0; str[i]; i++) {
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1e9      	bne.n	8000606 <LCD_SendStr+0xe>
	}
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063e:	b095      	sub	sp, #84	@ 0x54
 8000640:	af12      	add	r7, sp, #72	@ 0x48
 8000642:	4603      	mov	r3, r0
 8000644:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800064c:	d157      	bne.n	80006fe <HAL_GPIO_EXTI_Callback+0xc2>
			/* B1 is pressed */
			if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1) {
 800064e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000652:	489d      	ldr	r0, [pc, #628]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000654:	f001 fa5c 	bl	8001b10 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d12c      	bne.n	80006b8 <HAL_GPIO_EXTI_Callback+0x7c>
				/* sound indication */
				if (enable_sound) {
 800065e:	4b9b      	ldr	r3, [pc, #620]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x290>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d00e      	beq.n	8000684 <HAL_GPIO_EXTI_Callback+0x48>
					generate_sound(300,50,htim1);
 8000666:	4c9a      	ldr	r4, [pc, #616]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 8000668:	4668      	mov	r0, sp
 800066a:	f104 0308 	add.w	r3, r4, #8
 800066e:	2244      	movs	r2, #68	@ 0x44
 8000670:	4619      	mov	r1, r3
 8000672:	f004 fc5b 	bl	8004f2c <memcpy>
 8000676:	e894 000c 	ldmia.w	r4, {r2, r3}
 800067a:	2132      	movs	r1, #50	@ 0x32
 800067c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000680:	f7ff fdfe 	bl	8000280 <generate_sound>
				}
				switch (currentScreen) {
 8000684:	4b93      	ldr	r3, [pc, #588]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b01      	cmp	r3, #1
 800068c:	d103      	bne.n	8000696 <HAL_GPIO_EXTI_Callback+0x5a>
				case HOME:
					currentScreen = TIME;
 800068e:	4b91      	ldr	r3, [pc, #580]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8000690:	2202      	movs	r2, #2
 8000692:	701a      	strb	r2, [r3, #0]
					break;
 8000694:	bf00      	nop
				}
				check_double_press(0, is_single_press, is_double_press, is_holding,
 8000696:	4b90      	ldr	r3, [pc, #576]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a90      	ldr	r2, [pc, #576]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	4990      	ldr	r1, [pc, #576]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006a0:	9103      	str	r1, [sp, #12]
 80006a2:	4990      	ldr	r1, [pc, #576]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006a4:	9102      	str	r1, [sp, #8]
 80006a6:	9201      	str	r2, [sp, #4]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b8f      	ldr	r3, [pc, #572]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006ac:	4a8f      	ldr	r2, [pc, #572]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 80006ae:	4990      	ldr	r1, [pc, #576]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff fe55 	bl	8000360 <check_double_press>
							  holding_bound,
							  button_double_press_time,
							  button_holding_time);
			}
		}
}
 80006b6:	e143      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
				stop_sound(htim1);
 80006b8:	4e85      	ldr	r6, [pc, #532]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 80006ba:	466d      	mov	r5, sp
 80006bc:	f106 0410 	add.w	r4, r6, #16
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006d4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006d8:	f7ff fe08 	bl	80002ec <stop_sound>
				check_holding(0,
 80006dc:	4b7e      	ldr	r3, [pc, #504]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a84      	ldr	r2, [pc, #528]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80006e2:	6812      	ldr	r2, [r2, #0]
 80006e4:	497e      	ldr	r1, [pc, #504]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006e6:	9103      	str	r1, [sp, #12]
 80006e8:	497e      	ldr	r1, [pc, #504]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006ea:	9102      	str	r1, [sp, #8]
 80006ec:	9201      	str	r2, [sp, #4]
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	4b7d      	ldr	r3, [pc, #500]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006f2:	4a7e      	ldr	r2, [pc, #504]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 80006f4:	497e      	ldr	r1, [pc, #504]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fe7d 	bl	80003f6 <check_holding>
}
 80006fc:	e120      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
		} else if (GPIO_Pin == SW1_Pin) {
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d157      	bne.n	80007b4 <HAL_GPIO_EXTI_Callback+0x178>
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1) {
 8000704:	2102      	movs	r1, #2
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f001 fa01 	bl	8001b10 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d12c      	bne.n	800076e <HAL_GPIO_EXTI_Callback+0x132>
				if (enable_sound) {
 8000714:	4b6d      	ldr	r3, [pc, #436]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x290>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d00e      	beq.n	800073a <HAL_GPIO_EXTI_Callback+0xfe>
					generate_sound(300,50,htim1);
 800071c:	4c6c      	ldr	r4, [pc, #432]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 800071e:	4668      	mov	r0, sp
 8000720:	f104 0308 	add.w	r3, r4, #8
 8000724:	2244      	movs	r2, #68	@ 0x44
 8000726:	4619      	mov	r1, r3
 8000728:	f004 fc00 	bl	8004f2c <memcpy>
 800072c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000730:	2132      	movs	r1, #50	@ 0x32
 8000732:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000736:	f7ff fda3 	bl	8000280 <generate_sound>
				switch (currentScreen){
 800073a:	4b66      	ldr	r3, [pc, #408]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b03      	cmp	r3, #3
 8000742:	d103      	bne.n	800074c <HAL_GPIO_EXTI_Callback+0x110>
						currentScreen = TIME;
 8000744:	4b63      	ldr	r3, [pc, #396]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8000746:	2202      	movs	r2, #2
 8000748:	701a      	strb	r2, [r3, #0]
						break;
 800074a:	bf00      	nop
				check_double_press(1, is_single_press, is_double_press, is_holding,
 800074c:	4b62      	ldr	r3, [pc, #392]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a62      	ldr	r2, [pc, #392]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000752:	6812      	ldr	r2, [r2, #0]
 8000754:	4962      	ldr	r1, [pc, #392]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000756:	9103      	str	r1, [sp, #12]
 8000758:	4962      	ldr	r1, [pc, #392]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800075a:	9102      	str	r1, [sp, #8]
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4b61      	ldr	r3, [pc, #388]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000762:	4a62      	ldr	r2, [pc, #392]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000764:	4962      	ldr	r1, [pc, #392]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff fdfa 	bl	8000360 <check_double_press>
}
 800076c:	e0e8      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
				stop_sound(htim1);
 800076e:	4e58      	ldr	r6, [pc, #352]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 8000770:	466d      	mov	r5, sp
 8000772:	f106 0410 	add.w	r4, r6, #16
 8000776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800077a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800077e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000782:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000786:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800078a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800078e:	f7ff fdad 	bl	80002ec <stop_sound>
				check_holding(1,
 8000792:	4b51      	ldr	r3, [pc, #324]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a57      	ldr	r2, [pc, #348]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	4951      	ldr	r1, [pc, #324]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800079c:	9103      	str	r1, [sp, #12]
 800079e:	4951      	ldr	r1, [pc, #324]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80007a0:	9102      	str	r1, [sp, #8]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	4b50      	ldr	r3, [pc, #320]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80007a8:	4a50      	ldr	r2, [pc, #320]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 80007aa:	4951      	ldr	r1, [pc, #324]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fe22 	bl	80003f6 <check_holding>
}
 80007b2:	e0c5      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
		} else if (GPIO_Pin == SW2_Pin) {
 80007b4:	88fb      	ldrh	r3, [r7, #6]
 80007b6:	2b10      	cmp	r3, #16
 80007b8:	d151      	bne.n	800085e <HAL_GPIO_EXTI_Callback+0x222>
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1) {
 80007ba:	2110      	movs	r1, #16
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c0:	f001 f9a6 	bl	8001b10 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d126      	bne.n	8000818 <HAL_GPIO_EXTI_Callback+0x1dc>
				if (enable_sound) {
 80007ca:	4b40      	ldr	r3, [pc, #256]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x290>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00e      	beq.n	80007f0 <HAL_GPIO_EXTI_Callback+0x1b4>
					generate_sound(300,50,htim1);
 80007d2:	4c3f      	ldr	r4, [pc, #252]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 80007d4:	4668      	mov	r0, sp
 80007d6:	f104 0308 	add.w	r3, r4, #8
 80007da:	2244      	movs	r2, #68	@ 0x44
 80007dc:	4619      	mov	r1, r3
 80007de:	f004 fba5 	bl	8004f2c <memcpy>
 80007e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80007e6:	2132      	movs	r1, #50	@ 0x32
 80007e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007ec:	f7ff fd48 	bl	8000280 <generate_sound>
				currentScreen = HOME;
 80007f0:	4b38      	ldr	r3, [pc, #224]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
				check_double_press(2, is_single_press, is_double_press, is_holding,
 80007f6:	4b38      	ldr	r3, [pc, #224]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a38      	ldr	r2, [pc, #224]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	4938      	ldr	r1, [pc, #224]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000800:	9103      	str	r1, [sp, #12]
 8000802:	4938      	ldr	r1, [pc, #224]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000804:	9102      	str	r1, [sp, #8]
 8000806:	9201      	str	r2, [sp, #4]
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	4b37      	ldr	r3, [pc, #220]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800080c:	4a37      	ldr	r2, [pc, #220]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 800080e:	4938      	ldr	r1, [pc, #224]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff fda5 	bl	8000360 <check_double_press>
}
 8000816:	e093      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
				stop_sound(htim1);
 8000818:	4e2d      	ldr	r6, [pc, #180]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 800081a:	466d      	mov	r5, sp
 800081c:	f106 0410 	add.w	r4, r6, #16
 8000820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800082a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800082c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000830:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000834:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000838:	f7ff fd58 	bl	80002ec <stop_sound>
				check_holding(2,
 800083c:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a2c      	ldr	r2, [pc, #176]	@ (80008f4 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000842:	6812      	ldr	r2, [r2, #0]
 8000844:	4926      	ldr	r1, [pc, #152]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000846:	9103      	str	r1, [sp, #12]
 8000848:	4926      	ldr	r1, [pc, #152]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800084a:	9102      	str	r1, [sp, #8]
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000852:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000854:	4926      	ldr	r1, [pc, #152]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff fdcd 	bl	80003f6 <check_holding>
}
 800085c:	e070      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
			if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == 1) {
 800085e:	2101      	movs	r1, #1
 8000860:	4825      	ldr	r0, [pc, #148]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000862:	f001 f955 	bl	8001b10 <HAL_GPIO_ReadPin>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d147      	bne.n	80008fc <HAL_GPIO_EXTI_Callback+0x2c0>
				if (enable_sound) {
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x290>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00e      	beq.n	8000892 <HAL_GPIO_EXTI_Callback+0x256>
					generate_sound(300,50,htim1);
 8000874:	4c16      	ldr	r4, [pc, #88]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x294>)
 8000876:	4668      	mov	r0, sp
 8000878:	f104 0308 	add.w	r3, r4, #8
 800087c:	2244      	movs	r2, #68	@ 0x44
 800087e:	4619      	mov	r1, r3
 8000880:	f004 fb54 	bl	8004f2c <memcpy>
 8000884:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000888:	2132      	movs	r1, #50	@ 0x32
 800088a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800088e:	f7ff fcf7 	bl	8000280 <generate_sound>
				switch (currentScreen) {
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b02      	cmp	r3, #2
 800089a:	d103      	bne.n	80008a4 <HAL_GPIO_EXTI_Callback+0x268>
					currentScreen = ALARM;
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <HAL_GPIO_EXTI_Callback+0x298>)
 800089e:	2203      	movs	r2, #3
 80008a0:	701a      	strb	r2, [r3, #0]
					break;
 80008a2:	bf00      	nop
				check_double_press(3, is_single_press, is_double_press, is_holding,
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <HAL_GPIO_EXTI_Callback+0x29c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <HAL_GPIO_EXTI_Callback+0x2a0>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	490c      	ldr	r1, [pc, #48]	@ (80008e0 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80008ae:	9103      	str	r1, [sp, #12]
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80008b2:	9102      	str	r1, [sp, #8]
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80008ba:	4a0c      	ldr	r2, [pc, #48]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2b0>)
 80008bc:	490c      	ldr	r1, [pc, #48]	@ (80008f0 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff fd4e 	bl	8000360 <check_double_press>
}
 80008c4:	e03c      	b.n	8000940 <HAL_GPIO_EXTI_Callback+0x304>
 80008c6:	bf00      	nop
 80008c8:	48000800 	.word	0x48000800
 80008cc:	20000008 	.word	0x20000008
 80008d0:	200000bc 	.word	0x200000bc
 80008d4:	20000009 	.word	0x20000009
 80008d8:	200001a4 	.word	0x200001a4
 80008dc:	20000000 	.word	0x20000000
 80008e0:	200001b8 	.word	0x200001b8
 80008e4:	200001a8 	.word	0x200001a8
 80008e8:	200001d0 	.word	0x200001d0
 80008ec:	200001cc 	.word	0x200001cc
 80008f0:	200001c8 	.word	0x200001c8
 80008f4:	20000004 	.word	0x20000004
 80008f8:	48000400 	.word	0x48000400
				stop_sound(htim1);
 80008fc:	4e12      	ldr	r6, [pc, #72]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x30c>)
 80008fe:	466d      	mov	r5, sp
 8000900:	f106 0410 	add.w	r4, r6, #16
 8000904:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000906:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800090e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000910:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000914:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000918:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800091c:	f7ff fce6 	bl	80002ec <stop_sound>
				check_holding(2,
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <HAL_GPIO_EXTI_Callback+0x310>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x314>)
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	490a      	ldr	r1, [pc, #40]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x318>)
 800092a:	9103      	str	r1, [sp, #12]
 800092c:	490a      	ldr	r1, [pc, #40]	@ (8000958 <HAL_GPIO_EXTI_Callback+0x31c>)
 800092e:	9102      	str	r1, [sp, #8]
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_GPIO_EXTI_Callback+0x320>)
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <HAL_GPIO_EXTI_Callback+0x324>)
 8000938:	490a      	ldr	r1, [pc, #40]	@ (8000964 <HAL_GPIO_EXTI_Callback+0x328>)
 800093a:	2002      	movs	r0, #2
 800093c:	f7ff fd5b 	bl	80003f6 <check_holding>
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000948:	200000bc 	.word	0x200000bc
 800094c:	200001a4 	.word	0x200001a4
 8000950:	20000004 	.word	0x20000004
 8000954:	200001b8 	.word	0x200001b8
 8000958:	200001a8 	.word	0x200001a8
 800095c:	200001d0 	.word	0x200001d0
 8000960:	200001cc 	.word	0x200001cc
 8000964:	200001c8 	.word	0x200001c8

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fdaa 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f874 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f000 fa62 	bl	8000e3c <MX_GPIO_Init>
  MX_RTC_Init();
 8000978:	f000 f8d6 	bl	8000b28 <MX_RTC_Init>
  MX_TIM1_Init();
 800097c:	f000 f960 	bl	8000c40 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000980:	f000 f9ee 	bl	8000d60 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000984:	f000 fa24 	bl	8000dd0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //timeDateInit();
  coast_lcd_init();
 8000988:	f7ff fd62 	bl	8000450 <coast_lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 800098c:	482d      	ldr	r0, [pc, #180]	@ (8000a44 <main+0xdc>)
 800098e:	f003 fa0b 	bl	8003da8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000992:	482d      	ldr	r0, [pc, #180]	@ (8000a48 <main+0xe0>)
 8000994:	f003 fa08 	bl	8003da8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (currentScreen != previousScreen) {
 8000998:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <main+0xe4>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <main+0xe8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d025      	beq.n	80009f4 <main+0x8c>
	  	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fde9 	bl	8000580 <LCD_SendCmd>
	  	HAL_Delay(2);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f000 fdee 	bl	8001590 <HAL_Delay>

	  	switch (currentScreen) {
 80009b4:	4b25      	ldr	r3, [pc, #148]	@ (8000a4c <main+0xe4>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d002      	beq.n	80009c4 <main+0x5c>
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d007      	beq.n	80009d2 <main+0x6a>
 80009c2:	e00d      	b.n	80009e0 <main+0x78>
	  		case HOME:
	  			homePage(); // draw layout only
 80009c4:	f7ff fca4 	bl	8000310 <homePage>
	  			updateTime(1, 4);
 80009c8:	2104      	movs	r1, #4
 80009ca:	2001      	movs	r0, #1
 80009cc:	f000 fcfe 	bl	80013cc <updateTime>
	  			break;
 80009d0:	e006      	b.n	80009e0 <main+0x78>
	  		case TIME:
	  			timePage();
 80009d2:	f000 fcb5 	bl	8001340 <timePage>
	  			updateTime(0, 4);
 80009d6:	2104      	movs	r1, #4
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 fcf7 	bl	80013cc <updateTime>
	  			break;
 80009de:	bf00      	nop
	  	}
	  	previousScreen = currentScreen;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <main+0xe4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <main+0xe8>)
 80009e8:	701a      	strb	r2, [r3, #0]

	  	lastTick = HAL_GetTick();  // reset update clock
 80009ea:	f000 fdc5 	bl	8001578 <HAL_GetTick>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <main+0xec>)
 80009f2:	6013      	str	r3, [r2, #0]
	  }
	    HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, 1);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009fa:	4817      	ldr	r0, [pc, #92]	@ (8000a58 <main+0xf0>)
 80009fc:	f001 f8a0 	bl	8001b40 <HAL_GPIO_WritePin>
	  /* UPDATE TIME EVERY SECOND ELAPSED */
	  if (HAL_GetTick() - lastTick >= 1000) {
 8000a00:	f000 fdba 	bl	8001578 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <main+0xec>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a10:	d3c2      	bcc.n	8000998 <main+0x30>

	  	switch (currentScreen) {
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <main+0xe4>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d002      	beq.n	8000a22 <main+0xba>
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d005      	beq.n	8000a2c <main+0xc4>
 8000a20:	e009      	b.n	8000a36 <main+0xce>
	  		case HOME:
	  			updateTime(1, 4);  // row 1 (second line), column 4
 8000a22:	2104      	movs	r1, #4
 8000a24:	2001      	movs	r0, #1
 8000a26:	f000 fcd1 	bl	80013cc <updateTime>

	  			break;
 8000a2a:	e004      	b.n	8000a36 <main+0xce>
	  		case TIME:
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fccc 	bl	80013cc <updateTime>
	  			break;
 8000a34:	bf00      	nop
	  	}
	  	lastTick = HAL_GetTick();
 8000a36:	f000 fd9f 	bl	8001578 <HAL_GetTick>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <main+0xec>)
 8000a3e:	6013      	str	r3, [r2, #0]
	  if (currentScreen != previousScreen) {
 8000a40:	e7aa      	b.n	8000998 <main+0x30>
 8000a42:	bf00      	nop
 8000a44:	20000108 	.word	0x20000108
 8000a48:	20000154 	.word	0x20000154
 8000a4c:	20000009 	.word	0x20000009
 8000a50:	200001d4 	.word	0x200001d4
 8000a54:	200001a0 	.word	0x200001a0
 8000a58:	48000400 	.word	0x48000400

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0a6      	sub	sp, #152	@ 0x98
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a66:	2228      	movs	r2, #40	@ 0x28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f004 fa2a 	bl	8004ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2258      	movs	r2, #88	@ 0x58
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f004 fa1c 	bl	8004ec4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a8c:	230a      	movs	r3, #10
 8000a8e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ab2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 f86d 	bl	8001ba0 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000acc:	f000 fab8 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aea:	2101      	movs	r1, #1
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f87b 	bl	8002be8 <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000af8:	f000 faa2 	bl	8001040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8000afc:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8000b00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b06:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fa2c 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b1a:	f000 fa91 	bl	8001040 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3798      	adds	r7, #152	@ 0x98
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	@ 0x40
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2228      	movs	r2, #40	@ 0x28
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f004 f9bb 	bl	8004ec4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b50:	4a3a      	ldr	r2, [pc, #232]	@ (8000c3c <MX_RTC_Init+0x114>)
 8000b52:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b54:	4b38      	ldr	r3, [pc, #224]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b5a:	4b37      	ldr	r3, [pc, #220]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b5c:	227f      	movs	r2, #127	@ 0x7f
 8000b5e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b60:	4b35      	ldr	r3, [pc, #212]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b66:	4b34      	ldr	r3, [pc, #208]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b6c:	4b32      	ldr	r3, [pc, #200]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b72:	4b31      	ldr	r3, [pc, #196]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b78:	482f      	ldr	r0, [pc, #188]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000b7a:	f002 fc13 	bl	80033a4 <HAL_RTC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b84:	f000 fa5c 	bl	8001040 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4823      	ldr	r0, [pc, #140]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000bac:	f002 fc7d 	bl	80034aa <HAL_RTC_SetTime>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000bb6:	f000 fa43 	bl	8001040 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000bdc:	f002 fd5d 	bl	800369a <HAL_RTC_SetDate>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000be6:	f000 fa2b 	bl	8001040 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_RTC_Init+0x110>)
 8000c22:	f002 fe0d 	bl	8003840 <HAL_RTC_SetAlarm_IT>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000c2c:	f000 fa08 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3740      	adds	r7, #64	@ 0x40
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000009c 	.word	0x2000009c
 8000c3c:	40002800 	.word	0x40002800

08000c40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	@ 0x58
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	222c      	movs	r2, #44	@ 0x2c
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 f929 	bl	8004ec4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c72:	4b39      	ldr	r3, [pc, #228]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c74:	4a39      	ldr	r2, [pc, #228]	@ (8000d5c <MX_TIM1_Init+0x11c>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000c78:	4b37      	ldr	r3, [pc, #220]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 296;
 8000c86:	4b34      	ldr	r3, [pc, #208]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c88:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000c8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c94:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ca0:	482d      	ldr	r0, [pc, #180]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000ca2:	f003 f8f1 	bl	8003e88 <HAL_TIM_PWM_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 f9c8 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4825      	ldr	r0, [pc, #148]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000cc4:	f003 ffca 	bl	8004c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000cce:	f000 f9b7 	bl	8001040 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd2:	2360      	movs	r3, #96	@ 0x60
 8000cd4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 198;
 8000cd6:	23c6      	movs	r3, #198	@ 0xc6
 8000cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4818      	ldr	r0, [pc, #96]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000cf8:	f003 fac6 	bl	8004288 <HAL_TIM_PWM_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d02:	f000 f99d 	bl	8001040 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4807      	ldr	r0, [pc, #28]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000d3c:	f004 f81a 	bl	8004d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000d46:	f000 f97b 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d4a:	4803      	ldr	r0, [pc, #12]	@ (8000d58 <MX_TIM1_Init+0x118>)
 8000d4c:	f000 fa22 	bl	8001194 <HAL_TIM_MspPostInit>

}
 8000d50:	bf00      	nop
 8000d52:	3758      	adds	r7, #88	@ 0x58
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000bc 	.word	0x200000bc
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000d72:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <MX_TIM6_Init+0x6c>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000d78:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8000d84:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000d86:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000d8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d92:	480d      	ldr	r0, [pc, #52]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000d94:	f002 ffb0 	bl	8003cf8 <HAL_TIM_Base_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000d9e:	f000 f94f 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	@ (8000dc8 <MX_TIM6_Init+0x68>)
 8000db0:	f003 ff54 	bl	8004c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000dba:	f000 f941 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000108 	.word	0x20000108
 8000dcc:	40001000 	.word	0x40001000

08000dd0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000de2:	4a15      	ldr	r2, [pc, #84]	@ (8000e38 <MX_TIM7_Init+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8000de6:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000de8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 71;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000df6:	2247      	movs	r2, #71	@ 0x47
 8000df8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000e02:	f002 ff79 	bl	8003cf8 <HAL_TIM_Base_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000e0c:	f000 f918 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <MX_TIM7_Init+0x64>)
 8000e1e:	f003 ff1d 	bl	8004c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 f90a 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000154 	.word	0x20000154
 8000e38:	40001400 	.word	0x40001400

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	4b77      	ldr	r3, [pc, #476]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a76      	ldr	r2, [pc, #472]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b74      	ldr	r3, [pc, #464]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6a:	4b71      	ldr	r3, [pc, #452]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a70      	ldr	r2, [pc, #448]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b6e      	ldr	r3, [pc, #440]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b6b      	ldr	r3, [pc, #428]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a6a      	ldr	r2, [pc, #424]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b68      	ldr	r3, [pc, #416]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b65      	ldr	r3, [pc, #404]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a64      	ldr	r2, [pc, #400]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b62      	ldr	r3, [pc, #392]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000eb8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8001030 <MX_GPIO_Init+0x1f4>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SRCLK_Pin|PWM_Buzzer_Pin|Control_RW_Pin|Data_D4_Pin
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f640 7145 	movw	r1, #3909	@ 0xf45
 8000ed0:	4858      	ldr	r0, [pc, #352]	@ (8001034 <MX_GPIO_Init+0x1f8>)
 8000ed2:	f000 fe35 	bl	8001b40 <HAL_GPIO_WritePin>
                          |Data_D5_Pin|Data_D6_Pin|Data_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Control_RS_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f248 0120 	movw	r1, #32800	@ 0x8020
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee0:	f000 fe2e 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin|LED_D2B4_Pin
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f248 41b8 	movw	r1, #33976	@ 0x84b8
 8000eea:	4853      	ldr	r0, [pc, #332]	@ (8001038 <MX_GPIO_Init+0x1fc>)
 8000eec:	f000 fe28 	bl	8001b40 <HAL_GPIO_WritePin>
                          |LED_D3_Pin|RCLK_Latch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Control_E_GPIO_Port, Control_E_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2104      	movs	r1, #4
 8000ef4:	4851      	ldr	r0, [pc, #324]	@ (800103c <MX_GPIO_Init+0x200>)
 8000ef6:	f000 fe23 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000efa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f00:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4848      	ldr	r0, [pc, #288]	@ (8001034 <MX_GPIO_Init+0x1f8>)
 8000f12:	f000 fc73 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin PWM_Buzzer_Pin Control_RW_Pin Data_D4_Pin
                           Data_D5_Pin Data_D6_Pin Data_D7_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|PWM_Buzzer_Pin|Control_RW_Pin|Data_D4_Pin
 8000f16:	f640 7345 	movw	r3, #3909	@ 0xf45
 8000f1a:	617b      	str	r3, [r7, #20]
                          |Data_D5_Pin|Data_D6_Pin|Data_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4841      	ldr	r0, [pc, #260]	@ (8001034 <MX_GPIO_Init+0x1f8>)
 8000f30:	f000 fc64 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8000f34:	2312      	movs	r3, #18
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f38:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f000 fc56 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f50:	230c      	movs	r3, #12
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6e:	f000 fc45 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Control_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Control_RS_Pin;
 8000f72:	f248 0320 	movw	r3, #32800	@ 0x8020
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8e:	f000 fc35 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8000f92:	2301      	movs	r3, #1
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f96:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4824      	ldr	r0, [pc, #144]	@ (8001038 <MX_GPIO_Init+0x1fc>)
 8000fa8:	f000 fc28 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin SER_Data_IN_Pin LED_D2_Pin LED_D2B4_Pin
                           LED_D3_Pin RCLK_Latch_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin|LED_D2B4_Pin
 8000fac:	f248 43b8 	movw	r3, #33976	@ 0x84b8
 8000fb0:	617b      	str	r3, [r7, #20]
                          |LED_D3_Pin|RCLK_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481c      	ldr	r0, [pc, #112]	@ (8001038 <MX_GPIO_Init+0x1fc>)
 8000fc6:	f000 fc19 	bl	80017fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_E_Pin */
  GPIO_InitStruct.Pin = Control_E_Pin;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_E_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4816      	ldr	r0, [pc, #88]	@ (800103c <MX_GPIO_Init+0x200>)
 8000fe2:	f000 fc0b 	bl	80017fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2006      	movs	r0, #6
 8000fec:	f000 fbcf 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ff0:	2006      	movs	r0, #6
 8000ff2:	f000 fbe8 	bl	80017c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2007      	movs	r0, #7
 8000ffc:	f000 fbc7 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001000:	2007      	movs	r0, #7
 8001002:	f000 fbe0 	bl	80017c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	200a      	movs	r0, #10
 800100c:	f000 fbbf 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001010:	200a      	movs	r0, #10
 8001012:	f000 fbd8 	bl	80017c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2028      	movs	r0, #40	@ 0x28
 800101c:	f000 fbb7 	bl	800178e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001020:	2028      	movs	r0, #40	@ 0x28
 8001022:	f000 fbd0 	bl	80017c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	@ 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	48000800 	.word	0x48000800
 8001038:	48000400 	.word	0x48000400
 800103c:	48000c00 	.word	0x48000c00

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_MspInit+0x44>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <HAL_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a08      	ldr	r2, [pc, #32]	@ (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001082:	2007      	movs	r0, #7
 8001084:	f000 fb78 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a10      	ldr	r2, [pc, #64]	@ (80010e4 <HAL_RTC_MspInit+0x50>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d119      	bne.n	80010da <HAL_RTC_MspInit+0x46>
 80010a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010aa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010b4:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_RTC_MspInit+0x54>)
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	2301      	movs	r3, #1
 80010c8:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2029      	movs	r0, #41	@ 0x29
 80010d0:	f000 fb5d 	bl	800178e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80010d4:	2029      	movs	r0, #41	@ 0x29
 80010d6:	f000 fb76 	bl	80017c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40002800 	.word	0x40002800
 80010e8:	10908100 	.word	0x10908100

080010ec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001124 <HAL_TIM_PWM_MspInit+0x38>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10b      	bne.n	8001116 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_TIM_PWM_MspInit+0x3c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a09      	ldr	r2, [pc, #36]	@ (8001128 <HAL_TIM_PWM_MspInit+0x3c>)
 8001104:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_TIM_PWM_MspInit+0x3c>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40012c00 	.word	0x40012c00
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <HAL_TIM_Base_MspInit+0x5c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10c      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_TIM_Base_MspInit+0x60>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <HAL_TIM_Base_MspInit+0x60>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	61d3      	str	r3, [r2, #28]
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <HAL_TIM_Base_MspInit+0x60>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001156:	e010      	b.n	800117a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_TIM_Base_MspInit+0x64>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10b      	bne.n	800117a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001162:	4b0a      	ldr	r3, [pc, #40]	@ (800118c <HAL_TIM_Base_MspInit+0x60>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a09      	ldr	r2, [pc, #36]	@ (800118c <HAL_TIM_Base_MspInit+0x60>)
 8001168:	f043 0320 	orr.w	r3, r3, #32
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <HAL_TIM_Base_MspInit+0x60>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40001000 	.word	0x40001000
 800118c:	40021000 	.word	0x40021000
 8001190:	40001400 	.word	0x40001400

08001194 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <HAL_TIM_MspPostInit+0x68>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d11d      	bne.n	80011f2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a11      	ldr	r2, [pc, #68]	@ (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	6153      	str	r3, [r2, #20]
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <HAL_TIM_MspPostInit+0x6c>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011e0:	2306      	movs	r3, #6
 80011e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f000 fb05 	bl	80017fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40021000 	.word	0x40021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <UsageFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 f979 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}

08001262 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8001266:	2001      	movs	r0, #1
 8001268:	f000 fc82 	bl	8001b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8001274:	2002      	movs	r0, #2
 8001276:	f000 fc7b 	bl	8001b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8001282:	2010      	movs	r0, #16
 8001284:	f000 fc74 	bl	8001b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001290:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001294:	f000 fc6c 	bl	8001b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <RTC_Alarm_IRQHandler+0x10>)
 80012a2:	f002 fc11 	bl	8003ac8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000009c 	.word	0x2000009c

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f003 fdf8 	bl	8004ed4 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20010000 	.word	0x20010000
 8001310:	00000400 	.word	0x00000400
 8001314:	200001d8 	.word	0x200001d8
 8001318:	20000328 	.word	0x20000328

0800131c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <timePage>:
#include <stdio.h>
#include "main.h"
#include "coast.h"
#include "lcd.h"

void timePage() {
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0

	char buff[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001346:	2200      	movs	r2, #0
 8001348:	4919      	ldr	r1, [pc, #100]	@ (80013b0 <timePage+0x70>)
 800134a:	481a      	ldr	r0, [pc, #104]	@ (80013b4 <timePage+0x74>)
 800134c:	f002 f947 	bl	80035de <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001350:	2200      	movs	r2, #0
 8001352:	4919      	ldr	r1, [pc, #100]	@ (80013b8 <timePage+0x78>)
 8001354:	4817      	ldr	r0, [pc, #92]	@ (80013b4 <timePage+0x74>)
 8001356:	f002 fa24 	bl	80037a2 <HAL_RTC_GetDate>

	char *weekDayMap [7] = {"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
 800135a:	4b18      	ldr	r3, [pc, #96]	@ (80013bc <timePage+0x7c>)
 800135c:	463c      	mov	r4, r7
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char *weekday = weekDayMap[sDate.WeekDay];
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <timePage+0x78>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	3330      	adds	r3, #48	@ 0x30
 8001374:	443b      	add	r3, r7
 8001376:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//uint8_t year = sDate.Year;
	sprintf(buff, "%s ", weekday);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001382:	490f      	ldr	r1, [pc, #60]	@ (80013c0 <timePage+0x80>)
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fd7b 	bl	8004e80 <siprintf>

	LCD_SendStr(buff);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff f932 	bl	80005f8 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 8001394:	20c0      	movs	r0, #192	@ 0xc0
 8001396:	f7ff f8f3 	bl	8000580 <LCD_SendCmd>

	LCD_SendStr("ALARM   ");
 800139a:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <timePage+0x84>)
 800139c:	f7ff f92c 	bl	80005f8 <LCD_SendStr>
	LCD_SendStr("24H TIME");
 80013a0:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <timePage+0x88>)
 80013a2:	f7ff f929 	bl	80005f8 <LCD_SendStr>

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	@ 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000084 	.word	0x20000084
 80013b4:	2000009c 	.word	0x2000009c
 80013b8:	20000098 	.word	0x20000098
 80013bc:	08005834 	.word	0x08005834
 80013c0:	080057fc 	.word	0x080057fc
 80013c4:	08005800 	.word	0x08005800
 80013c8:	0800580c 	.word	0x0800580c

080013cc <updateTime>:

void updateTime(uint8_t row, uint8_t col) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	460a      	mov	r2, r1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	71bb      	strb	r3, [r7, #6]
	char buff[8];  // Enough for HH:MM + null
	char dateBuff[8];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013dc:	2200      	movs	r2, #0
 80013de:	491f      	ldr	r1, [pc, #124]	@ (800145c <updateTime+0x90>)
 80013e0:	481f      	ldr	r0, [pc, #124]	@ (8001460 <updateTime+0x94>)
 80013e2:	f002 f8fc 	bl	80035de <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013e6:	2200      	movs	r2, #0
 80013e8:	491e      	ldr	r1, [pc, #120]	@ (8001464 <updateTime+0x98>)
 80013ea:	481d      	ldr	r0, [pc, #116]	@ (8001460 <updateTime+0x94>)
 80013ec:	f002 f9d9 	bl	80037a2 <HAL_RTC_GetDate>

	uint8_t hours = sTime.Hours;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <updateTime+0x90>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = sTime.Minutes;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <updateTime+0x90>)
 80013f8:	785b      	ldrb	r3, [r3, #1]
 80013fa:	77bb      	strb	r3, [r7, #30]
	uint8_t day = sDate.Date;
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <updateTime+0x98>)
 80013fe:	789b      	ldrb	r3, [r3, #2]
 8001400:	777b      	strb	r3, [r7, #29]
	uint8_t month = sDate.Month;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <updateTime+0x98>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	773b      	strb	r3, [r7, #28]

	// Move cursor to desired position (row 0 or 1)
	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <updateTime+0x46>
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	e000      	b.n	8001414 <updateTime+0x48>
 8001412:	23c0      	movs	r3, #192	@ 0xc0
 8001414:	76fb      	strb	r3, [r7, #27]
	LCD_SendCmd(baseCmd + col);
 8001416:	7efa      	ldrb	r2, [r7, #27]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	4413      	add	r3, r2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8ae 	bl	8000580 <LCD_SendCmd>

	sprintf(buff, "%02d:%02d", hours, minutes);
 8001424:	7ffa      	ldrb	r2, [r7, #31]
 8001426:	7fbb      	ldrb	r3, [r7, #30]
 8001428:	f107 0010 	add.w	r0, r7, #16
 800142c:	490e      	ldr	r1, [pc, #56]	@ (8001468 <updateTime+0x9c>)
 800142e:	f003 fd27 	bl	8004e80 <siprintf>
	LCD_SendStr(buff);
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f8de 	bl	80005f8 <LCD_SendStr>

	sprintf(dateBuff, " %02d/%02d", day, month);
 800143c:	7f7a      	ldrb	r2, [r7, #29]
 800143e:	7f3b      	ldrb	r3, [r7, #28]
 8001440:	f107 0008 	add.w	r0, r7, #8
 8001444:	4909      	ldr	r1, [pc, #36]	@ (800146c <updateTime+0xa0>)
 8001446:	f003 fd1b 	bl	8004e80 <siprintf>
	LCD_SendStr(dateBuff);
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f8d2 	bl	80005f8 <LCD_SendStr>
}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000084 	.word	0x20000084
 8001460:	2000009c 	.word	0x2000009c
 8001464:	20000098 	.word	0x20000098
 8001468:	08005850 	.word	0x08005850
 800146c:	0800585c 	.word	0x0800585c

08001470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001474:	f7ff ff52 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <LoopForever+0x6>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <LoopForever+0xe>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <LoopForever+0x16>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f003 fd1f 	bl	8004ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a2:	f7ff fa61 	bl	8000968 <main>

080014a6 <LoopForever>:

LoopForever:
    b LoopForever
 80014a6:	e7fe      	b.n	80014a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014b4:	080058dc 	.word	0x080058dc
  ldr r2, =_sbss
 80014b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014bc:	20000328 	.word	0x20000328

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f94f 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fdb4 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f967 	bl	80017e2 <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f92f 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000000c 	.word	0x2000000c
 8001548:	20000014 	.word	0x20000014
 800154c:	20000010 	.word	0x20000010

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_IncTick+0x20>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x24>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <HAL_IncTick+0x24>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000014 	.word	0x20000014
 8001574:	200001dc 	.word	0x200001dc

08001578 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;  
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_GetTick+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200001dc 	.word	0x200001dc

08001590 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001598:	f7ff ffee 	bl	8001578 <HAL_GetTick>
 800159c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d005      	beq.n	80015b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_Delay+0x44>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015b6:	bf00      	nop
 80015b8:	f7ff ffde 	bl	8001578 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8f7      	bhi.n	80015b8 <HAL_Delay+0x28>
  {
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000014 	.word	0x20000014

080015d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f4:	4013      	ands	r3, r2
 80015f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	@ (800161c <__NVIC_SetPriorityGrouping+0x44>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <__NVIC_GetPriorityGrouping+0x18>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	f003 0307 	and.w	r3, r3, #7
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db0b      	blt.n	8001666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4907      	ldr	r1, [pc, #28]	@ (8001674 <__NVIC_EnableIRQ+0x38>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	095b      	lsrs	r3, r3, #5
 800165c:	2001      	movs	r0, #1
 800165e:	fa00 f202 	lsl.w	r2, r0, r2
 8001662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	@ 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff29 	bl	80015d8 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a0:	f7ff ff3e 	bl	8001620 <__NVIC_GetPriorityGrouping>
 80017a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	68b9      	ldr	r1, [r7, #8]
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff ff8e 	bl	80016cc <NVIC_EncodePriority>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	bf00      	nop
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff31 	bl	800163c <__NVIC_EnableIRQ>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffa2 	bl	8001734 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e160      	b.n	8001ace <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa01 f303 	lsl.w	r3, r1, r3
 8001818:	4013      	ands	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8152 	beq.w	8001ac8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d005      	beq.n	800183c <HAL_GPIO_Init+0x40>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d130      	bne.n	800189e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	2203      	movs	r2, #3
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001872:	2201      	movs	r2, #1
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	f003 0201 	and.w	r2, r3, #1
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d017      	beq.n	80018da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d123      	bne.n	800192e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	220f      	movs	r2, #15
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	6939      	ldr	r1, [r7, #16]
 800192a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0203 	and.w	r2, r3, #3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80ac 	beq.w	8001ac8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001970:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <HAL_GPIO_Init+0x2f0>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a5d      	ldr	r2, [pc, #372]	@ (8001aec <HAL_GPIO_Init+0x2f0>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b5b      	ldr	r3, [pc, #364]	@ (8001aec <HAL_GPIO_Init+0x2f0>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001988:	4a59      	ldr	r2, [pc, #356]	@ (8001af0 <HAL_GPIO_Init+0x2f4>)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019b2:	d025      	beq.n	8001a00 <HAL_GPIO_Init+0x204>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a4f      	ldr	r2, [pc, #316]	@ (8001af4 <HAL_GPIO_Init+0x2f8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d01f      	beq.n	80019fc <HAL_GPIO_Init+0x200>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a4e      	ldr	r2, [pc, #312]	@ (8001af8 <HAL_GPIO_Init+0x2fc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d019      	beq.n	80019f8 <HAL_GPIO_Init+0x1fc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a4d      	ldr	r2, [pc, #308]	@ (8001afc <HAL_GPIO_Init+0x300>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_GPIO_Init+0x1f8>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001b00 <HAL_GPIO_Init+0x304>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00d      	beq.n	80019f0 <HAL_GPIO_Init+0x1f4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001b04 <HAL_GPIO_Init+0x308>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d007      	beq.n	80019ec <HAL_GPIO_Init+0x1f0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4a      	ldr	r2, [pc, #296]	@ (8001b08 <HAL_GPIO_Init+0x30c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_GPIO_Init+0x1ec>
 80019e4:	2306      	movs	r3, #6
 80019e6:	e00c      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019e8:	2307      	movs	r3, #7
 80019ea:	e00a      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019ec:	2305      	movs	r3, #5
 80019ee:	e008      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f0:	2304      	movs	r3, #4
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f4:	2303      	movs	r3, #3
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x206>
 8001a00:	2300      	movs	r3, #0
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a12:	4937      	ldr	r1, [pc, #220]	@ (8001af0 <HAL_GPIO_Init+0x2f4>)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a44:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a4a:	4b30      	ldr	r3, [pc, #192]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a6e:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a74:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a98:	4a1c      	ldr	r2, [pc, #112]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ac2:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <HAL_GPIO_Init+0x310>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f47f ae97 	bne.w	800180c <HAL_GPIO_Init+0x10>
  }
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40010000 	.word	0x40010000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	48000800 	.word	0x48000800
 8001afc:	48000c00 	.word	0x48000c00
 8001b00:	48001000 	.word	0x48001000
 8001b04:	48001400 	.word	0x48001400
 8001b08:	48001800 	.word	0x48001800
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
 8001b2c:	e001      	b.n	8001b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b5e:	887a      	ldrh	r2, [r7, #2]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fd54 	bl	800063c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b94:	bf00      	nop
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f001 b80a 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8161 	beq.w	8001e9e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bdc:	4bae      	ldr	r3, [pc, #696]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4bab      	ldr	r3, [pc, #684]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d157      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x104>
 8001bf4:	4ba8      	ldr	r3, [pc, #672]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c00:	d150      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x104>
 8001c02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c06:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8001c16:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c22:	d802      	bhi.n	8001c2a <HAL_RCC_OscConfig+0x8a>
 8001c24:	4b9c      	ldr	r3, [pc, #624]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	e015      	b.n	8001c56 <HAL_RCC_OscConfig+0xb6>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c2e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c42:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001c46:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001c52:	4b91      	ldr	r3, [pc, #580]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c5a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001c5e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001c62:	fa92 f2a2 	rbit	r2, r2
 8001c66:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001c6a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001c6e:	fab2 f282 	clz	r2, r2
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	f042 0220 	orr.w	r2, r2, #32
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	f002 021f 	and.w	r2, r2, #31
 8001c7e:	2101      	movs	r1, #1
 8001c80:	fa01 f202 	lsl.w	r2, r1, r2
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8108 	beq.w	8001e9c <HAL_RCC_OscConfig+0x2fc>
 8001c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 80ff 	bne.w	8001e9c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f000 bf9b 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x124>
 8001cb6:	4b78      	ldr	r3, [pc, #480]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a77      	ldr	r2, [pc, #476]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e036      	b.n	8001d32 <HAL_RCC_OscConfig+0x192>
 8001cc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x14e>
 8001cd4:	4b70      	ldr	r3, [pc, #448]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6f      	ldr	r2, [pc, #444]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6c      	ldr	r2, [pc, #432]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	e021      	b.n	8001d32 <HAL_RCC_OscConfig+0x192>
 8001cee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x17a>
 8001d00:	4b65      	ldr	r3, [pc, #404]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a64      	ldr	r2, [pc, #400]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	4b62      	ldr	r3, [pc, #392]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a61      	ldr	r2, [pc, #388]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x192>
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b5c      	ldr	r3, [pc, #368]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d054      	beq.n	8001dec <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fc19 	bl	8001578 <HAL_GetTick>
 8001d46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fc14 	bl	8001578 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b64      	cmp	r3, #100	@ 0x64
 8001d5a:	d902      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	f000 bf3c 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
 8001d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d66:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001d76:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d82:	d802      	bhi.n	8001d8a <HAL_RCC_OscConfig+0x1ea>
 8001d84:	4b44      	ldr	r3, [pc, #272]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x216>
 8001d8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d8e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001d9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001da6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dba:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001dbe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001dc2:	fa92 f2a2 	rbit	r2, r2
 8001dc6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001dca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001dce:	fab2 f282 	clz	r2, r2
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f002 021f 	and.w	r2, r2, #31
 8001dde:	2101      	movs	r1, #1
 8001de0:	fa01 f202 	lsl.w	r2, r1, r2
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0b0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1ac>
 8001dea:	e058      	b.n	8001e9e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fbc4 	bl	8001578 <HAL_GetTick>
 8001df0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df6:	f7ff fbbf 	bl	8001578 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d902      	bls.n	8001e0c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f000 bee7 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
 8001e0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e10:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001e20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e2c:	d802      	bhi.n	8001e34 <HAL_RCC_OscConfig+0x294>
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e015      	b.n	8001e60 <HAL_RCC_OscConfig+0x2c0>
 8001e34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e38:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001e48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e4c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001e50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <HAL_RCC_OscConfig+0x2f8>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e64:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001e68:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001e6c:	fa92 f2a2 	rbit	r2, r2
 8001e70:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001e74:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f042 0220 	orr.w	r2, r2, #32
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1b0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x256>
 8001e94:	e003      	b.n	8001e9e <HAL_RCC_OscConfig+0x2fe>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 816d 	beq.w	800218e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eb4:	4bcd      	ldr	r3, [pc, #820]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ec0:	4bca      	ldr	r3, [pc, #808]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d16e      	bne.n	8001faa <HAL_RCC_OscConfig+0x40a>
 8001ecc:	4bc7      	ldr	r3, [pc, #796]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ed8:	d167      	bne.n	8001faa <HAL_RCC_OscConfig+0x40a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001eec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ef8:	d802      	bhi.n	8001f00 <HAL_RCC_OscConfig+0x360>
 8001efa:	4bbc      	ldr	r3, [pc, #752]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	e013      	b.n	8001f28 <HAL_RCC_OscConfig+0x388>
 8001f00:	2302      	movs	r3, #2
 8001f02:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001f18:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001f24:	4bb1      	ldr	r3, [pc, #708]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	2202      	movs	r2, #2
 8001f2a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001f2e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001f3a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001f3e:	fab2 f282 	clz	r2, r2
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f042 0220 	orr.w	r2, r2, #32
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	f002 021f 	and.w	r2, r2, #31
 8001f4e:	2101      	movs	r1, #1
 8001f50:	fa01 f202 	lsl.w	r2, r1, r2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCC_OscConfig+0x3d0>
 8001f5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f000 be35 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b9e      	ldr	r3, [pc, #632]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	21f8      	movs	r1, #248	@ 0xf8
 8001f86:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001f8e:	fa91 f1a1 	rbit	r1, r1
 8001f92:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001f96:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001f9a:	fab1 f181 	clz	r1, r1
 8001f9e:	b2c9      	uxtb	r1, r1
 8001fa0:	408b      	lsls	r3, r1
 8001fa2:	4992      	ldr	r1, [pc, #584]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa8:	e0f1      	b.n	800218e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8083 	beq.w	80020c2 <HAL_RCC_OscConfig+0x522>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001fc6:	fa93 f3a3 	rbit	r3, r3
 8001fca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001fce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd2:	fab3 f383 	clz	r3, r3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fdc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fac6 	bl	8001578 <HAL_GetTick>
 8001fec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fac1 	bl	8001578 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d902      	bls.n	8002008 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	f000 bde9 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800201a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b3f      	cmp	r3, #63	@ 0x3f
 8002026:	d802      	bhi.n	800202e <HAL_RCC_OscConfig+0x48e>
 8002028:	4b70      	ldr	r3, [pc, #448]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e013      	b.n	8002056 <HAL_RCC_OscConfig+0x4b6>
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002046:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002052:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	2202      	movs	r2, #2
 8002058:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800205c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002060:	fa92 f2a2 	rbit	r2, r2
 8002064:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002068:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800206c:	fab2 f282 	clz	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f042 0220 	orr.w	r2, r2, #32
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	f002 021f 	and.w	r2, r2, #31
 800207c:	2101      	movs	r1, #1
 800207e:	fa01 f202 	lsl.w	r2, r1, r2
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0b4      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b58      	ldr	r3, [pc, #352]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002094:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	21f8      	movs	r1, #248	@ 0xf8
 800209e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80020a6:	fa91 f1a1 	rbit	r1, r1
 80020aa:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80020ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80020b2:	fab1 f181 	clz	r1, r1
 80020b6:	b2c9      	uxtb	r1, r1
 80020b8:	408b      	lsls	r3, r1
 80020ba:	494c      	ldr	r1, [pc, #304]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e065      	b.n	800218e <HAL_RCC_OscConfig+0x5ee>
 80020c2:	2301      	movs	r3, #1
 80020c4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80020d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	461a      	mov	r2, r3
 80020ea:	2300      	movs	r3, #0
 80020ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fa43 	bl	8001578 <HAL_GetTick>
 80020f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff fa3e 	bl	8001578 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d902      	bls.n	800210e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	f000 bd66 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
 800210e:	2302      	movs	r3, #2
 8002110:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002120:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b3f      	cmp	r3, #63	@ 0x3f
 800212c:	d802      	bhi.n	8002134 <HAL_RCC_OscConfig+0x594>
 800212e:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	e013      	b.n	800215c <HAL_RCC_OscConfig+0x5bc>
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800214c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <HAL_RCC_OscConfig+0x64c>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	2202      	movs	r2, #2
 800215e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002162:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800216e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002172:	fab2 f282 	clz	r2, r2
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	f002 021f 	and.w	r2, r2, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1b4      	bne.n	80020f8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002192:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8119 	beq.w	80023d6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8082 	beq.w	80022ba <HAL_RCC_OscConfig+0x71a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80021c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RCC_OscConfig+0x650>)
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	461a      	mov	r2, r3
 80021dc:	2301      	movs	r3, #1
 80021de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7ff f9ca 	bl	8001578 <HAL_GetTick>
 80021e4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e8:	e00f      	b.n	800220a <HAL_RCC_OscConfig+0x66a>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff f9c0 	bl	8001578 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d902      	bls.n	800220a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	f000 bce8 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
 800220a:	2302      	movs	r3, #2
 800220c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800224a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002256:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002264:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002268:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	4bb0      	ldr	r3, [pc, #704]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 800226c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800226e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002272:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002276:	2102      	movs	r1, #2
 8002278:	6019      	str	r1, [r3, #0]
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	fa93 f1a3 	rbit	r1, r3
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002290:	6019      	str	r1, [r3, #0]
  return result;
 8002292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002296:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d09d      	beq.n	80021f4 <HAL_RCC_OscConfig+0x654>
 80022b8:	e08d      	b.n	80023d6 <HAL_RCC_OscConfig+0x836>
 80022ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022dc:	601a      	str	r2, [r3, #0]
  return result;
 80022de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002530 <HAL_RCC_OscConfig+0x990>)
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	461a      	mov	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff f93c 	bl	8001578 <HAL_GetTick>
 8002300:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7ff f937 	bl	8001578 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d902      	bls.n	800231c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	f000 bc5f 	b.w	8002bda <HAL_RCC_OscConfig+0x103a>
 800231c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002320:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002324:	2202      	movs	r2, #2
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800233a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	fa93 f2a3 	rbit	r2, r3
 800235a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800235e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002368:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800236c:	2202      	movs	r2, #2
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002374:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa93 f2a3 	rbit	r2, r3
 800237e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002382:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002386:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002388:	4b68      	ldr	r3, [pc, #416]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 800238a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800238c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002390:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002394:	2102      	movs	r1, #2
 8002396:	6019      	str	r1, [r3, #0]
 8002398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fa93 f1a3 	rbit	r1, r3
 80023a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023ae:	6019      	str	r1, [r3, #0]
  return result;
 80023b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d197      	bne.n	8002306 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 819c 	beq.w	8002724 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b4e      	ldr	r3, [pc, #312]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d116      	bne.n	800242c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	4b4b      	ldr	r3, [pc, #300]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	4a4a      	ldr	r2, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002408:	61d3      	str	r3, [r2, #28]
 800240a:	4b48      	ldr	r3, [pc, #288]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002416:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002420:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002424:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002426:	2301      	movs	r3, #1
 8002428:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_RCC_OscConfig+0x994>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11a      	bne.n	800246e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002438:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_RCC_OscConfig+0x994>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3d      	ldr	r2, [pc, #244]	@ (8002534 <HAL_RCC_OscConfig+0x994>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002442:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002444:	f7ff f898 	bl	8001578 <HAL_GetTick>
 8002448:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e009      	b.n	8002462 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7ff f893 	bl	8001578 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e3bb      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_OscConfig+0x994>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ef      	beq.n	800244e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x8ec>
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4a2a      	ldr	r2, [pc, #168]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6213      	str	r3, [r2, #32]
 800248a:	e035      	b.n	80024f8 <HAL_RCC_OscConfig+0x958>
 800248c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002490:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x916>
 800249c:	4b23      	ldr	r3, [pc, #140]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4a22      	ldr	r2, [pc, #136]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6213      	str	r3, [r2, #32]
 80024a8:	4b20      	ldr	r3, [pc, #128]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	4a1f      	ldr	r2, [pc, #124]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6213      	str	r3, [r2, #32]
 80024b4:	e020      	b.n	80024f8 <HAL_RCC_OscConfig+0x958>
 80024b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x940>
 80024c6:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024cc:	f043 0304 	orr.w	r3, r3, #4
 80024d0:	6213      	str	r3, [r2, #32]
 80024d2:	4b16      	ldr	r3, [pc, #88]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4a15      	ldr	r2, [pc, #84]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6213      	str	r3, [r2, #32]
 80024de:	e00b      	b.n	80024f8 <HAL_RCC_OscConfig+0x958>
 80024e0:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	4a11      	ldr	r2, [pc, #68]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	6213      	str	r3, [r2, #32]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <HAL_RCC_OscConfig+0x98c>)
 80024f2:	f023 0304 	bic.w	r3, r3, #4
 80024f6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8085 	beq.w	8002614 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7ff f835 	bl	8001578 <HAL_GetTick>
 800250e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	e011      	b.n	8002538 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7ff f830 	bl	8001578 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e356      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
 800252c:	40021000 	.word	0x40021000
 8002530:	10908120 	.word	0x10908120
 8002534:	40007000 	.word	0x40007000
 8002538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002548:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	fa93 f2a3 	rbit	r2, r3
 8002552:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002556:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002560:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002564:	2202      	movs	r2, #2
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	fa93 f2a3 	rbit	r2, r3
 8002576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800257e:	601a      	str	r2, [r3, #0]
  return result;
 8002580:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002584:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002588:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0xa00>
 800259a:	4b98      	ldr	r3, [pc, #608]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	e013      	b.n	80025c8 <HAL_RCC_OscConfig+0xa28>
 80025a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025a8:	2202      	movs	r2, #2
 80025aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025b0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025be:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	4b8d      	ldr	r3, [pc, #564]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025cc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025d0:	2102      	movs	r1, #2
 80025d2:	6011      	str	r1, [r2, #0]
 80025d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025d8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	fa92 f1a2 	rbit	r1, r2
 80025e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025e6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80025ea:	6011      	str	r1, [r2, #0]
  return result;
 80025ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025f0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d080      	beq.n	8002514 <HAL_RCC_OscConfig+0x974>
 8002612:	e07d      	b.n	8002710 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7fe ffb0 	bl	8001578 <HAL_GetTick>
 8002618:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261c:	e00b      	b.n	8002636 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe ffab 	bl	8001578 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e2d1      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
 8002636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800263e:	2202      	movs	r2, #2
 8002640:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002646:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	fa93 f2a3 	rbit	r2, r3
 8002650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002654:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800265e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002662:	2202      	movs	r2, #2
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	fa93 f2a3 	rbit	r2, r3
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800267c:	601a      	str	r2, [r3, #0]
  return result;
 800267e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002682:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002686:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_RCC_OscConfig+0xafe>
 8002698:	4b58      	ldr	r3, [pc, #352]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	e013      	b.n	80026c6 <HAL_RCC_OscConfig+0xb26>
 800269e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026a6:	2202      	movs	r2, #2
 80026a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ae:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	fa93 f2a3 	rbit	r2, r3
 80026b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026bc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	4b4e      	ldr	r3, [pc, #312]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026ce:	2102      	movs	r1, #2
 80026d0:	6011      	str	r1, [r2, #0]
 80026d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026d6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	fa92 f1a2 	rbit	r1, r2
 80026e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026e4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026e8:	6011      	str	r1, [r2, #0]
  return result;
 80026ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026ee:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d186      	bne.n	800261e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002710:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	4a37      	ldr	r2, [pc, #220]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002722:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002728:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8251 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002736:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b08      	cmp	r3, #8
 8002740:	f000 820f 	beq.w	8002b62 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b02      	cmp	r3, #2
 8002752:	f040 8165 	bne.w	8002a20 <HAL_RCC_OscConfig+0xe80>
 8002756:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800275a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800275e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002768:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	fa93 f2a3 	rbit	r2, r3
 8002772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002776:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800277a:	601a      	str	r2, [r3, #0]
  return result;
 800277c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002780:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002784:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002790:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	461a      	mov	r2, r3
 8002798:	2300      	movs	r3, #0
 800279a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe feec 	bl	8001578 <HAL_GetTick>
 80027a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a4:	e009      	b.n	80027ba <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7fe fee7 	bl	8001578 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e20f      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
 80027ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027cc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027de:	601a      	str	r2, [r3, #0]
  return result;
 80027e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80027e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80027f2:	d805      	bhi.n	8002800 <HAL_RCC_OscConfig+0xc60>
 80027f4:	4b01      	ldr	r3, [pc, #4]	@ (80027fc <HAL_RCC_OscConfig+0xc5c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	e02a      	b.n	8002850 <HAL_RCC_OscConfig+0xcb0>
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
 8002800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002804:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002808:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002820:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800282a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800282e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002838:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002846:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	4bca      	ldr	r3, [pc, #808]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002854:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002858:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800285c:	6011      	str	r1, [r2, #0]
 800285e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002862:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fa92 f1a2 	rbit	r1, r2
 800286c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002870:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002874:	6011      	str	r1, [r2, #0]
  return result;
 8002876:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800287a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	fab2 f282 	clz	r2, r2
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f042 0220 	orr.w	r2, r2, #32
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	f002 021f 	and.w	r2, r2, #31
 8002890:	2101      	movs	r1, #1
 8002892:	fa01 f202 	lsl.w	r2, r1, r2
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d184      	bne.n	80027a6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4bb6      	ldr	r3, [pc, #728]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f023 020f 	bic.w	r2, r3, #15
 80028a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	49b1      	ldr	r1, [pc, #708]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80028b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80028be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6a19      	ldr	r1, [r3, #32]
 80028ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	430b      	orrs	r3, r1
 80028d8:	49a7      	ldr	r1, [pc, #668]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
 80028de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028f0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002902:	601a      	str	r2, [r3, #0]
  return result;
 8002904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002908:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800290c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002918:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	461a      	mov	r2, r3
 8002920:	2301      	movs	r3, #1
 8002922:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fe28 	bl	8001578 <HAL_GetTick>
 8002928:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292c:	e009      	b.n	8002942 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe fe23 	bl	8001578 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e14b      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
 8002942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002946:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800294a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002954:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002962:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002966:	601a      	str	r2, [r3, #0]
  return result;
 8002968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002970:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b3f      	cmp	r3, #63	@ 0x3f
 800297a:	d802      	bhi.n	8002982 <HAL_RCC_OscConfig+0xde2>
 800297c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	e027      	b.n	80029d2 <HAL_RCC_OscConfig+0xe32>
 8002982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002986:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800298a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002994:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029a2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ac:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80029b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029d6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029da:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029de:	6011      	str	r1, [r2, #0]
 80029e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029e4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	fa92 f1a2 	rbit	r1, r2
 80029ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029f2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80029f6:	6011      	str	r1, [r2, #0]
  return result;
 80029f8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029fc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d087      	beq.n	800292e <HAL_RCC_OscConfig+0xd8e>
 8002a1e:	e0db      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1038>
 8002a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a24:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a32:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a40:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a44:	601a      	str	r2, [r3, #0]
  return result;
 8002a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a4a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002a4e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	461a      	mov	r2, r3
 8002a62:	2300      	movs	r3, #0
 8002a64:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fd87 	bl	8001578 <HAL_GetTick>
 8002a6a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	e009      	b.n	8002a84 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe fd82 	bl	8001578 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e0aa      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
 8002a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a88:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a96:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	fa93 f2a3 	rbit	r2, r3
 8002aa0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aa4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002aa8:	601a      	str	r2, [r3, #0]
  return result;
 8002aaa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002ab2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b3f      	cmp	r3, #63	@ 0x3f
 8002abc:	d802      	bhi.n	8002ac4 <HAL_RCC_OscConfig+0xf24>
 8002abe:	4b2e      	ldr	r3, [pc, #184]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	e027      	b.n	8002b14 <HAL_RCC_OscConfig+0xf74>
 8002ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ac8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002acc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002af2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_RCC_OscConfig+0xfd8>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b18:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b1c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b20:	6011      	str	r1, [r2, #0]
 8002b22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b26:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fa92 f1a2 	rbit	r1, r2
 8002b30:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b34:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b38:	6011      	str	r1, [r2, #0]
  return result;
 8002b3a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b3e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	fab2 f282 	clz	r2, r2
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	f042 0220 	orr.w	r2, r2, #32
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	f002 021f 	and.w	r2, r2, #31
 8002b54:	2101      	movs	r1, #1
 8002b56:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d187      	bne.n	8002a70 <HAL_RCC_OscConfig+0xed0>
 8002b60:	e03a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b66:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d104      	bne.n	8002b7c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e031      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_RCC_OscConfig+0x1044>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b84:	4b17      	ldr	r3, [pc, #92]	@ (8002be4 <HAL_RCC_OscConfig+0x1044>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002b90:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002b94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d117      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ba4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ba8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bc0:	f003 020f 	and.w	r2, r3, #15
 8002bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b09e      	sub	sp, #120	@ 0x78
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e154      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b89      	ldr	r3, [pc, #548]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b86      	ldr	r3, [pc, #536]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4984      	ldr	r1, [pc, #528]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b82      	ldr	r3, [pc, #520]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e13c      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4978      	ldr	r1, [pc, #480]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80cd 	beq.w	8002df6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d137      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xec>
 8002c64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c68:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c7c:	d802      	bhi.n	8002c84 <HAL_RCC_ClockConfig+0x9c>
 8002c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_ClockConfig+0xbc>
 8002c84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c96:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ca0:	4b62      	ldr	r3, [pc, #392]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ca8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002caa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cac:	fa92 f2a2 	rbit	r2, r2
 8002cb0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002cb2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cb4:	fab2 f282 	clz	r2, r2
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f042 0220 	orr.w	r2, r2, #32
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	f002 021f 	and.w	r2, r2, #31
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d171      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0ea      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d137      	bne.n	8002d4c <HAL_RCC_ClockConfig+0x164>
 8002cdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ce0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cf4:	d802      	bhi.n	8002cfc <HAL_RCC_ClockConfig+0x114>
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	e00f      	b.n	8002d1c <HAL_RCC_ClockConfig+0x134>
 8002cfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d18:	4b44      	ldr	r3, [pc, #272]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d20:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002d22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d24:	fa92 f2a2 	rbit	r2, r2
 8002d28:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d2c:	fab2 f282 	clz	r2, r2
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	f042 0220 	orr.w	r2, r2, #32
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	f002 021f 	and.w	r2, r2, #31
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d135      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e0ae      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d62:	d802      	bhi.n	8002d6a <HAL_RCC_ClockConfig+0x182>
 8002d64:	4b31      	ldr	r3, [pc, #196]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	e00d      	b.n	8002d86 <HAL_RCC_ClockConfig+0x19e>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d76:	2302      	movs	r3, #2
 8002d78:	623b      	str	r3, [r7, #32]
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	4b2a      	ldr	r3, [pc, #168]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2202      	movs	r2, #2
 8002d88:	61ba      	str	r2, [r7, #24]
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	617a      	str	r2, [r7, #20]
  return result;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f002 021f 	and.w	r2, r2, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e07a      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 0203 	bic.w	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	491a      	ldr	r1, [pc, #104]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fbd7 	bl	8001578 <HAL_GetTick>
 8002dca:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dce:	f7fe fbd3 	bl	8001578 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e062      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <HAL_RCC_ClockConfig+0x244>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 020c 	and.w	r2, r3, #12
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d1eb      	bne.n	8002dce <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d215      	bcs.n	8002e30 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e04:	4b08      	ldr	r3, [pc, #32]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 0207 	bic.w	r2, r3, #7
 8002e0c:	4906      	ldr	r1, [pc, #24]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e14:	4b04      	ldr	r3, [pc, #16]	@ (8002e28 <HAL_RCC_ClockConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d006      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_RCC_ClockConfig+0x2c2>
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000
 8002e2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2cc>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	491a      	ldr	r1, [pc, #104]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2cc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5a:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2cc>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4912      	ldr	r1, [pc, #72]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2cc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e6e:	f000 f829 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e72:	4601      	mov	r1, r0
 8002e74:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <HAL_RCC_ClockConfig+0x2cc>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e7c:	22f0      	movs	r2, #240	@ 0xf0
 8002e7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	60fa      	str	r2, [r7, #12]
  return result;
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	40d3      	lsrs	r3, r2
 8002e92:	4a09      	ldr	r2, [pc, #36]	@ (8002eb8 <HAL_RCC_ClockConfig+0x2d0>)
 8002e94:	5cd3      	ldrb	r3, [r2, r3]
 8002e96:	fa21 f303 	lsr.w	r3, r1, r3
 8002e9a:	4a08      	ldr	r2, [pc, #32]	@ (8002ebc <HAL_RCC_ClockConfig+0x2d4>)
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <HAL_RCC_ClockConfig+0x2d8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fb24 	bl	80014f0 <HAL_InitTick>
  
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3778      	adds	r7, #120	@ 0x78
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08005868 	.word	0x08005868
 8002ebc:	2000000c 	.word	0x2000000c
 8002ec0:	20000010 	.word	0x20000010

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ede:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x30>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x36>
 8002ef2:	e029      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ef6:	613b      	str	r3, [r7, #16]
      break;
 8002ef8:	e029      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f04:	5cd3      	ldrb	r3, [r2, r3]
 8002f06:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	4a15      	ldr	r2, [pc, #84]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f20:	4a0f      	ldr	r2, [pc, #60]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e007      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f32:	4a0b      	ldr	r2, [pc, #44]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	613b      	str	r3, [r7, #16]
      break;
 8002f46:	e002      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f4a:	613b      	str	r3, [r7, #16]
      break;
 8002f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4e:	693b      	ldr	r3, [r7, #16]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	007a1200 	.word	0x007a1200
 8002f64:	08005878 	.word	0x08005878
 8002f68:	08005888 	.word	0x08005888

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b092      	sub	sp, #72	@ 0x48
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80d2 	beq.w	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b4d      	ldr	r3, [pc, #308]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4a49      	ldr	r2, [pc, #292]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	61d3      	str	r3, [r2, #28]
 8002fa8:	4b47      	ldr	r3, [pc, #284]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b44      	ldr	r3, [pc, #272]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b41      	ldr	r3, [pc, #260]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a40      	ldr	r2, [pc, #256]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fad1 	bl	8001578 <HAL_GetTick>
 8002fd6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe facd 	bl	8001578 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	@ 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1d4      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b37      	ldr	r3, [pc, #220]	@ (80030cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff8:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003000:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8082 	beq.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003012:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003014:	429a      	cmp	r2, r3
 8003016:	d07a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003018:	4b2b      	ldr	r3, [pc, #172]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003020:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003026:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	461a      	mov	r2, r3
 8003042:	2301      	movs	r3, #1
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	461a      	mov	r2, r3
 8003066:	2300      	movs	r3, #0
 8003068:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800306a:	4a17      	ldr	r2, [pc, #92]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800306c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800306e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d049      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7fe fa7d 	bl	8001578 <HAL_GetTick>
 800307e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003082:	f7fe fa79 	bl	8001578 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003090:	4293      	cmp	r3, r2
 8003092:	d901      	bls.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e17e      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003098:	2302      	movs	r3, #2
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a4:	2302      	movs	r3, #2
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	61fb      	str	r3, [r7, #28]
  return result;
 80030b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80030c2:	4b01      	ldr	r3, [pc, #4]	@ (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	e00d      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
 80030d0:	10908100 	.word	0x10908100
 80030d4:	2302      	movs	r3, #2
 80030d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	4b9a      	ldr	r3, [pc, #616]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	2202      	movs	r2, #2
 80030e6:	613a      	str	r2, [r7, #16]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	60fa      	str	r2, [r7, #12]
  return result;
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	f002 021f 	and.w	r2, r2, #31
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0b9      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800310e:	4b8f      	ldr	r3, [pc, #572]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	498c      	ldr	r1, [pc, #560]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311c:	4313      	orrs	r3, r2
 800311e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003120:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b88      	ldr	r3, [pc, #544]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	4a87      	ldr	r2, [pc, #540]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003132:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003140:	4b82      	ldr	r3, [pc, #520]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	f023 0203 	bic.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	497f      	ldr	r1, [pc, #508]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314e:	4313      	orrs	r3, r2
 8003150:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315e:	4b7b      	ldr	r3, [pc, #492]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	4978      	ldr	r1, [pc, #480]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316c:	4313      	orrs	r3, r2
 800316e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317c:	4b73      	ldr	r3, [pc, #460]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003180:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	4970      	ldr	r1, [pc, #448]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319a:	4b6c      	ldr	r3, [pc, #432]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	f023 0210 	bic.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4969      	ldr	r1, [pc, #420]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80031b8:	4b64      	ldr	r3, [pc, #400]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c4:	4961      	ldr	r1, [pc, #388]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d6:	4b5d      	ldr	r3, [pc, #372]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f023 0220 	bic.w	r2, r3, #32
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	495a      	ldr	r1, [pc, #360]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031f4:	4b55      	ldr	r3, [pc, #340]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	4952      	ldr	r1, [pc, #328]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003212:	4b4e      	ldr	r3, [pc, #312]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	494b      	ldr	r1, [pc, #300]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003230:	4b46      	ldr	r3, [pc, #280]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003234:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4943      	ldr	r1, [pc, #268]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323e:	4313      	orrs	r3, r2
 8003240:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800324e:	4b3f      	ldr	r3, [pc, #252]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	493c      	ldr	r1, [pc, #240]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800326c:	4b37      	ldr	r3, [pc, #220]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	4934      	ldr	r1, [pc, #208]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327a:	4313      	orrs	r3, r2
 800327c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800328a:	4b30      	ldr	r3, [pc, #192]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800328c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	492d      	ldr	r1, [pc, #180]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80032a8:	4b28      	ldr	r3, [pc, #160]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b4:	4925      	ldr	r1, [pc, #148]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80032c6:	4b21      	ldr	r3, [pc, #132]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	491e      	ldr	r1, [pc, #120]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	4916      	ldr	r1, [pc, #88]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003302:	4b12      	ldr	r3, [pc, #72]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330e:	490f      	ldr	r1, [pc, #60]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003310:	4313      	orrs	r3, r2
 8003312:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003320:	4b0a      	ldr	r3, [pc, #40]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	4907      	ldr	r1, [pc, #28]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00c      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800333e:	4b03      	ldr	r3, [pc, #12]	@ (800334c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	e002      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003352:	4913      	ldr	r1, [pc, #76]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003354:	4313      	orrs	r3, r2
 8003356:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003364:	4b0e      	ldr	r3, [pc, #56]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003370:	490b      	ldr	r1, [pc, #44]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003372:	4313      	orrs	r3, r2
 8003374:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338e:	4904      	ldr	r1, [pc, #16]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003390:	4313      	orrs	r3, r2
 8003392:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3748      	adds	r7, #72	@ 0x48
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e073      	b.n	80034a2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	7f5b      	ldrb	r3, [r3, #29]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd fe62 	bl	8001094 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d055      	beq.n	8003490 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	22ca      	movs	r2, #202	@ 0xca
 80033ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2253      	movs	r2, #83	@ 0x53
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fbdd 	bl	8003bb4 <RTC_EnterInitMode>
 80033fa:	4603      	mov	r3, r0
 80033fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d12c      	bne.n	800345e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003412:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003416:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	041a      	lsls	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fbe4 	bl	8003c22 <RTC_ExitInitMode>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d110      	bne.n	8003486 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	22ff      	movs	r2, #255	@ 0xff
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24
 800348e:	e001      	b.n	8003494 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034aa:	b590      	push	{r4, r7, lr}
 80034ac:	b087      	sub	sp, #28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	7f1b      	ldrb	r3, [r3, #28]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_RTC_SetTime+0x1c>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e087      	b.n	80035d6 <HAL_RTC_SetTime+0x12c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2202      	movs	r2, #2
 80034d0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d126      	bne.n	8003526 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fbbb 	bl	8003c6c <RTC_ByteToBcd2>
 80034f6:	4603      	mov	r3, r0
 80034f8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fbb4 	bl	8003c6c <RTC_ByteToBcd2>
 8003504:	4603      	mov	r3, r0
 8003506:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003508:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	789b      	ldrb	r3, [r3, #2]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fbac 	bl	8003c6c <RTC_ByteToBcd2>
 8003514:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003516:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e018      	b.n	8003558 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2200      	movs	r2, #0
 8003538:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003546:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800354c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	78db      	ldrb	r3, [r3, #3]
 8003552:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	22ca      	movs	r2, #202	@ 0xca
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2253      	movs	r2, #83	@ 0x53
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fb23 	bl	8003bb4 <RTC_EnterInitMode>
 800356e:	4603      	mov	r3, r0
 8003570:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d120      	bne.n	80035ba <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003582:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003586:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003596:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6899      	ldr	r1, [r3, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fb36 	bl	8003c22 <RTC_ExitInitMode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	22ff      	movs	r2, #255	@ 0xff
 80035cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]

  return status;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}

080035de <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003610:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003614:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800363e:	b2da      	uxtb	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	0d9b      	lsrs	r3, r3, #22
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11a      	bne.n	8003690 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fb22 	bl	8003ca8 <RTC_Bcd2ToByte>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fb19 	bl	8003ca8 <RTC_Bcd2ToByte>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	789b      	ldrb	r3, [r3, #2]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fb10 	bl	8003ca8 <RTC_Bcd2ToByte>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800369a:	b590      	push	{r4, r7, lr}
 800369c:	b087      	sub	sp, #28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	7f1b      	ldrb	r3, [r3, #28]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d101      	bne.n	80036b6 <HAL_RTC_SetDate+0x1c>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e071      	b.n	800379a <HAL_RTC_SetDate+0x100>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2202      	movs	r2, #2
 80036c0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10e      	bne.n	80036e6 <HAL_RTC_SetDate+0x4c>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	f023 0310 	bic.w	r3, r3, #16
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	330a      	adds	r3, #10
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d11c      	bne.n	8003726 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	78db      	ldrb	r3, [r3, #3]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fabb 	bl	8003c6c <RTC_ByteToBcd2>
 80036f6:	4603      	mov	r3, r0
 80036f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fab4 	bl	8003c6c <RTC_ByteToBcd2>
 8003704:	4603      	mov	r3, r0
 8003706:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003708:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	789b      	ldrb	r3, [r3, #2]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 faac 	bl	8003c6c <RTC_ByteToBcd2>
 8003714:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003716:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e00e      	b.n	8003744 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	78db      	ldrb	r3, [r3, #3]
 800372a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	785b      	ldrb	r3, [r3, #1]
 8003730:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003732:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003738:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	22ca      	movs	r2, #202	@ 0xca
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2253      	movs	r2, #83	@ 0x53
 8003752:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 fa2d 	bl	8003bb4 <RTC_EnterInitMode>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10c      	bne.n	800377e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800376e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003772:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fa54 	bl	8003c22 <RTC_ExitInitMode>
 800377a:	4603      	mov	r3, r0
 800377c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800377e:	7cfb      	ldrb	r3, [r7, #19]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	22ff      	movs	r2, #255	@ 0xff
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]

  return status;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
}
 800379a:	4618      	mov	r0, r3
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd90      	pop	{r4, r7, pc}

080037a2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80037c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	0b5b      	lsrs	r3, r3, #13
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11a      	bne.n	8003836 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	78db      	ldrb	r3, [r3, #3]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa4f 	bl	8003ca8 <RTC_Bcd2ToByte>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fa46 	bl	8003ca8 <RTC_Bcd2ToByte>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	789b      	ldrb	r3, [r3, #2]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fa3d 	bl	8003ca8 <RTC_Bcd2ToByte>
 800382e:	4603      	mov	r3, r0
 8003830:	461a      	mov	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800384c:	4b9b      	ldr	r3, [pc, #620]	@ (8003abc <HAL_RTC_SetAlarm_IT+0x27c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a9b      	ldr	r2, [pc, #620]	@ (8003ac0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0adb      	lsrs	r3, r3, #11
 8003858:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	7f1b      	ldrb	r3, [r3, #28]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_RTC_SetAlarm_IT+0x36>
 8003872:	2302      	movs	r3, #2
 8003874:	e11e      	b.n	8003ab4 <HAL_RTC_SetAlarm_IT+0x274>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2202      	movs	r2, #2
 8003880:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d137      	bne.n	80038f8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 f9e3 	bl	8003c6c <RTC_ByteToBcd2>
 80038a6:	4603      	mov	r3, r0
 80038a8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	785b      	ldrb	r3, [r3, #1]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f9dc 	bl	8003c6c <RTC_ByteToBcd2>
 80038b4:	4603      	mov	r3, r0
 80038b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80038b8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	789b      	ldrb	r3, [r3, #2]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 f9d4 	bl	8003c6c <RTC_ByteToBcd2>
 80038c4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80038c6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	78db      	ldrb	r3, [r3, #3]
 80038ce:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80038d0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f9c6 	bl	8003c6c <RTC_ByteToBcd2>
 80038e0:	4603      	mov	r3, r0
 80038e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80038e4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80038ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e023      	b.n	8003940 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2200      	movs	r2, #0
 800390a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	785b      	ldrb	r3, [r3, #1]
 8003916:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003918:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800391e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	78db      	ldrb	r3, [r3, #3]
 8003924:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003926:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8003930:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003936:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800393c:	4313      	orrs	r3, r2
 800393e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	22ca      	movs	r2, #202	@ 0xca
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2253      	movs	r2, #83	@ 0x53
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003964:	d142      	bne.n	80039ec <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003974:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003986:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	3b01      	subs	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	22ff      	movs	r2, #255	@ 0xff
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2203      	movs	r2, #3
 80039a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e083      	b.n	8003ab4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0e6      	beq.n	8003988 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039d8:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	e04c      	b.n	8003a86 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80039fa:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003a0c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RTC_SetAlarm_IT+0x27c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac0 <HAL_RTC_SetAlarm_IT+0x280>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	0adb      	lsrs	r3, r3, #11
 8003a1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	22ff      	movs	r2, #255	@ 0xff
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e035      	b.n	8003ab4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0e6      	beq.n	8003a24 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a74:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a84:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <HAL_RTC_SetAlarm_IT+0x284>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac4 <HAL_RTC_SetAlarm_IT+0x284>)
 8003a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a90:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003a92:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_RTC_SetAlarm_IT+0x284>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	@ (8003ac4 <HAL_RTC_SetAlarm_IT+0x284>)
 8003a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a9c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	22ff      	movs	r2, #255	@ 0xff
 8003aa4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3724      	adds	r7, #36	@ 0x24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	2000000c 	.word	0x2000000c
 8003ac0:	10624dd3 	.word	0x10624dd3
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b50 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003ad2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ad6:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d012      	beq.n	8003b0c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00b      	beq.n	8003b0c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003b04:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f824 	bl	8003b54 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003b38:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8d2 	bl	8003ce4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	775a      	strb	r2, [r3, #29]
}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40010400 	.word	0x40010400

08003b54 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb0 <HAL_RTC_WaitForSynchro+0x48>)
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b7c:	f7fd fcfc 	bl	8001578 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b82:	e009      	b.n	8003b98 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b84:	f7fd fcf8 	bl	8001578 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b92:	d901      	bls.n	8003b98 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e007      	b.n	8003ba8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ee      	beq.n	8003b84 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	0001ff5f 	.word	0x0001ff5f

08003bb4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d122      	bne.n	8003c18 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003be0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003be2:	f7fd fcc9 	bl	8001578 <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003be8:	e00c      	b.n	8003c04 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bea:	f7fd fcc5 	bl	8001578 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bf8:	d904      	bls.n	8003c04 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <RTC_EnterInitMode+0x64>
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d1e8      	bne.n	8003bea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff8b 	bl	8003b68 <HAL_RTC_WaitForSynchro>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003c7a:	e005      	b.n	8003c88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	3b0a      	subs	r3, #10
 8003c86:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d8f6      	bhi.n	8003c7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b2db      	uxtb	r3, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b2db      	uxtb	r3, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e049      	b.n	8003d9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fa04 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 fbba 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e04f      	b.n	8003e60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a23      	ldr	r2, [pc, #140]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xc4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01d      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dea:	d018      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e70 <HAL_TIM_Base_Start_IT+0xc8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00e      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1c      	ldr	r2, [pc, #112]	@ (8003e78 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d009      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIM_Base_Start_IT+0x76>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a19      	ldr	r2, [pc, #100]	@ (8003e80 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b06      	cmp	r3, #6
 8003e2e:	d015      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e36:	d011      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e48:	e008      	b.n	8003e5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e000      	b.n	8003e5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40013400 	.word	0x40013400
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	40015000 	.word	0x40015000
 8003e84:	00010007 	.word	0x00010007

08003e88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e049      	b.n	8003f2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd f91c 	bl	80010ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 faf2 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_TIM_PWM_Start+0x24>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e03c      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x9e>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d109      	bne.n	8003f76 <HAL_TIM_PWM_Start+0x3e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	e02f      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x9e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d109      	bne.n	8003f90 <HAL_TIM_PWM_Start+0x58>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e022      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x9e>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d109      	bne.n	8003faa <HAL_TIM_PWM_Start+0x72>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	bf14      	ite	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2300      	moveq	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	e015      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x9e>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d109      	bne.n	8003fc4 <HAL_TIM_PWM_Start+0x8c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e008      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x9e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0a1      	b.n	8004122 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0xb6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fec:	e023      	b.n	8004036 <HAL_TIM_PWM_Start+0xfe>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0xc6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ffc:	e01b      	b.n	8004036 <HAL_TIM_PWM_Start+0xfe>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b08      	cmp	r3, #8
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0xd6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800400c:	e013      	b.n	8004036 <HAL_TIM_PWM_Start+0xfe>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xe6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800401c:	e00b      	b.n	8004036 <HAL_TIM_PWM_Start+0xfe>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b10      	cmp	r3, #16
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0xf6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800402c:	e003      	b.n	8004036 <HAL_TIM_PWM_Start+0xfe>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fde6 	bl	8004c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a38      	ldr	r2, [pc, #224]	@ (800412c <HAL_TIM_PWM_Start+0x1f4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d018      	beq.n	8004080 <HAL_TIM_PWM_Start+0x148>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a37      	ldr	r2, [pc, #220]	@ (8004130 <HAL_TIM_PWM_Start+0x1f8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <HAL_TIM_PWM_Start+0x148>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a35      	ldr	r2, [pc, #212]	@ (8004134 <HAL_TIM_PWM_Start+0x1fc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00e      	beq.n	8004080 <HAL_TIM_PWM_Start+0x148>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a34      	ldr	r2, [pc, #208]	@ (8004138 <HAL_TIM_PWM_Start+0x200>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d009      	beq.n	8004080 <HAL_TIM_PWM_Start+0x148>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a32      	ldr	r2, [pc, #200]	@ (800413c <HAL_TIM_PWM_Start+0x204>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d004      	beq.n	8004080 <HAL_TIM_PWM_Start+0x148>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a31      	ldr	r2, [pc, #196]	@ (8004140 <HAL_TIM_PWM_Start+0x208>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d101      	bne.n	8004084 <HAL_TIM_PWM_Start+0x14c>
 8004080:	2301      	movs	r3, #1
 8004082:	e000      	b.n	8004086 <HAL_TIM_PWM_Start+0x14e>
 8004084:	2300      	movs	r3, #0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004098:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a23      	ldr	r2, [pc, #140]	@ (800412c <HAL_TIM_PWM_Start+0x1f4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d01d      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1a8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d018      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1a8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <HAL_TIM_PWM_Start+0x20c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1a8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a22      	ldr	r2, [pc, #136]	@ (8004148 <HAL_TIM_PWM_Start+0x210>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00e      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1a8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004130 <HAL_TIM_PWM_Start+0x1f8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d009      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1a8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	@ (8004134 <HAL_TIM_PWM_Start+0x1fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_TIM_PWM_Start+0x1a8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_TIM_PWM_Start+0x208>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d115      	bne.n	800410c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	4b19      	ldr	r3, [pc, #100]	@ (800414c <HAL_TIM_PWM_Start+0x214>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d015      	beq.n	800411e <HAL_TIM_PWM_Start+0x1e6>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f8:	d011      	beq.n	800411e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410a:	e008      	b.n	800411e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e000      	b.n	8004120 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40012c00 	.word	0x40012c00
 8004130:	40013400 	.word	0x40013400
 8004134:	40014000 	.word	0x40014000
 8004138:	40014400 	.word	0x40014400
 800413c:	40014800 	.word	0x40014800
 8004140:	40015000 	.word	0x40015000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	00010007 	.word	0x00010007

08004150 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fd54 	bl	8004c10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a40      	ldr	r2, [pc, #256]	@ (8004270 <HAL_TIM_PWM_Stop+0x120>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_TIM_PWM_Stop+0x54>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a3f      	ldr	r2, [pc, #252]	@ (8004274 <HAL_TIM_PWM_Stop+0x124>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_TIM_PWM_Stop+0x54>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3d      	ldr	r2, [pc, #244]	@ (8004278 <HAL_TIM_PWM_Stop+0x128>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_TIM_PWM_Stop+0x54>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3c      	ldr	r2, [pc, #240]	@ (800427c <HAL_TIM_PWM_Stop+0x12c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_TIM_PWM_Stop+0x54>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3a      	ldr	r2, [pc, #232]	@ (8004280 <HAL_TIM_PWM_Stop+0x130>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_TIM_PWM_Stop+0x54>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a39      	ldr	r2, [pc, #228]	@ (8004284 <HAL_TIM_PWM_Stop+0x134>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d101      	bne.n	80041a8 <HAL_TIM_PWM_Stop+0x58>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_TIM_PWM_Stop+0x5a>
 80041a8:	2300      	movs	r3, #0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d017      	beq.n	80041de <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a1a      	ldr	r2, [r3, #32]
 80041b4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041b8:	4013      	ands	r3, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_TIM_PWM_Stop+0x8e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	f240 4344 	movw	r3, #1092	@ 0x444
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_TIM_PWM_Stop+0x8e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_TIM_PWM_Stop+0xbe>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6a1a      	ldr	r2, [r3, #32]
 80041f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <HAL_TIM_PWM_Stop+0xbe>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0201 	bic.w	r2, r2, #1
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Stop+0xce>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800421c:	e023      	b.n	8004266 <HAL_TIM_PWM_Stop+0x116>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Stop+0xde>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800422c:	e01b      	b.n	8004266 <HAL_TIM_PWM_Stop+0x116>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Stop+0xee>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800423c:	e013      	b.n	8004266 <HAL_TIM_PWM_Stop+0x116>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Stop+0xfe>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800424c:	e00b      	b.n	8004266 <HAL_TIM_PWM_Stop+0x116>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b10      	cmp	r3, #16
 8004252:	d104      	bne.n	800425e <HAL_TIM_PWM_Stop+0x10e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800425c:	e003      	b.n	8004266 <HAL_TIM_PWM_Stop+0x116>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40013400 	.word	0x40013400
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800
 8004284:	40015000 	.word	0x40015000

08004288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0ff      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b14      	cmp	r3, #20
 80042b2:	f200 80f0 	bhi.w	8004496 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80042b6:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	08004311 	.word	0x08004311
 80042c0:	08004497 	.word	0x08004497
 80042c4:	08004497 	.word	0x08004497
 80042c8:	08004497 	.word	0x08004497
 80042cc:	08004351 	.word	0x08004351
 80042d0:	08004497 	.word	0x08004497
 80042d4:	08004497 	.word	0x08004497
 80042d8:	08004497 	.word	0x08004497
 80042dc:	08004393 	.word	0x08004393
 80042e0:	08004497 	.word	0x08004497
 80042e4:	08004497 	.word	0x08004497
 80042e8:	08004497 	.word	0x08004497
 80042ec:	080043d3 	.word	0x080043d3
 80042f0:	08004497 	.word	0x08004497
 80042f4:	08004497 	.word	0x08004497
 80042f8:	08004497 	.word	0x08004497
 80042fc:	08004415 	.word	0x08004415
 8004300:	08004497 	.word	0x08004497
 8004304:	08004497 	.word	0x08004497
 8004308:	08004497 	.word	0x08004497
 800430c:	08004455 	.word	0x08004455
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f974 	bl	8004604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	619a      	str	r2, [r3, #24]
      break;
 800434e:	e0a5      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f9ee 	bl	8004738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800436a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800437a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	619a      	str	r2, [r3, #24]
      break;
 8004390:	e084      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fa61 	bl	8004860 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69da      	ldr	r2, [r3, #28]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0208 	orr.w	r2, r2, #8
 80043ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0204 	bic.w	r2, r2, #4
 80043bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69d9      	ldr	r1, [r3, #28]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	61da      	str	r2, [r3, #28]
      break;
 80043d0:	e064      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fad3 	bl	8004984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69da      	ldr	r2, [r3, #28]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69d9      	ldr	r1, [r3, #28]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	021a      	lsls	r2, r3, #8
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	61da      	str	r2, [r3, #28]
      break;
 8004412:	e043      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fb22 	bl	8004a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004452:	e023      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fb6c 	bl	8004b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004494:	e002      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	75fb      	strb	r3, [r7, #23]
      break;
 800449a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a48      	ldr	r2, [pc, #288]	@ (80045e4 <TIM_Base_SetConfig+0x134>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a45      	ldr	r2, [pc, #276]	@ (80045e8 <TIM_Base_SetConfig+0x138>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a44      	ldr	r2, [pc, #272]	@ (80045ec <TIM_Base_SetConfig+0x13c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a43      	ldr	r2, [pc, #268]	@ (80045f0 <TIM_Base_SetConfig+0x140>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a42      	ldr	r2, [pc, #264]	@ (80045f4 <TIM_Base_SetConfig+0x144>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a37      	ldr	r2, [pc, #220]	@ (80045e4 <TIM_Base_SetConfig+0x134>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01f      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d01b      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a34      	ldr	r2, [pc, #208]	@ (80045e8 <TIM_Base_SetConfig+0x138>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d017      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a33      	ldr	r2, [pc, #204]	@ (80045ec <TIM_Base_SetConfig+0x13c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a32      	ldr	r2, [pc, #200]	@ (80045f0 <TIM_Base_SetConfig+0x140>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00f      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a32      	ldr	r2, [pc, #200]	@ (80045f8 <TIM_Base_SetConfig+0x148>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00b      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a31      	ldr	r2, [pc, #196]	@ (80045fc <TIM_Base_SetConfig+0x14c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d007      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a30      	ldr	r2, [pc, #192]	@ (8004600 <TIM_Base_SetConfig+0x150>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d003      	beq.n	800454a <TIM_Base_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2b      	ldr	r2, [pc, #172]	@ (80045f4 <TIM_Base_SetConfig+0x144>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d108      	bne.n	800455c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a18      	ldr	r2, [pc, #96]	@ (80045e4 <TIM_Base_SetConfig+0x134>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <TIM_Base_SetConfig+0x100>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a19      	ldr	r2, [pc, #100]	@ (80045f0 <TIM_Base_SetConfig+0x140>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00f      	beq.n	80045b0 <TIM_Base_SetConfig+0x100>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <TIM_Base_SetConfig+0x148>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_Base_SetConfig+0x100>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a18      	ldr	r2, [pc, #96]	@ (80045fc <TIM_Base_SetConfig+0x14c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_Base_SetConfig+0x100>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a17      	ldr	r2, [pc, #92]	@ (8004600 <TIM_Base_SetConfig+0x150>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_Base_SetConfig+0x100>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a12      	ldr	r2, [pc, #72]	@ (80045f4 <TIM_Base_SetConfig+0x144>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d103      	bne.n	80045b8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d105      	bne.n	80045d6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	611a      	str	r2, [r3, #16]
  }
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40015000 	.word	0x40015000
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f023 0201 	bic.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 0302 	bic.w	r3, r3, #2
 8004650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a30      	ldr	r2, [pc, #192]	@ (8004720 <TIM_OC1_SetConfig+0x11c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <TIM_OC1_SetConfig+0x88>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2f      	ldr	r2, [pc, #188]	@ (8004724 <TIM_OC1_SetConfig+0x120>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <TIM_OC1_SetConfig+0x88>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a2e      	ldr	r2, [pc, #184]	@ (8004728 <TIM_OC1_SetConfig+0x124>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_OC1_SetConfig+0x88>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2d      	ldr	r2, [pc, #180]	@ (800472c <TIM_OC1_SetConfig+0x128>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_OC1_SetConfig+0x88>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2c      	ldr	r2, [pc, #176]	@ (8004730 <TIM_OC1_SetConfig+0x12c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC1_SetConfig+0x88>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a2b      	ldr	r2, [pc, #172]	@ (8004734 <TIM_OC1_SetConfig+0x130>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10c      	bne.n	80046a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f023 0308 	bic.w	r3, r3, #8
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <TIM_OC1_SetConfig+0x11c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <TIM_OC1_SetConfig+0xd2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <TIM_OC1_SetConfig+0x120>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00f      	beq.n	80046d6 <TIM_OC1_SetConfig+0xd2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <TIM_OC1_SetConfig+0x124>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00b      	beq.n	80046d6 <TIM_OC1_SetConfig+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	@ (800472c <TIM_OC1_SetConfig+0x128>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <TIM_OC1_SetConfig+0xd2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <TIM_OC1_SetConfig+0x12c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_OC1_SetConfig+0xd2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <TIM_OC1_SetConfig+0x130>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d111      	bne.n	80046fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40013400 	.word	0x40013400
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800
 8004734:	40015000 	.word	0x40015000

08004738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f023 0210 	bic.w	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0320 	bic.w	r3, r3, #32
 8004786:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2c      	ldr	r2, [pc, #176]	@ (8004848 <TIM_OC2_SetConfig+0x110>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC2_SetConfig+0x74>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2b      	ldr	r2, [pc, #172]	@ (800484c <TIM_OC2_SetConfig+0x114>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC2_SetConfig+0x74>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004850 <TIM_OC2_SetConfig+0x118>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10d      	bne.n	80047c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004848 <TIM_OC2_SetConfig+0x110>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <TIM_OC2_SetConfig+0xc0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <TIM_OC2_SetConfig+0x114>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00f      	beq.n	80047f8 <TIM_OC2_SetConfig+0xc0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a1e      	ldr	r2, [pc, #120]	@ (8004854 <TIM_OC2_SetConfig+0x11c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_OC2_SetConfig+0xc0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <TIM_OC2_SetConfig+0x120>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_OC2_SetConfig+0xc0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a1c      	ldr	r2, [pc, #112]	@ (800485c <TIM_OC2_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_OC2_SetConfig+0xc0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <TIM_OC2_SetConfig+0x118>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d113      	bne.n	8004820 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004806:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40013400 	.word	0x40013400
 8004850:	40015000 	.word	0x40015000
 8004854:	40014000 	.word	0x40014000
 8004858:	40014400 	.word	0x40014400
 800485c:	40014800 	.word	0x40014800

08004860 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	@ (800496c <TIM_OC3_SetConfig+0x10c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <TIM_OC3_SetConfig+0x72>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004970 <TIM_OC3_SetConfig+0x110>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d003      	beq.n	80048d2 <TIM_OC3_SetConfig+0x72>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a29      	ldr	r2, [pc, #164]	@ (8004974 <TIM_OC3_SetConfig+0x114>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10d      	bne.n	80048ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048ec:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1e      	ldr	r2, [pc, #120]	@ (800496c <TIM_OC3_SetConfig+0x10c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <TIM_OC3_SetConfig+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004970 <TIM_OC3_SetConfig+0x110>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00f      	beq.n	800491e <TIM_OC3_SetConfig+0xbe>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1d      	ldr	r2, [pc, #116]	@ (8004978 <TIM_OC3_SetConfig+0x118>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_OC3_SetConfig+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1c      	ldr	r2, [pc, #112]	@ (800497c <TIM_OC3_SetConfig+0x11c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d007      	beq.n	800491e <TIM_OC3_SetConfig+0xbe>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1b      	ldr	r2, [pc, #108]	@ (8004980 <TIM_OC3_SetConfig+0x120>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_OC3_SetConfig+0xbe>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a16      	ldr	r2, [pc, #88]	@ (8004974 <TIM_OC3_SetConfig+0x114>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d113      	bne.n	8004946 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800492c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	621a      	str	r2, [r3, #32]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40013400 	.word	0x40013400
 8004974:	40015000 	.word	0x40015000
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800

08004984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	031b      	lsls	r3, r3, #12
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a4c <TIM_OC4_SetConfig+0xc8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <TIM_OC4_SetConfig+0x8c>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a19      	ldr	r2, [pc, #100]	@ (8004a50 <TIM_OC4_SetConfig+0xcc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_OC4_SetConfig+0x8c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a18      	ldr	r2, [pc, #96]	@ (8004a54 <TIM_OC4_SetConfig+0xd0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_OC4_SetConfig+0x8c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <TIM_OC4_SetConfig+0xd4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_OC4_SetConfig+0x8c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a16      	ldr	r2, [pc, #88]	@ (8004a5c <TIM_OC4_SetConfig+0xd8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC4_SetConfig+0x8c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a15      	ldr	r2, [pc, #84]	@ (8004a60 <TIM_OC4_SetConfig+0xdc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d109      	bne.n	8004a24 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	019b      	lsls	r3, r3, #6
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40013400 	.word	0x40013400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40014400 	.word	0x40014400
 8004a5c:	40014800 	.word	0x40014800
 8004a60:	40015000 	.word	0x40015000

08004a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004aa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	041b      	lsls	r3, r3, #16
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a19      	ldr	r2, [pc, #100]	@ (8004b20 <TIM_OC5_SetConfig+0xbc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <TIM_OC5_SetConfig+0x82>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	@ (8004b24 <TIM_OC5_SetConfig+0xc0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00f      	beq.n	8004ae6 <TIM_OC5_SetConfig+0x82>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a17      	ldr	r2, [pc, #92]	@ (8004b28 <TIM_OC5_SetConfig+0xc4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_OC5_SetConfig+0x82>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a16      	ldr	r2, [pc, #88]	@ (8004b2c <TIM_OC5_SetConfig+0xc8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_OC5_SetConfig+0x82>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <TIM_OC5_SetConfig+0xcc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_OC5_SetConfig+0x82>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	@ (8004b34 <TIM_OC5_SetConfig+0xd0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d109      	bne.n	8004afa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	621a      	str	r2, [r3, #32]
}
 8004b14:	bf00      	nop
 8004b16:	371c      	adds	r7, #28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40013400 	.word	0x40013400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	40015000 	.word	0x40015000

08004b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	051b      	lsls	r3, r3, #20
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bf8 <TIM_OC6_SetConfig+0xc0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <TIM_OC6_SetConfig+0x84>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a19      	ldr	r2, [pc, #100]	@ (8004bfc <TIM_OC6_SetConfig+0xc4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00f      	beq.n	8004bbc <TIM_OC6_SetConfig+0x84>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a18      	ldr	r2, [pc, #96]	@ (8004c00 <TIM_OC6_SetConfig+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_OC6_SetConfig+0x84>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a17      	ldr	r2, [pc, #92]	@ (8004c04 <TIM_OC6_SetConfig+0xcc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <TIM_OC6_SetConfig+0x84>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a16      	ldr	r2, [pc, #88]	@ (8004c08 <TIM_OC6_SetConfig+0xd0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC6_SetConfig+0x84>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	@ (8004c0c <TIM_OC6_SetConfig+0xd4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40013400 	.word	0x40013400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800
 8004c0c:	40015000 	.word	0x40015000

08004c10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 031f 	and.w	r3, r3, #31
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a1a      	ldr	r2, [r3, #32]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
	...

08004c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e06d      	b.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	@ (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a2d      	ldr	r2, [pc, #180]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d01d      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf0:	d018      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1a      	ldr	r2, [pc, #104]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00e      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a15      	ldr	r2, [pc, #84]	@ (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a16      	ldr	r2, [pc, #88]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d004      	beq.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a11      	ldr	r2, [pc, #68]	@ (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10c      	bne.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40015000 	.word	0x40015000
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40000800 	.word	0x40000800
 8004d70:	40014000 	.word	0x40014000

08004d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e06a      	b.n	8004e66 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a17      	ldr	r2, [pc, #92]	@ (8004e78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d115      	bne.n	8004e54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	051b      	lsls	r3, r3, #20
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40015000 	.word	0x40015000

08004e80 <siprintf>:
 8004e80:	b40e      	push	{r1, r2, r3}
 8004e82:	b510      	push	{r4, lr}
 8004e84:	b09d      	sub	sp, #116	@ 0x74
 8004e86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9006      	str	r0, [sp, #24]
 8004e8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e90:	480a      	ldr	r0, [pc, #40]	@ (8004ebc <siprintf+0x3c>)
 8004e92:	9107      	str	r1, [sp, #28]
 8004e94:	9104      	str	r1, [sp, #16]
 8004e96:	490a      	ldr	r1, [pc, #40]	@ (8004ec0 <siprintf+0x40>)
 8004e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e9c:	9105      	str	r1, [sp, #20]
 8004e9e:	2400      	movs	r4, #0
 8004ea0:	a902      	add	r1, sp, #8
 8004ea2:	6800      	ldr	r0, [r0, #0]
 8004ea4:	9301      	str	r3, [sp, #4]
 8004ea6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004ea8:	f000 f9a2 	bl	80051f0 <_svfiprintf_r>
 8004eac:	9b02      	ldr	r3, [sp, #8]
 8004eae:	701c      	strb	r4, [r3, #0]
 8004eb0:	b01d      	add	sp, #116	@ 0x74
 8004eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb6:	b003      	add	sp, #12
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000018 	.word	0x20000018
 8004ec0:	ffff0208 	.word	0xffff0208

08004ec4 <memset>:
 8004ec4:	4402      	add	r2, r0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d100      	bne.n	8004ece <memset+0xa>
 8004ecc:	4770      	bx	lr
 8004ece:	f803 1b01 	strb.w	r1, [r3], #1
 8004ed2:	e7f9      	b.n	8004ec8 <memset+0x4>

08004ed4 <__errno>:
 8004ed4:	4b01      	ldr	r3, [pc, #4]	@ (8004edc <__errno+0x8>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000018 	.word	0x20000018

08004ee0 <__libc_init_array>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8004f18 <__libc_init_array+0x38>)
 8004ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8004f1c <__libc_init_array+0x3c>)
 8004ee6:	1b64      	subs	r4, r4, r5
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	2600      	movs	r6, #0
 8004eec:	42a6      	cmp	r6, r4
 8004eee:	d109      	bne.n	8004f04 <__libc_init_array+0x24>
 8004ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8004f20 <__libc_init_array+0x40>)
 8004ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8004f24 <__libc_init_array+0x44>)
 8004ef4:	f000 fc64 	bl	80057c0 <_init>
 8004ef8:	1b64      	subs	r4, r4, r5
 8004efa:	10a4      	asrs	r4, r4, #2
 8004efc:	2600      	movs	r6, #0
 8004efe:	42a6      	cmp	r6, r4
 8004f00:	d105      	bne.n	8004f0e <__libc_init_array+0x2e>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f08:	4798      	blx	r3
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	e7ee      	b.n	8004eec <__libc_init_array+0xc>
 8004f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f12:	4798      	blx	r3
 8004f14:	3601      	adds	r6, #1
 8004f16:	e7f2      	b.n	8004efe <__libc_init_array+0x1e>
 8004f18:	080058d4 	.word	0x080058d4
 8004f1c:	080058d4 	.word	0x080058d4
 8004f20:	080058d4 	.word	0x080058d4
 8004f24:	080058d8 	.word	0x080058d8

08004f28 <__retarget_lock_acquire_recursive>:
 8004f28:	4770      	bx	lr

08004f2a <__retarget_lock_release_recursive>:
 8004f2a:	4770      	bx	lr

08004f2c <memcpy>:
 8004f2c:	440a      	add	r2, r1
 8004f2e:	4291      	cmp	r1, r2
 8004f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f34:	d100      	bne.n	8004f38 <memcpy+0xc>
 8004f36:	4770      	bx	lr
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f42:	4291      	cmp	r1, r2
 8004f44:	d1f9      	bne.n	8004f3a <memcpy+0xe>
 8004f46:	bd10      	pop	{r4, pc}

08004f48 <_free_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4605      	mov	r5, r0
 8004f4c:	2900      	cmp	r1, #0
 8004f4e:	d041      	beq.n	8004fd4 <_free_r+0x8c>
 8004f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f54:	1f0c      	subs	r4, r1, #4
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bfb8      	it	lt
 8004f5a:	18e4      	addlt	r4, r4, r3
 8004f5c:	f000 f8e0 	bl	8005120 <__malloc_lock>
 8004f60:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <_free_r+0x90>)
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	b933      	cbnz	r3, 8004f74 <_free_r+0x2c>
 8004f66:	6063      	str	r3, [r4, #4]
 8004f68:	6014      	str	r4, [r2, #0]
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f70:	f000 b8dc 	b.w	800512c <__malloc_unlock>
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	d908      	bls.n	8004f8a <_free_r+0x42>
 8004f78:	6820      	ldr	r0, [r4, #0]
 8004f7a:	1821      	adds	r1, r4, r0
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	bf01      	itttt	eq
 8004f80:	6819      	ldreq	r1, [r3, #0]
 8004f82:	685b      	ldreq	r3, [r3, #4]
 8004f84:	1809      	addeq	r1, r1, r0
 8004f86:	6021      	streq	r1, [r4, #0]
 8004f88:	e7ed      	b.n	8004f66 <_free_r+0x1e>
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	b10b      	cbz	r3, 8004f94 <_free_r+0x4c>
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	d9fa      	bls.n	8004f8a <_free_r+0x42>
 8004f94:	6811      	ldr	r1, [r2, #0]
 8004f96:	1850      	adds	r0, r2, r1
 8004f98:	42a0      	cmp	r0, r4
 8004f9a:	d10b      	bne.n	8004fb4 <_free_r+0x6c>
 8004f9c:	6820      	ldr	r0, [r4, #0]
 8004f9e:	4401      	add	r1, r0
 8004fa0:	1850      	adds	r0, r2, r1
 8004fa2:	4283      	cmp	r3, r0
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	d1e0      	bne.n	8004f6a <_free_r+0x22>
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	6053      	str	r3, [r2, #4]
 8004fae:	4408      	add	r0, r1
 8004fb0:	6010      	str	r0, [r2, #0]
 8004fb2:	e7da      	b.n	8004f6a <_free_r+0x22>
 8004fb4:	d902      	bls.n	8004fbc <_free_r+0x74>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	602b      	str	r3, [r5, #0]
 8004fba:	e7d6      	b.n	8004f6a <_free_r+0x22>
 8004fbc:	6820      	ldr	r0, [r4, #0]
 8004fbe:	1821      	adds	r1, r4, r0
 8004fc0:	428b      	cmp	r3, r1
 8004fc2:	bf04      	itt	eq
 8004fc4:	6819      	ldreq	r1, [r3, #0]
 8004fc6:	685b      	ldreq	r3, [r3, #4]
 8004fc8:	6063      	str	r3, [r4, #4]
 8004fca:	bf04      	itt	eq
 8004fcc:	1809      	addeq	r1, r1, r0
 8004fce:	6021      	streq	r1, [r4, #0]
 8004fd0:	6054      	str	r4, [r2, #4]
 8004fd2:	e7ca      	b.n	8004f6a <_free_r+0x22>
 8004fd4:	bd38      	pop	{r3, r4, r5, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000324 	.word	0x20000324

08004fdc <sbrk_aligned>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4e0f      	ldr	r6, [pc, #60]	@ (800501c <sbrk_aligned+0x40>)
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	6831      	ldr	r1, [r6, #0]
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	b911      	cbnz	r1, 8004fee <sbrk_aligned+0x12>
 8004fe8:	f000 fba4 	bl	8005734 <_sbrk_r>
 8004fec:	6030      	str	r0, [r6, #0]
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 fb9f 	bl	8005734 <_sbrk_r>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d103      	bne.n	8005002 <sbrk_aligned+0x26>
 8004ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8004ffe:	4620      	mov	r0, r4
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	1cc4      	adds	r4, r0, #3
 8005004:	f024 0403 	bic.w	r4, r4, #3
 8005008:	42a0      	cmp	r0, r4
 800500a:	d0f8      	beq.n	8004ffe <sbrk_aligned+0x22>
 800500c:	1a21      	subs	r1, r4, r0
 800500e:	4628      	mov	r0, r5
 8005010:	f000 fb90 	bl	8005734 <_sbrk_r>
 8005014:	3001      	adds	r0, #1
 8005016:	d1f2      	bne.n	8004ffe <sbrk_aligned+0x22>
 8005018:	e7ef      	b.n	8004ffa <sbrk_aligned+0x1e>
 800501a:	bf00      	nop
 800501c:	20000320 	.word	0x20000320

08005020 <_malloc_r>:
 8005020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005024:	1ccd      	adds	r5, r1, #3
 8005026:	f025 0503 	bic.w	r5, r5, #3
 800502a:	3508      	adds	r5, #8
 800502c:	2d0c      	cmp	r5, #12
 800502e:	bf38      	it	cc
 8005030:	250c      	movcc	r5, #12
 8005032:	2d00      	cmp	r5, #0
 8005034:	4606      	mov	r6, r0
 8005036:	db01      	blt.n	800503c <_malloc_r+0x1c>
 8005038:	42a9      	cmp	r1, r5
 800503a:	d904      	bls.n	8005046 <_malloc_r+0x26>
 800503c:	230c      	movs	r3, #12
 800503e:	6033      	str	r3, [r6, #0]
 8005040:	2000      	movs	r0, #0
 8005042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800511c <_malloc_r+0xfc>
 800504a:	f000 f869 	bl	8005120 <__malloc_lock>
 800504e:	f8d8 3000 	ldr.w	r3, [r8]
 8005052:	461c      	mov	r4, r3
 8005054:	bb44      	cbnz	r4, 80050a8 <_malloc_r+0x88>
 8005056:	4629      	mov	r1, r5
 8005058:	4630      	mov	r0, r6
 800505a:	f7ff ffbf 	bl	8004fdc <sbrk_aligned>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	4604      	mov	r4, r0
 8005062:	d158      	bne.n	8005116 <_malloc_r+0xf6>
 8005064:	f8d8 4000 	ldr.w	r4, [r8]
 8005068:	4627      	mov	r7, r4
 800506a:	2f00      	cmp	r7, #0
 800506c:	d143      	bne.n	80050f6 <_malloc_r+0xd6>
 800506e:	2c00      	cmp	r4, #0
 8005070:	d04b      	beq.n	800510a <_malloc_r+0xea>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	4639      	mov	r1, r7
 8005076:	4630      	mov	r0, r6
 8005078:	eb04 0903 	add.w	r9, r4, r3
 800507c:	f000 fb5a 	bl	8005734 <_sbrk_r>
 8005080:	4581      	cmp	r9, r0
 8005082:	d142      	bne.n	800510a <_malloc_r+0xea>
 8005084:	6821      	ldr	r1, [r4, #0]
 8005086:	1a6d      	subs	r5, r5, r1
 8005088:	4629      	mov	r1, r5
 800508a:	4630      	mov	r0, r6
 800508c:	f7ff ffa6 	bl	8004fdc <sbrk_aligned>
 8005090:	3001      	adds	r0, #1
 8005092:	d03a      	beq.n	800510a <_malloc_r+0xea>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	442b      	add	r3, r5
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	f8d8 3000 	ldr.w	r3, [r8]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	bb62      	cbnz	r2, 80050fc <_malloc_r+0xdc>
 80050a2:	f8c8 7000 	str.w	r7, [r8]
 80050a6:	e00f      	b.n	80050c8 <_malloc_r+0xa8>
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	1b52      	subs	r2, r2, r5
 80050ac:	d420      	bmi.n	80050f0 <_malloc_r+0xd0>
 80050ae:	2a0b      	cmp	r2, #11
 80050b0:	d917      	bls.n	80050e2 <_malloc_r+0xc2>
 80050b2:	1961      	adds	r1, r4, r5
 80050b4:	42a3      	cmp	r3, r4
 80050b6:	6025      	str	r5, [r4, #0]
 80050b8:	bf18      	it	ne
 80050ba:	6059      	strne	r1, [r3, #4]
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	bf08      	it	eq
 80050c0:	f8c8 1000 	streq.w	r1, [r8]
 80050c4:	5162      	str	r2, [r4, r5]
 80050c6:	604b      	str	r3, [r1, #4]
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f82f 	bl	800512c <__malloc_unlock>
 80050ce:	f104 000b 	add.w	r0, r4, #11
 80050d2:	1d23      	adds	r3, r4, #4
 80050d4:	f020 0007 	bic.w	r0, r0, #7
 80050d8:	1ac2      	subs	r2, r0, r3
 80050da:	bf1c      	itt	ne
 80050dc:	1a1b      	subne	r3, r3, r0
 80050de:	50a3      	strne	r3, [r4, r2]
 80050e0:	e7af      	b.n	8005042 <_malloc_r+0x22>
 80050e2:	6862      	ldr	r2, [r4, #4]
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	bf0c      	ite	eq
 80050e8:	f8c8 2000 	streq.w	r2, [r8]
 80050ec:	605a      	strne	r2, [r3, #4]
 80050ee:	e7eb      	b.n	80050c8 <_malloc_r+0xa8>
 80050f0:	4623      	mov	r3, r4
 80050f2:	6864      	ldr	r4, [r4, #4]
 80050f4:	e7ae      	b.n	8005054 <_malloc_r+0x34>
 80050f6:	463c      	mov	r4, r7
 80050f8:	687f      	ldr	r7, [r7, #4]
 80050fa:	e7b6      	b.n	800506a <_malloc_r+0x4a>
 80050fc:	461a      	mov	r2, r3
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	42a3      	cmp	r3, r4
 8005102:	d1fb      	bne.n	80050fc <_malloc_r+0xdc>
 8005104:	2300      	movs	r3, #0
 8005106:	6053      	str	r3, [r2, #4]
 8005108:	e7de      	b.n	80050c8 <_malloc_r+0xa8>
 800510a:	230c      	movs	r3, #12
 800510c:	6033      	str	r3, [r6, #0]
 800510e:	4630      	mov	r0, r6
 8005110:	f000 f80c 	bl	800512c <__malloc_unlock>
 8005114:	e794      	b.n	8005040 <_malloc_r+0x20>
 8005116:	6005      	str	r5, [r0, #0]
 8005118:	e7d6      	b.n	80050c8 <_malloc_r+0xa8>
 800511a:	bf00      	nop
 800511c:	20000324 	.word	0x20000324

08005120 <__malloc_lock>:
 8005120:	4801      	ldr	r0, [pc, #4]	@ (8005128 <__malloc_lock+0x8>)
 8005122:	f7ff bf01 	b.w	8004f28 <__retarget_lock_acquire_recursive>
 8005126:	bf00      	nop
 8005128:	2000031c 	.word	0x2000031c

0800512c <__malloc_unlock>:
 800512c:	4801      	ldr	r0, [pc, #4]	@ (8005134 <__malloc_unlock+0x8>)
 800512e:	f7ff befc 	b.w	8004f2a <__retarget_lock_release_recursive>
 8005132:	bf00      	nop
 8005134:	2000031c 	.word	0x2000031c

08005138 <__ssputs_r>:
 8005138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	688e      	ldr	r6, [r1, #8]
 800513e:	461f      	mov	r7, r3
 8005140:	42be      	cmp	r6, r7
 8005142:	680b      	ldr	r3, [r1, #0]
 8005144:	4682      	mov	sl, r0
 8005146:	460c      	mov	r4, r1
 8005148:	4690      	mov	r8, r2
 800514a:	d82d      	bhi.n	80051a8 <__ssputs_r+0x70>
 800514c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005154:	d026      	beq.n	80051a4 <__ssputs_r+0x6c>
 8005156:	6965      	ldr	r5, [r4, #20]
 8005158:	6909      	ldr	r1, [r1, #16]
 800515a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800515e:	eba3 0901 	sub.w	r9, r3, r1
 8005162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005166:	1c7b      	adds	r3, r7, #1
 8005168:	444b      	add	r3, r9
 800516a:	106d      	asrs	r5, r5, #1
 800516c:	429d      	cmp	r5, r3
 800516e:	bf38      	it	cc
 8005170:	461d      	movcc	r5, r3
 8005172:	0553      	lsls	r3, r2, #21
 8005174:	d527      	bpl.n	80051c6 <__ssputs_r+0x8e>
 8005176:	4629      	mov	r1, r5
 8005178:	f7ff ff52 	bl	8005020 <_malloc_r>
 800517c:	4606      	mov	r6, r0
 800517e:	b360      	cbz	r0, 80051da <__ssputs_r+0xa2>
 8005180:	6921      	ldr	r1, [r4, #16]
 8005182:	464a      	mov	r2, r9
 8005184:	f7ff fed2 	bl	8004f2c <memcpy>
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800518e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005192:	81a3      	strh	r3, [r4, #12]
 8005194:	6126      	str	r6, [r4, #16]
 8005196:	6165      	str	r5, [r4, #20]
 8005198:	444e      	add	r6, r9
 800519a:	eba5 0509 	sub.w	r5, r5, r9
 800519e:	6026      	str	r6, [r4, #0]
 80051a0:	60a5      	str	r5, [r4, #8]
 80051a2:	463e      	mov	r6, r7
 80051a4:	42be      	cmp	r6, r7
 80051a6:	d900      	bls.n	80051aa <__ssputs_r+0x72>
 80051a8:	463e      	mov	r6, r7
 80051aa:	6820      	ldr	r0, [r4, #0]
 80051ac:	4632      	mov	r2, r6
 80051ae:	4641      	mov	r1, r8
 80051b0:	f000 faa6 	bl	8005700 <memmove>
 80051b4:	68a3      	ldr	r3, [r4, #8]
 80051b6:	1b9b      	subs	r3, r3, r6
 80051b8:	60a3      	str	r3, [r4, #8]
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	4433      	add	r3, r6
 80051be:	6023      	str	r3, [r4, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	462a      	mov	r2, r5
 80051c8:	f000 fac4 	bl	8005754 <_realloc_r>
 80051cc:	4606      	mov	r6, r0
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d1e0      	bne.n	8005194 <__ssputs_r+0x5c>
 80051d2:	6921      	ldr	r1, [r4, #16]
 80051d4:	4650      	mov	r0, sl
 80051d6:	f7ff feb7 	bl	8004f48 <_free_r>
 80051da:	230c      	movs	r3, #12
 80051dc:	f8ca 3000 	str.w	r3, [sl]
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	e7e9      	b.n	80051c2 <__ssputs_r+0x8a>
	...

080051f0 <_svfiprintf_r>:
 80051f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f4:	4698      	mov	r8, r3
 80051f6:	898b      	ldrh	r3, [r1, #12]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	b09d      	sub	sp, #116	@ 0x74
 80051fc:	4607      	mov	r7, r0
 80051fe:	460d      	mov	r5, r1
 8005200:	4614      	mov	r4, r2
 8005202:	d510      	bpl.n	8005226 <_svfiprintf_r+0x36>
 8005204:	690b      	ldr	r3, [r1, #16]
 8005206:	b973      	cbnz	r3, 8005226 <_svfiprintf_r+0x36>
 8005208:	2140      	movs	r1, #64	@ 0x40
 800520a:	f7ff ff09 	bl	8005020 <_malloc_r>
 800520e:	6028      	str	r0, [r5, #0]
 8005210:	6128      	str	r0, [r5, #16]
 8005212:	b930      	cbnz	r0, 8005222 <_svfiprintf_r+0x32>
 8005214:	230c      	movs	r3, #12
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	b01d      	add	sp, #116	@ 0x74
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	2340      	movs	r3, #64	@ 0x40
 8005224:	616b      	str	r3, [r5, #20]
 8005226:	2300      	movs	r3, #0
 8005228:	9309      	str	r3, [sp, #36]	@ 0x24
 800522a:	2320      	movs	r3, #32
 800522c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005230:	f8cd 800c 	str.w	r8, [sp, #12]
 8005234:	2330      	movs	r3, #48	@ 0x30
 8005236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053d4 <_svfiprintf_r+0x1e4>
 800523a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800523e:	f04f 0901 	mov.w	r9, #1
 8005242:	4623      	mov	r3, r4
 8005244:	469a      	mov	sl, r3
 8005246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524a:	b10a      	cbz	r2, 8005250 <_svfiprintf_r+0x60>
 800524c:	2a25      	cmp	r2, #37	@ 0x25
 800524e:	d1f9      	bne.n	8005244 <_svfiprintf_r+0x54>
 8005250:	ebba 0b04 	subs.w	fp, sl, r4
 8005254:	d00b      	beq.n	800526e <_svfiprintf_r+0x7e>
 8005256:	465b      	mov	r3, fp
 8005258:	4622      	mov	r2, r4
 800525a:	4629      	mov	r1, r5
 800525c:	4638      	mov	r0, r7
 800525e:	f7ff ff6b 	bl	8005138 <__ssputs_r>
 8005262:	3001      	adds	r0, #1
 8005264:	f000 80a7 	beq.w	80053b6 <_svfiprintf_r+0x1c6>
 8005268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800526a:	445a      	add	r2, fp
 800526c:	9209      	str	r2, [sp, #36]	@ 0x24
 800526e:	f89a 3000 	ldrb.w	r3, [sl]
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 809f 	beq.w	80053b6 <_svfiprintf_r+0x1c6>
 8005278:	2300      	movs	r3, #0
 800527a:	f04f 32ff 	mov.w	r2, #4294967295
 800527e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005282:	f10a 0a01 	add.w	sl, sl, #1
 8005286:	9304      	str	r3, [sp, #16]
 8005288:	9307      	str	r3, [sp, #28]
 800528a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800528e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005290:	4654      	mov	r4, sl
 8005292:	2205      	movs	r2, #5
 8005294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005298:	484e      	ldr	r0, [pc, #312]	@ (80053d4 <_svfiprintf_r+0x1e4>)
 800529a:	f7fa ffa1 	bl	80001e0 <memchr>
 800529e:	9a04      	ldr	r2, [sp, #16]
 80052a0:	b9d8      	cbnz	r0, 80052da <_svfiprintf_r+0xea>
 80052a2:	06d0      	lsls	r0, r2, #27
 80052a4:	bf44      	itt	mi
 80052a6:	2320      	movmi	r3, #32
 80052a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ac:	0711      	lsls	r1, r2, #28
 80052ae:	bf44      	itt	mi
 80052b0:	232b      	movmi	r3, #43	@ 0x2b
 80052b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80052bc:	d015      	beq.n	80052ea <_svfiprintf_r+0xfa>
 80052be:	9a07      	ldr	r2, [sp, #28]
 80052c0:	4654      	mov	r4, sl
 80052c2:	2000      	movs	r0, #0
 80052c4:	f04f 0c0a 	mov.w	ip, #10
 80052c8:	4621      	mov	r1, r4
 80052ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ce:	3b30      	subs	r3, #48	@ 0x30
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	d94b      	bls.n	800536c <_svfiprintf_r+0x17c>
 80052d4:	b1b0      	cbz	r0, 8005304 <_svfiprintf_r+0x114>
 80052d6:	9207      	str	r2, [sp, #28]
 80052d8:	e014      	b.n	8005304 <_svfiprintf_r+0x114>
 80052da:	eba0 0308 	sub.w	r3, r0, r8
 80052de:	fa09 f303 	lsl.w	r3, r9, r3
 80052e2:	4313      	orrs	r3, r2
 80052e4:	9304      	str	r3, [sp, #16]
 80052e6:	46a2      	mov	sl, r4
 80052e8:	e7d2      	b.n	8005290 <_svfiprintf_r+0xa0>
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	1d19      	adds	r1, r3, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	9103      	str	r1, [sp, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bfbb      	ittet	lt
 80052f6:	425b      	neglt	r3, r3
 80052f8:	f042 0202 	orrlt.w	r2, r2, #2
 80052fc:	9307      	strge	r3, [sp, #28]
 80052fe:	9307      	strlt	r3, [sp, #28]
 8005300:	bfb8      	it	lt
 8005302:	9204      	strlt	r2, [sp, #16]
 8005304:	7823      	ldrb	r3, [r4, #0]
 8005306:	2b2e      	cmp	r3, #46	@ 0x2e
 8005308:	d10a      	bne.n	8005320 <_svfiprintf_r+0x130>
 800530a:	7863      	ldrb	r3, [r4, #1]
 800530c:	2b2a      	cmp	r3, #42	@ 0x2a
 800530e:	d132      	bne.n	8005376 <_svfiprintf_r+0x186>
 8005310:	9b03      	ldr	r3, [sp, #12]
 8005312:	1d1a      	adds	r2, r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	9203      	str	r2, [sp, #12]
 8005318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800531c:	3402      	adds	r4, #2
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053e4 <_svfiprintf_r+0x1f4>
 8005324:	7821      	ldrb	r1, [r4, #0]
 8005326:	2203      	movs	r2, #3
 8005328:	4650      	mov	r0, sl
 800532a:	f7fa ff59 	bl	80001e0 <memchr>
 800532e:	b138      	cbz	r0, 8005340 <_svfiprintf_r+0x150>
 8005330:	9b04      	ldr	r3, [sp, #16]
 8005332:	eba0 000a 	sub.w	r0, r0, sl
 8005336:	2240      	movs	r2, #64	@ 0x40
 8005338:	4082      	lsls	r2, r0
 800533a:	4313      	orrs	r3, r2
 800533c:	3401      	adds	r4, #1
 800533e:	9304      	str	r3, [sp, #16]
 8005340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005344:	4824      	ldr	r0, [pc, #144]	@ (80053d8 <_svfiprintf_r+0x1e8>)
 8005346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800534a:	2206      	movs	r2, #6
 800534c:	f7fa ff48 	bl	80001e0 <memchr>
 8005350:	2800      	cmp	r0, #0
 8005352:	d036      	beq.n	80053c2 <_svfiprintf_r+0x1d2>
 8005354:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <_svfiprintf_r+0x1ec>)
 8005356:	bb1b      	cbnz	r3, 80053a0 <_svfiprintf_r+0x1b0>
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	3307      	adds	r3, #7
 800535c:	f023 0307 	bic.w	r3, r3, #7
 8005360:	3308      	adds	r3, #8
 8005362:	9303      	str	r3, [sp, #12]
 8005364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005366:	4433      	add	r3, r6
 8005368:	9309      	str	r3, [sp, #36]	@ 0x24
 800536a:	e76a      	b.n	8005242 <_svfiprintf_r+0x52>
 800536c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005370:	460c      	mov	r4, r1
 8005372:	2001      	movs	r0, #1
 8005374:	e7a8      	b.n	80052c8 <_svfiprintf_r+0xd8>
 8005376:	2300      	movs	r3, #0
 8005378:	3401      	adds	r4, #1
 800537a:	9305      	str	r3, [sp, #20]
 800537c:	4619      	mov	r1, r3
 800537e:	f04f 0c0a 	mov.w	ip, #10
 8005382:	4620      	mov	r0, r4
 8005384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005388:	3a30      	subs	r2, #48	@ 0x30
 800538a:	2a09      	cmp	r2, #9
 800538c:	d903      	bls.n	8005396 <_svfiprintf_r+0x1a6>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0c6      	beq.n	8005320 <_svfiprintf_r+0x130>
 8005392:	9105      	str	r1, [sp, #20]
 8005394:	e7c4      	b.n	8005320 <_svfiprintf_r+0x130>
 8005396:	fb0c 2101 	mla	r1, ip, r1, r2
 800539a:	4604      	mov	r4, r0
 800539c:	2301      	movs	r3, #1
 800539e:	e7f0      	b.n	8005382 <_svfiprintf_r+0x192>
 80053a0:	ab03      	add	r3, sp, #12
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	462a      	mov	r2, r5
 80053a6:	4b0e      	ldr	r3, [pc, #56]	@ (80053e0 <_svfiprintf_r+0x1f0>)
 80053a8:	a904      	add	r1, sp, #16
 80053aa:	4638      	mov	r0, r7
 80053ac:	f3af 8000 	nop.w
 80053b0:	1c42      	adds	r2, r0, #1
 80053b2:	4606      	mov	r6, r0
 80053b4:	d1d6      	bne.n	8005364 <_svfiprintf_r+0x174>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	065b      	lsls	r3, r3, #25
 80053ba:	f53f af2d 	bmi.w	8005218 <_svfiprintf_r+0x28>
 80053be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053c0:	e72c      	b.n	800521c <_svfiprintf_r+0x2c>
 80053c2:	ab03      	add	r3, sp, #12
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	462a      	mov	r2, r5
 80053c8:	4b05      	ldr	r3, [pc, #20]	@ (80053e0 <_svfiprintf_r+0x1f0>)
 80053ca:	a904      	add	r1, sp, #16
 80053cc:	4638      	mov	r0, r7
 80053ce:	f000 f879 	bl	80054c4 <_printf_i>
 80053d2:	e7ed      	b.n	80053b0 <_svfiprintf_r+0x1c0>
 80053d4:	08005898 	.word	0x08005898
 80053d8:	080058a2 	.word	0x080058a2
 80053dc:	00000000 	.word	0x00000000
 80053e0:	08005139 	.word	0x08005139
 80053e4:	0800589e 	.word	0x0800589e

080053e8 <_printf_common>:
 80053e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	4616      	mov	r6, r2
 80053ee:	4698      	mov	r8, r3
 80053f0:	688a      	ldr	r2, [r1, #8]
 80053f2:	690b      	ldr	r3, [r1, #16]
 80053f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bfb8      	it	lt
 80053fc:	4613      	movlt	r3, r2
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005404:	4607      	mov	r7, r0
 8005406:	460c      	mov	r4, r1
 8005408:	b10a      	cbz	r2, 800540e <_printf_common+0x26>
 800540a:	3301      	adds	r3, #1
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	0699      	lsls	r1, r3, #26
 8005412:	bf42      	ittt	mi
 8005414:	6833      	ldrmi	r3, [r6, #0]
 8005416:	3302      	addmi	r3, #2
 8005418:	6033      	strmi	r3, [r6, #0]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	f015 0506 	ands.w	r5, r5, #6
 8005420:	d106      	bne.n	8005430 <_printf_common+0x48>
 8005422:	f104 0a19 	add.w	sl, r4, #25
 8005426:	68e3      	ldr	r3, [r4, #12]
 8005428:	6832      	ldr	r2, [r6, #0]
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	42ab      	cmp	r3, r5
 800542e:	dc26      	bgt.n	800547e <_printf_common+0x96>
 8005430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	3b00      	subs	r3, #0
 8005438:	bf18      	it	ne
 800543a:	2301      	movne	r3, #1
 800543c:	0692      	lsls	r2, r2, #26
 800543e:	d42b      	bmi.n	8005498 <_printf_common+0xb0>
 8005440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005444:	4641      	mov	r1, r8
 8005446:	4638      	mov	r0, r7
 8005448:	47c8      	blx	r9
 800544a:	3001      	adds	r0, #1
 800544c:	d01e      	beq.n	800548c <_printf_common+0xa4>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	6922      	ldr	r2, [r4, #16]
 8005452:	f003 0306 	and.w	r3, r3, #6
 8005456:	2b04      	cmp	r3, #4
 8005458:	bf02      	ittt	eq
 800545a:	68e5      	ldreq	r5, [r4, #12]
 800545c:	6833      	ldreq	r3, [r6, #0]
 800545e:	1aed      	subeq	r5, r5, r3
 8005460:	68a3      	ldr	r3, [r4, #8]
 8005462:	bf0c      	ite	eq
 8005464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005468:	2500      	movne	r5, #0
 800546a:	4293      	cmp	r3, r2
 800546c:	bfc4      	itt	gt
 800546e:	1a9b      	subgt	r3, r3, r2
 8005470:	18ed      	addgt	r5, r5, r3
 8005472:	2600      	movs	r6, #0
 8005474:	341a      	adds	r4, #26
 8005476:	42b5      	cmp	r5, r6
 8005478:	d11a      	bne.n	80054b0 <_printf_common+0xc8>
 800547a:	2000      	movs	r0, #0
 800547c:	e008      	b.n	8005490 <_printf_common+0xa8>
 800547e:	2301      	movs	r3, #1
 8005480:	4652      	mov	r2, sl
 8005482:	4641      	mov	r1, r8
 8005484:	4638      	mov	r0, r7
 8005486:	47c8      	blx	r9
 8005488:	3001      	adds	r0, #1
 800548a:	d103      	bne.n	8005494 <_printf_common+0xac>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	3501      	adds	r5, #1
 8005496:	e7c6      	b.n	8005426 <_printf_common+0x3e>
 8005498:	18e1      	adds	r1, r4, r3
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	2030      	movs	r0, #48	@ 0x30
 800549e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054a2:	4422      	add	r2, r4
 80054a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054ac:	3302      	adds	r3, #2
 80054ae:	e7c7      	b.n	8005440 <_printf_common+0x58>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4622      	mov	r2, r4
 80054b4:	4641      	mov	r1, r8
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c8      	blx	r9
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0e6      	beq.n	800548c <_printf_common+0xa4>
 80054be:	3601      	adds	r6, #1
 80054c0:	e7d9      	b.n	8005476 <_printf_common+0x8e>
	...

080054c4 <_printf_i>:
 80054c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	7e0f      	ldrb	r7, [r1, #24]
 80054ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054cc:	2f78      	cmp	r7, #120	@ 0x78
 80054ce:	4691      	mov	r9, r2
 80054d0:	4680      	mov	r8, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	469a      	mov	sl, r3
 80054d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054da:	d807      	bhi.n	80054ec <_printf_i+0x28>
 80054dc:	2f62      	cmp	r7, #98	@ 0x62
 80054de:	d80a      	bhi.n	80054f6 <_printf_i+0x32>
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	f000 80d1 	beq.w	8005688 <_printf_i+0x1c4>
 80054e6:	2f58      	cmp	r7, #88	@ 0x58
 80054e8:	f000 80b8 	beq.w	800565c <_printf_i+0x198>
 80054ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054f4:	e03a      	b.n	800556c <_printf_i+0xa8>
 80054f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054fa:	2b15      	cmp	r3, #21
 80054fc:	d8f6      	bhi.n	80054ec <_printf_i+0x28>
 80054fe:	a101      	add	r1, pc, #4	@ (adr r1, 8005504 <_printf_i+0x40>)
 8005500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005504:	0800555d 	.word	0x0800555d
 8005508:	08005571 	.word	0x08005571
 800550c:	080054ed 	.word	0x080054ed
 8005510:	080054ed 	.word	0x080054ed
 8005514:	080054ed 	.word	0x080054ed
 8005518:	080054ed 	.word	0x080054ed
 800551c:	08005571 	.word	0x08005571
 8005520:	080054ed 	.word	0x080054ed
 8005524:	080054ed 	.word	0x080054ed
 8005528:	080054ed 	.word	0x080054ed
 800552c:	080054ed 	.word	0x080054ed
 8005530:	0800566f 	.word	0x0800566f
 8005534:	0800559b 	.word	0x0800559b
 8005538:	08005629 	.word	0x08005629
 800553c:	080054ed 	.word	0x080054ed
 8005540:	080054ed 	.word	0x080054ed
 8005544:	08005691 	.word	0x08005691
 8005548:	080054ed 	.word	0x080054ed
 800554c:	0800559b 	.word	0x0800559b
 8005550:	080054ed 	.word	0x080054ed
 8005554:	080054ed 	.word	0x080054ed
 8005558:	08005631 	.word	0x08005631
 800555c:	6833      	ldr	r3, [r6, #0]
 800555e:	1d1a      	adds	r2, r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6032      	str	r2, [r6, #0]
 8005564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800556c:	2301      	movs	r3, #1
 800556e:	e09c      	b.n	80056aa <_printf_i+0x1e6>
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	6820      	ldr	r0, [r4, #0]
 8005574:	1d19      	adds	r1, r3, #4
 8005576:	6031      	str	r1, [r6, #0]
 8005578:	0606      	lsls	r6, r0, #24
 800557a:	d501      	bpl.n	8005580 <_printf_i+0xbc>
 800557c:	681d      	ldr	r5, [r3, #0]
 800557e:	e003      	b.n	8005588 <_printf_i+0xc4>
 8005580:	0645      	lsls	r5, r0, #25
 8005582:	d5fb      	bpl.n	800557c <_printf_i+0xb8>
 8005584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005588:	2d00      	cmp	r5, #0
 800558a:	da03      	bge.n	8005594 <_printf_i+0xd0>
 800558c:	232d      	movs	r3, #45	@ 0x2d
 800558e:	426d      	negs	r5, r5
 8005590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005594:	4858      	ldr	r0, [pc, #352]	@ (80056f8 <_printf_i+0x234>)
 8005596:	230a      	movs	r3, #10
 8005598:	e011      	b.n	80055be <_printf_i+0xfa>
 800559a:	6821      	ldr	r1, [r4, #0]
 800559c:	6833      	ldr	r3, [r6, #0]
 800559e:	0608      	lsls	r0, r1, #24
 80055a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80055a4:	d402      	bmi.n	80055ac <_printf_i+0xe8>
 80055a6:	0649      	lsls	r1, r1, #25
 80055a8:	bf48      	it	mi
 80055aa:	b2ad      	uxthmi	r5, r5
 80055ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80055ae:	4852      	ldr	r0, [pc, #328]	@ (80056f8 <_printf_i+0x234>)
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	bf14      	ite	ne
 80055b4:	230a      	movne	r3, #10
 80055b6:	2308      	moveq	r3, #8
 80055b8:	2100      	movs	r1, #0
 80055ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055be:	6866      	ldr	r6, [r4, #4]
 80055c0:	60a6      	str	r6, [r4, #8]
 80055c2:	2e00      	cmp	r6, #0
 80055c4:	db05      	blt.n	80055d2 <_printf_i+0x10e>
 80055c6:	6821      	ldr	r1, [r4, #0]
 80055c8:	432e      	orrs	r6, r5
 80055ca:	f021 0104 	bic.w	r1, r1, #4
 80055ce:	6021      	str	r1, [r4, #0]
 80055d0:	d04b      	beq.n	800566a <_printf_i+0x1a6>
 80055d2:	4616      	mov	r6, r2
 80055d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80055d8:	fb03 5711 	mls	r7, r3, r1, r5
 80055dc:	5dc7      	ldrb	r7, [r0, r7]
 80055de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055e2:	462f      	mov	r7, r5
 80055e4:	42bb      	cmp	r3, r7
 80055e6:	460d      	mov	r5, r1
 80055e8:	d9f4      	bls.n	80055d4 <_printf_i+0x110>
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d10b      	bne.n	8005606 <_printf_i+0x142>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	07df      	lsls	r7, r3, #31
 80055f2:	d508      	bpl.n	8005606 <_printf_i+0x142>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	6861      	ldr	r1, [r4, #4]
 80055f8:	4299      	cmp	r1, r3
 80055fa:	bfde      	ittt	le
 80055fc:	2330      	movle	r3, #48	@ 0x30
 80055fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005602:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005606:	1b92      	subs	r2, r2, r6
 8005608:	6122      	str	r2, [r4, #16]
 800560a:	f8cd a000 	str.w	sl, [sp]
 800560e:	464b      	mov	r3, r9
 8005610:	aa03      	add	r2, sp, #12
 8005612:	4621      	mov	r1, r4
 8005614:	4640      	mov	r0, r8
 8005616:	f7ff fee7 	bl	80053e8 <_printf_common>
 800561a:	3001      	adds	r0, #1
 800561c:	d14a      	bne.n	80056b4 <_printf_i+0x1f0>
 800561e:	f04f 30ff 	mov.w	r0, #4294967295
 8005622:	b004      	add	sp, #16
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f043 0320 	orr.w	r3, r3, #32
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	4832      	ldr	r0, [pc, #200]	@ (80056fc <_printf_i+0x238>)
 8005632:	2778      	movs	r7, #120	@ 0x78
 8005634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6831      	ldr	r1, [r6, #0]
 800563c:	061f      	lsls	r7, r3, #24
 800563e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005642:	d402      	bmi.n	800564a <_printf_i+0x186>
 8005644:	065f      	lsls	r7, r3, #25
 8005646:	bf48      	it	mi
 8005648:	b2ad      	uxthmi	r5, r5
 800564a:	6031      	str	r1, [r6, #0]
 800564c:	07d9      	lsls	r1, r3, #31
 800564e:	bf44      	itt	mi
 8005650:	f043 0320 	orrmi.w	r3, r3, #32
 8005654:	6023      	strmi	r3, [r4, #0]
 8005656:	b11d      	cbz	r5, 8005660 <_printf_i+0x19c>
 8005658:	2310      	movs	r3, #16
 800565a:	e7ad      	b.n	80055b8 <_printf_i+0xf4>
 800565c:	4826      	ldr	r0, [pc, #152]	@ (80056f8 <_printf_i+0x234>)
 800565e:	e7e9      	b.n	8005634 <_printf_i+0x170>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	f023 0320 	bic.w	r3, r3, #32
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	e7f6      	b.n	8005658 <_printf_i+0x194>
 800566a:	4616      	mov	r6, r2
 800566c:	e7bd      	b.n	80055ea <_printf_i+0x126>
 800566e:	6833      	ldr	r3, [r6, #0]
 8005670:	6825      	ldr	r5, [r4, #0]
 8005672:	6961      	ldr	r1, [r4, #20]
 8005674:	1d18      	adds	r0, r3, #4
 8005676:	6030      	str	r0, [r6, #0]
 8005678:	062e      	lsls	r6, r5, #24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	d501      	bpl.n	8005682 <_printf_i+0x1be>
 800567e:	6019      	str	r1, [r3, #0]
 8005680:	e002      	b.n	8005688 <_printf_i+0x1c4>
 8005682:	0668      	lsls	r0, r5, #25
 8005684:	d5fb      	bpl.n	800567e <_printf_i+0x1ba>
 8005686:	8019      	strh	r1, [r3, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	6123      	str	r3, [r4, #16]
 800568c:	4616      	mov	r6, r2
 800568e:	e7bc      	b.n	800560a <_printf_i+0x146>
 8005690:	6833      	ldr	r3, [r6, #0]
 8005692:	1d1a      	adds	r2, r3, #4
 8005694:	6032      	str	r2, [r6, #0]
 8005696:	681e      	ldr	r6, [r3, #0]
 8005698:	6862      	ldr	r2, [r4, #4]
 800569a:	2100      	movs	r1, #0
 800569c:	4630      	mov	r0, r6
 800569e:	f7fa fd9f 	bl	80001e0 <memchr>
 80056a2:	b108      	cbz	r0, 80056a8 <_printf_i+0x1e4>
 80056a4:	1b80      	subs	r0, r0, r6
 80056a6:	6060      	str	r0, [r4, #4]
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2300      	movs	r3, #0
 80056ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056b2:	e7aa      	b.n	800560a <_printf_i+0x146>
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	4632      	mov	r2, r6
 80056b8:	4649      	mov	r1, r9
 80056ba:	4640      	mov	r0, r8
 80056bc:	47d0      	blx	sl
 80056be:	3001      	adds	r0, #1
 80056c0:	d0ad      	beq.n	800561e <_printf_i+0x15a>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	079b      	lsls	r3, r3, #30
 80056c6:	d413      	bmi.n	80056f0 <_printf_i+0x22c>
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bfb8      	it	lt
 80056d0:	4618      	movlt	r0, r3
 80056d2:	e7a6      	b.n	8005622 <_printf_i+0x15e>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4632      	mov	r2, r6
 80056d8:	4649      	mov	r1, r9
 80056da:	4640      	mov	r0, r8
 80056dc:	47d0      	blx	sl
 80056de:	3001      	adds	r0, #1
 80056e0:	d09d      	beq.n	800561e <_printf_i+0x15a>
 80056e2:	3501      	adds	r5, #1
 80056e4:	68e3      	ldr	r3, [r4, #12]
 80056e6:	9903      	ldr	r1, [sp, #12]
 80056e8:	1a5b      	subs	r3, r3, r1
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	dcf2      	bgt.n	80056d4 <_printf_i+0x210>
 80056ee:	e7eb      	b.n	80056c8 <_printf_i+0x204>
 80056f0:	2500      	movs	r5, #0
 80056f2:	f104 0619 	add.w	r6, r4, #25
 80056f6:	e7f5      	b.n	80056e4 <_printf_i+0x220>
 80056f8:	080058a9 	.word	0x080058a9
 80056fc:	080058ba 	.word	0x080058ba

08005700 <memmove>:
 8005700:	4288      	cmp	r0, r1
 8005702:	b510      	push	{r4, lr}
 8005704:	eb01 0402 	add.w	r4, r1, r2
 8005708:	d902      	bls.n	8005710 <memmove+0x10>
 800570a:	4284      	cmp	r4, r0
 800570c:	4623      	mov	r3, r4
 800570e:	d807      	bhi.n	8005720 <memmove+0x20>
 8005710:	1e43      	subs	r3, r0, #1
 8005712:	42a1      	cmp	r1, r4
 8005714:	d008      	beq.n	8005728 <memmove+0x28>
 8005716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800571a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800571e:	e7f8      	b.n	8005712 <memmove+0x12>
 8005720:	4402      	add	r2, r0
 8005722:	4601      	mov	r1, r0
 8005724:	428a      	cmp	r2, r1
 8005726:	d100      	bne.n	800572a <memmove+0x2a>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800572e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005732:	e7f7      	b.n	8005724 <memmove+0x24>

08005734 <_sbrk_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d06      	ldr	r5, [pc, #24]	@ (8005750 <_sbrk_r+0x1c>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fb fdb6 	bl	80012b0 <_sbrk>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_sbrk_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_sbrk_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000318 	.word	0x20000318

08005754 <_realloc_r>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	4607      	mov	r7, r0
 800575a:	4614      	mov	r4, r2
 800575c:	460d      	mov	r5, r1
 800575e:	b921      	cbnz	r1, 800576a <_realloc_r+0x16>
 8005760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005764:	4611      	mov	r1, r2
 8005766:	f7ff bc5b 	b.w	8005020 <_malloc_r>
 800576a:	b92a      	cbnz	r2, 8005778 <_realloc_r+0x24>
 800576c:	f7ff fbec 	bl	8004f48 <_free_r>
 8005770:	4625      	mov	r5, r4
 8005772:	4628      	mov	r0, r5
 8005774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005778:	f000 f81a 	bl	80057b0 <_malloc_usable_size_r>
 800577c:	4284      	cmp	r4, r0
 800577e:	4606      	mov	r6, r0
 8005780:	d802      	bhi.n	8005788 <_realloc_r+0x34>
 8005782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005786:	d8f4      	bhi.n	8005772 <_realloc_r+0x1e>
 8005788:	4621      	mov	r1, r4
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff fc48 	bl	8005020 <_malloc_r>
 8005790:	4680      	mov	r8, r0
 8005792:	b908      	cbnz	r0, 8005798 <_realloc_r+0x44>
 8005794:	4645      	mov	r5, r8
 8005796:	e7ec      	b.n	8005772 <_realloc_r+0x1e>
 8005798:	42b4      	cmp	r4, r6
 800579a:	4622      	mov	r2, r4
 800579c:	4629      	mov	r1, r5
 800579e:	bf28      	it	cs
 80057a0:	4632      	movcs	r2, r6
 80057a2:	f7ff fbc3 	bl	8004f2c <memcpy>
 80057a6:	4629      	mov	r1, r5
 80057a8:	4638      	mov	r0, r7
 80057aa:	f7ff fbcd 	bl	8004f48 <_free_r>
 80057ae:	e7f1      	b.n	8005794 <_realloc_r+0x40>

080057b0 <_malloc_usable_size_r>:
 80057b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057b4:	1f18      	subs	r0, r3, #4
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bfbc      	itt	lt
 80057ba:	580b      	ldrlt	r3, [r1, r0]
 80057bc:	18c0      	addlt	r0, r0, r3
 80057be:	4770      	bx	lr

080057c0 <_init>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	bf00      	nop
 80057c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c6:	bc08      	pop	{r3}
 80057c8:	469e      	mov	lr, r3
 80057ca:	4770      	bx	lr

080057cc <_fini>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	bf00      	nop
 80057d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d2:	bc08      	pop	{r3}
 80057d4:	469e      	mov	lr, r3
 80057d6:	4770      	bx	lr
