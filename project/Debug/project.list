
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000852c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080086cc  080086cc  000096cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  0000a074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080088d4  080088d4  000098d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088dc  080088dc  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000098dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080088e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a074  2**0
                  CONTENTS
 10 .bss          00000394  20000074  20000074  0000a074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000408  20000408  0000a074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 13 .debug_line   00016a19  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000075  00000000  00000000  00020abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00011ae9  00000000  00000000  00020b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ceb  00000000  00000000  0003261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001030  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56b9  00000000  00000000  00036338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000c40  00000000  00000000  0010b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000234d9  00000000  00000000  0010c631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0012fb0a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000046fc  00000000  00000000  0012fb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080086b4 	.word	0x080086b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080086b4 	.word	0x080086b4

080001e0 <coast_asm_delay>:
 80001e0:	b410      	push	{r4}
 80001e2:	b420      	push	{r5}
 80001e4:	2400      	movs	r4, #0
 80001e6:	f642 61df 	movw	r1, #11999	@ 0x2edf

080001ea <loop1_start>:
 80001ea:	4284      	cmp	r4, r0
 80001ec:	d206      	bcs.n	80001fc <loop1_end>
 80001ee:	2500      	movs	r5, #0

080001f0 <loop2_start>:
 80001f0:	428d      	cmp	r5, r1
 80001f2:	d201      	bcs.n	80001f8 <loop2_end>
 80001f4:	3501      	adds	r5, #1
 80001f6:	e7fb      	b.n	80001f0 <loop2_start>

080001f8 <loop2_end>:
 80001f8:	3401      	adds	r4, #1
 80001fa:	e7f6      	b.n	80001ea <loop1_start>

080001fc <loop1_end>:
 80001fc:	bc20      	pop	{r5}
 80001fe:	bc10      	pop	{r4}
 8000200:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <generate_sound>:

#include "main.h"
extern void coast_asm_delay(uint32_t milliseconds);
extern bool enable_sound;

void generate_sound(uint16_t frequency, uint8_t duty_cycle, TIM_HandleTypeDef htim1) {
 80002b0:	b082      	sub	sp, #8
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	f107 0c18 	add.w	ip, r7, #24
 80002bc:	e88c 000c 	stmia.w	ip, {r2, r3}
 80002c0:	4603      	mov	r3, r0
 80002c2:	80fb      	strh	r3, [r7, #6]
 80002c4:	460b      	mov	r3, r1
 80002c6:	717b      	strb	r3, [r7, #5]
	/* protect the function from invalid frequency input */
	if (frequency == 0 || !enable_sound) {
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d006      	beq.n	80002dc <generate_sound+0x2c>
 80002ce:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <generate_sound+0x68>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f083 0301 	eor.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d005      	beq.n	80002e8 <generate_sound+0x38>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80002dc:	2108      	movs	r1, #8
 80002de:	f107 0018 	add.w	r0, r7, #24
 80002e2:	f006 fbcd 	bl	8006a80 <HAL_TIM_PWM_Stop>
		return;
 80002e6:	e011      	b.n	800030c <generate_sound+0x5c>
	}
	/* millisecond trigger period */
	uint32_t period = 72000 / frequency;
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	4a0c      	ldr	r2, [pc, #48]	@ (800031c <generate_sound+0x6c>)
 80002ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80002f0:	60fb      	str	r3, [r7, #12]
	/* setup PWM channel and tim1 autoloader */
	htim1.Instance->ARR = period - 1;
 80002f2:	69bb      	ldr	r3, [r7, #24]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	3a01      	subs	r2, #1
 80002f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim1.Instance->CCR3 = period / 2;
 80002fa:	69bb      	ldr	r3, [r7, #24]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	0852      	lsrs	r2, r2, #1
 8000300:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* start the timer1 and buzzer */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000302:	2108      	movs	r1, #8
 8000304:	f107 0018 	add.w	r0, r7, #24
 8000308:	f006 faae 	bl	8006868 <HAL_TIM_PWM_Start>
}
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000314:	b002      	add	sp, #8
 8000316:	4770      	bx	lr
 8000318:	20000008 	.word	0x20000008
 800031c:	00011940 	.word	0x00011940

08000320 <stop_sound>:

void stop_sound(TIM_HandleTypeDef htim1) {
 8000320:	b084      	sub	sp, #16
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
 8000326:	f107 0c08 	add.w	ip, r7, #8
 800032a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* stop the timer1 and buzzer */
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800032e:	2108      	movs	r1, #8
 8000330:	f107 0008 	add.w	r0, r7, #8
 8000334:	f006 fba4 	bl	8006a80 <HAL_TIM_PWM_Stop>
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000340:	b004      	add	sp, #16
 8000342:	4770      	bx	lr

08000344 <play_note>:

void play_note(uint16_t note, uint32_t duration, uint8_t volume, TIM_HandleTypeDef htim1) {
 8000344:	b082      	sub	sp, #8
 8000346:	b5b0      	push	{r4, r5, r7, lr}
 8000348:	b094      	sub	sp, #80	@ 0x50
 800034a:	af12      	add	r7, sp, #72	@ 0x48
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	61fb      	str	r3, [r7, #28]
 8000350:	4603      	mov	r3, r0
 8000352:	80fb      	strh	r3, [r7, #6]
 8000354:	4613      	mov	r3, r2
 8000356:	717b      	strb	r3, [r7, #5]
	if (!enable_sound) return;
 8000358:	4b10      	ldr	r3, [pc, #64]	@ (800039c <play_note+0x58>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f083 0301 	eor.w	r3, r3, #1
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d113      	bne.n	800038e <play_note+0x4a>
	generate_sound(note, volume, htim1);
 8000366:	797d      	ldrb	r5, [r7, #5]
 8000368:	88fc      	ldrh	r4, [r7, #6]
 800036a:	4668      	mov	r0, sp
 800036c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000370:	2244      	movs	r2, #68	@ 0x44
 8000372:	4619      	mov	r1, r3
 8000374:	f007 fd54 	bl	8007e20 <memcpy>
 8000378:	f107 031c 	add.w	r3, r7, #28
 800037c:	cb0c      	ldmia	r3, {r2, r3}
 800037e:	4629      	mov	r1, r5
 8000380:	4620      	mov	r0, r4
 8000382:	f7ff ff95 	bl	80002b0 <generate_sound>
	coast_asm_delay(duration);
 8000386:	6838      	ldr	r0, [r7, #0]
 8000388:	f7ff ff2a 	bl	80001e0 <coast_asm_delay>
 800038c:	e000      	b.n	8000390 <play_note+0x4c>
	if (!enable_sound) return;
 800038e:	bf00      	nop
}
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000398:	b002      	add	sp, #8
 800039a:	4770      	bx	lr
 800039c:	20000008 	.word	0x20000008

080003a0 <homePage>:
#include "lcd.h"

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void homePage() {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 fc24 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr("FITNESS ");
 80003ac:	480d      	ldr	r0, [pc, #52]	@ (80003e4 <homePage+0x44>)
 80003ae:	f000 fc5d 	bl	8000c6c <LCD_SendStr>

	char buff[16];

	int temp = 21; // placeholder
 80003b2:	2315      	movs	r3, #21
 80003b4:	617b      	str	r3, [r7, #20]
	sprintf(buff, "%dC ", temp);
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	490b      	ldr	r1, [pc, #44]	@ (80003e8 <homePage+0x48>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f007 fcd9 	bl	8007d74 <siprintf>
	LCD_SendStr(buff);
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4618      	mov	r0, r3
 80003c6:	f000 fc51 	bl	8000c6c <LCD_SendStr>

	LCD_SendStr(" 57%");
 80003ca:	4808      	ldr	r0, [pc, #32]	@ (80003ec <homePage+0x4c>)
 80003cc:	f000 fc4e 	bl	8000c6c <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 80003d0:	20c0      	movs	r0, #192	@ 0xc0
 80003d2:	f000 fc0f 	bl	8000bf4 <LCD_SendCmd>

	LCD_SendStr("OPT ");
 80003d6:	4806      	ldr	r0, [pc, #24]	@ (80003f0 <homePage+0x50>)
 80003d8:	f000 fc48 	bl	8000c6c <LCD_SendStr>
}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	080086cc 	.word	0x080086cc
 80003e8:	080086d8 	.word	0x080086d8
 80003ec:	080086e0 	.word	0x080086e0
 80003f0:	080086e8 	.word	0x080086e8

080003f4 <OPTpage>:


void OPTpage(uint32_t ldrValue) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%ld(^=^)", ldrValue);
 80003fc:	f107 0008 	add.w	r0, r7, #8
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a0c      	ldr	r2, [pc, #48]	@ (8000434 <OPTpage+0x40>)
 8000404:	2110      	movs	r1, #16
 8000406:	f007 fc7f 	bl	8007d08 <sniprintf>

	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800040a:	2001      	movs	r0, #1
 800040c:	f000 fbf2 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr(buffer);
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fc29 	bl	8000c6c <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 800041a:	20c0      	movs	r0, #192	@ 0xc0
 800041c:	f000 fbea 	bl	8000bf4 <LCD_SendCmd>

	LCD_SendStr("SETTINGS  ");
 8000420:	4805      	ldr	r0, [pc, #20]	@ (8000438 <OPTpage+0x44>)
 8000422:	f000 fc23 	bl	8000c6c <LCD_SendStr>
	LCD_SendStr("|RESET");
 8000426:	4805      	ldr	r0, [pc, #20]	@ (800043c <OPTpage+0x48>)
 8000428:	f000 fc20 	bl	8000c6c <LCD_SendStr>
}
 800042c:	bf00      	nop
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	080086f0 	.word	0x080086f0
 8000438:	080086fc 	.word	0x080086fc
 800043c:	08008708 	.word	0x08008708

08000440 <updateOpt>:

void updateOpt(uint32_t ldrValue) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%ld(^=^)", ldrValue);
 8000448:	f107 0008 	add.w	r0, r7, #8
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a08      	ldr	r2, [pc, #32]	@ (8000470 <updateOpt+0x30>)
 8000450:	2110      	movs	r1, #16
 8000452:	f007 fc59 	bl	8007d08 <sniprintf>
	LCD_SendCmd(LCD_RETURN_HOME);
 8000456:	2002      	movs	r0, #2
 8000458:	f000 fbcc 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr(buffer);
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fc03 	bl	8000c6c <LCD_SendStr>
}
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	080086f0 	.word	0x080086f0

08000474 <fitnessPage>:

extern void coast_asm_delay(uint32_t milliseconds);

extern bool is_24_hour_format;

void fitnessPage() {
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af00      	add	r7, sp, #0
	char buffer[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800047a:	2200      	movs	r2, #0
 800047c:	491a      	ldr	r1, [pc, #104]	@ (80004e8 <fitnessPage+0x74>)
 800047e:	481b      	ldr	r0, [pc, #108]	@ (80004ec <fitnessPage+0x78>)
 8000480:	f005 fd45 	bl	8005f0e <HAL_RTC_GetTime>

	uint8_t hours = sTime.Hours;
 8000484:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <fitnessPage+0x74>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	75bb      	strb	r3, [r7, #22]
	uint8_t minutes = sTime.Minutes;
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <fitnessPage+0x74>)
 800048c:	785b      	ldrb	r3, [r3, #1]
 800048e:	757b      	strb	r3, [r7, #21]

	uint8_t displayHour = hours;
 8000490:	7dbb      	ldrb	r3, [r7, #22]
 8000492:	75fb      	strb	r3, [r7, #23]
	if (!is_24_hour_format) {
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <fitnessPage+0x7c>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	f083 0301 	eor.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00b      	beq.n	80004ba <fitnessPage+0x46>
		if (hours == 0) {
 80004a2:	7dbb      	ldrb	r3, [r7, #22]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d102      	bne.n	80004ae <fitnessPage+0x3a>
			displayHour = 12;
 80004a8:	230c      	movs	r3, #12
 80004aa:	75fb      	strb	r3, [r7, #23]
 80004ac:	e005      	b.n	80004ba <fitnessPage+0x46>
		}
		else if (hours > 12) {
 80004ae:	7dbb      	ldrb	r3, [r7, #22]
 80004b0:	2b0c      	cmp	r3, #12
 80004b2:	d902      	bls.n	80004ba <fitnessPage+0x46>
			displayHour = hours - 12;
 80004b4:	7dbb      	ldrb	r3, [r7, #22]
 80004b6:	3b0c      	subs	r3, #12
 80004b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	sprintf(buffer, "%02d:%02d", displayHour, minutes);
 80004ba:	7dfa      	ldrb	r2, [r7, #23]
 80004bc:	7d7b      	ldrb	r3, [r7, #21]
 80004be:	1d38      	adds	r0, r7, #4
 80004c0:	490c      	ldr	r1, [pc, #48]	@ (80004f4 <fitnessPage+0x80>)
 80004c2:	f007 fc57 	bl	8007d74 <siprintf>
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 fb94 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr("Fitness:");
 80004cc:	480a      	ldr	r0, [pc, #40]	@ (80004f8 <fitnessPage+0x84>)
 80004ce:	f000 fbcd 	bl	8000c6c <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 80004d2:	20c0      	movs	r0, #192	@ 0xc0
 80004d4:	f000 fb8e 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr(buffer);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fbc6 	bl	8000c6c <LCD_SendStr>
}
 80004e0:	bf00      	nop
 80004e2:	3718      	adds	r7, #24
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000090 	.word	0x20000090
 80004ec:	200000f8 	.word	0x200000f8
 80004f0:	20000018 	.word	0x20000018
 80004f4:	08008710 	.word	0x08008710
 80004f8:	0800871c 	.word	0x0800871c

080004fc <updateFitness>:

void updateFitness(uint8_t row, uint8_t col) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	460a      	mov	r2, r1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	4613      	mov	r3, r2
 800050a:	71bb      	strb	r3, [r7, #6]
    char buffer[16];

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800050c:	2200      	movs	r2, #0
 800050e:	4921      	ldr	r1, [pc, #132]	@ (8000594 <updateFitness+0x98>)
 8000510:	4821      	ldr	r0, [pc, #132]	@ (8000598 <updateFitness+0x9c>)
 8000512:	f005 fcfc 	bl	8005f0e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000516:	2200      	movs	r2, #0
 8000518:	4920      	ldr	r1, [pc, #128]	@ (800059c <updateFitness+0xa0>)
 800051a:	481f      	ldr	r0, [pc, #124]	@ (8000598 <updateFitness+0x9c>)
 800051c:	f005 fdd9 	bl	80060d2 <HAL_RTC_GetDate>

    uint8_t hours = sTime.Hours;
 8000520:	4b1c      	ldr	r3, [pc, #112]	@ (8000594 <updateFitness+0x98>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	77bb      	strb	r3, [r7, #30]
    uint8_t minutes = sTime.Minutes;
 8000526:	4b1b      	ldr	r3, [pc, #108]	@ (8000594 <updateFitness+0x98>)
 8000528:	785b      	ldrb	r3, [r3, #1]
 800052a:	777b      	strb	r3, [r7, #29]

    uint8_t displayHour = hours;
 800052c:	7fbb      	ldrb	r3, [r7, #30]
 800052e:	77fb      	strb	r3, [r7, #31]
    if (!is_24_hour_format) {
 8000530:	4b1b      	ldr	r3, [pc, #108]	@ (80005a0 <updateFitness+0xa4>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00b      	beq.n	8000556 <updateFitness+0x5a>
        if (hours == 0) {
 800053e:	7fbb      	ldrb	r3, [r7, #30]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <updateFitness+0x4e>
            displayHour = 12;
 8000544:	230c      	movs	r3, #12
 8000546:	77fb      	strb	r3, [r7, #31]
 8000548:	e005      	b.n	8000556 <updateFitness+0x5a>
        }
        else if (hours > 12) {
 800054a:	7fbb      	ldrb	r3, [r7, #30]
 800054c:	2b0c      	cmp	r3, #12
 800054e:	d902      	bls.n	8000556 <updateFitness+0x5a>
            displayHour = hours - 12;
 8000550:	7fbb      	ldrb	r3, [r7, #30]
 8000552:	3b0c      	subs	r3, #12
 8000554:	77fb      	strb	r3, [r7, #31]
        }
    }

    uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <updateFitness+0x64>
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	e000      	b.n	8000562 <updateFitness+0x66>
 8000560:	23c0      	movs	r3, #192	@ 0xc0
 8000562:	773b      	strb	r3, [r7, #28]
    LCD_SendCmd(baseCmd + col);  // position cursor
 8000564:	7f3a      	ldrb	r2, [r7, #28]
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	4413      	add	r3, r2
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fb41 	bl	8000bf4 <LCD_SendCmd>

    sprintf(buffer, "%02d:%02d", displayHour, minutes);
 8000572:	7ffa      	ldrb	r2, [r7, #31]
 8000574:	7f7b      	ldrb	r3, [r7, #29]
 8000576:	f107 000c 	add.w	r0, r7, #12
 800057a:	490a      	ldr	r1, [pc, #40]	@ (80005a4 <updateFitness+0xa8>)
 800057c:	f007 fbfa 	bl	8007d74 <siprintf>
    LCD_SendStr(buffer);         // print at given row/col
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fb71 	bl	8000c6c <LCD_SendStr>
}
 800058a:	bf00      	nop
 800058c:	3720      	adds	r7, #32
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000090 	.word	0x20000090
 8000598:	200000f8 	.word	0x200000f8
 800059c:	200000a4 	.word	0x200000a4
 80005a0:	20000018 	.word	0x20000018
 80005a4:	08008710 	.word	0x08008710

080005a8 <countdownPage>:

void countdownPage(Countdown countdown) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af02      	add	r7, sp, #8
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[16];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fb1d 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr("Countdown:");
 80005ba:	480c      	ldr	r0, [pc, #48]	@ (80005ec <countdownPage+0x44>)
 80005bc:	f000 fb56 	bl	8000c6c <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 80005c0:	20c0      	movs	r0, #192	@ 0xc0
 80005c2:	f000 fb17 	bl	8000bf4 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", countdown.minute, countdown.second);
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	f107 0010 	add.w	r0, r7, #16
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4613      	mov	r3, r2
 80005d2:	4a07      	ldr	r2, [pc, #28]	@ (80005f0 <countdownPage+0x48>)
 80005d4:	2110      	movs	r1, #16
 80005d6:	f007 fb97 	bl	8007d08 <sniprintf>
	LCD_SendStr(buffer);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fb44 	bl	8000c6c <LCD_SendStr>
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	08008728 	.word	0x08008728
 80005f0:	08008734 	.word	0x08008734

080005f4 <toggleCountdown>:

void toggleCountdown(Countdown *countdown) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if (countdown->countdown_enable) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	7a1b      	ldrb	r3, [r3, #8]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <toggleCountdown+0x18>
		countdown->countdown_enable = false;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	721a      	strb	r2, [r3, #8]
	} else {
		countdown->countdown_enable = true;
	}
}
 800060a:	e002      	b.n	8000612 <toggleCountdown+0x1e>
		countdown->countdown_enable = true;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	721a      	strb	r2, [r3, #8]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <mintueCountdown>:
void mintueCountdown(Countdown *countdown) {
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	if (countdown->minute >= 60) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b3b      	cmp	r3, #59	@ 0x3b
 800062c:	d903      	bls.n	8000636 <mintueCountdown+0x18>
		countdown->minute = 60;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	223c      	movs	r2, #60	@ 0x3c
 8000632:	601a      	str	r2, [r3, #0]
	} else {
		(countdown->minute)++;
	}
}
 8000634:	e004      	b.n	8000640 <mintueCountdown+0x22>
		(countdown->minute)++;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1c5a      	adds	r2, r3, #1
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <secondCountdown>:

void secondCountdown(Countdown *countdown) {
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	if (countdown->second >= 60) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	2b3b      	cmp	r3, #59	@ 0x3b
 800065a:	d903      	bls.n	8000664 <secondCountdown+0x18>
		countdown->second = 60;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	223c      	movs	r2, #60	@ 0x3c
 8000660:	605a      	str	r2, [r3, #4]
	} else {
		(countdown->second)++;
	}
}
 8000662:	e004      	b.n	800066e <secondCountdown+0x22>
		(countdown->second)++;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	605a      	str	r2, [r3, #4]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <updateCountdown>:
void updateCountdown(Countdown countdown) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	@ 0x28
 8000680:	af02      	add	r7, sp, #8
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[16];
	LCD_SendCmd(LCD_SECOND_LINE);
 8000688:	20c0      	movs	r0, #192	@ 0xc0
 800068a:	f000 fab3 	bl	8000bf4 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", countdown.minute, countdown.second);
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	f107 0010 	add.w	r0, r7, #16
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	4613      	mov	r3, r2
 800069a:	4a06      	ldr	r2, [pc, #24]	@ (80006b4 <updateCountdown+0x38>)
 800069c:	2110      	movs	r1, #16
 800069e:	f007 fb33 	bl	8007d08 <sniprintf>
	LCD_SendStr(buffer);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fae0 	bl	8000c6c <LCD_SendStr>
}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08008734 	.word	0x08008734

080006b8 <resetCountdown>:
void resetCountdown(Countdown *countdown) {
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	countdown->minute = 0;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
	countdown->second = 0;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
	countdown->countdown_enable = false;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	721a      	strb	r2, [r3, #8]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <runCountdown>:

void runCountdown(Countdown *countdown, uint32_t *lastSecond, uint32_t second,
			TIM_HandleTypeDef htim1, bool enable_sound, bool enable_vibration) {
 80006e0:	b082      	sub	sp, #8
 80006e2:	b5b0      	push	{r4, r5, r7, lr}
 80006e4:	b096      	sub	sp, #88	@ 0x58
 80006e6:	af12      	add	r7, sp, #72	@ 0x48
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
	if (*lastSecond >= second) {
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	f240 8101 	bls.w	80008fe <runCountdown+0x21e>
		return;
	}
	if (countdown->second > 0) {
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d005      	beq.n	8000710 <runCountdown+0x30>
		countdown->second--;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	1e5a      	subs	r2, r3, #1
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	e012      	b.n	8000736 <runCountdown+0x56>
	} else if (countdown->minute > 0) {
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d008      	beq.n	800072a <runCountdown+0x4a>
		countdown->second = 59;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	223b      	movs	r2, #59	@ 0x3b
 800071c:	605a      	str	r2, [r3, #4]
		countdown->minute--;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	e005      	b.n	8000736 <runCountdown+0x56>
	} else {
		countdown->second = 0;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
		countdown->minute = 0;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	}
	if (countdown->second == 0 && countdown->minute == 0) {
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 80db 	bne.w	80008f6 <runCountdown+0x216>
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	f040 80d6 	bne.w	80008f6 <runCountdown+0x216>
		countdown->countdown_enable = false;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2200      	movs	r2, #0
 800074e:	721a      	strb	r2, [r3, #8]
		if (enable_sound) {
 8000750:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000754:	2b00      	cmp	r3, #0
 8000756:	f000 80a4 	beq.w	80008a2 <runCountdown+0x1c2>
			play_note(460, 300, 50, htim1);
 800075a:	4668      	mov	r0, sp
 800075c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000760:	2248      	movs	r2, #72	@ 0x48
 8000762:	4619      	mov	r1, r3
 8000764:	f007 fb5c 	bl	8007e20 <memcpy>
 8000768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076a:	2232      	movs	r2, #50	@ 0x32
 800076c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000770:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000774:	f7ff fde6 	bl	8000344 <play_note>
			play_note(0, 50, 50, htim1);
 8000778:	4668      	mov	r0, sp
 800077a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800077e:	2248      	movs	r2, #72	@ 0x48
 8000780:	4619      	mov	r1, r3
 8000782:	f007 fb4d 	bl	8007e20 <memcpy>
 8000786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000788:	2232      	movs	r2, #50	@ 0x32
 800078a:	2132      	movs	r1, #50	@ 0x32
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fdd9 	bl	8000344 <play_note>
			play_note(300, 150, 50, htim1);
 8000792:	4668      	mov	r0, sp
 8000794:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000798:	2248      	movs	r2, #72	@ 0x48
 800079a:	4619      	mov	r1, r3
 800079c:	f007 fb40 	bl	8007e20 <memcpy>
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	2232      	movs	r2, #50	@ 0x32
 80007a4:	2196      	movs	r1, #150	@ 0x96
 80007a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007aa:	f7ff fdcb 	bl	8000344 <play_note>
			play_note(0, 50, 50, htim1);
 80007ae:	4668      	mov	r0, sp
 80007b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b4:	2248      	movs	r2, #72	@ 0x48
 80007b6:	4619      	mov	r1, r3
 80007b8:	f007 fb32 	bl	8007e20 <memcpy>
 80007bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007be:	2232      	movs	r2, #50	@ 0x32
 80007c0:	2132      	movs	r1, #50	@ 0x32
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff fdbe 	bl	8000344 <play_note>
			play_note(220, 300, 50, htim1);
 80007c8:	4668      	mov	r0, sp
 80007ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ce:	2248      	movs	r2, #72	@ 0x48
 80007d0:	4619      	mov	r1, r3
 80007d2:	f007 fb25 	bl	8007e20 <memcpy>
 80007d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d8:	2232      	movs	r2, #50	@ 0x32
 80007da:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80007de:	20dc      	movs	r0, #220	@ 0xdc
 80007e0:	f7ff fdb0 	bl	8000344 <play_note>
			play_note(0, 50, 50, htim1);
 80007e4:	4668      	mov	r0, sp
 80007e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ea:	2248      	movs	r2, #72	@ 0x48
 80007ec:	4619      	mov	r1, r3
 80007ee:	f007 fb17 	bl	8007e20 <memcpy>
 80007f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f4:	2232      	movs	r2, #50	@ 0x32
 80007f6:	2132      	movs	r1, #50	@ 0x32
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff fda3 	bl	8000344 <play_note>
			play_note(460, 300, 50, htim1);
 80007fe:	4668      	mov	r0, sp
 8000800:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000804:	2248      	movs	r2, #72	@ 0x48
 8000806:	4619      	mov	r1, r3
 8000808:	f007 fb0a 	bl	8007e20 <memcpy>
 800080c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080e:	2232      	movs	r2, #50	@ 0x32
 8000810:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000814:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000818:	f7ff fd94 	bl	8000344 <play_note>
			play_note(0, 50, 50, htim1);
 800081c:	4668      	mov	r0, sp
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	2248      	movs	r2, #72	@ 0x48
 8000824:	4619      	mov	r1, r3
 8000826:	f007 fafb 	bl	8007e20 <memcpy>
 800082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082c:	2232      	movs	r2, #50	@ 0x32
 800082e:	2132      	movs	r1, #50	@ 0x32
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff fd87 	bl	8000344 <play_note>
			play_note(300, 150, 50, htim1);
 8000836:	4668      	mov	r0, sp
 8000838:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083c:	2248      	movs	r2, #72	@ 0x48
 800083e:	4619      	mov	r1, r3
 8000840:	f007 faee 	bl	8007e20 <memcpy>
 8000844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000846:	2232      	movs	r2, #50	@ 0x32
 8000848:	2196      	movs	r1, #150	@ 0x96
 800084a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800084e:	f7ff fd79 	bl	8000344 <play_note>
			play_note(0, 50, 50, htim1);
 8000852:	4668      	mov	r0, sp
 8000854:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000858:	2248      	movs	r2, #72	@ 0x48
 800085a:	4619      	mov	r1, r3
 800085c:	f007 fae0 	bl	8007e20 <memcpy>
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000862:	2232      	movs	r2, #50	@ 0x32
 8000864:	2132      	movs	r1, #50	@ 0x32
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff fd6c 	bl	8000344 <play_note>
			play_note(220, 300, 50, htim1);
 800086c:	4668      	mov	r0, sp
 800086e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000872:	2248      	movs	r2, #72	@ 0x48
 8000874:	4619      	mov	r1, r3
 8000876:	f007 fad3 	bl	8007e20 <memcpy>
 800087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800087c:	2232      	movs	r2, #50	@ 0x32
 800087e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000882:	20dc      	movs	r0, #220	@ 0xdc
 8000884:	f7ff fd5e 	bl	8000344 <play_note>
			play_note(0, 50, 50, htim1);
 8000888:	4668      	mov	r0, sp
 800088a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800088e:	2248      	movs	r2, #72	@ 0x48
 8000890:	4619      	mov	r1, r3
 8000892:	f007 fac5 	bl	8007e20 <memcpy>
 8000896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000898:	2232      	movs	r2, #50	@ 0x32
 800089a:	2132      	movs	r1, #50	@ 0x32
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fd51 	bl	8000344 <play_note>
		}
		if (enable_vibration) {vibration_call(STEPS_PER_REV);}
 80008a2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <runCountdown+0x1d2>
 80008aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008ae:	f002 fa21 	bl	8002cf4 <vibration_call>
		LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 f99e 	bl	8000bf4 <LCD_SendCmd>
		LCD_SendStr("Countdown Done");
 80008b8:	4814      	ldr	r0, [pc, #80]	@ (800090c <runCountdown+0x22c>)
 80008ba:	f000 f9d7 	bl	8000c6c <LCD_SendStr>
		stop_sound(htim1);
 80008be:	466d      	mov	r5, sp
 80008c0:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80008c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80008d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008de:	f7ff fd1f 	bl	8000320 <stop_sound>
		coast_asm_delay(1500);
 80008e2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80008e6:	f7ff fc7b 	bl	80001e0 <coast_asm_delay>
		LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f000 f982 	bl	8000bf4 <LCD_SendCmd>
		LCD_SendStr("Countdown:");
 80008f0:	4807      	ldr	r0, [pc, #28]	@ (8000910 <runCountdown+0x230>)
 80008f2:	f000 f9bb 	bl	8000c6c <LCD_SendStr>
	}
	*lastSecond = second;
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	e000      	b.n	8000900 <runCountdown+0x220>
		return;
 80008fe:	bf00      	nop
}
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000908:	b002      	add	sp, #8
 800090a:	4770      	bx	lr
 800090c:	08008740 	.word	0x08008740
 8000910:	08008728 	.word	0x08008728

08000914 <stopwatchPage>:

void stopwatchPage(Stopwatch stopwatch) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b08b      	sub	sp, #44	@ 0x2c
 8000918:	af02      	add	r7, sp, #8
 800091a:	463c      	mov	r4, r7
 800091c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 f967 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr("Stopwatch:  lap:");
 8000926:	480c      	ldr	r0, [pc, #48]	@ (8000958 <stopwatchPage+0x44>)
 8000928:	f000 f9a0 	bl	8000c6c <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 800092c:	20c0      	movs	r0, #192	@ 0xc0
 800092e:	f000 f961 	bl	8000bf4 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", stopwatch.minute, stopwatch.second);
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	f107 0010 	add.w	r0, r7, #16
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	4613      	mov	r3, r2
 800093e:	4a07      	ldr	r2, [pc, #28]	@ (800095c <stopwatchPage+0x48>)
 8000940:	2110      	movs	r1, #16
 8000942:	f007 f9e1 	bl	8007d08 <sniprintf>
	LCD_SendStr(buffer);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f98e 	bl	8000c6c <LCD_SendStr>
}
 8000950:	bf00      	nop
 8000952:	3724      	adds	r7, #36	@ 0x24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	08008750 	.word	0x08008750
 800095c:	08008734 	.word	0x08008734

08000960 <lapStopwatch>:


void lapStopwatch(Stopwatch stopwatch) {
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	@ 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	463c      	mov	r4, r7
 8000968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	coast_asm_delay(11);
 800096c:	200b      	movs	r0, #11
 800096e:	f7ff fc37 	bl	80001e0 <coast_asm_delay>
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000972:	2001      	movs	r0, #1
 8000974:	f000 f93e 	bl	8000bf4 <LCD_SendCmd>
	coast_asm_delay(11);
 8000978:	200b      	movs	r0, #11
 800097a:	f7ff fc31 	bl	80001e0 <coast_asm_delay>
	LCD_SendCmd(LCD_RETURN_HOME);
 800097e:	2002      	movs	r0, #2
 8000980:	f000 f938 	bl	8000bf4 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "lap:%02ld:%02ld:%02ld", stopwatch.hour, stopwatch.minute, stopwatch.second);
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	f107 0010 	add.w	r0, r7, #16
 800098e:	9201      	str	r2, [sp, #4]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	460b      	mov	r3, r1
 8000994:	4a06      	ldr	r2, [pc, #24]	@ (80009b0 <lapStopwatch+0x50>)
 8000996:	2110      	movs	r1, #16
 8000998:	f007 f9b6 	bl	8007d08 <sniprintf>
	LCD_SendStr(buffer);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f963 	bl	8000c6c <LCD_SendStr>
}
 80009a6:	bf00      	nop
 80009a8:	3724      	adds	r7, #36	@ 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08008764 	.word	0x08008764

080009b4 <resetStopwatch>:

void resetStopwatch(Stopwatch *stopwatch) {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	stopwatch->minute = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
	stopwatch->second = 0;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	stopwatch->stopwatch_enable = false;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	731a      	strb	r2, [r3, #12]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <toggleStopwatch>:
void toggleStopwatch(Stopwatch *stopwatch) {
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	if (stopwatch->stopwatch_enable) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	7b1b      	ldrb	r3, [r3, #12]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d003      	beq.n	80009f2 <toggleStopwatch+0x18>
		stopwatch->stopwatch_enable = false;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	731a      	strb	r2, [r3, #12]
	} else {
		stopwatch->stopwatch_enable = true;
	}
}
 80009f0:	e002      	b.n	80009f8 <toggleStopwatch+0x1e>
		stopwatch->stopwatch_enable = true;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2201      	movs	r2, #1
 80009f6:	731a      	strb	r2, [r3, #12]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <updateStopwatch>:

void updateStopwatch(Stopwatch stopwatch) {
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08b      	sub	sp, #44	@ 0x2c
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	463c      	mov	r4, r7
 8000a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	LCD_SendCmd(LCD_SECOND_LINE);
 8000a10:	20c0      	movs	r0, #192	@ 0xc0
 8000a12:	f000 f8ef 	bl	8000bf4 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld:%02ld", stopwatch.hour, stopwatch.minute, stopwatch.second);
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f107 0010 	add.w	r0, r7, #16
 8000a20:	9201      	str	r2, [sp, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	460b      	mov	r3, r1
 8000a26:	4a06      	ldr	r2, [pc, #24]	@ (8000a40 <updateStopwatch+0x3c>)
 8000a28:	2110      	movs	r1, #16
 8000a2a:	f007 f96d 	bl	8007d08 <sniprintf>
	LCD_SendStr(buffer);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f91a 	bl	8000c6c <LCD_SendStr>
}
 8000a38:	bf00      	nop
 8000a3a:	3724      	adds	r7, #36	@ 0x24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd90      	pop	{r4, r7, pc}
 8000a40:	0800877c 	.word	0x0800877c

08000a44 <runStopwatch>:
void runStopwatch(Stopwatch *stopwatch, uint32_t *lastSecond, uint32_t second) {
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
	if (*lastSecond >= second) {
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d92d      	bls.n	8000ab6 <runStopwatch+0x72>
		return;
	}
	if (stopwatch->hour == 99) {
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b63      	cmp	r3, #99	@ 0x63
 8000a60:	d103      	bne.n	8000a6a <runStopwatch+0x26>
		stopwatch->hour = 0;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	e021      	b.n	8000aae <runStopwatch+0x6a>
	} else if (stopwatch->minute == 60) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000a70:	d10b      	bne.n	8000a8a <runStopwatch+0x46>
		stopwatch->hour++;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	601a      	str	r2, [r3, #0]
		stopwatch->second = 0;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
		stopwatch->minute = 0;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	e011      	b.n	8000aae <runStopwatch+0x6a>
	} else if (stopwatch->second == 60) {
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000a90:	d108      	bne.n	8000aa4 <runStopwatch+0x60>
		stopwatch->second = 0;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
		stopwatch->minute++;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	e004      	b.n	8000aae <runStopwatch+0x6a>
	} else {
		stopwatch->second++;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	609a      	str	r2, [r3, #8]
	}
	*lastSecond = second;
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e000      	b.n	8000ab8 <runStopwatch+0x74>
		return;
 8000ab6:	bf00      	nop
}
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <coast_lcd_init>:

#include "main.h"
#include "coast.h"
#include "lcd.h"

void coast_lcd_init(){
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
	// 1. wait for enough time to stabilise
	 HAL_Delay(50);
 8000ac6:	2032      	movs	r0, #50	@ 0x32
 8000ac8:	f002 fa26 	bl	8002f18 <HAL_Delay>
	 // 2. send command 0011 (function set) and wait for >=4.1 ms (enough wait inside
	 // the pulse)
	 LCD_PutNibble(0b0011);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f83f 	bl	8000b50 <LCD_PutNibble>
	 LCD_Pulse();
 8000ad2:	f000 f827 	bl	8000b24 <LCD_Pulse>
	 HAL_Delay(5);
 8000ad6:	2005      	movs	r0, #5
 8000ad8:	f002 fa1e 	bl	8002f18 <HAL_Delay>
	 // 3. send command 0011 (function set) again and wait for >=100 us
	 // fill this
	 LCD_PutNibble(0b0011);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f837 	bl	8000b50 <LCD_PutNibble>
	 LCD_Pulse();
 8000ae2:	f000 f81f 	bl	8000b24 <LCD_Pulse>
	 HAL_Delay(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f002 fa16 	bl	8002f18 <HAL_Delay>
	 // 4. send command 0011 (function set) again
	 // fill this
	 LCD_PutNibble(0b0011);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f82f 	bl	8000b50 <LCD_PutNibble>
	 LCD_Pulse();
 8000af2:	f000 f817 	bl	8000b24 <LCD_Pulse>
	 // 5. send command 0010 to set to 4-bit bus mode
	 // fill this
	 LCD_PutNibble(0b0010);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f000 f82a 	bl	8000b50 <LCD_PutNibble>
	 LCD_Pulse();
 8000afc:	f000 f812 	bl	8000b24 <LCD_Pulse>
	 // 6. send command 0010 1100 (function set: 4-bit mode, 2-lines, 5x8 font)
	 LCD_SendCmd(0b00101100);
 8000b00:	202c      	movs	r0, #44	@ 0x2c
 8000b02:	f000 f877 	bl	8000bf4 <LCD_SendCmd>
	 // 7. Send command 0000 1000 to display ON/OFF
	 LCD_SendCmd(0b00001000);
 8000b06:	2008      	movs	r0, #8
 8000b08:	f000 f874 	bl	8000bf4 <LCD_SendCmd>
	 // 8. Send command to clear the display
	 // fill this
	 LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f000 f871 	bl	8000bf4 <LCD_SendCmd>
	 // 9. Send command set entry mode (increment cursor, no display shift)
	 // fill this
	 LCD_SendCmd(0b00000110);
 8000b12:	2006      	movs	r0, #6
 8000b14:	f000 f86e 	bl	8000bf4 <LCD_SendCmd>
	 // 10. send command 0000 1111 to display on, cursor on, blink on
	 // fill this
	 LCD_SendCmd(0b00001111);
 8000b18:	200f      	movs	r0, #15
 8000b1a:	f000 f86b 	bl	8000bf4 <LCD_SendCmd>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <LCD_Pulse>:

void LCD_Pulse(){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 1);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4807      	ldr	r0, [pc, #28]	@ (8000b4c <LCD_Pulse+0x28>)
 8000b2e:	f003 fc9f 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f002 f9f0 	bl	8002f18 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <LCD_Pulse+0x28>)
 8000b3e:	f003 fc97 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f002 f9e8 	bl	8002f18 <HAL_Delay>
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	48000c00 	.word	0x48000c00

08000b50 <LCD_PutNibble>:

void LCD_PutNibble(uint8_t nibble){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	uint8_t D4 = nibble & 1;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
	uint8_t D5 = (nibble >> 1) & 1;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	73bb      	strb	r3, [r7, #14]
	uint8_t D6 = (nibble >> 2) & 1;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	089b      	lsrs	r3, r3, #2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	737b      	strb	r3, [r7, #13]
	uint8_t D7 = (nibble >> 3) & 1;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	08db      	lsrs	r3, r3, #3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, D4? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	2301      	movne	r3, #1
 8000b8e:	2300      	moveq	r3, #0
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b98:	4815      	ldr	r0, [pc, #84]	@ (8000bf0 <LCD_PutNibble+0xa0>)
 8000b9a:	f003 fc69 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, D5? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000b9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bb0:	480f      	ldr	r0, [pc, #60]	@ (8000bf0 <LCD_PutNibble+0xa0>)
 8000bb2:	f003 fc5d 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, D6? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	bf14      	ite	ne
 8000bbc:	2301      	movne	r3, #1
 8000bbe:	2300      	moveq	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bc8:	4809      	ldr	r0, [pc, #36]	@ (8000bf0 <LCD_PutNibble+0xa0>)
 8000bca:	f003 fc51 	bl	8004470 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, D7? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000bce:	7b3b      	ldrb	r3, [r7, #12]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <LCD_PutNibble+0xa0>)
 8000be2:	f003 fc45 	bl	8004470 <HAL_GPIO_WritePin>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	48000800 	.word	0x48000800

08000bf4 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
	LCD_PutNibble(c >> 4);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	091b      	lsrs	r3, r3, #4
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ffa3 	bl	8000b50 <LCD_PutNibble>
	LCD_Pulse();
 8000c0a:	f7ff ff8b 	bl	8000b24 <LCD_Pulse>
	LCD_PutNibble(c);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff9d 	bl	8000b50 <LCD_PutNibble>
	LCD_Pulse();
 8000c16:	f7ff ff85 	bl	8000b24 <LCD_Pulse>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <LCD_SendData>:


void LCD_SendData(uint8_t c){
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f003 fc1b 	bl	8004470 <HAL_GPIO_WritePin>
	LCD_PutNibble(c >> 4);
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff85 	bl	8000b50 <LCD_PutNibble>
	LCD_Pulse();
 8000c46:	f7ff ff6d 	bl	8000b24 <LCD_Pulse>
	LCD_PutNibble(c);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff7f 	bl	8000b50 <LCD_PutNibble>
	LCD_Pulse();
 8000c52:	f7ff ff67 	bl	8000b24 <LCD_Pulse>
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c60:	f003 fc06 	bl	8004470 <HAL_GPIO_WritePin>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <LCD_SendStr>:

// send string to LCD data
void LCD_SendStr(char *str){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e00f      	b.n	8000c9a <LCD_SendStr+0x2e>
		if (i == 15) {
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d102      	bne.n	8000c86 <LCD_SendStr+0x1a>
			LCD_SendCmd(LCD_SECOND_LINE);
 8000c80:	20c0      	movs	r0, #192	@ 0xc0
 8000c82:	f7ff ffb7 	bl	8000bf4 <LCD_SendCmd>
		}
		LCD_SendData((uint8_t)str[i]);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ffc7 	bl	8000c22 <LCD_SendData>
	for (int i = 0; str[i]; i++) {
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	3301      	adds	r3, #1
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1e9      	bne.n	8000c7a <LCD_SendStr+0xe>
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cb2:	b095      	sub	sp, #84	@ 0x54
 8000cb4:	af12      	add	r7, sp, #72	@ 0x48
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc0:	f040 80cb 	bne.w	8000e5a <HAL_GPIO_EXTI_Callback+0x1aa>
		/* B1 is pressed */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 8000cc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc8:	48a5      	ldr	r0, [pc, #660]	@ (8000f60 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000cca:	f003 fbb9 	bl	8004440 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d146      	bne.n	8000d62 <HAL_GPIO_EXTI_Callback+0xb2>
			/* sound indication */
			if (enable_sound) generate_sound(460, 50, htim1);
 8000cd4:	4ba3      	ldr	r3, [pc, #652]	@ (8000f64 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00e      	beq.n	8000cfa <HAL_GPIO_EXTI_Callback+0x4a>
 8000cdc:	4ca2      	ldr	r4, [pc, #648]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000cde:	4668      	mov	r0, sp
 8000ce0:	f104 0308 	add.w	r3, r4, #8
 8000ce4:	2244      	movs	r2, #68	@ 0x44
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f007 f89a 	bl	8007e20 <memcpy>
 8000cec:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000cf0:	2132      	movs	r1, #50	@ 0x32
 8000cf2:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000cf6:	f7ff fadb 	bl	80002b0 <generate_sound>

			if (enable_vibration) {
 8000cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_EXTI_Callback+0x5a>
				vibration_call(STEPS_PER_REV);
 8000d02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d06:	f001 fff5 	bl	8002cf4 <vibration_call>
			}
			if (is_single_press[0] == true &&
 8000d0a:	4b99      	ldr	r3, [pc, #612]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d019      	beq.n	8000d46 <HAL_GPIO_EXTI_Callback+0x96>
				is_double_press[0] == false &&
 8000d12:	4b98      	ldr	r3, [pc, #608]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f083 0301 	eor.w	r3, r3, #1
 8000d1a:	b2db      	uxtb	r3, r3
			if (is_single_press[0] == true &&
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d012      	beq.n	8000d46 <HAL_GPIO_EXTI_Callback+0x96>
				(decimal_second_count - button_double_press_time[0]) <= double_press_interval) {
 8000d20:	4b95      	ldr	r3, [pc, #596]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b95      	ldr	r3, [pc, #596]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	1ad2      	subs	r2, r2, r3
 8000d2a:	4b95      	ldr	r3, [pc, #596]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
				is_double_press[0] == false &&
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d809      	bhi.n	8000d46 <HAL_GPIO_EXTI_Callback+0x96>
				is_double_press[0] = true;
 8000d32:	4b90      	ldr	r3, [pc, #576]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 8000d38:	4b8d      	ldr	r3, [pc, #564]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 8000d3e:	4b91      	ldr	r3, [pc, #580]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e008      	b.n	8000d58 <HAL_GPIO_EXTI_Callback+0xa8>

			} else {
				is_single_press[0] = true;
 8000d46:	4b8a      	ldr	r3, [pc, #552]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 8000d4c:	4b89      	ldr	r3, [pc, #548]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 8000d52:	4b8c      	ldr	r3, [pc, #560]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
			}

			button_holding_time[0] = decimal_second_count;
 8000d58:	4b87      	ldr	r3, [pc, #540]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a8a      	ldr	r2, [pc, #552]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000d5e:	6013      	str	r3, [r2, #0]
						break;
				}
			}
		}
	}
}
 8000d60:	e375      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			stop_sound(htim1);
 8000d62:	4e81      	ldr	r6, [pc, #516]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000d64:	466d      	mov	r5, sp
 8000d66:	f106 0410 	add.w	r4, r6, #16
 8000d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d76:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000d7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d82:	f7ff facd 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[0]) >= holding_bound) {
 8000d86:	4b7c      	ldr	r3, [pc, #496]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad2      	subs	r2, r2, r3
 8000d90:	4b7e      	ldr	r3, [pc, #504]	@ (8000f8c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d309      	bcc.n	8000dac <HAL_GPIO_EXTI_Callback+0xfc>
				is_holding[0] = true;
 8000d98:	4b7a      	ldr	r3, [pc, #488]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 8000d9e:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 8000da4:	4b72      	ldr	r3, [pc, #456]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
 8000daa:	e003      	b.n	8000db4 <HAL_GPIO_EXTI_Callback+0x104>
				button_double_press_time[0] = decimal_second_count;
 8000dac:	4b72      	ldr	r3, [pc, #456]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a72      	ldr	r2, [pc, #456]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000db2:	6013      	str	r3, [r2, #0]
			if (is_holding[0]) {
 8000db4:	4b73      	ldr	r3, [pc, #460]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d008      	beq.n	8000dce <HAL_GPIO_EXTI_Callback+0x11e>
				switch (currentScreen) {
 8000dbc:	4b74      	ldr	r3, [pc, #464]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	f040 8343 	bne.w	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						switchTimeFormat();
 8000dc8:	f001 fe62 	bl	8002a90 <switchTimeFormat>
						break;
 8000dcc:	e33f      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			} else if (is_single_press[0]) {
 8000dce:	4b68      	ldr	r3, [pc, #416]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 833a 	beq.w	800144c <HAL_GPIO_EXTI_Callback+0x79c>
				switch (currentScreen) {
 8000dd8:	4b6d      	ldr	r3, [pc, #436]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	3b01      	subs	r3, #1
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	f200 8334 	bhi.w	800144e <HAL_GPIO_EXTI_Callback+0x79e>
 8000de6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <HAL_GPIO_EXTI_Callback+0x13c>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000e11 	.word	0x08000e11
 8000df0:	0800144f 	.word	0x0800144f
 8000df4:	08000e45 	.word	0x08000e45
 8000df8:	0800144f 	.word	0x0800144f
 8000dfc:	0800144f 	.word	0x0800144f
 8000e00:	0800144f 	.word	0x0800144f
 8000e04:	08000e19 	.word	0x08000e19
 8000e08:	08000e4b 	.word	0x08000e4b
 8000e0c:	08000e53 	.word	0x08000e53
						currentScreen = TIME;
 8000e10:	4b5f      	ldr	r3, [pc, #380]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	701a      	strb	r2, [r3, #0]
						break;
 8000e16:	e31a      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						flash = !flash;
 8000e18:	4b5e      	ldr	r3, [pc, #376]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f083 0301 	eor.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b57      	ldr	r3, [pc, #348]	@ (8000f94 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000e36:	701a      	strb	r2, [r3, #0]
						flash_state();
 8000e38:	f001 fac6 	bl	80023c8 <flash_state>
						screenNeedsRefresh = true;
 8000e3c:	4b56      	ldr	r3, [pc, #344]	@ (8000f98 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
						break;
 8000e42:	e304      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						changeAlarmMin();
 8000e44:	f001 fe88 	bl	8002b58 <changeAlarmMin>
						break;
 8000e48:	e301      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						toggleCountdown(&countdown);
 8000e4a:	4854      	ldr	r0, [pc, #336]	@ (8000f9c <HAL_GPIO_EXTI_Callback+0x2ec>)
 8000e4c:	f7ff fbd2 	bl	80005f4 <toggleCountdown>
						break;
 8000e50:	e2fd      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						toggleStopwatch(&stopwatch);
 8000e52:	4853      	ldr	r0, [pc, #332]	@ (8000fa0 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8000e54:	f7ff fdc1 	bl	80009da <toggleStopwatch>
						break;
 8000e58:	e2f9      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
	} else if (GPIO_Pin == SW1_Pin) {
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	f040 80e1 	bne.w	8001024 <HAL_GPIO_EXTI_Callback+0x374>
		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1) {
 8000e62:	2102      	movs	r1, #2
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e68:	f003 faea 	bl	8004440 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d146      	bne.n	8000f00 <HAL_GPIO_EXTI_Callback+0x250>
			if (enable_sound) generate_sound(460, 50, htim1);
 8000e72:	4b3c      	ldr	r3, [pc, #240]	@ (8000f64 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00e      	beq.n	8000e98 <HAL_GPIO_EXTI_Callback+0x1e8>
 8000e7a:	4c3b      	ldr	r4, [pc, #236]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000e7c:	4668      	mov	r0, sp
 8000e7e:	f104 0308 	add.w	r3, r4, #8
 8000e82:	2244      	movs	r2, #68	@ 0x44
 8000e84:	4619      	mov	r1, r3
 8000e86:	f006 ffcb 	bl	8007e20 <memcpy>
 8000e8a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000e8e:	2132      	movs	r1, #50	@ 0x32
 8000e90:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000e94:	f7ff fa0c 	bl	80002b0 <generate_sound>
			if (enable_vibration) {
 8000e98:	4b34      	ldr	r3, [pc, #208]	@ (8000f6c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_EXTI_Callback+0x1f8>
				vibration_call(STEPS_PER_REV);
 8000ea0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ea4:	f001 ff26 	bl	8002cf4 <vibration_call>
			if (is_single_press[1] == true &&
 8000ea8:	4b31      	ldr	r3, [pc, #196]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d019      	beq.n	8000ee4 <HAL_GPIO_EXTI_Callback+0x234>
				is_double_press[1] == false &&
 8000eb0:	4b30      	ldr	r3, [pc, #192]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
			if (is_single_press[1] == true &&
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d012      	beq.n	8000ee4 <HAL_GPIO_EXTI_Callback+0x234>
				(decimal_second_count - button_double_press_time[1]) <= double_press_interval) {
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	1ad2      	subs	r2, r2, r3
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
				is_double_press[1] == false &&
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d809      	bhi.n	8000ee4 <HAL_GPIO_EXTI_Callback+0x234>
				is_double_press[1] = true;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	705a      	strb	r2, [r3, #1]
 8000ee2:	e008      	b.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x246>
				is_single_press[1] = true;
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 8000eea:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 8000ef0:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	705a      	strb	r2, [r3, #1]
			button_holding_time[1] = decimal_second_count;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a23      	ldr	r2, [pc, #140]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000efc:	6053      	str	r3, [r2, #4]
}
 8000efe:	e2a6      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			stop_sound(htim1);
 8000f00:	4e19      	ldr	r6, [pc, #100]	@ (8000f68 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000f02:	466d      	mov	r5, sp
 8000f04:	f106 0410 	add.w	r4, r6, #16
 8000f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f14:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000f1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f20:	f7ff f9fe 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[1]) >= holding_bound) {
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	1ad2      	subs	r2, r2, r3
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d309      	bcc.n	8000f4a <HAL_GPIO_EXTI_Callback+0x29a>
				is_holding[1] = true;
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	705a      	strb	r2, [r3, #1]
 8000f48:	e003      	b.n	8000f52 <HAL_GPIO_EXTI_Callback+0x2a2>
				button_double_press_time[1] = decimal_second_count;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000f50:	6053      	str	r3, [r2, #4]
			if (is_holding[1]) {
 8000f52:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d024      	beq.n	8000fa4 <HAL_GPIO_EXTI_Callback+0x2f4>
				switch (currentScreen){
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	e276      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
 8000f60:	48000800 	.word	0x48000800
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000118 	.word	0x20000118
 8000f6c:	20000009 	.word	0x20000009
 8000f70:	20000238 	.word	0x20000238
 8000f74:	2000023c 	.word	0x2000023c
 8000f78:	20000210 	.word	0x20000210
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000240 	.word	0x20000240
 8000f88:	20000224 	.word	0x20000224
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000010 	.word	0x20000010
 8000f94:	20000245 	.word	0x20000245
 8000f98:	20000235 	.word	0x20000235
 8000f9c:	20000248 	.word	0x20000248
 8000fa0:	20000254 	.word	0x20000254
			} else if (is_single_press[1]) {
 8000fa4:	4b9e      	ldr	r3, [pc, #632]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x570>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8250 	beq.w	800144e <HAL_GPIO_EXTI_Callback+0x79e>
				switch (currentScreen) {
 8000fae:	4b9d      	ldr	r3, [pc, #628]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	f200 8249 	bhi.w	800144e <HAL_GPIO_EXTI_Callback+0x79e>
 8000fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <HAL_GPIO_EXTI_Callback+0x314>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000ff5 	.word	0x08000ff5
 8000fc8:	08000ffd 	.word	0x08000ffd
 8000fcc:	08001005 	.word	0x08001005
 8000fd0:	0800100d 	.word	0x0800100d
 8000fd4:	08000fed 	.word	0x08000fed
 8000fd8:	08000fe5 	.word	0x08000fe5
 8000fdc:	08001015 	.word	0x08001015
 8000fe0:	0800101d 	.word	0x0800101d
						currentScreen = OPT;
 8000fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8000fe6:	2206      	movs	r2, #6
 8000fe8:	701a      	strb	r2, [r3, #0]
						break;
 8000fea:	e230      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 8000fec:	4b8d      	ldr	r3, [pc, #564]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
						break;
 8000ff2:	e22c      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 8000ff4:	4b8b      	ldr	r3, [pc, #556]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
						break;
 8000ffa:	e228      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = TIME;
 8000ffc:	4b89      	ldr	r3, [pc, #548]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8000ffe:	2202      	movs	r2, #2
 8001000:	701a      	strb	r2, [r3, #0]
						break;
 8001002:	e224      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = ALARM;
 8001004:	4b87      	ldr	r3, [pc, #540]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001006:	2203      	movs	r2, #3
 8001008:	701a      	strb	r2, [r3, #0]
						break;
 800100a:	e220      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 800100c:	4b85      	ldr	r3, [pc, #532]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
						break;
 8001012:	e21c      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = FITNESS;
 8001014:	4b83      	ldr	r3, [pc, #524]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001016:	2205      	movs	r2, #5
 8001018:	701a      	strb	r2, [r3, #0]
						break;
 800101a:	e218      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = FITNESS;
 800101c:	4b81      	ldr	r3, [pc, #516]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 800101e:	2205      	movs	r2, #5
 8001020:	701a      	strb	r2, [r3, #0]
						break;
 8001022:	e214      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
	} else if (GPIO_Pin == SW2_Pin) {
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	2b10      	cmp	r3, #16
 8001028:	f040 811a 	bne.w	8001260 <HAL_GPIO_EXTI_Callback+0x5b0>
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1) {
 800102c:	2110      	movs	r1, #16
 800102e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001032:	f003 fa05 	bl	8004440 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d14d      	bne.n	80010d8 <HAL_GPIO_EXTI_Callback+0x428>
			if (enable_sound) {
 800103c:	4b7a      	ldr	r3, [pc, #488]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x578>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00e      	beq.n	8001062 <HAL_GPIO_EXTI_Callback+0x3b2>
				generate_sound(460, 50, htim1);
 8001044:	4c79      	ldr	r4, [pc, #484]	@ (800122c <HAL_GPIO_EXTI_Callback+0x57c>)
 8001046:	4668      	mov	r0, sp
 8001048:	f104 0308 	add.w	r3, r4, #8
 800104c:	2244      	movs	r2, #68	@ 0x44
 800104e:	4619      	mov	r1, r3
 8001050:	f006 fee6 	bl	8007e20 <memcpy>
 8001054:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001058:	2132      	movs	r1, #50	@ 0x32
 800105a:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 800105e:	f7ff f927 	bl	80002b0 <generate_sound>
			if (enable_vibration) {
 8001062:	4b73      	ldr	r3, [pc, #460]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x580>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_EXTI_Callback+0x3c2>
				vibration_call(STEPS_PER_REV);
 800106a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800106e:	f001 fe41 	bl	8002cf4 <vibration_call>
			if (enable_vibration) {
 8001072:	4b6f      	ldr	r3, [pc, #444]	@ (8001230 <HAL_GPIO_EXTI_Callback+0x580>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_GPIO_EXTI_Callback+0x3d0>
				button_vibration = true;
 800107a:	4b6e      	ldr	r3, [pc, #440]	@ (8001234 <HAL_GPIO_EXTI_Callback+0x584>)
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
		    if (is_single_press[2] == true &&
 8001080:	4b67      	ldr	r3, [pc, #412]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x570>)
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d019      	beq.n	80010bc <HAL_GPIO_EXTI_Callback+0x40c>
		        is_double_press[2] == false &&
 8001088:	4b6b      	ldr	r3, [pc, #428]	@ (8001238 <HAL_GPIO_EXTI_Callback+0x588>)
 800108a:	789b      	ldrb	r3, [r3, #2]
 800108c:	f083 0301 	eor.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
		    if (is_single_press[2] == true &&
 8001092:	2b00      	cmp	r3, #0
 8001094:	d012      	beq.n	80010bc <HAL_GPIO_EXTI_Callback+0x40c>
		        (decimal_second_count - button_double_press_time[2]) <= double_press_interval) {
 8001096:	4b69      	ldr	r3, [pc, #420]	@ (800123c <HAL_GPIO_EXTI_Callback+0x58c>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b69      	ldr	r3, [pc, #420]	@ (8001240 <HAL_GPIO_EXTI_Callback+0x590>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	1ad2      	subs	r2, r2, r3
 80010a0:	4b68      	ldr	r3, [pc, #416]	@ (8001244 <HAL_GPIO_EXTI_Callback+0x594>)
 80010a2:	681b      	ldr	r3, [r3, #0]
		        is_double_press[2] == false &&
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d809      	bhi.n	80010bc <HAL_GPIO_EXTI_Callback+0x40c>
		        is_double_press[2] = true;
 80010a8:	4b63      	ldr	r3, [pc, #396]	@ (8001238 <HAL_GPIO_EXTI_Callback+0x588>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	709a      	strb	r2, [r3, #2]
		        is_single_press[2] = false;
 80010ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x570>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 80010b4:	4b64      	ldr	r3, [pc, #400]	@ (8001248 <HAL_GPIO_EXTI_Callback+0x598>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	709a      	strb	r2, [r3, #2]
 80010ba:	e008      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0x41e>
		        is_single_press[2] = true;
 80010bc:	4b58      	ldr	r3, [pc, #352]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x570>)
 80010be:	2201      	movs	r2, #1
 80010c0:	709a      	strb	r2, [r3, #2]
		        is_double_press[2] = false;
 80010c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001238 <HAL_GPIO_EXTI_Callback+0x588>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 80010c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001248 <HAL_GPIO_EXTI_Callback+0x598>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	709a      	strb	r2, [r3, #2]
		    button_holding_time[2] = decimal_second_count;
 80010ce:	4b5b      	ldr	r3, [pc, #364]	@ (800123c <HAL_GPIO_EXTI_Callback+0x58c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a5e      	ldr	r2, [pc, #376]	@ (800124c <HAL_GPIO_EXTI_Callback+0x59c>)
 80010d4:	6093      	str	r3, [r2, #8]
}
 80010d6:	e1ba      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			stop_sound(htim1);
 80010d8:	4e54      	ldr	r6, [pc, #336]	@ (800122c <HAL_GPIO_EXTI_Callback+0x57c>)
 80010da:	466d      	mov	r5, sp
 80010dc:	f106 0410 	add.w	r4, r6, #16
 80010e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010f8:	f7ff f912 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[2]) >= holding_bound) {
 80010fc:	4b4f      	ldr	r3, [pc, #316]	@ (800123c <HAL_GPIO_EXTI_Callback+0x58c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b52      	ldr	r3, [pc, #328]	@ (800124c <HAL_GPIO_EXTI_Callback+0x59c>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	1ad2      	subs	r2, r2, r3
 8001106:	4b52      	ldr	r3, [pc, #328]	@ (8001250 <HAL_GPIO_EXTI_Callback+0x5a0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d309      	bcc.n	8001122 <HAL_GPIO_EXTI_Callback+0x472>
				is_holding[2] = true;
 800110e:	4b4e      	ldr	r3, [pc, #312]	@ (8001248 <HAL_GPIO_EXTI_Callback+0x598>)
 8001110:	2201      	movs	r2, #1
 8001112:	709a      	strb	r2, [r3, #2]
				is_double_press[2] = false;
 8001114:	4b48      	ldr	r3, [pc, #288]	@ (8001238 <HAL_GPIO_EXTI_Callback+0x588>)
 8001116:	2200      	movs	r2, #0
 8001118:	709a      	strb	r2, [r3, #2]
				is_single_press[2] = false;
 800111a:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x570>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
 8001120:	e003      	b.n	800112a <HAL_GPIO_EXTI_Callback+0x47a>
				button_double_press_time[2] = decimal_second_count;
 8001122:	4b46      	ldr	r3, [pc, #280]	@ (800123c <HAL_GPIO_EXTI_Callback+0x58c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a46      	ldr	r2, [pc, #280]	@ (8001240 <HAL_GPIO_EXTI_Callback+0x590>)
 8001128:	6093      	str	r3, [r2, #8]
			if (is_holding[2] == true) {
 800112a:	4b47      	ldr	r3, [pc, #284]	@ (8001248 <HAL_GPIO_EXTI_Callback+0x598>)
 800112c:	789b      	ldrb	r3, [r3, #2]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d02c      	beq.n	800118c <HAL_GPIO_EXTI_Callback+0x4dc>
				switch (currentScreen){
 8001132:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	3b02      	subs	r3, #2
 800113a:	2b05      	cmp	r3, #5
 800113c:	d822      	bhi.n	8001184 <HAL_GPIO_EXTI_Callback+0x4d4>
 800113e:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <HAL_GPIO_EXTI_Callback+0x494>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	0800115d 	.word	0x0800115d
 8001148:	08001165 	.word	0x08001165
 800114c:	0800116d 	.word	0x0800116d
 8001150:	08001185 	.word	0x08001185
 8001154:	0800117d 	.word	0x0800117d
 8001158:	08001175 	.word	0x08001175
						currentScreen = HOME;
 800115c:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
						break;
 8001162:	e174      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 8001164:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
						break;
 800116a:	e170      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 800116c:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 800116e:	2201      	movs	r2, #1
 8001170:	701a      	strb	r2, [r3, #0]
						break;
 8001172:	e16c      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001176:	2201      	movs	r2, #1
 8001178:	701a      	strb	r2, [r3, #0]
						break;
 800117a:	e168      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 800117c:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
						break;
 8001182:	e164      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = HOME;
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
						break;
 800118a:	e160      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			} else if (is_single_press[2]) {
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_GPIO_EXTI_Callback+0x570>)
 800118e:	789b      	ldrb	r3, [r3, #2]
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 815c 	beq.w	800144e <HAL_GPIO_EXTI_Callback+0x79e>
				switch (currentScreen) {
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3b01      	subs	r3, #1
 800119e:	2b08      	cmp	r3, #8
 80011a0:	f200 8155 	bhi.w	800144e <HAL_GPIO_EXTI_Callback+0x79e>
 80011a4:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <HAL_GPIO_EXTI_Callback+0x4fc>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011d9 	.word	0x080011d9
 80011b0:	0800144f 	.word	0x0800144f
 80011b4:	080011d1 	.word	0x080011d1
 80011b8:	0800144f 	.word	0x0800144f
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	0800144f 	.word	0x0800144f
 80011c4:	080011f9 	.word	0x080011f9
 80011c8:	080011e9 	.word	0x080011e9
 80011cc:	080011f1 	.word	0x080011f1
						currentScreen = ALARM_SET;  // request alarm set
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 80011d2:	2204      	movs	r2, #4
 80011d4:	701a      	strb	r2, [r3, #0]
						break;
 80011d6:	e13a      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = FITNESS;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 80011da:	2205      	movs	r2, #5
 80011dc:	701a      	strb	r2, [r3, #0]
						break;
 80011de:	e136      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = COUNTDOWN;
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_GPIO_EXTI_Callback+0x574>)
 80011e2:	2208      	movs	r2, #8
 80011e4:	701a      	strb	r2, [r3, #0]
						break;
 80011e6:	e132      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						mintueCountdown(&countdown);
 80011e8:	481a      	ldr	r0, [pc, #104]	@ (8001254 <HAL_GPIO_EXTI_Callback+0x5a4>)
 80011ea:	f7ff fa18 	bl	800061e <mintueCountdown>
						break;
 80011ee:	e12e      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						lapStopwatchFlag = true;
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_GPIO_EXTI_Callback+0x5a8>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
						break;
 80011f6:	e12a      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						enable_sound = !enable_sound;   // toggle first
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x578>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf14      	ite	ne
 8001200:	2301      	movne	r3, #1
 8001202:	2300      	moveq	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f083 0301 	eor.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_GPIO_EXTI_Callback+0x578>)
 8001214:	701a      	strb	r2, [r3, #0]
						screenNeedsRefresh = true;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_GPIO_EXTI_Callback+0x5ac>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
						break;
 800121c:	e117      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
 800121e:	bf00      	nop
 8001220:	20000238 	.word	0x20000238
 8001224:	20000010 	.word	0x20000010
 8001228:	20000008 	.word	0x20000008
 800122c:	20000118 	.word	0x20000118
 8001230:	20000009 	.word	0x20000009
 8001234:	20000244 	.word	0x20000244
 8001238:	2000023c 	.word	0x2000023c
 800123c:	20000210 	.word	0x20000210
 8001240:	20000214 	.word	0x20000214
 8001244:	20000000 	.word	0x20000000
 8001248:	20000240 	.word	0x20000240
 800124c:	20000224 	.word	0x20000224
 8001250:	20000004 	.word	0x20000004
 8001254:	20000248 	.word	0x20000248
 8001258:	20000264 	.word	0x20000264
 800125c:	20000235 	.word	0x20000235
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == 1) {
 8001260:	2101      	movs	r1, #1
 8001262:	487d      	ldr	r0, [pc, #500]	@ (8001458 <HAL_GPIO_EXTI_Callback+0x7a8>)
 8001264:	f003 f8ec 	bl	8004440 <HAL_GPIO_ReadPin>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d146      	bne.n	80012fc <HAL_GPIO_EXTI_Callback+0x64c>
			if (enable_sound) generate_sound(460, 50, htim1);
 800126e:	4b7b      	ldr	r3, [pc, #492]	@ (800145c <HAL_GPIO_EXTI_Callback+0x7ac>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00e      	beq.n	8001294 <HAL_GPIO_EXTI_Callback+0x5e4>
 8001276:	4c7a      	ldr	r4, [pc, #488]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x7b0>)
 8001278:	4668      	mov	r0, sp
 800127a:	f104 0308 	add.w	r3, r4, #8
 800127e:	2244      	movs	r2, #68	@ 0x44
 8001280:	4619      	mov	r1, r3
 8001282:	f006 fdcd 	bl	8007e20 <memcpy>
 8001286:	e894 000c 	ldmia.w	r4, {r2, r3}
 800128a:	2132      	movs	r1, #50	@ 0x32
 800128c:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8001290:	f7ff f80e 	bl	80002b0 <generate_sound>
			if (enable_vibration) {
 8001294:	4b73      	ldr	r3, [pc, #460]	@ (8001464 <HAL_GPIO_EXTI_Callback+0x7b4>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_EXTI_Callback+0x5f4>
				vibration_call(STEPS_PER_REV);
 800129c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012a0:	f001 fd28 	bl	8002cf4 <vibration_call>
			if (is_single_press[3] == true &&
 80012a4:	4b70      	ldr	r3, [pc, #448]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7b8>)
 80012a6:	78db      	ldrb	r3, [r3, #3]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d019      	beq.n	80012e0 <HAL_GPIO_EXTI_Callback+0x630>
				is_double_press[3] == false &&
 80012ac:	4b6f      	ldr	r3, [pc, #444]	@ (800146c <HAL_GPIO_EXTI_Callback+0x7bc>)
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
			if (is_single_press[3] == true &&
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d012      	beq.n	80012e0 <HAL_GPIO_EXTI_Callback+0x630>
				(decimal_second_count - button_double_press_time[3]) <= double_press_interval) {
 80012ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x7c0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <HAL_GPIO_EXTI_Callback+0x7c4>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	1ad2      	subs	r2, r2, r3
 80012c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001478 <HAL_GPIO_EXTI_Callback+0x7c8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
				is_double_press[3] == false &&
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d809      	bhi.n	80012e0 <HAL_GPIO_EXTI_Callback+0x630>
				is_double_press[3] = true;
 80012cc:	4b67      	ldr	r3, [pc, #412]	@ (800146c <HAL_GPIO_EXTI_Callback+0x7bc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7b8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 80012d8:	4b68      	ldr	r3, [pc, #416]	@ (800147c <HAL_GPIO_EXTI_Callback+0x7cc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	70da      	strb	r2, [r3, #3]
 80012de:	e008      	b.n	80012f2 <HAL_GPIO_EXTI_Callback+0x642>
				is_single_press[3] = true;
 80012e0:	4b61      	ldr	r3, [pc, #388]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7b8>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 80012e6:	4b61      	ldr	r3, [pc, #388]	@ (800146c <HAL_GPIO_EXTI_Callback+0x7bc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 80012ec:	4b63      	ldr	r3, [pc, #396]	@ (800147c <HAL_GPIO_EXTI_Callback+0x7cc>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	70da      	strb	r2, [r3, #3]
			button_holding_time[3] = decimal_second_count;
 80012f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x7c0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a62      	ldr	r2, [pc, #392]	@ (8001480 <HAL_GPIO_EXTI_Callback+0x7d0>)
 80012f8:	60d3      	str	r3, [r2, #12]
}
 80012fa:	e0a8      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			stop_sound(htim1);
 80012fc:	4e58      	ldr	r6, [pc, #352]	@ (8001460 <HAL_GPIO_EXTI_Callback+0x7b0>)
 80012fe:	466d      	mov	r5, sp
 8001300:	f106 0410 	add.w	r4, r6, #16
 8001304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800130e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001310:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001314:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001318:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800131c:	f7ff f800 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[3]) >= holding_bound) {
 8001320:	4b53      	ldr	r3, [pc, #332]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b56      	ldr	r3, [pc, #344]	@ (8001480 <HAL_GPIO_EXTI_Callback+0x7d0>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	1ad2      	subs	r2, r2, r3
 800132a:	4b56      	ldr	r3, [pc, #344]	@ (8001484 <HAL_GPIO_EXTI_Callback+0x7d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	429a      	cmp	r2, r3
 8001330:	d309      	bcc.n	8001346 <HAL_GPIO_EXTI_Callback+0x696>
				is_holding[3] = true;
 8001332:	4b52      	ldr	r3, [pc, #328]	@ (800147c <HAL_GPIO_EXTI_Callback+0x7cc>)
 8001334:	2201      	movs	r2, #1
 8001336:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8001338:	4b4c      	ldr	r3, [pc, #304]	@ (800146c <HAL_GPIO_EXTI_Callback+0x7bc>)
 800133a:	2200      	movs	r2, #0
 800133c:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 800133e:	4b4a      	ldr	r3, [pc, #296]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7b8>)
 8001340:	2200      	movs	r2, #0
 8001342:	70da      	strb	r2, [r3, #3]
 8001344:	e003      	b.n	800134e <HAL_GPIO_EXTI_Callback+0x69e>
				button_double_press_time[3] = decimal_second_count;
 8001346:	4b4a      	ldr	r3, [pc, #296]	@ (8001470 <HAL_GPIO_EXTI_Callback+0x7c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a4a      	ldr	r2, [pc, #296]	@ (8001474 <HAL_GPIO_EXTI_Callback+0x7c4>)
 800134c:	60d3      	str	r3, [r2, #12]
			if (is_holding[3]) {
 800134e:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_GPIO_EXTI_Callback+0x7cc>)
 8001350:	78db      	ldrb	r3, [r3, #3]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00f      	beq.n	8001376 <HAL_GPIO_EXTI_Callback+0x6c6>
				switch(currentScreen) {
 8001356:	4b4c      	ldr	r3, [pc, #304]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b08      	cmp	r3, #8
 800135e:	d002      	beq.n	8001366 <HAL_GPIO_EXTI_Callback+0x6b6>
 8001360:	2b09      	cmp	r3, #9
 8001362:	d004      	beq.n	800136e <HAL_GPIO_EXTI_Callback+0x6be>
 8001364:	e007      	b.n	8001376 <HAL_GPIO_EXTI_Callback+0x6c6>
						resetCountdown(&countdown);
 8001366:	4849      	ldr	r0, [pc, #292]	@ (800148c <HAL_GPIO_EXTI_Callback+0x7dc>)
 8001368:	f7ff f9a6 	bl	80006b8 <resetCountdown>
						break;
 800136c:	e003      	b.n	8001376 <HAL_GPIO_EXTI_Callback+0x6c6>
						resetStopwatch(&stopwatch);
 800136e:	4848      	ldr	r0, [pc, #288]	@ (8001490 <HAL_GPIO_EXTI_Callback+0x7e0>)
 8001370:	f7ff fb20 	bl	80009b4 <resetStopwatch>
						break;
 8001374:	bf00      	nop
			if (is_double_press[3]) {
 8001376:	4b3d      	ldr	r3, [pc, #244]	@ (800146c <HAL_GPIO_EXTI_Callback+0x7bc>)
 8001378:	78db      	ldrb	r3, [r3, #3]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <HAL_GPIO_EXTI_Callback+0x6e4>
				is_single_press[3] = false; // cancel single press
 800137e:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7b8>)
 8001380:	2200      	movs	r2, #0
 8001382:	70da      	strb	r2, [r3, #3]
				switch (currentScreen){
 8001384:	4b40      	ldr	r3, [pc, #256]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b03      	cmp	r3, #3
 800138c:	d15f      	bne.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						switchAMPM();
 800138e:	f001 fb9d 	bl	8002acc <switchAMPM>
						break;
 8001392:	e05c      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
			else if (is_single_press[3]) {
 8001394:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <HAL_GPIO_EXTI_Callback+0x7b8>)
 8001396:	78db      	ldrb	r3, [r3, #3]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d058      	beq.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
				switch (currentScreen) {
 800139c:	4b3a      	ldr	r3, [pc, #232]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	3b01      	subs	r3, #1
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	d852      	bhi.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
 80013a8:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <HAL_GPIO_EXTI_Callback+0x700>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013d1 	.word	0x080013d1
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	08001437 	.word	0x08001437
 80013bc:	0800144f 	.word	0x0800144f
 80013c0:	0800143d 	.word	0x0800143d
 80013c4:	080013e3 	.word	0x080013e3
 80013c8:	080013f5 	.word	0x080013f5
 80013cc:	08001445 	.word	0x08001445
						previousScreen = currentScreen;
 80013d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <HAL_GPIO_EXTI_Callback+0x7e4>)
 80013d8:	701a      	strb	r2, [r3, #0]
						currentScreen = OPT;
 80013da:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 80013dc:	2206      	movs	r2, #6
 80013de:	701a      	strb	r2, [r3, #0]
						break;
 80013e0:	e035      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						previousScreen = currentScreen;
 80013e2:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <HAL_GPIO_EXTI_Callback+0x7e4>)
 80013ea:	701a      	strb	r2, [r3, #0]
						currentScreen = SETTINGS;
 80013ec:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	701a      	strb	r2, [r3, #0]
						break;
 80013f2:	e02c      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						enable_vibration = !enable_vibration;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <HAL_GPIO_EXTI_Callback+0x7b4>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_GPIO_EXTI_Callback+0x7b4>)
 8001410:	701a      	strb	r2, [r3, #0]
						if (enable_vibration) {
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_GPIO_EXTI_Callback+0x7b4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_EXTI_Callback+0x772>
							vibration_call(32);
 800141a:	2020      	movs	r0, #32
 800141c:	f001 fc6a 	bl	8002cf4 <vibration_call>
 8001420:	e001      	b.n	8001426 <HAL_GPIO_EXTI_Callback+0x776>
							vibration_stop();
 8001422:	f001 fc87 	bl	8002d34 <vibration_stop>
						screenNeedsRefresh = true;
 8001426:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_GPIO_EXTI_Callback+0x7e8>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
						break;
 800142c:	e00f      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = ALARM;
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 8001430:	2203      	movs	r2, #3
 8001432:	701a      	strb	r2, [r3, #0]
						break;
 8001434:	e00b      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						changeAlarmHour();
 8001436:	f001 fb6d 	bl	8002b14 <changeAlarmHour>
						break;
 800143a:	e008      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						currentScreen = STOPWATCH;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_GPIO_EXTI_Callback+0x7d8>)
 800143e:	2209      	movs	r2, #9
 8001440:	701a      	strb	r2, [r3, #0]
						break;
 8001442:	e004      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
						secondCountdown(&countdown);
 8001444:	4811      	ldr	r0, [pc, #68]	@ (800148c <HAL_GPIO_EXTI_Callback+0x7dc>)
 8001446:	f7ff f901 	bl	800064c <secondCountdown>
						break;
 800144a:	e000      	b.n	800144e <HAL_GPIO_EXTI_Callback+0x79e>
					default:
 800144c:	bf00      	nop
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001456:	bf00      	nop
 8001458:	48000400 	.word	0x48000400
 800145c:	20000008 	.word	0x20000008
 8001460:	20000118 	.word	0x20000118
 8001464:	20000009 	.word	0x20000009
 8001468:	20000238 	.word	0x20000238
 800146c:	2000023c 	.word	0x2000023c
 8001470:	20000210 	.word	0x20000210
 8001474:	20000214 	.word	0x20000214
 8001478:	20000000 	.word	0x20000000
 800147c:	20000240 	.word	0x20000240
 8001480:	20000224 	.word	0x20000224
 8001484:	20000004 	.word	0x20000004
 8001488:	20000010 	.word	0x20000010
 800148c:	20000248 	.word	0x20000248
 8001490:	20000254 	.word	0x20000254
 8001494:	200002ac 	.word	0x200002ac
 8001498:	20000235 	.word	0x20000235

0800149c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d105      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		seconds++;
 80014ac:	4b59      	ldr	r3, [pc, #356]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a58      	ldr	r2, [pc, #352]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80014b4:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_RESET);
			}
		}
	}
}
 80014b6:	e0a7      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x16c>
	} else if (htim == &htim7) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a57      	ldr	r2, [pc, #348]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f040 80a3 	bne.w	8001608 <HAL_TIM_PeriodElapsedCallback+0x16c>
		period_count++;
 80014c2:	4b56      	ldr	r3, [pc, #344]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a54      	ldr	r2, [pc, #336]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014ca:	6013      	str	r3, [r2, #0]
		if (period_count >= 100) {
 80014cc:	4b53      	ldr	r3, [pc, #332]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b63      	cmp	r3, #99	@ 0x63
 80014d2:	d907      	bls.n	80014e4 <HAL_TIM_PeriodElapsedCallback+0x48>
			period_count = 0;
 80014d4:	4b51      	ldr	r3, [pc, #324]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
			decimal_second_count++;
 80014da:	4b51      	ldr	r3, [pc, #324]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80014e2:	6013      	str	r3, [r2, #0]
		vibration_tick_1ms(); // vibration ticker
 80014e4:	f001 fc4a 	bl	8002d7c <vibration_tick_1ms>
		if (!flash) {
 80014e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f083 0301 	eor.w	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8087 	beq.w	8001608 <HAL_TIM_PeriodElapsedCallback+0x16c>
			if (period_count == dutyCycle) {
 80014fa:	4b48      	ldr	r3, [pc, #288]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001628 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d13e      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0xe8>
				HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800150c:	4847      	ldr	r0, [pc, #284]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800150e:	f002 ffaf 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2110      	movs	r1, #16
 8001516:	4845      	ldr	r0, [pc, #276]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001518:	f002 ffaa 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	4842      	ldr	r0, [pc, #264]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001522:	f002 ffa5 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2108      	movs	r1, #8
 800152a:	4840      	ldr	r0, [pc, #256]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800152c:	f002 ffa0 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2120      	movs	r1, #32
 8001534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001538:	f002 ff9a 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SER_Data_IN_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001542:	483a      	ldr	r0, [pc, #232]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001544:	f002 ff94 	bl	8004470 <HAL_GPIO_WritePin>
				for (int i = 0; i < 16; i++) {
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e00c      	b.n	8001568 <HAL_TIM_PeriodElapsedCallback+0xcc>
					HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2101      	movs	r1, #1
 8001552:	4837      	ldr	r0, [pc, #220]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001554:	f002 ff8c 	bl	8004470 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2101      	movs	r1, #1
 800155c:	4834      	ldr	r0, [pc, #208]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800155e:	f002 ff87 	bl	8004470 <HAL_GPIO_WritePin>
				for (int i = 0; i < 16; i++) {
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	ddef      	ble.n	800154e <HAL_TIM_PeriodElapsedCallback+0xb2>
				HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	482e      	ldr	r0, [pc, #184]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001574:	f002 ff7c 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	482b      	ldr	r0, [pc, #172]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800157e:	f002 ff77 	bl	8004470 <HAL_GPIO_WritePin>
}
 8001582:	e041      	b.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x16c>
			} else if (period_count == 0) {
 8001584:	4b25      	ldr	r3, [pc, #148]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d13d      	bne.n	8001608 <HAL_TIM_PeriodElapsedCallback+0x16c>
				HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001594:	f002 ff6c 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2110      	movs	r1, #16
 800159c:	4823      	ldr	r0, [pc, #140]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800159e:	f002 ff67 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2120      	movs	r1, #32
 80015a6:	4821      	ldr	r0, [pc, #132]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015a8:	f002 ff62 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2108      	movs	r1, #8
 80015b0:	481e      	ldr	r0, [pc, #120]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015b2:	f002 ff5d 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2120      	movs	r1, #32
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015be:	f002 ff57 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, SER_Data_IN_Pin, GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015c8:	4818      	ldr	r0, [pc, #96]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015ca:	f002 ff51 	bl	8004470 <HAL_GPIO_WritePin>
				for (int i = 0; i < 16; i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	e00c      	b.n	80015ee <HAL_TIM_PeriodElapsedCallback+0x152>
					HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2101      	movs	r1, #1
 80015d8:	4815      	ldr	r0, [pc, #84]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015da:	f002 ff49 	bl	8004470 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	4813      	ldr	r0, [pc, #76]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80015e4:	f002 ff44 	bl	8004470 <HAL_GPIO_WritePin>
				for (int i = 0; i < 16; i++) {
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	ddef      	ble.n	80015d4 <HAL_TIM_PeriodElapsedCallback+0x138>
				HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2180      	movs	r1, #128	@ 0x80
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015fa:	f002 ff39 	bl	8004470 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	480a      	ldr	r0, [pc, #40]	@ (800162c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001604:	f002 ff34 	bl	8004470 <HAL_GPIO_WritePin>
}
 8001608:	bf00      	nop
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000164 	.word	0x20000164
 8001614:	20000200 	.word	0x20000200
 8001618:	200001b0 	.word	0x200001b0
 800161c:	20000204 	.word	0x20000204
 8001620:	20000210 	.word	0x20000210
 8001624:	20000245 	.word	0x20000245
 8001628:	2000026c 	.word	0x2000026c
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800

08001634 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	alarm_active = true;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RTC_AlarmAEventCallback+0x30>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
	alarm_start_tick = HAL_GetTick();
 8001642:	f001 fc5d 	bl	8002f00 <HAL_GetTick>
 8001646:	4603      	mov	r3, r0
 8001648:	4a07      	ldr	r2, [pc, #28]	@ (8001668 <HAL_RTC_AlarmAEventCallback+0x34>)
 800164a:	6013      	str	r3, [r2, #0]
	last_blink_tick = alarm_start_tick;
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <HAL_RTC_AlarmAEventCallback+0x34>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a06      	ldr	r2, [pc, #24]	@ (800166c <HAL_RTC_AlarmAEventCallback+0x38>)
 8001652:	6013      	str	r3, [r2, #0]
	last_beep_tick = alarm_start_tick;
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <HAL_RTC_AlarmAEventCallback+0x34>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <HAL_RTC_AlarmAEventCallback+0x3c>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000029c 	.word	0x2000029c
 8001668:	200002a0 	.word	0x200002a0
 800166c:	200002a4 	.word	0x200002a4
 8001670:	200002a8 	.word	0x200002a8

08001674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b095      	sub	sp, #84	@ 0x54
 8001678:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167a:	f001 fbe7 	bl	8002e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800167e:	f000 f9e7 	bl	8001a50 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  system_clock_setup();
 8001682:	f000 fd69 	bl	8002158 <system_clock_setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001686:	f000 fc65 	bl	8001f54 <MX_GPIO_Init>
  MX_RTC_Init();
 800168a:	f000 faa9 	bl	8001be0 <MX_RTC_Init>
  MX_TIM1_Init();
 800168e:	f000 fb39 	bl	8001d04 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001692:	f000 fbf1 	bl	8001e78 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001696:	f000 fc27 	bl	8001ee8 <MX_TIM7_Init>
  MX_ADC2_Init();
 800169a:	f000 fa43 	bl	8001b24 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  coast_lcd_init();
 800169e:	f7ff fa10 	bl	8000ac2 <coast_lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 80016a2:	489f      	ldr	r0, [pc, #636]	@ (8001920 <main+0x2ac>)
 80016a4:	f005 f80e 	bl	80066c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80016a8:	489e      	ldr	r0, [pc, #632]	@ (8001924 <main+0x2b0>)
 80016aa:	f005 f80b 	bl	80066c4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (countdown.countdown_enable) {
 80016ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001928 <main+0x2b4>)
 80016b0:	7a1b      	ldrb	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d014      	beq.n	80016e0 <main+0x6c>
	  	  runCountdown(&countdown, &lastCountdownSecond, seconds, htim1, enable_sound, enable_vibration);
 80016b6:	4b9d      	ldr	r3, [pc, #628]	@ (800192c <main+0x2b8>)
 80016b8:	681d      	ldr	r5, [r3, #0]
 80016ba:	4b9d      	ldr	r3, [pc, #628]	@ (8001930 <main+0x2bc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4a9d      	ldr	r2, [pc, #628]	@ (8001934 <main+0x2c0>)
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4c9d      	ldr	r4, [pc, #628]	@ (8001938 <main+0x2c4>)
 80016c4:	9213      	str	r2, [sp, #76]	@ 0x4c
 80016c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80016c8:	4668      	mov	r0, sp
 80016ca:	1d23      	adds	r3, r4, #4
 80016cc:	2248      	movs	r2, #72	@ 0x48
 80016ce:	4619      	mov	r1, r3
 80016d0:	f006 fba6 	bl	8007e20 <memcpy>
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	462a      	mov	r2, r5
 80016d8:	4998      	ldr	r1, [pc, #608]	@ (800193c <main+0x2c8>)
 80016da:	4893      	ldr	r0, [pc, #588]	@ (8001928 <main+0x2b4>)
 80016dc:	f7ff f800 	bl	80006e0 <runCountdown>
	  	  }
	  if (stopwatch.stopwatch_enable) {
 80016e0:	4b97      	ldr	r3, [pc, #604]	@ (8001940 <main+0x2cc>)
 80016e2:	7b1b      	ldrb	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <main+0x82>
		  runStopwatch(&stopwatch, &lastStopwatchSecond, seconds);
 80016e8:	4b90      	ldr	r3, [pc, #576]	@ (800192c <main+0x2b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4995      	ldr	r1, [pc, #596]	@ (8001944 <main+0x2d0>)
 80016f0:	4893      	ldr	r0, [pc, #588]	@ (8001940 <main+0x2cc>)
 80016f2:	f7ff f9a7 	bl	8000a44 <runStopwatch>
	  }

	  // Rings, Vibrates and Flashes for 5 seconds
	  if (alarm_active) {
 80016f6:	4b94      	ldr	r3, [pc, #592]	@ (8001948 <main+0x2d4>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d045      	beq.n	800178c <main+0x118>
	      if (HAL_GetTick() - alarm_start_tick >= 5000) {
 8001700:	f001 fbfe 	bl	8002f00 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	4b91      	ldr	r3, [pc, #580]	@ (800194c <main+0x2d8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001710:	4293      	cmp	r3, r2
 8001712:	d91a      	bls.n	800174a <main+0xd6>
	          alarm_active = false;
 8001714:	4b8c      	ldr	r3, [pc, #560]	@ (8001948 <main+0x2d4>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	          HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	2120      	movs	r1, #32
 800171e:	488c      	ldr	r0, [pc, #560]	@ (8001950 <main+0x2dc>)
 8001720:	f002 fea6 	bl	8004470 <HAL_GPIO_WritePin>
	          stop_sound(htim1);
 8001724:	4e84      	ldr	r6, [pc, #528]	@ (8001938 <main+0x2c4>)
 8001726:	466d      	mov	r5, sp
 8001728:	f106 0410 	add.w	r4, r6, #16
 800172c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800172e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800173c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001740:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001744:	f7fe fdec 	bl	8000320 <stop_sound>
 8001748:	e020      	b.n	800178c <main+0x118>
	      } else {
	          if (HAL_GetTick() - last_beep_tick >= 500) {
 800174a:	f001 fbd9 	bl	8002f00 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	4b80      	ldr	r3, [pc, #512]	@ (8001954 <main+0x2e0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800175a:	d317      	bcc.n	800178c <main+0x118>
	              play_note(460, 100, 50, htim1);
 800175c:	4c76      	ldr	r4, [pc, #472]	@ (8001938 <main+0x2c4>)
 800175e:	4668      	mov	r0, sp
 8001760:	1d23      	adds	r3, r4, #4
 8001762:	2248      	movs	r2, #72	@ 0x48
 8001764:	4619      	mov	r1, r3
 8001766:	f006 fb5b 	bl	8007e20 <memcpy>
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	2232      	movs	r2, #50	@ 0x32
 800176e:	2164      	movs	r1, #100	@ 0x64
 8001770:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8001774:	f7fe fde6 	bl	8000344 <play_note>
	              vibration_call(32);
 8001778:	2020      	movs	r0, #32
 800177a:	f001 fabb 	bl	8002cf4 <vibration_call>
	              flash_on();
 800177e:	f000 fdd9 	bl	8002334 <flash_on>
	              last_beep_tick = HAL_GetTick();
 8001782:	f001 fbbd 	bl	8002f00 <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	4a72      	ldr	r2, [pc, #456]	@ (8001954 <main+0x2e0>)
 800178a:	6013      	str	r3, [r2, #0]
	          }
	      }
	  }

	  if (currentScreen != previousScreen || timeFormatChanged || screenNeedsRefresh) {
 800178c:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <main+0x2e4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b72      	ldr	r3, [pc, #456]	@ (800195c <main+0x2e8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <main+0x138>
 800179c:	4b70      	ldr	r3, [pc, #448]	@ (8001960 <main+0x2ec>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <main+0x138>
 80017a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <main+0x2f0>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d064      	beq.n	8001876 <main+0x202>
			LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fa21 	bl	8000bf4 <LCD_SendCmd>
			coast_asm_delay(2);
 80017b2:	2002      	movs	r0, #2
 80017b4:	f7fe fd14 	bl	80001e0 <coast_asm_delay>

			switch (currentScreen) {
 80017b8:	4b67      	ldr	r3, [pc, #412]	@ (8001958 <main+0x2e4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	3b01      	subs	r3, #1
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d848      	bhi.n	8001856 <main+0x1e2>
 80017c4:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <main+0x158>)
 80017c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ca:	bf00      	nop
 80017cc:	080017f1 	.word	0x080017f1
 80017d0:	080017ff 	.word	0x080017ff
 80017d4:	0800180d 	.word	0x0800180d
 80017d8:	0800181b 	.word	0x0800181b
 80017dc:	08001833 	.word	0x08001833
 80017e0:	08001821 	.word	0x08001821
 80017e4:	0800182d 	.word	0x0800182d
 80017e8:	08001841 	.word	0x08001841
 80017ec:	0800184d 	.word	0x0800184d
				case HOME:
					homePage(); // draw layout only
 80017f0:	f7fe fdd6 	bl	80003a0 <homePage>
					updateTime(1, 4);
 80017f4:	2104      	movs	r1, #4
 80017f6:	2001      	movs	r0, #1
 80017f8:	f001 f81c 	bl	8002834 <updateTime>
					break;
 80017fc:	e02b      	b.n	8001856 <main+0x1e2>
				case TIME:
					timePage();
 80017fe:	f000 ffc3 	bl	8002788 <timePage>
					updateTime(0, 4);
 8001802:	2104      	movs	r1, #4
 8001804:	2000      	movs	r0, #0
 8001806:	f001 f815 	bl	8002834 <updateTime>
					break;
 800180a:	e024      	b.n	8001856 <main+0x1e2>
				case ALARM:
					alarmPage();
 800180c:	f001 f87c 	bl	8002908 <alarmPage>
					updateAlarm(1, 0);
 8001810:	2100      	movs	r1, #0
 8001812:	2001      	movs	r0, #1
 8001814:	f001 f8d6 	bl	80029c4 <updateAlarm>
					break;
 8001818:	e01d      	b.n	8001856 <main+0x1e2>
				case ALARM_SET:
				    alarmConfirm();
 800181a:	f001 f9c1 	bl	8002ba0 <alarmConfirm>
				    break;
 800181e:	e01a      	b.n	8001856 <main+0x1e2>
				case OPT:
					OPTpage(ldrValue);
 8001820:	4b51      	ldr	r3, [pc, #324]	@ (8001968 <main+0x2f4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fde5 	bl	80003f4 <OPTpage>
					break;
 800182a:	e014      	b.n	8001856 <main+0x1e2>
				case SETTINGS:
					settingsPage();
 800182c:	f000 fd02 	bl	8002234 <settingsPage>
					break;
 8001830:	e011      	b.n	8001856 <main+0x1e2>
				case FITNESS:
					fitnessPage();
 8001832:	f7fe fe1f 	bl	8000474 <fitnessPage>
					updateFitness(1, 0);
 8001836:	2100      	movs	r1, #0
 8001838:	2001      	movs	r0, #1
 800183a:	f7fe fe5f 	bl	80004fc <updateFitness>
					break;
 800183e:	e00a      	b.n	8001856 <main+0x1e2>
				case COUNTDOWN:
					countdownPage(countdown);
 8001840:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <main+0x2b4>)
 8001842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001846:	f7fe feaf 	bl	80005a8 <countdownPage>
					break;
 800184a:	e004      	b.n	8001856 <main+0x1e2>
				case STOPWATCH:
					stopwatchPage(stopwatch);
 800184c:	4b3c      	ldr	r3, [pc, #240]	@ (8001940 <main+0x2cc>)
 800184e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001850:	f7ff f860 	bl	8000914 <stopwatchPage>
					break;
 8001854:	bf00      	nop

			}
			previousScreen = currentScreen;
 8001856:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <main+0x2e4>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	4b3f      	ldr	r3, [pc, #252]	@ (800195c <main+0x2e8>)
 800185e:	701a      	strb	r2, [r3, #0]
			screenNeedsRefresh = false;  // clear the flags
 8001860:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <main+0x2f0>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
			timeFormatChanged = false;  // clear the flag
 8001866:	4b3e      	ldr	r3, [pc, #248]	@ (8001960 <main+0x2ec>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 800186c:	f001 fb48 	bl	8002f00 <HAL_GetTick>
 8001870:	4603      	mov	r3, r0
 8001872:	4a3e      	ldr	r2, [pc, #248]	@ (800196c <main+0x2f8>)
 8001874:	6013      	str	r3, [r2, #0]

	  }

	  /* UPDATE TIME EVERY SECOND ELAPSED */
	  if ((HAL_GetTick() - last_tick) >= 1000) {
 8001876:	f001 fb43 	bl	8002f00 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	4b3b      	ldr	r3, [pc, #236]	@ (800196c <main+0x2f8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001886:	d37c      	bcc.n	8001982 <main+0x30e>
	  	switch (currentScreen) {
 8001888:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <main+0x2e4>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	2b08      	cmp	r3, #8
 8001892:	d86f      	bhi.n	8001974 <main+0x300>
 8001894:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <main+0x228>)
 8001896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189a:	bf00      	nop
 800189c:	080018c1 	.word	0x080018c1
 80018a0:	080018cb 	.word	0x080018cb
 80018a4:	080018d5 	.word	0x080018d5
 80018a8:	08001975 	.word	0x08001975
 80018ac:	080018df 	.word	0x080018df
 80018b0:	08001915 	.word	0x08001915
 80018b4:	08001975 	.word	0x08001975
 80018b8:	080018e9 	.word	0x080018e9
 80018bc:	080018f5 	.word	0x080018f5
	  		case HOME:
	  			updateTime(1, 4);  // row 1 (second line), column 4
 80018c0:	2104      	movs	r1, #4
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 ffb6 	bl	8002834 <updateTime>
	  			break;
 80018c8:	e055      	b.n	8001976 <main+0x302>
	  		case TIME:
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
 80018ca:	2104      	movs	r1, #4
 80018cc:	2000      	movs	r0, #0
 80018ce:	f000 ffb1 	bl	8002834 <updateTime>
	  			break;
 80018d2:	e050      	b.n	8001976 <main+0x302>
	  		case ALARM:
	  			updateAlarm(1, 0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2001      	movs	r0, #1
 80018d8:	f001 f874 	bl	80029c4 <updateAlarm>
	  			break;
 80018dc:	e04b      	b.n	8001976 <main+0x302>
	  		case FITNESS:
	  			 updateFitness(1, 0);
 80018de:	2100      	movs	r1, #0
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7fe fe0b 	bl	80004fc <updateFitness>
	  			 break;
 80018e6:	e046      	b.n	8001976 <main+0x302>
	  		case COUNTDOWN:
				updateCountdown(countdown);
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <main+0x2b4>)
 80018ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018ee:	f7fe fec5 	bl	800067c <updateCountdown>
				break;
 80018f2:	e040      	b.n	8001976 <main+0x302>
			case STOPWATCH:
				if (lapStopwatchFlag) {
 80018f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <main+0x2fc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <main+0x296>
					lapStopwatch(stopwatch);
 80018fc:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <main+0x2cc>)
 80018fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001900:	f7ff f82e 	bl	8000960 <lapStopwatch>
					lapStopwatchFlag = false;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <main+0x2fc>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
				}
				updateStopwatch(stopwatch);
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <main+0x2cc>)
 800190c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800190e:	f7ff f879 	bl	8000a04 <updateStopwatch>
				break;
 8001912:	e030      	b.n	8001976 <main+0x302>
			case OPT:
				updateOpt(ldrValue);
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <main+0x2f4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd91 	bl	8000440 <updateOpt>
				break;
 800191e:	e02a      	b.n	8001976 <main+0x302>
 8001920:	20000164 	.word	0x20000164
 8001924:	200001b0 	.word	0x200001b0
 8001928:	20000248 	.word	0x20000248
 800192c:	20000200 	.word	0x20000200
 8001930:	20000008 	.word	0x20000008
 8001934:	20000009 	.word	0x20000009
 8001938:	20000118 	.word	0x20000118
 800193c:	20000208 	.word	0x20000208
 8001940:	20000254 	.word	0x20000254
 8001944:	2000020c 	.word	0x2000020c
 8001948:	2000029c 	.word	0x2000029c
 800194c:	200002a0 	.word	0x200002a0
 8001950:	48000400 	.word	0x48000400
 8001954:	200002a8 	.word	0x200002a8
 8001958:	20000010 	.word	0x20000010
 800195c:	200002ac 	.word	0x200002ac
 8001960:	20000234 	.word	0x20000234
 8001964:	20000235 	.word	0x20000235
 8001968:	20000268 	.word	0x20000268
 800196c:	200001fc 	.word	0x200001fc
 8001970:	20000264 	.word	0x20000264
	  		default:
	  			break;
 8001974:	bf00      	nop
	  	}
	  	last_tick += 1000;
 8001976:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <main+0x3b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800197e:	4a2b      	ldr	r2, [pc, #172]	@ (8001a2c <main+0x3b8>)
 8001980:	6013      	str	r3, [r2, #0]
	  }
	  /* ldr */
	  HAL_ADC_Start(&hadc2);
 8001982:	482b      	ldr	r0, [pc, #172]	@ (8001a30 <main+0x3bc>)
 8001984:	f001 fce6 	bl	8003354 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 1);
 8001988:	2101      	movs	r1, #1
 800198a:	4829      	ldr	r0, [pc, #164]	@ (8001a30 <main+0x3bc>)
 800198c:	f001 fdf8 	bl	8003580 <HAL_ADC_PollForConversion>
	  ldrValue = HAL_ADC_GetValue(&hadc2);
 8001990:	4827      	ldr	r0, [pc, #156]	@ (8001a30 <main+0x3bc>)
 8001992:	f001 fef7 	bl	8003784 <HAL_ADC_GetValue>
 8001996:	4603      	mov	r3, r0
 8001998:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <main+0x3c0>)
 800199a:	6013      	str	r3, [r2, #0]

	  // Exponential Moving Average Filter
	  ema = alpha * ldrValue + (1 - alpha) * ema;
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <main+0x3c0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <main+0x3c4>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <main+0x3c4>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019c0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <main+0x3c8>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <main+0x3c8>)
 80019d0:	edc3 7a00 	vstr	s15, [r3]

	  if (ema >= 600) {
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <main+0x3c8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001a40 <main+0x3cc>
 80019de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e6:	db03      	blt.n	80019f0 <main+0x37c>
		  dutyCycle = 0;
 80019e8:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <main+0x3d0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e65e      	b.n	80016ae <main+0x3a>
	  } else if (ema <= 100) {
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <main+0x3c8>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a48 <main+0x3d4>
 80019fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d803      	bhi.n	8001a0c <main+0x398>
		  dutyCycle = 100;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <main+0x3d0>)
 8001a06:	2264      	movs	r2, #100	@ 0x64
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e650      	b.n	80016ae <main+0x3a>
	  } else {
		  dutyCycle = (600 - (uint32_t)ema) / 5;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <main+0x3c8>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a16:	ee17 3a90 	vmov	r3, s15
 8001a1a:	f5c3 7316 	rsb	r3, r3, #600	@ 0x258
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <main+0x3d8>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <main+0x3d0>)
 8001a28:	6013      	str	r3, [r2, #0]
	  if (countdown.countdown_enable) {
 8001a2a:	e640      	b.n	80016ae <main+0x3a>
 8001a2c:	200001fc 	.word	0x200001fc
 8001a30:	200000a8 	.word	0x200000a8
 8001a34:	20000268 	.word	0x20000268
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000270 	.word	0x20000270
 8001a40:	44160000 	.word	0x44160000
 8001a44:	2000026c 	.word	0x2000026c
 8001a48:	42c80000 	.word	0x42c80000
 8001a4c:	cccccccd 	.word	0xcccccccd

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0a6      	sub	sp, #152	@ 0x98
 8001a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a56:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001a5a:	2228      	movs	r2, #40	@ 0x28
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f006 f9aa 	bl	8007db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2258      	movs	r2, #88	@ 0x58
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f006 f99c 	bl	8007db8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001a80:	230a      	movs	r3, #10
 8001a82:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a84:	2301      	movs	r3, #1
 8001a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aa2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001aa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fd0b 	bl	80044d0 <HAL_RCC_OscConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001ac0:	f000 fbb1 	bl	8002226 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ada:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fd19 	bl	8005518 <HAL_RCC_ClockConfig>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001aec:	f000 fb9b 	bl	8002226 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1
 8001af0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <SystemClock_Config+0xd0>)
 8001af2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001af4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fec8 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b12:	f000 fb88 	bl	8002226 <Error_Handler>
  }
}
 8001b16:	bf00      	nop
 8001b18:	3798      	adds	r7, #152	@ 0x98
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	00011080 	.word	0x00011080

08001b24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001b3a:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b3c:	4a27      	ldr	r2, [pc, #156]	@ (8001bdc <MX_ADC2_Init+0xb8>)
 8001b3e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b40:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b46:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b80:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b92:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001b94:	f001 f9e4 	bl	8002f60 <HAL_ADC_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8001b9e:	f000 fb42 	bl	8002226 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <MX_ADC2_Init+0xb4>)
 8001bc0:	f001 fdee 	bl	80037a0 <HAL_ADC_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001bca:	f000 fb2c 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200000a8 	.word	0x200000a8
 8001bdc:	50000100 	.word	0x50000100

08001be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001bfa:	4a40      	ldr	r2, [pc, #256]	@ (8001cfc <MX_RTC_Init+0x11c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c04:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c06:	227f      	movs	r2, #127	@ 0x7f
 8001c08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c0c:	22ff      	movs	r2, #255	@ 0xff
 8001c0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c10:	4b39      	ldr	r3, [pc, #228]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c16:	4b38      	ldr	r3, [pc, #224]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c1c:	4b36      	ldr	r3, [pc, #216]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c22:	4835      	ldr	r0, [pc, #212]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c24:	f004 f856 	bl	8005cd4 <HAL_RTC_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001c2e:	f000 fafa 	bl	8002226 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8001c32:	2308      	movs	r3, #8
 8001c34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x34;
 8001c36:	2334      	movs	r3, #52	@ 0x34
 8001c38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	482a      	ldr	r0, [pc, #168]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c4e:	f004 f8c4 	bl	8005dda <HAL_RTC_SetTime>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001c58:	f000 fae5 	bl	8002226 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8001c60:	2308      	movs	r3, #8
 8001c62:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x3;
 8001c64:	2303      	movs	r3, #3
 8001c66:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x25;
 8001c68:	2325      	movs	r3, #37	@ 0x25
 8001c6a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4619      	mov	r1, r3
 8001c72:	4821      	ldr	r0, [pc, #132]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001c74:	f004 f9a9 	bl	8005fca <HAL_RTC_SetDate>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001c7e:	f000 fad2 	bl	8002226 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c82:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c88:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001ca8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001cac:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cae:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <MX_RTC_Init+0x120>)
 8001cce:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <MX_RTC_Init+0x118>)
 8001cd0:	f004 fa4e 	bl	8006170 <HAL_RTC_SetAlarm_IT>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_RTC_Init+0xfe>
  {
    Error_Handler();
 8001cda:	f000 faa4 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	2029      	movs	r0, #41	@ 0x29
 8001ce4:	f002 f9eb 	bl	80040be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001ce8:	2029      	movs	r0, #41	@ 0x29
 8001cea:	f002 fa04 	bl	80040f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200000f8 	.word	0x200000f8
 8001cfc:	40002800 	.word	0x40002800
 8001d00:	20000274 	.word	0x20000274

08001d04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b09a      	sub	sp, #104	@ 0x68
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	615a      	str	r2, [r3, #20]
 8001d36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	222c      	movs	r2, #44	@ 0x2c
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f006 f83a 	bl	8007db8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d44:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d46:	4a4b      	ldr	r2, [pc, #300]	@ (8001e74 <MX_TIM1_Init+0x170>)
 8001d48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000 -1;
 8001d4a:	4b49      	ldr	r3, [pc, #292]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b47      	ldr	r3, [pc, #284]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 296;
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d5a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8001d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d66:	4b42      	ldr	r3, [pc, #264]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b40      	ldr	r3, [pc, #256]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d72:	483f      	ldr	r0, [pc, #252]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d74:	f004 fc4e 	bl	8006614 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001d7e:	f000 fa52 	bl	8002226 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d86:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d88:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4838      	ldr	r0, [pc, #224]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001d90:	f005 f928 	bl	8006fe4 <HAL_TIM_ConfigClockSource>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001d9a:	f000 fa44 	bl	8002226 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d9e:	4834      	ldr	r0, [pc, #208]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001da0:	f004 fd00 	bl	80067a4 <HAL_TIM_PWM_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001daa:	f000 fa3c 	bl	8002226 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001dc2:	f005 fe71 	bl	8007aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001dcc:	f000 fa2b 	bl	8002226 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd0:	2360      	movs	r3, #96	@ 0x60
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	481e      	ldr	r0, [pc, #120]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001df6:	f004 ffe1 	bl	8006dbc <HAL_TIM_PWM_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e00:	f000 fa11 	bl	8002226 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e08:	2208      	movs	r2, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4818      	ldr	r0, [pc, #96]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001e0e:	f004 ffd5 	bl	8006dbc <HAL_TIM_PWM_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e18:	f000 fa05 	bl	8002226 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001e52:	f005 feb5 	bl	8007bc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001e5c:	f000 f9e3 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e60:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <MX_TIM1_Init+0x16c>)
 8001e62:	f000 fba7 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8001e66:	bf00      	nop
 8001e68:	3768      	adds	r7, #104	@ 0x68
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000118 	.word	0x20000118
 8001e74:	40012c00 	.word	0x40012c00

08001e78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001e8a:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <MX_TIM6_Init+0x6c>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001e90:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e94:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001e9e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001ea2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eaa:	480d      	ldr	r0, [pc, #52]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001eac:	f004 fbb2 	bl	8006614 <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001eb6:	f000 f9b6 	bl	8002226 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <MX_TIM6_Init+0x68>)
 8001ec8:	f005 fdee 	bl	8007aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001ed2:	f000 f9a8 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000164 	.word	0x20000164
 8001ee4:	40001000 	.word	0x40001000

08001ee8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001efa:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <MX_TIM7_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f04:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 71;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f0e:	2247      	movs	r2, #71	@ 0x47
 8001f10:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f1a:	f004 fb7b 	bl	8006614 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001f24:	f000 f97f 	bl	8002226 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	@ (8001f4c <MX_TIM7_Init+0x64>)
 8001f36:	f005 fdb7 	bl	8007aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f40:	f000 f971 	bl	8002226 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200001b0 	.word	0x200001b0
 8001f50:	40001400 	.word	0x40001400

08001f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b77      	ldr	r3, [pc, #476]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	4a76      	ldr	r2, [pc, #472]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f74:	6153      	str	r3, [r2, #20]
 8001f76:	4b74      	ldr	r3, [pc, #464]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f82:	4b71      	ldr	r3, [pc, #452]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4a70      	ldr	r2, [pc, #448]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f8c:	6153      	str	r3, [r2, #20]
 8001f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa4:	6153      	str	r3, [r2, #20]
 8001fa6:	4b68      	ldr	r3, [pc, #416]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b65      	ldr	r3, [pc, #404]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	4a64      	ldr	r2, [pc, #400]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fbc:	6153      	str	r3, [r2, #20]
 8001fbe:	4b62      	ldr	r3, [pc, #392]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fd4:	6153      	str	r3, [r2, #20]
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <MX_GPIO_Init+0x1f4>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f640 71e1 	movw	r1, #4065	@ 0xfe1
 8001fe8:	4858      	ldr	r0, [pc, #352]	@ (800214c <MX_GPIO_Init+0x1f8>)
 8001fea:	f002 fa41 	bl	8004470 <HAL_GPIO_WritePin>
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|COILB_Pin|Control_RS_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f249 0120 	movw	r1, #36896	@ 0x9020
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff8:	f002 fa3a 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D4_Pin
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f248 41bc 	movw	r1, #33980	@ 0x84bc
 8002002:	4853      	ldr	r0, [pc, #332]	@ (8002150 <MX_GPIO_Init+0x1fc>)
 8002004:	f002 fa34 	bl	8004470 <HAL_GPIO_WritePin>
                          |LED_D2_Pin|LED_D3_Pin|RCLK_Latch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Control_E_GPIO_Port, Control_E_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	2104      	movs	r1, #4
 800200c:	4851      	ldr	r0, [pc, #324]	@ (8002154 <MX_GPIO_Init+0x200>)
 800200e:	f002 fa2f 	bl	8004470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002012:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002018:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4848      	ldr	r0, [pc, #288]	@ (800214c <MX_GPIO_Init+0x1f8>)
 800202a:	f002 f87f 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin COILA_Pin Control_RW_Pin COILC_Pin
                           Data_D4_Pin Data_D5_Pin Data_D6_Pin Data_D7_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 800202e:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 8002032:	617b      	str	r3, [r7, #20]
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4841      	ldr	r0, [pc, #260]	@ (800214c <MX_GPIO_Init+0x1f8>)
 8002048:	f002 f870 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800204c:	2312      	movs	r3, #18
 800204e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002050:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002064:	f002 f862 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002068:	230c      	movs	r3, #12
 800206a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002078:	2307      	movs	r3, #7
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002086:	f002 f851 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin COILB_Pin Control_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|COILB_Pin|Control_RS_Pin;
 800208a:	f249 0320 	movw	r3, #36896	@ 0x9020
 800208e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020a6:	f002 f841 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 80020aa:	2301      	movs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80020ae:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4824      	ldr	r0, [pc, #144]	@ (8002150 <MX_GPIO_Init+0x1fc>)
 80020c0:	f002 f834 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pins : COILD_Pin LED_D1_Pin SER_Data_IN_Pin LED_D4_Pin
                           LED_D2_Pin LED_D3_Pin RCLK_Latch_Pin */
  GPIO_InitStruct.Pin = COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D4_Pin
 80020c4:	f248 43bc 	movw	r3, #33980	@ 0x84bc
 80020c8:	617b      	str	r3, [r7, #20]
                          |LED_D2_Pin|LED_D3_Pin|RCLK_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ca:	2301      	movs	r3, #1
 80020cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	481c      	ldr	r0, [pc, #112]	@ (8002150 <MX_GPIO_Init+0x1fc>)
 80020de:	f002 f825 	bl	800412c <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_E_Pin */
  GPIO_InitStruct.Pin = Control_E_Pin;
 80020e2:	2304      	movs	r3, #4
 80020e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_E_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	4816      	ldr	r0, [pc, #88]	@ (8002154 <MX_GPIO_Init+0x200>)
 80020fa:	f002 f817 	bl	800412c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2006      	movs	r0, #6
 8002104:	f001 ffdb 	bl	80040be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002108:	2006      	movs	r0, #6
 800210a:	f001 fff4 	bl	80040f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2007      	movs	r0, #7
 8002114:	f001 ffd3 	bl	80040be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002118:	2007      	movs	r0, #7
 800211a:	f001 ffec 	bl	80040f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	200a      	movs	r0, #10
 8002124:	f001 ffcb 	bl	80040be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002128:	200a      	movs	r0, #10
 800212a:	f001 ffe4 	bl	80040f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	2028      	movs	r0, #40	@ 0x28
 8002134:	f001 ffc3 	bl	80040be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002138:	2028      	movs	r0, #40	@ 0x28
 800213a:	f001 ffdc 	bl	80040f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800213e:	bf00      	nop
 8002140:	3728      	adds	r7, #40	@ 0x28
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	48000800 	.word	0x48000800
 8002150:	48000400 	.word	0x48000400
 8002154:	48000c00 	.word	0x48000c00

08002158 <system_clock_setup>:

/* USER CODE BEGIN 4 */
void system_clock_setup() {
 8002158:	b580      	push	{r7, lr}
 800215a:	b0a6      	sub	sp, #152	@ 0x98
 800215c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800215e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002162:	2228      	movs	r2, #40	@ 0x28
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fe26 	bl	8007db8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800216c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2258      	movs	r2, #88	@ 0x58
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f005 fe18 	bl	8007db8 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002188:	2306      	movs	r3, #6
 800218a:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800218c:	2301      	movs	r3, #1
 800218e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002190:	2310      	movs	r3, #16
 8002192:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002196:	2301      	movs	r3, #1
 8002198:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a0:	2302      	movs	r3, #2
 80021a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80021b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021bc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80021c0:	4618      	mov	r0, r3
 80021c2:	f002 f985 	bl	80044d0 <HAL_RCC_OscConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <system_clock_setup+0x78>
	{
	Error_Handler();
 80021cc:	f000 f82b 	bl	8002226 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d0:	230f      	movs	r3, #15
 80021d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d4:	2302      	movs	r3, #2
 80021d6:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d8:	2300      	movs	r3, #0
 80021da:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e0:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021e6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80021ea:	2101      	movs	r1, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 f993 	bl	8005518 <HAL_RCC_ClockConfig>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <system_clock_setup+0xa4>
	{
	Error_Handler();
 80021f8:	f000 f815 	bl	8002226 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 80021fc:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8002200:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002206:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002208:	2300      	movs	r3, #0
 800220a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fb44 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <system_clock_setup+0xc6>
	{
	Error_Handler();
 800221a:	f000 f804 	bl	8002226 <Error_Handler>
	}
}
 800221e:	bf00      	nop
 8002220:	3798      	adds	r7, #152	@ 0x98
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222a:	b672      	cpsid	i
}
 800222c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222e:	bf00      	nop
 8002230:	e7fd      	b.n	800222e <Error_Handler+0x8>
	...

08002234 <settingsPage>:

extern bool enable_sound;
extern bool enable_vibration;
extern volatile bool flash;

void settingsPage() {
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8002238:	2001      	movs	r0, #1
 800223a:	f7fe fcdb 	bl	8000bf4 <LCD_SendCmd>

	LCD_SendStr("SOUND:");
 800223e:	4816      	ldr	r0, [pc, #88]	@ (8002298 <settingsPage+0x64>)
 8002240:	f7fe fd14 	bl	8000c6c <LCD_SendStr>
	LCD_SendStr(enable_sound ? "ON " : "OFF");
 8002244:	4b15      	ldr	r3, [pc, #84]	@ (800229c <settingsPage+0x68>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <settingsPage+0x1c>
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <settingsPage+0x6c>)
 800224e:	e000      	b.n	8002252 <settingsPage+0x1e>
 8002250:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <settingsPage+0x70>)
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe fd0a 	bl	8000c6c <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 8002258:	20c0      	movs	r0, #192	@ 0xc0
 800225a:	f7fe fccb 	bl	8000bf4 <LCD_SendCmd>

	LCD_SendStr("HAPT:");
 800225e:	4812      	ldr	r0, [pc, #72]	@ (80022a8 <settingsPage+0x74>)
 8002260:	f7fe fd04 	bl	8000c6c <LCD_SendStr>
	LCD_SendStr(enable_vibration ? "ON" : "OF");
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <settingsPage+0x78>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <settingsPage+0x3c>
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <settingsPage+0x7c>)
 800226e:	e000      	b.n	8002272 <settingsPage+0x3e>
 8002270:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <settingsPage+0x80>)
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fcfa 	bl	8000c6c <LCD_SendStr>

	LCD_SendStr("|FLASH:");
 8002278:	480f      	ldr	r0, [pc, #60]	@ (80022b8 <settingsPage+0x84>)
 800227a:	f7fe fcf7 	bl	8000c6c <LCD_SendStr>
	LCD_SendStr(flash ? "ON" : "OFF");
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <settingsPage+0x88>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <settingsPage+0x58>
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <settingsPage+0x7c>)
 800228a:	e000      	b.n	800228e <settingsPage+0x5a>
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <settingsPage+0x70>)
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fcec 	bl	8000c6c <LCD_SendStr>
}
 8002294:	bf00      	nop
 8002296:	bd80      	pop	{r7, pc}
 8002298:	08008790 	.word	0x08008790
 800229c:	20000008 	.word	0x20000008
 80022a0:	08008798 	.word	0x08008798
 80022a4:	0800879c 	.word	0x0800879c
 80022a8:	080087a0 	.word	0x080087a0
 80022ac:	20000009 	.word	0x20000009
 80022b0:	080087a8 	.word	0x080087a8
 80022b4:	080087ac 	.word	0x080087ac
 80022b8:	080087b0 	.word	0x080087b0
 80022bc:	20000245 	.word	0x20000245

080022c0 <switchLedBar>:
 * Flashlight feature control
 *
 * */

/* switch D5–D20 */
static void switchLedBar(uint16_t value) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	80fb      	strh	r3, [r7, #6]
    for (int i = 15; i >= 0; --i) {
 80022ca:	230f      	movs	r3, #15
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e01b      	b.n	8002308 <switchLedBar+0x48>
        GPIO_PinState bit = (value & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SER_Data_IN_GPIO_Port, SER_Data_IN_Pin, bit);
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022e8:	4810      	ldr	r0, [pc, #64]	@ (800232c <switchLedBar+0x6c>)
 80022ea:	f002 f8c1 	bl	8004470 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	2101      	movs	r1, #1
 80022f2:	480f      	ldr	r0, [pc, #60]	@ (8002330 <switchLedBar+0x70>)
 80022f4:	f002 f8bc 	bl	8004470 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2101      	movs	r1, #1
 80022fc:	480c      	ldr	r0, [pc, #48]	@ (8002330 <switchLedBar+0x70>)
 80022fe:	f002 f8b7 	bl	8004470 <HAL_GPIO_WritePin>
    for (int i = 15; i >= 0; --i) {
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3b01      	subs	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	dae0      	bge.n	80022d0 <switchLedBar+0x10>
    }
    HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	4806      	ldr	r0, [pc, #24]	@ (800232c <switchLedBar+0x6c>)
 8002314:	f002 f8ac 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <switchLedBar+0x6c>)
 800231e:	f002 f8a7 	bl	8004470 <HAL_GPIO_WritePin>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	48000400 	.word	0x48000400
 8002330:	48000800 	.word	0x48000800

08002334 <flash_on>:

void flash_on(void) {
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
    /* Direct LEDs D1–D4 + LD2 */
    HAL_GPIO_WritePin(LED_D1_GPIO_Port,   LED_D1_Pin,   GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800233e:	480f      	ldr	r0, [pc, #60]	@ (800237c <flash_on+0x48>)
 8002340:	f002 f896 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D2_GPIO_Port,   LED_D2_Pin,   GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	2110      	movs	r1, #16
 8002348:	480c      	ldr	r0, [pc, #48]	@ (800237c <flash_on+0x48>)
 800234a:	f002 f891 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D3_GPIO_Port,   LED_D3_Pin,   GPIO_PIN_SET);
 800234e:	2201      	movs	r2, #1
 8002350:	2120      	movs	r1, #32
 8002352:	480a      	ldr	r0, [pc, #40]	@ (800237c <flash_on+0x48>)
 8002354:	f002 f88c 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET); // D4 on this board
 8002358:	2201      	movs	r2, #1
 800235a:	2108      	movs	r1, #8
 800235c:	4807      	ldr	r0, [pc, #28]	@ (800237c <flash_on+0x48>)
 800235e:	f002 f887 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port,      LD2_Pin,      GPIO_PIN_SET);
 8002362:	2201      	movs	r2, #1
 8002364:	2120      	movs	r1, #32
 8002366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800236a:	f002 f881 	bl	8004470 <HAL_GPIO_WritePin>

    // led bar (D5–D20) all ON
    switchLedBar(0xFFFF);
 800236e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002372:	f7ff ffa5 	bl	80022c0 <switchLedBar>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	48000400 	.word	0x48000400

08002380 <flash_off>:

void flash_off(void) {
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_D1_GPIO_Port,   LED_D1_Pin,   GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800238a:	480e      	ldr	r0, [pc, #56]	@ (80023c4 <flash_off+0x44>)
 800238c:	f002 f870 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D2_GPIO_Port,   LED_D2_Pin,   GPIO_PIN_RESET);
 8002390:	2200      	movs	r2, #0
 8002392:	2110      	movs	r1, #16
 8002394:	480b      	ldr	r0, [pc, #44]	@ (80023c4 <flash_off+0x44>)
 8002396:	f002 f86b 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D3_GPIO_Port,   LED_D3_Pin,   GPIO_PIN_RESET);
 800239a:	2200      	movs	r2, #0
 800239c:	2120      	movs	r1, #32
 800239e:	4809      	ldr	r0, [pc, #36]	@ (80023c4 <flash_off+0x44>)
 80023a0:	f002 f866 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	2108      	movs	r1, #8
 80023a8:	4806      	ldr	r0, [pc, #24]	@ (80023c4 <flash_off+0x44>)
 80023aa:	f002 f861 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port,      LD2_Pin,      GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b6:	f002 f85b 	bl	8004470 <HAL_GPIO_WritePin>

    // D5–D20 all OFF
    switchLedBar(0x0000);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7ff ff80 	bl	80022c0 <switchLedBar>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	48000400 	.word	0x48000400

080023c8 <flash_state>:

/* Apply current state of flash */
void flash_state(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
    if (flash) flash_on(); else flash_off();
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <flash_state+0x1c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <flash_state+0x14>
 80023d6:	f7ff ffad 	bl	8002334 <flash_on>
}
 80023da:	e001      	b.n	80023e0 <flash_state+0x18>
    if (flash) flash_on(); else flash_off();
 80023dc:	f7ff ffd0 	bl	8002380 <flash_off>
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000245 	.word	0x20000245

080023e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <HAL_MspInit+0x44>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4a0e      	ldr	r2, [pc, #56]	@ (800242c <HAL_MspInit+0x44>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6193      	str	r3, [r2, #24]
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <HAL_MspInit+0x44>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_MspInit+0x44>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a08      	ldr	r2, [pc, #32]	@ (800242c <HAL_MspInit+0x44>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_MspInit+0x44>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800241e:	2007      	movs	r0, #7
 8002420:	f001 fe42 	bl	80040a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	@ (80024a4 <HAL_ADC_MspInit+0x74>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d123      	bne.n	800249a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_ADC_MspInit+0x78>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <HAL_ADC_MspInit+0x78>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245c:	6153      	str	r3, [r2, #20]
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_ADC_MspInit+0x78>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <HAL_ADC_MspInit+0x78>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	4a0e      	ldr	r2, [pc, #56]	@ (80024a8 <HAL_ADC_MspInit+0x78>)
 8002470:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002474:	6153      	str	r3, [r2, #20]
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <HAL_ADC_MspInit+0x78>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002482:	2310      	movs	r3, #16
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002486:	2303      	movs	r3, #3
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	@ (80024ac <HAL_ADC_MspInit+0x7c>)
 8002496:	f001 fe49 	bl	800412c <HAL_GPIO_Init>

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 800249a:	bf00      	nop
 800249c:	3728      	adds	r7, #40	@ 0x28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	50000100 	.word	0x50000100
 80024a8:	40021000 	.word	0x40021000
 80024ac:	48000800 	.word	0x48000800

080024b0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_RTC_MspInit+0x50>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d119      	bne.n	80024f6 <HAL_RTC_MspInit+0x46>
 80024c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024d0:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_RTC_MspInit+0x54>)
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	461a      	mov	r2, r3
 80024e2:	2301      	movs	r3, #1
 80024e4:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2029      	movs	r0, #41	@ 0x29
 80024ec:	f001 fde7 	bl	80040be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80024f0:	2029      	movs	r0, #41	@ 0x29
 80024f2:	f001 fe00 	bl	80040f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40002800 	.word	0x40002800
 8002504:	10908100 	.word	0x10908100

08002508 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <HAL_TIM_Base_MspInit+0x9c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10c      	bne.n	8002534 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800251a:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	4a22      	ldr	r2, [pc, #136]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002520:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002524:	6193      	str	r3, [r2, #24]
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002532:	e032      	b.n	800259a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_TIM_Base_MspInit+0xa4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d114      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800253e:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a19      	ldr	r2, [pc, #100]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2036      	movs	r0, #54	@ 0x36
 800255c:	f001 fdaf 	bl	80040be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002560:	2036      	movs	r0, #54	@ 0x36
 8002562:	f001 fdc8 	bl	80040f6 <HAL_NVIC_EnableIRQ>
}
 8002566:	e018      	b.n	800259a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <HAL_TIM_Base_MspInit+0xa8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d113      	bne.n	800259a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002578:	f043 0320 	orr.w	r3, r3, #32
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_TIM_Base_MspInit+0xa0>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2037      	movs	r0, #55	@ 0x37
 8002590:	f001 fd95 	bl	80040be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002594:	2037      	movs	r0, #55	@ 0x37
 8002596:	f001 fdae 	bl	80040f6 <HAL_NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40001000 	.word	0x40001000
 80025b0:	40001400 	.word	0x40001400

080025b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a11      	ldr	r2, [pc, #68]	@ (8002618 <HAL_TIM_MspPostInit+0x64>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d11b      	bne.n	800260e <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_TIM_MspPostInit+0x68>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4a10      	ldr	r2, [pc, #64]	@ (800261c <HAL_TIM_MspPostInit+0x68>)
 80025dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025e0:	6153      	str	r3, [r2, #20]
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_TIM_MspPostInit+0x68>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025ee:	2304      	movs	r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80025fe:	2302      	movs	r3, #2
 8002600:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	@ (8002620 <HAL_TIM_MspPostInit+0x6c>)
 800260a:	f001 fd8f 	bl	800412c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40021000 	.word	0x40021000
 8002620:	48000800 	.word	0x48000800

08002624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <NMI_Handler+0x4>

0800262c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <HardFault_Handler+0x4>

08002634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002638:	bf00      	nop
 800263a:	e7fd      	b.n	8002638 <MemManage_Handler+0x4>

0800263c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <BusFault_Handler+0x4>

08002644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <UsageFault_Handler+0x4>

0800264c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267a:	f000 fc2d 	bl	8002ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}

08002682 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8002686:	2001      	movs	r0, #1
 8002688:	f001 ff0a 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8002694:	2002      	movs	r0, #2
 8002696:	f001 ff03 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}

0800269e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80026a2:	2010      	movs	r0, #16
 80026a4:	f001 fefc 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026b4:	f001 fef4 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}

080026bc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <RTC_Alarm_IRQHandler+0x10>)
 80026c2:	f003 fe99 	bl	80063f8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200000f8 	.word	0x200000f8

080026d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <TIM6_DAC_IRQHandler+0x10>)
 80026d6:	f004 fa6f 	bl	8006bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000164 	.word	0x20000164

080026e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026e8:	4802      	ldr	r0, [pc, #8]	@ (80026f4 <TIM7_IRQHandler+0x10>)
 80026ea:	f004 fa65 	bl	8006bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200001b0 	.word	0x200001b0

080026f8 <_sbrk>:
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <_sbrk+0x5c>)
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <_sbrk+0x60>)
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <_sbrk+0x22>
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <_sbrk+0x64>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <_sbrk+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <_sbrk+0x40>
 8002728:	f005 fb4e 	bl	8007dc8 <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e009      	b.n	800274c <_sbrk+0x54>
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <_sbrk+0x64>)
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20010000 	.word	0x20010000
 8002758:	00000400 	.word	0x00000400
 800275c:	200002b0 	.word	0x200002b0
 8002760:	20000408 	.word	0x20000408

08002764 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <SystemInit+0x20>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <SystemInit+0x20>)
 8002770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <timePage>:
extern RTC_AlarmTypeDef sAlarm;

bool is_24_hour_format = true;
extern bool timeFormatChanged;

void timePage() {
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b08c      	sub	sp, #48	@ 0x30
 800278c:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800278e:	2001      	movs	r0, #1
 8002790:	f7fe fa30 	bl	8000bf4 <LCD_SendCmd>
	char buff[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002794:	2200      	movs	r2, #0
 8002796:	491e      	ldr	r1, [pc, #120]	@ (8002810 <timePage+0x88>)
 8002798:	481e      	ldr	r0, [pc, #120]	@ (8002814 <timePage+0x8c>)
 800279a:	f003 fbb8 	bl	8005f0e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800279e:	2200      	movs	r2, #0
 80027a0:	491d      	ldr	r1, [pc, #116]	@ (8002818 <timePage+0x90>)
 80027a2:	481c      	ldr	r0, [pc, #112]	@ (8002814 <timePage+0x8c>)
 80027a4:	f003 fc95 	bl	80060d2 <HAL_RTC_GetDate>

	char *weekDayMap[7] = {"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
 80027a8:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <timePage+0x94>)
 80027aa:	463c      	mov	r4, r7
 80027ac:	461d      	mov	r5, r3
 80027ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char *weekday = weekDayMap[sDate.WeekDay - 1];
 80027ba:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <timePage+0x90>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	3330      	adds	r3, #48	@ 0x30
 80027c4:	443b      	add	r3, r7
 80027c6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80027ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

	sprintf(buff, "%s ", weekday);
 80027cc:	f107 031c 	add.w	r3, r7, #28
 80027d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d2:	4913      	ldr	r1, [pc, #76]	@ (8002820 <timePage+0x98>)
 80027d4:	4618      	mov	r0, r3
 80027d6:	f005 facd 	bl	8007d74 <siprintf>

	LCD_SendStr(buff);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fa44 	bl	8000c6c <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 80027e4:	20c0      	movs	r0, #192	@ 0xc0
 80027e6:	f7fe fa05 	bl	8000bf4 <LCD_SendCmd>

	LCD_SendStr("ALARM");
 80027ea:	480e      	ldr	r0, [pc, #56]	@ (8002824 <timePage+0x9c>)
 80027ec:	f7fe fa3e 	bl	8000c6c <LCD_SendStr>


	if (is_24_hour_format) {
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <timePage+0xa0>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <timePage+0x78>
	    LCD_SendStr("   24H_TIME");
 80027f8:	480c      	ldr	r0, [pc, #48]	@ (800282c <timePage+0xa4>)
 80027fa:	f7fe fa37 	bl	8000c6c <LCD_SendStr>
	} else {
	    LCD_SendStr("   12H_TIME");
	}

}
 80027fe:	e002      	b.n	8002806 <timePage+0x7e>
	    LCD_SendStr("   12H_TIME");
 8002800:	480b      	ldr	r0, [pc, #44]	@ (8002830 <timePage+0xa8>)
 8002802:	f7fe fa33 	bl	8000c6c <LCD_SendStr>
}
 8002806:	bf00      	nop
 8002808:	3730      	adds	r7, #48	@ 0x30
 800280a:	46bd      	mov	sp, r7
 800280c:	bdb0      	pop	{r4, r5, r7, pc}
 800280e:	bf00      	nop
 8002810:	20000090 	.word	0x20000090
 8002814:	200000f8 	.word	0x200000f8
 8002818:	200000a4 	.word	0x200000a4
 800281c:	080087f8 	.word	0x080087f8
 8002820:	080087b8 	.word	0x080087b8
 8002824:	080087bc 	.word	0x080087bc
 8002828:	20000018 	.word	0x20000018
 800282c:	080087c4 	.word	0x080087c4
 8002830:	080087d0 	.word	0x080087d0

08002834 <updateTime>:

void updateTime(uint8_t row, uint8_t col) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	460a      	mov	r2, r1
 800283e:	71fb      	strb	r3, [r7, #7]
 8002840:	4613      	mov	r3, r2
 8002842:	71bb      	strb	r3, [r7, #6]
	char buff[8];
	char dateBuff[8];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002844:	2200      	movs	r2, #0
 8002846:	492a      	ldr	r1, [pc, #168]	@ (80028f0 <updateTime+0xbc>)
 8002848:	482a      	ldr	r0, [pc, #168]	@ (80028f4 <updateTime+0xc0>)
 800284a:	f003 fb60 	bl	8005f0e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800284e:	2200      	movs	r2, #0
 8002850:	4929      	ldr	r1, [pc, #164]	@ (80028f8 <updateTime+0xc4>)
 8002852:	4828      	ldr	r0, [pc, #160]	@ (80028f4 <updateTime+0xc0>)
 8002854:	f003 fc3d 	bl	80060d2 <HAL_RTC_GetDate>

	uint8_t hours = sTime.Hours;
 8002858:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <updateTime+0xbc>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	77bb      	strb	r3, [r7, #30]
	uint8_t minutes = sTime.Minutes;
 800285e:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <updateTime+0xbc>)
 8002860:	785b      	ldrb	r3, [r3, #1]
 8002862:	777b      	strb	r3, [r7, #29]
	uint8_t day = sDate.Date;
 8002864:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <updateTime+0xc4>)
 8002866:	789b      	ldrb	r3, [r3, #2]
 8002868:	773b      	strb	r3, [r7, #28]
	uint8_t month = sDate.Month;
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <updateTime+0xc4>)
 800286c:	785b      	ldrb	r3, [r3, #1]
 800286e:	76fb      	strb	r3, [r7, #27]

	uint8_t displayHour = hours;
 8002870:	7fbb      	ldrb	r3, [r7, #30]
 8002872:	77fb      	strb	r3, [r7, #31]
	 if (!is_24_hour_format) {
 8002874:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <updateTime+0xc8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f083 0301 	eor.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <updateTime+0x66>
	        if (hours == 0) {
 8002882:	7fbb      	ldrb	r3, [r7, #30]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <updateTime+0x5a>
	        	displayHour = 12;
 8002888:	230c      	movs	r3, #12
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e005      	b.n	800289a <updateTime+0x66>
	        }
	        else if (hours > 12) {
 800288e:	7fbb      	ldrb	r3, [r7, #30]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d902      	bls.n	800289a <updateTime+0x66>
	        	displayHour = hours - 12;
 8002894:	7fbb      	ldrb	r3, [r7, #30]
 8002896:	3b0c      	subs	r3, #12
 8002898:	77fb      	strb	r3, [r7, #31]
	        }
	    }
	// Move cursor to desired position (row 0 or 1)
	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <updateTime+0x70>
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	e000      	b.n	80028a6 <updateTime+0x72>
 80028a4:	23c0      	movs	r3, #192	@ 0xc0
 80028a6:	76bb      	strb	r3, [r7, #26]
	LCD_SendCmd(baseCmd + col);
 80028a8:	7eba      	ldrb	r2, [r7, #26]
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe f99f 	bl	8000bf4 <LCD_SendCmd>

	sprintf(buff, "%02d:%02d ", displayHour, minutes);
 80028b6:	7ffa      	ldrb	r2, [r7, #31]
 80028b8:	7f7b      	ldrb	r3, [r7, #29]
 80028ba:	f107 0010 	add.w	r0, r7, #16
 80028be:	4910      	ldr	r1, [pc, #64]	@ (8002900 <updateTime+0xcc>)
 80028c0:	f005 fa58 	bl	8007d74 <siprintf>
	LCD_SendStr(buff);
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe f9cf 	bl	8000c6c <LCD_SendStr>

	sprintf(dateBuff, " %02d/%02d", day, month);
 80028ce:	7f3a      	ldrb	r2, [r7, #28]
 80028d0:	7efb      	ldrb	r3, [r7, #27]
 80028d2:	f107 0008 	add.w	r0, r7, #8
 80028d6:	490b      	ldr	r1, [pc, #44]	@ (8002904 <updateTime+0xd0>)
 80028d8:	f005 fa4c 	bl	8007d74 <siprintf>
	LCD_SendStr(dateBuff);
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe f9c3 	bl	8000c6c <LCD_SendStr>
}
 80028e6:	bf00      	nop
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000090 	.word	0x20000090
 80028f4:	200000f8 	.word	0x200000f8
 80028f8:	200000a4 	.word	0x200000a4
 80028fc:	20000018 	.word	0x20000018
 8002900:	08008814 	.word	0x08008814
 8002904:	08008820 	.word	0x08008820

08002908 <alarmPage>:


void alarmPage() {
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	@ 0x28
 800290c:	af02      	add	r7, sp, #8
	char buff[20];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800290e:	2001      	movs	r0, #1
 8002910:	f7fe f970 	bl	8000bf4 <LCD_SendCmd>

	LCD_SendCmd(0x80);
 8002914:	2080      	movs	r0, #128	@ 0x80
 8002916:	f7fe f96d 	bl	8000bf4 <LCD_SendCmd>
	LCD_SendStr("Set Alarm for:");
 800291a:	4822      	ldr	r0, [pc, #136]	@ (80029a4 <alarmPage+0x9c>)
 800291c:	f7fe f9a6 	bl	8000c6c <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 8002920:	20c0      	movs	r0, #192	@ 0xc0
 8002922:	f7fe f967 	bl	8000bf4 <LCD_SendCmd>
	uint8_t h = sAlarm.AlarmTime.Hours;
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <alarmPage+0xa0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	77bb      	strb	r3, [r7, #30]
	uint8_t m = sAlarm.AlarmTime.Minutes;
 800292c:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <alarmPage+0xa0>)
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	777b      	strb	r3, [r7, #29]

	if (is_24_hour_format) {
 8002932:	4b1e      	ldr	r3, [pc, #120]	@ (80029ac <alarmPage+0xa4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <alarmPage+0x46>
		snprintf(buff, sizeof(buff), "%02d:%02d", h, m);
 800293a:	7fba      	ldrb	r2, [r7, #30]
 800293c:	7f7b      	ldrb	r3, [r7, #29]
 800293e:	1d38      	adds	r0, r7, #4
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	4a1a      	ldr	r2, [pc, #104]	@ (80029b0 <alarmPage+0xa8>)
 8002946:	2114      	movs	r1, #20
 8002948:	f005 f9de 	bl	8007d08 <sniprintf>
 800294c:	e021      	b.n	8002992 <alarmPage+0x8a>
	} else {
		const char *ampm = (h >= 12) ? "P.M" : "A.M";
 800294e:	7fbb      	ldrb	r3, [r7, #30]
 8002950:	2b0b      	cmp	r3, #11
 8002952:	d901      	bls.n	8002958 <alarmPage+0x50>
 8002954:	4b17      	ldr	r3, [pc, #92]	@ (80029b4 <alarmPage+0xac>)
 8002956:	e000      	b.n	800295a <alarmPage+0x52>
 8002958:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <alarmPage+0xb0>)
 800295a:	61bb      	str	r3, [r7, #24]
		uint8_t dh = h % 12;
 800295c:	7fba      	ldrb	r2, [r7, #30]
 800295e:	4b17      	ldr	r3, [pc, #92]	@ (80029bc <alarmPage+0xb4>)
 8002960:	fba3 1302 	umull	r1, r3, r3, r2
 8002964:	08d9      	lsrs	r1, r3, #3
 8002966:	460b      	mov	r3, r1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	440b      	add	r3, r1
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	77fb      	strb	r3, [r7, #31]
		if (dh == 0) dh = 12;
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <alarmPage+0x74>
 8002978:	230c      	movs	r3, #12
 800297a:	77fb      	strb	r3, [r7, #31]
		snprintf(buff, sizeof(buff), "%02d:%02d %s", dh, m, ampm);
 800297c:	7ff9      	ldrb	r1, [r7, #31]
 800297e:	7f7b      	ldrb	r3, [r7, #29]
 8002980:	1d38      	adds	r0, r7, #4
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	9201      	str	r2, [sp, #4]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	460b      	mov	r3, r1
 800298a:	4a0d      	ldr	r2, [pc, #52]	@ (80029c0 <alarmPage+0xb8>)
 800298c:	2114      	movs	r1, #20
 800298e:	f005 f9bb 	bl	8007d08 <sniprintf>
	}
	LCD_SendStr(buff);
 8002992:	1d3b      	adds	r3, r7, #4
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f969 	bl	8000c6c <LCD_SendStr>
}
 800299a:	bf00      	nop
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	0800882c 	.word	0x0800882c
 80029a8:	20000274 	.word	0x20000274
 80029ac:	20000018 	.word	0x20000018
 80029b0:	0800883c 	.word	0x0800883c
 80029b4:	08008848 	.word	0x08008848
 80029b8:	0800884c 	.word	0x0800884c
 80029bc:	aaaaaaab 	.word	0xaaaaaaab
 80029c0:	08008850 	.word	0x08008850

080029c4 <updateAlarm>:

void updateAlarm(uint8_t row, uint8_t col) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	4603      	mov	r3, r0
 80029cc:	460a      	mov	r2, r1
 80029ce:	71fb      	strb	r3, [r7, #7]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71bb      	strb	r3, [r7, #6]

	char buff[16];
	uint8_t h = sAlarm.AlarmTime.Hours;
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <updateAlarm+0xb0>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	77bb      	strb	r3, [r7, #30]
	uint8_t m = sAlarm.AlarmTime.Minutes;
 80029da:	4b26      	ldr	r3, [pc, #152]	@ (8002a74 <updateAlarm+0xb0>)
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	777b      	strb	r3, [r7, #29]

	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0;
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <updateAlarm+0x26>
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	e000      	b.n	80029ec <updateAlarm+0x28>
 80029ea:	23c0      	movs	r3, #192	@ 0xc0
 80029ec:	773b      	strb	r3, [r7, #28]
	LCD_SendCmd(baseCmd + col);
 80029ee:	7f3a      	ldrb	r2, [r7, #28]
 80029f0:	79bb      	ldrb	r3, [r7, #6]
 80029f2:	4413      	add	r3, r2
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fe f8fc 	bl	8000bf4 <LCD_SendCmd>

	if (is_24_hour_format) {
 80029fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <updateAlarm+0xb4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <updateAlarm+0x56>
		snprintf(buff, sizeof(buff), "%02d:%02d", h, m);
 8002a04:	7fba      	ldrb	r2, [r7, #30]
 8002a06:	7f7b      	ldrb	r3, [r7, #29]
 8002a08:	f107 0008 	add.w	r0, r7, #8
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	4a1a      	ldr	r2, [pc, #104]	@ (8002a7c <updateAlarm+0xb8>)
 8002a12:	2110      	movs	r1, #16
 8002a14:	f005 f978 	bl	8007d08 <sniprintf>
 8002a18:	e022      	b.n	8002a60 <updateAlarm+0x9c>
	} else {
		const char *ampm = (h >= 12) ? "P.M" : "A.M";
 8002a1a:	7fbb      	ldrb	r3, [r7, #30]
 8002a1c:	2b0b      	cmp	r3, #11
 8002a1e:	d901      	bls.n	8002a24 <updateAlarm+0x60>
 8002a20:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <updateAlarm+0xbc>)
 8002a22:	e000      	b.n	8002a26 <updateAlarm+0x62>
 8002a24:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <updateAlarm+0xc0>)
 8002a26:	61bb      	str	r3, [r7, #24]
		uint8_t dh = h % 12; if (dh == 0) dh = 12;
 8002a28:	7fba      	ldrb	r2, [r7, #30]
 8002a2a:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <updateAlarm+0xc4>)
 8002a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a30:	08d9      	lsrs	r1, r3, #3
 8002a32:	460b      	mov	r3, r1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	440b      	add	r3, r1
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	7ffb      	ldrb	r3, [r7, #31]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <updateAlarm+0x84>
 8002a44:	230c      	movs	r3, #12
 8002a46:	77fb      	strb	r3, [r7, #31]
		snprintf(buff, sizeof(buff), "%02d:%02d %s", dh, m, ampm);
 8002a48:	7ff9      	ldrb	r1, [r7, #31]
 8002a4a:	7f7b      	ldrb	r3, [r7, #29]
 8002a4c:	f107 0008 	add.w	r0, r7, #8
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	9201      	str	r2, [sp, #4]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	460b      	mov	r3, r1
 8002a58:	4a0c      	ldr	r2, [pc, #48]	@ (8002a8c <updateAlarm+0xc8>)
 8002a5a:	2110      	movs	r1, #16
 8002a5c:	f005 f954 	bl	8007d08 <sniprintf>
	}
	LCD_SendStr(buff);
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f901 	bl	8000c6c <LCD_SendStr>
}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000274 	.word	0x20000274
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	0800883c 	.word	0x0800883c
 8002a80:	08008848 	.word	0x08008848
 8002a84:	0800884c 	.word	0x0800884c
 8002a88:	aaaaaaab 	.word	0xaaaaaaab
 8002a8c:	08008850 	.word	0x08008850

08002a90 <switchTimeFormat>:

void switchTimeFormat() {
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
    is_24_hour_format = !is_24_hour_format;
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <switchTimeFormat+0x34>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f083 0301 	eor.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <switchTimeFormat+0x34>)
 8002ab0:	701a      	strb	r2, [r3, #0]
    timeFormatChanged = true;
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <switchTimeFormat+0x38>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000018 	.word	0x20000018
 8002ac8:	20000234 	.word	0x20000234

08002acc <switchAMPM>:

void switchAMPM(){
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0

	if (is_24_hour_format) return;
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <switchAMPM+0x40>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d111      	bne.n	8002afe <switchAMPM+0x32>
	uint8_t h = sAlarm.AlarmTime.Hours; // 0..23
 8002ada:	4b0d      	ldr	r3, [pc, #52]	@ (8002b10 <switchAMPM+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
	    if (h >= 12) {
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2b0b      	cmp	r3, #11
 8002ae4:	d905      	bls.n	8002af2 <switchAMPM+0x26>
	        sAlarm.AlarmTime.Hours = h - 12; // PM -> AM
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	3b0c      	subs	r3, #12
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <switchAMPM+0x44>)
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e006      	b.n	8002b00 <switchAMPM+0x34>
	    } else {
	        sAlarm.AlarmTime.Hours = h + 12; // AM -> PM
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	330c      	adds	r3, #12
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <switchAMPM+0x44>)
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e000      	b.n	8002b00 <switchAMPM+0x34>
	if (is_24_hour_format) return;
 8002afe:	bf00      	nop
	    }

}
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000018 	.word	0x20000018
 8002b10:	20000274 	.word	0x20000274

08002b14 <changeAlarmHour>:

void changeAlarmHour() {
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	uint8_t h = sAlarm.AlarmTime.Hours;
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <changeAlarmHour+0x3c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
	h = (h + 1) % 24;
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <changeAlarmHour+0x40>)
 8002b26:	fb83 1302 	smull	r1, r3, r3, r2
 8002b2a:	1099      	asrs	r1, r3, #2
 8002b2c:	17d3      	asrs	r3, r2, #31
 8002b2e:	1ac9      	subs	r1, r1, r3
 8002b30:	460b      	mov	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	440b      	add	r3, r1
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1ad1      	subs	r1, r2, r3
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	71fb      	strb	r3, [r7, #7]
	sAlarm.AlarmTime.Hours = h;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <changeAlarmHour+0x3c>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	7013      	strb	r3, [r2, #0]

}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	20000274 	.word	0x20000274
 8002b54:	2aaaaaab 	.word	0x2aaaaaab

08002b58 <changeAlarmMin>:

void changeAlarmMin() {
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <changeAlarmMin+0x40>)
 8002b60:	785b      	ldrb	r3, [r3, #1]
 8002b62:	71fb      	strb	r3, [r7, #7]
	m = (m + 5) % 60;
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	1d5a      	adds	r2, r3, #5
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <changeAlarmMin+0x44>)
 8002b6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002b6e:	4413      	add	r3, r2
 8002b70:	1159      	asrs	r1, r3, #5
 8002b72:	17d3      	asrs	r3, r2, #31
 8002b74:	1ac9      	subs	r1, r1, r3
 8002b76:	460b      	mov	r3, r1
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a5b      	subs	r3, r3, r1
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	1ad1      	subs	r1, r2, r3
 8002b80:	460b      	mov	r3, r1
 8002b82:	71fb      	strb	r3, [r7, #7]
	sAlarm.AlarmTime.Minutes = m;
 8002b84:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <changeAlarmMin+0x40>)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	7053      	strb	r3, [r2, #1]

}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000274 	.word	0x20000274
 8002b9c:	88888889 	.word	0x88888889

08002ba0 <alarmConfirm>:

void alarmConfirm(void) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af02      	add	r7, sp, #8

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4911      	ldr	r1, [pc, #68]	@ (8002bf0 <alarmConfirm+0x50>)
 8002baa:	4812      	ldr	r0, [pc, #72]	@ (8002bf4 <alarmConfirm+0x54>)
 8002bac:	f003 fae0 	bl	8006170 <HAL_RTC_SetAlarm_IT>

	LCD_SendCmd(LCD_CLEAR_DISPLAY);   // clear display for confirmation
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7fe f81f 	bl	8000bf4 <LCD_SendCmd>
	coast_asm_delay(2);
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	f7fd fb12 	bl	80001e0 <coast_asm_delay>

	LCD_SendStr("ALARM SET FOR:");    // top line
 8002bbc:	480e      	ldr	r0, [pc, #56]	@ (8002bf8 <alarmConfirm+0x58>)
 8002bbe:	f7fe f855 	bl	8000c6c <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 8002bc2:	20c0      	movs	r0, #192	@ 0xc0
 8002bc4:	f7fe f816 	bl	8000bf4 <LCD_SendCmd>
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%02d:%02d", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes);
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <alarmConfirm+0x50>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <alarmConfirm+0x50>)
 8002bd0:	785b      	ldrb	r3, [r3, #1]
 8002bd2:	4638      	mov	r0, r7
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <alarmConfirm+0x5c>)
 8002bda:	2110      	movs	r1, #16
 8002bdc:	f005 f894 	bl	8007d08 <sniprintf>
	LCD_SendStr(buffer);
 8002be0:	463b      	mov	r3, r7
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f842 	bl	8000c6c <LCD_SendStr>

}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000274 	.word	0x20000274
 8002bf4:	200000f8 	.word	0x200000f8
 8002bf8:	08008860 	.word	0x08008860
 8002bfc:	0800883c 	.word	0x0800883c

08002c00 <write_phase>:

/* Step speed: every 1 ms */
#define STEP_PERIOD_MS 2

/* 2-coil full-step sequence (matches your earlier working pattern) */
static inline void write_phase(uint8_t p) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
    switch (p & 3) {	// (p&3) for keeping value b/w 0-3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d867      	bhi.n	8002ce4 <write_phase+0xe4>
 8002c14:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <write_phase+0x1c>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c2d 	.word	0x08002c2d
 8002c20:	08002c5b 	.word	0x08002c5b
 8002c24:	08002c89 	.word	0x08002c89
 8002c28:	08002cb7 	.word	0x08002cb7
        case 0: // B+C
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_RESET);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2120      	movs	r1, #32
 8002c30:	482e      	ldr	r0, [pc, #184]	@ (8002cec <write_phase+0xec>)
 8002c32:	f001 fc1d 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_SET);
 8002c36:	2201      	movs	r2, #1
 8002c38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c40:	f001 fc16 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_SET);
 8002c44:	2201      	movs	r2, #1
 8002c46:	2180      	movs	r1, #128	@ 0x80
 8002c48:	4828      	ldr	r0, [pc, #160]	@ (8002cec <write_phase+0xec>)
 8002c4a:	f001 fc11 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2104      	movs	r1, #4
 8002c52:	4827      	ldr	r0, [pc, #156]	@ (8002cf0 <write_phase+0xf0>)
 8002c54:	f001 fc0c 	bl	8004470 <HAL_GPIO_WritePin>
            break;
 8002c58:	e044      	b.n	8002ce4 <write_phase+0xe4>
        case 1: // A+B
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_SET);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	4823      	ldr	r0, [pc, #140]	@ (8002cec <write_phase+0xec>)
 8002c60:	f001 fc06 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_SET);
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c6e:	f001 fbff 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	@ 0x80
 8002c76:	481d      	ldr	r0, [pc, #116]	@ (8002cec <write_phase+0xec>)
 8002c78:	f001 fbfa 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_RESET);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2104      	movs	r1, #4
 8002c80:	481b      	ldr	r0, [pc, #108]	@ (8002cf0 <write_phase+0xf0>)
 8002c82:	f001 fbf5 	bl	8004470 <HAL_GPIO_WritePin>
            break;
 8002c86:	e02d      	b.n	8002ce4 <write_phase+0xe4>
        case 2: // A+D
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_SET);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	4817      	ldr	r0, [pc, #92]	@ (8002cec <write_phase+0xec>)
 8002c8e:	f001 fbef 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_RESET);
 8002c92:	2200      	movs	r2, #0
 8002c94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c9c:	f001 fbe8 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_RESET);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	@ 0x80
 8002ca4:	4811      	ldr	r0, [pc, #68]	@ (8002cec <write_phase+0xec>)
 8002ca6:	f001 fbe3 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_SET);
 8002caa:	2201      	movs	r2, #1
 8002cac:	2104      	movs	r1, #4
 8002cae:	4810      	ldr	r0, [pc, #64]	@ (8002cf0 <write_phase+0xf0>)
 8002cb0:	f001 fbde 	bl	8004470 <HAL_GPIO_WritePin>
            break;
 8002cb4:	e016      	b.n	8002ce4 <write_phase+0xe4>
        case 3: // C+D
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_RESET);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2120      	movs	r1, #32
 8002cba:	480c      	ldr	r0, [pc, #48]	@ (8002cec <write_phase+0xec>)
 8002cbc:	f001 fbd8 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cca:	f001 fbd1 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_SET);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	2180      	movs	r1, #128	@ 0x80
 8002cd2:	4806      	ldr	r0, [pc, #24]	@ (8002cec <write_phase+0xec>)
 8002cd4:	f001 fbcc 	bl	8004470 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_SET);
 8002cd8:	2201      	movs	r2, #1
 8002cda:	2104      	movs	r1, #4
 8002cdc:	4804      	ldr	r0, [pc, #16]	@ (8002cf0 <write_phase+0xf0>)
 8002cde:	f001 fbc7 	bl	8004470 <HAL_GPIO_WritePin>
            break;
 8002ce2:	bf00      	nop
    }
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <vibration_call>:


/* for asynchronous functioanlity via TIM7 tick */
void vibration_call(uint16_t steps) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]
    if (steps == 0) return;
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <vibration_call+0x2a>
    steps_left = steps;
 8002d04:	4a08      	ldr	r2, [pc, #32]	@ (8002d28 <vibration_call+0x34>)
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	8013      	strh	r3, [r2, #0]
    write_phase(phase);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <vibration_call+0x38>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff75 	bl	8002c00 <write_phase>
    ms_since_last_step = 0;
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <vibration_call+0x3c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e000      	b.n	8002d20 <vibration_call+0x2c>
    if (steps == 0) return;
 8002d1e:	bf00      	nop
}
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200002b4 	.word	0x200002b4
 8002d2c:	200002b6 	.word	0x200002b6
 8002d30:	200002b8 	.word	0x200002b8

08002d34 <vibration_stop>:

/* stoping vibration */
void vibration_stop() {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
    steps_left = 0;
 8002d38:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <vibration_stop+0x3c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2120      	movs	r1, #32
 8002d42:	480c      	ldr	r0, [pc, #48]	@ (8002d74 <vibration_stop+0x40>)
 8002d44:	f001 fb94 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_RESET);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d52:	f001 fb8d 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	4806      	ldr	r0, [pc, #24]	@ (8002d74 <vibration_stop+0x40>)
 8002d5c:	f001 fb88 	bl	8004470 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2104      	movs	r1, #4
 8002d64:	4804      	ldr	r0, [pc, #16]	@ (8002d78 <vibration_stop+0x44>)
 8002d66:	f001 fb83 	bl	8004470 <HAL_GPIO_WritePin>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200002b4 	.word	0x200002b4
 8002d74:	48000800 	.word	0x48000800
 8002d78:	48000400 	.word	0x48000400

08002d7c <vibration_tick_1ms>:

/* TIM7 ISR - vibration ticker per 1 ms */
void vibration_tick_1ms() {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
    if (steps_left == 0) return;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	@ (8002dec <vibration_tick_1ms+0x70>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d02b      	beq.n	8002de2 <vibration_tick_1ms+0x66>

    ms_since_last_step++;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <vibration_tick_1ms+0x74>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3301      	adds	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b16      	ldr	r3, [pc, #88]	@ (8002df0 <vibration_tick_1ms+0x74>)
 8002d96:	801a      	strh	r2, [r3, #0]
    if (ms_since_last_step < STEP_PERIOD_MS) return;
 8002d98:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <vibration_tick_1ms+0x74>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d921      	bls.n	8002de6 <vibration_tick_1ms+0x6a>
    ms_since_last_step = 0;
 8002da2:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <vibration_tick_1ms+0x74>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	801a      	strh	r2, [r3, #0]

    // advance one step;
    phase = (phase + 1) & 3;
 8002da8:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <vibration_tick_1ms+0x78>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <vibration_tick_1ms+0x78>)
 8002dba:	701a      	strb	r2, [r3, #0]
    write_phase(phase);
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <vibration_tick_1ms+0x78>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff1c 	bl	8002c00 <write_phase>

    if (--steps_left == 0) {
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <vibration_tick_1ms+0x70>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4a06      	ldr	r2, [pc, #24]	@ (8002dec <vibration_tick_1ms+0x70>)
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	8011      	strh	r1, [r2, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d105      	bne.n	8002de8 <vibration_tick_1ms+0x6c>
    	vibration_stop();
 8002ddc:	f7ff ffaa 	bl	8002d34 <vibration_stop>
 8002de0:	e002      	b.n	8002de8 <vibration_tick_1ms+0x6c>
    if (steps_left == 0) return;
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <vibration_tick_1ms+0x6c>
    if (ms_since_last_step < STEP_PERIOD_MS) return;
 8002de6:	bf00      	nop
    }
}
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200002b4 	.word	0x200002b4
 8002df0:	200002b8 	.word	0x200002b8
 8002df4:	200002b6 	.word	0x200002b6

08002df8 <Reset_Handler>:
 8002df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e30 <LoopForever+0x2>
 8002dfc:	f7ff fcb2 	bl	8002764 <SystemInit>
 8002e00:	480c      	ldr	r0, [pc, #48]	@ (8002e34 <LoopForever+0x6>)
 8002e02:	490d      	ldr	r1, [pc, #52]	@ (8002e38 <LoopForever+0xa>)
 8002e04:	4a0d      	ldr	r2, [pc, #52]	@ (8002e3c <LoopForever+0xe>)
 8002e06:	2300      	movs	r3, #0
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:
 8002e0a:	58d4      	ldr	r4, [r2, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:
 8002e10:	18c4      	adds	r4, r0, r3
 8002e12:	428c      	cmp	r4, r1
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>
 8002e16:	4a0a      	ldr	r2, [pc, #40]	@ (8002e40 <LoopForever+0x12>)
 8002e18:	4c0a      	ldr	r4, [pc, #40]	@ (8002e44 <LoopForever+0x16>)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:
 8002e22:	42a2      	cmp	r2, r4
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>
 8002e26:	f004 ffd5 	bl	8007dd4 <__libc_init_array>
 8002e2a:	f7fe fc23 	bl	8001674 <main>

08002e2e <LoopForever>:
 8002e2e:	e7fe      	b.n	8002e2e <LoopForever>
 8002e30:	20010000 	.word	0x20010000
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000074 	.word	0x20000074
 8002e3c:	080088e4 	.word	0x080088e4
 8002e40:	20000074 	.word	0x20000074
 8002e44:	20000408 	.word	0x20000408

08002e48 <ADC1_2_IRQHandler>:
 8002e48:	e7fe      	b.n	8002e48 <ADC1_2_IRQHandler>
	...

08002e4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e50:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <HAL_Init+0x28>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a07      	ldr	r2, [pc, #28]	@ (8002e74 <HAL_Init+0x28>)
 8002e56:	f043 0310 	orr.w	r3, r3, #16
 8002e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e5c:	2003      	movs	r0, #3
 8002e5e:	f001 f923 	bl	80040a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f000 f808 	bl	8002e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e68:	f7ff fabe 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000

08002e78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e80:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <HAL_InitTick+0x54>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <HAL_InitTick+0x58>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f93b 	bl	8004112 <HAL_SYSTICK_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e00e      	b.n	8002ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b0f      	cmp	r3, #15
 8002eaa:	d80a      	bhi.n	8002ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002eac:	2200      	movs	r2, #0
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb4:	f001 f903 	bl	80040be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb8:	4a06      	ldr	r2, [pc, #24]	@ (8002ed4 <HAL_InitTick+0x5c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000014 	.word	0x20000014
 8002ed0:	20000020 	.word	0x20000020
 8002ed4:	2000001c 	.word	0x2000001c

08002ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_IncTick+0x20>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <HAL_IncTick+0x24>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <HAL_IncTick+0x24>)
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000020 	.word	0x20000020
 8002efc:	200002bc 	.word	0x200002bc

08002f00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return uwTick;  
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_GetTick+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	200002bc 	.word	0x200002bc

08002f18 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff ffee 	bl	8002f00 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d005      	beq.n	8002f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_Delay+0x44>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f3e:	bf00      	nop
 8002f40:	f7ff ffde 	bl	8002f00 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d8f7      	bhi.n	8002f40 <HAL_Delay+0x28>
  {
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000020 	.word	0x20000020

08002f60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b09a      	sub	sp, #104	@ 0x68
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e1e3      	b.n	8003348 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d176      	bne.n	8003080 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d152      	bne.n	8003040 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fa3b 	bl	8002430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13b      	bne.n	8003040 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 ff37 	bl	8003e3c <ADC_Disable>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d12f      	bne.n	8003040 <HAL_ADC_Init+0xe0>
 8002fe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d12b      	bne.n	8003040 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff0:	f023 0302 	bic.w	r3, r3, #2
 8002ff4:	f043 0202 	orr.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800300a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800301a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800301c:	4b92      	ldr	r3, [pc, #584]	@ (8003268 <HAL_ADC_Init+0x308>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a92      	ldr	r2, [pc, #584]	@ (800326c <HAL_ADC_Init+0x30c>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0c9a      	lsrs	r2, r3, #18
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003032:	e002      	b.n	800303a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	3b01      	subs	r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f9      	bne.n	8003034 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800305c:	d110      	bne.n	8003080 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f023 0312 	bic.w	r3, r3, #18
 8003066:	f043 0210 	orr.w	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 8150 	bne.w	800332e <HAL_ADC_Init+0x3ce>
 800308e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003092:	2b00      	cmp	r3, #0
 8003094:	f040 814b 	bne.w	800332e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 8143 	bne.w	800332e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80030b0:	f043 0202 	orr.w	r2, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_Init+0x16c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003270 <HAL_ADC_Init+0x310>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_Init+0x170>
 80030cc:	4b69      	ldr	r3, [pc, #420]	@ (8003274 <HAL_ADC_Init+0x314>)
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_Init+0x172>
 80030d0:	4b69      	ldr	r3, [pc, #420]	@ (8003278 <HAL_ADC_Init+0x318>)
 80030d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030dc:	d102      	bne.n	80030e4 <HAL_ADC_Init+0x184>
 80030de:	4b64      	ldr	r3, [pc, #400]	@ (8003270 <HAL_ADC_Init+0x310>)
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e01a      	b.n	800311a <HAL_ADC_Init+0x1ba>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a61      	ldr	r2, [pc, #388]	@ (8003270 <HAL_ADC_Init+0x310>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d103      	bne.n	80030f6 <HAL_ADC_Init+0x196>
 80030ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e011      	b.n	800311a <HAL_ADC_Init+0x1ba>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a60      	ldr	r2, [pc, #384]	@ (800327c <HAL_ADC_Init+0x31c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d102      	bne.n	8003106 <HAL_ADC_Init+0x1a6>
 8003100:	4b5f      	ldr	r3, [pc, #380]	@ (8003280 <HAL_ADC_Init+0x320>)
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e009      	b.n	800311a <HAL_ADC_Init+0x1ba>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a5d      	ldr	r2, [pc, #372]	@ (8003280 <HAL_ADC_Init+0x320>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d102      	bne.n	8003116 <HAL_ADC_Init+0x1b6>
 8003110:	4b5a      	ldr	r3, [pc, #360]	@ (800327c <HAL_ADC_Init+0x31c>)
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e001      	b.n	800311a <HAL_ADC_Init+0x1ba>
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d108      	bne.n	800313a <HAL_ADC_Init+0x1da>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d101      	bne.n	800313a <HAL_ADC_Init+0x1da>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_ADC_Init+0x1dc>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11c      	bne.n	800317a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003140:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_ADC_Init+0x202>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Init+0x202>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_ADC_Init+0x204>
 8003162:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	431a      	orrs	r2, r3
 8003176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003178:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7e5b      	ldrb	r3, [r3, #25]
 800317e:	035b      	lsls	r3, r3, #13
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003184:	2a01      	cmp	r2, #1
 8003186:	d002      	beq.n	800318e <HAL_ADC_Init+0x22e>
 8003188:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800318c:	e000      	b.n	8003190 <HAL_ADC_Init+0x230>
 800318e:	2200      	movs	r2, #0
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4313      	orrs	r3, r2
 800319e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80031a0:	4313      	orrs	r3, r2
 80031a2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d11b      	bne.n	80031e6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	7e5b      	ldrb	r3, [r3, #25]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	3b01      	subs	r3, #1
 80031bc:	045a      	lsls	r2, r3, #17
 80031be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80031c8:	e00d      	b.n	80031e6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d054      	beq.n	8003298 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a22      	ldr	r2, [pc, #136]	@ (800327c <HAL_ADC_Init+0x31c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_ADC_Init+0x2a2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <HAL_ADC_Init+0x320>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d140      	bne.n	8003284 <HAL_ADC_Init+0x324>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800320a:	d02a      	beq.n	8003262 <HAL_ADC_Init+0x302>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003214:	d022      	beq.n	800325c <HAL_ADC_Init+0x2fc>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800321e:	d01a      	beq.n	8003256 <HAL_ADC_Init+0x2f6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8003228:	d012      	beq.n	8003250 <HAL_ADC_Init+0x2f0>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8003232:	d00a      	beq.n	800324a <HAL_ADC_Init+0x2ea>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 800323c:	d002      	beq.n	8003244 <HAL_ADC_Init+0x2e4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003242:	e023      	b.n	800328c <HAL_ADC_Init+0x32c>
 8003244:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003248:	e020      	b.n	800328c <HAL_ADC_Init+0x32c>
 800324a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800324e:	e01d      	b.n	800328c <HAL_ADC_Init+0x32c>
 8003250:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003254:	e01a      	b.n	800328c <HAL_ADC_Init+0x32c>
 8003256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800325a:	e017      	b.n	800328c <HAL_ADC_Init+0x32c>
 800325c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8003260:	e014      	b.n	800328c <HAL_ADC_Init+0x32c>
 8003262:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003266:	e011      	b.n	800328c <HAL_ADC_Init+0x32c>
 8003268:	20000014 	.word	0x20000014
 800326c:	431bde83 	.word	0x431bde83
 8003270:	50000100 	.word	0x50000100
 8003274:	50000300 	.word	0x50000300
 8003278:	50000700 	.word	0x50000700
 800327c:	50000400 	.word	0x50000400
 8003280:	50000500 	.word	0x50000500
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003290:	4313      	orrs	r3, r2
 8003292:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003294:	4313      	orrs	r3, r2
 8003296:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d114      	bne.n	80032d0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032b4:	f023 0302 	bic.w	r3, r3, #2
 80032b8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7e1b      	ldrb	r3, [r3, #24]
 80032be:	039a      	lsls	r2, r3, #14
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4313      	orrs	r3, r2
 80032ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032cc:	4313      	orrs	r3, r2
 80032ce:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_ADC_Init+0x3f0>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80032e0:	430b      	orrs	r3, r1
 80032e2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10c      	bne.n	8003306 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	f023 010f 	bic.w	r1, r3, #15
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	1e5a      	subs	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
 8003304:	e007      	b.n	8003316 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 020f 	bic.w	r2, r2, #15
 8003314:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	f023 0303 	bic.w	r3, r3, #3
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40
 800332c:	e00a      	b.n	8003344 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f023 0312 	bic.w	r3, r3, #18
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003344:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003348:	4618      	mov	r0, r3
 800334a:	3768      	adds	r7, #104	@ 0x68
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	fff0c007 	.word	0xfff0c007

08003354 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 80f9 	bne.w	8003562 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_ADC_Start+0x2a>
 800337a:	2302      	movs	r3, #2
 800337c:	e0f4      	b.n	8003568 <HAL_ADC_Start+0x214>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 fcf4 	bl	8003d74 <ADC_Enable>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 80e0 	bne.w	8003558 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_Start+0x6c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003570 <HAL_ADC_Start+0x21c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <HAL_ADC_Start+0x7a>
 80033c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003574 <HAL_ADC_Start+0x220>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <HAL_ADC_Start+0x9a>
 80033cc:	e005      	b.n	80033da <HAL_ADC_Start+0x86>
 80033ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003578 <HAL_ADC_Start+0x224>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_ADC_Start+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033e2:	d004      	beq.n	80033ee <HAL_ADC_Start+0x9a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a64      	ldr	r2, [pc, #400]	@ (800357c <HAL_ADC_Start+0x228>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d115      	bne.n	800341a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d036      	beq.n	8003476 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003410:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003418:	e02d      	b.n	8003476 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800342e:	d004      	beq.n	800343a <HAL_ADC_Start+0xe6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a4e      	ldr	r2, [pc, #312]	@ (8003570 <HAL_ADC_Start+0x21c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10a      	bne.n	8003450 <HAL_ADC_Start+0xfc>
 800343a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf14      	ite	ne
 8003448:	2301      	movne	r3, #1
 800344a:	2300      	moveq	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e008      	b.n	8003462 <HAL_ADC_Start+0x10e>
 8003450:	4b4a      	ldr	r3, [pc, #296]	@ (800357c <HAL_ADC_Start+0x228>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d007      	beq.n	8003476 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800346e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003482:	d106      	bne.n	8003492 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	f023 0206 	bic.w	r2, r3, #6
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003490:	e002      	b.n	8003498 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	221c      	movs	r2, #28
 80034a6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_Start+0x168>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003570 <HAL_ADC_Start+0x21c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d106      	bne.n	80034ca <HAL_ADC_Start+0x176>
 80034bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003574 <HAL_ADC_Start+0x220>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d03e      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 80034c8:	e005      	b.n	80034d6 <HAL_ADC_Start+0x182>
 80034ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_ADC_Start+0x224>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d037      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034de:	d004      	beq.n	80034ea <HAL_ADC_Start+0x196>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a22      	ldr	r2, [pc, #136]	@ (8003570 <HAL_ADC_Start+0x21c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d106      	bne.n	80034f8 <HAL_ADC_Start+0x1a4>
 80034ea:	4b22      	ldr	r3, [pc, #136]	@ (8003574 <HAL_ADC_Start+0x220>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d027      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 80034f6:	e005      	b.n	8003504 <HAL_ADC_Start+0x1b0>
 80034f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003578 <HAL_ADC_Start+0x224>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2b05      	cmp	r3, #5
 8003502:	d020      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350c:	d004      	beq.n	8003518 <HAL_ADC_Start+0x1c4>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <HAL_ADC_Start+0x21c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d106      	bne.n	8003526 <HAL_ADC_Start+0x1d2>
 8003518:	4b16      	ldr	r3, [pc, #88]	@ (8003574 <HAL_ADC_Start+0x220>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2b09      	cmp	r3, #9
 8003522:	d010      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 8003524:	e005      	b.n	8003532 <HAL_ADC_Start+0x1de>
 8003526:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <HAL_ADC_Start+0x224>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2b09      	cmp	r3, #9
 8003530:	d009      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353a:	d004      	beq.n	8003546 <HAL_ADC_Start+0x1f2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	@ (800357c <HAL_ADC_Start+0x228>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10f      	bne.n	8003566 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0204 	orr.w	r2, r2, #4
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	e006      	b.n	8003566 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003560:	e001      	b.n	8003566 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	50000100 	.word	0x50000100
 8003574:	50000300 	.word	0x50000300
 8003578:	50000700 	.word	0x50000700
 800357c:	50000400 	.word	0x50000400

08003580 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b08      	cmp	r3, #8
 8003594:	d102      	bne.n	800359c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003596:	2308      	movs	r3, #8
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e03a      	b.n	8003612 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_PollForConversion+0x30>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a72      	ldr	r2, [pc, #456]	@ (8003774 <HAL_ADC_PollForConversion+0x1f4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_PollForConversion+0x34>
 80035b0:	4b71      	ldr	r3, [pc, #452]	@ (8003778 <HAL_ADC_PollForConversion+0x1f8>)
 80035b2:	e000      	b.n	80035b6 <HAL_ADC_PollForConversion+0x36>
 80035b4:	4b71      	ldr	r3, [pc, #452]	@ (800377c <HAL_ADC_PollForConversion+0x1fc>)
 80035b6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d112      	bne.n	80035ea <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11d      	bne.n	800360e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0bf      	b.n	800376a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0ad      	b.n	800376a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800360e:	230c      	movs	r3, #12
 8003610:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800361a:	d004      	beq.n	8003626 <HAL_ADC_PollForConversion+0xa6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a54      	ldr	r2, [pc, #336]	@ (8003774 <HAL_ADC_PollForConversion+0x1f4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d106      	bne.n	8003634 <HAL_ADC_PollForConversion+0xb4>
 8003626:	4b54      	ldr	r3, [pc, #336]	@ (8003778 <HAL_ADC_PollForConversion+0x1f8>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2b00      	cmp	r3, #0
 8003630:	d010      	beq.n	8003654 <HAL_ADC_PollForConversion+0xd4>
 8003632:	e005      	b.n	8003640 <HAL_ADC_PollForConversion+0xc0>
 8003634:	4b51      	ldr	r3, [pc, #324]	@ (800377c <HAL_ADC_PollForConversion+0x1fc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_ADC_PollForConversion+0xd4>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003648:	d004      	beq.n	8003654 <HAL_ADC_PollForConversion+0xd4>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4c      	ldr	r2, [pc, #304]	@ (8003780 <HAL_ADC_PollForConversion+0x200>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d104      	bne.n	800365e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e00f      	b.n	800367e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003666:	d004      	beq.n	8003672 <HAL_ADC_PollForConversion+0xf2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a41      	ldr	r2, [pc, #260]	@ (8003774 <HAL_ADC_PollForConversion+0x1f4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d102      	bne.n	8003678 <HAL_ADC_PollForConversion+0xf8>
 8003672:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003676:	e000      	b.n	800367a <HAL_ADC_PollForConversion+0xfa>
 8003678:	4b41      	ldr	r3, [pc, #260]	@ (8003780 <HAL_ADC_PollForConversion+0x200>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800367e:	f7ff fc3f 	bl	8002f00 <HAL_GetTick>
 8003682:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003684:	e021      	b.n	80036ca <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d01d      	beq.n	80036ca <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d007      	beq.n	80036a4 <HAL_ADC_PollForConversion+0x124>
 8003694:	f7ff fc34 	bl	8002f00 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d212      	bcs.n	80036ca <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f043 0204 	orr.w	r2, r3, #4
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04f      	b.n	800376a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0d6      	beq.n	8003686 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d131      	bne.n	8003756 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d12c      	bne.n	8003756 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d125      	bne.n	8003756 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d112      	bne.n	800373e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d112      	bne.n	8003756 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	f043 0201 	orr.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40
 800373c:	e00b      	b.n	8003756 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	50000100 	.word	0x50000100
 8003778:	50000300 	.word	0x50000300
 800377c:	50000700 	.word	0x50000700
 8003780:	50000400 	.word	0x50000400

08003784 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b09b      	sub	sp, #108	@ 0x6c
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x22>
 80037be:	2302      	movs	r3, #2
 80037c0:	e2c8      	b.n	8003d54 <HAL_ADC_ConfigChannel+0x5b4>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 82ac 	bne.w	8003d32 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d81c      	bhi.n	800381c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	461a      	mov	r2, r3
 80037f6:	231f      	movs	r3, #31
 80037f8:	4093      	lsls	r3, r2
 80037fa:	43db      	mvns	r3, r3
 80037fc:	4019      	ands	r1, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa00 f203 	lsl.w	r2, r0, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
 800381a:	e063      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b09      	cmp	r3, #9
 8003822:	d81e      	bhi.n	8003862 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	3b1e      	subs	r3, #30
 8003838:	221f      	movs	r2, #31
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43db      	mvns	r3, r3
 8003840:	4019      	ands	r1, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	3b1e      	subs	r3, #30
 8003854:	fa00 f203 	lsl.w	r2, r0, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003860:	e040      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b0e      	cmp	r3, #14
 8003868:	d81e      	bhi.n	80038a8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	3b3c      	subs	r3, #60	@ 0x3c
 800387e:	221f      	movs	r2, #31
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	4019      	ands	r1, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4413      	add	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	3b3c      	subs	r3, #60	@ 0x3c
 800389a:	fa00 f203 	lsl.w	r2, r0, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80038a6:	e01d      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	4413      	add	r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	3b5a      	subs	r3, #90	@ 0x5a
 80038bc:	221f      	movs	r2, #31
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	4019      	ands	r1, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	3b5a      	subs	r3, #90	@ 0x5a
 80038d8:	fa00 f203 	lsl.w	r2, r0, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f040 80e5 	bne.w	8003abe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	d91c      	bls.n	8003936 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6999      	ldr	r1, [r3, #24]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4613      	mov	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	3b1e      	subs	r3, #30
 800390e:	2207      	movs	r2, #7
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	4019      	ands	r1, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6898      	ldr	r0, [r3, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	3b1e      	subs	r3, #30
 8003928:	fa00 f203 	lsl.w	r2, r0, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	e019      	b.n	800396a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	2207      	movs	r2, #7
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	4019      	ands	r1, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6898      	ldr	r0, [r3, #8]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	fa00 f203 	lsl.w	r2, r0, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	3b01      	subs	r3, #1
 8003988:	2b03      	cmp	r3, #3
 800398a:	d84f      	bhi.n	8003a2c <HAL_ADC_ConfigChannel+0x28c>
 800398c:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <HAL_ADC_ConfigChannel+0x1f4>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039a5 	.word	0x080039a5
 8003998:	080039c7 	.word	0x080039c7
 800399c:	080039e9 	.word	0x080039e9
 80039a0:	08003a0b 	.word	0x08003a0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039aa:	4b99      	ldr	r3, [pc, #612]	@ (8003c10 <HAL_ADC_ConfigChannel+0x470>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	0691      	lsls	r1, r2, #26
 80039b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039b6:	430a      	orrs	r2, r1
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80039c2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80039c4:	e07b      	b.n	8003abe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80039cc:	4b90      	ldr	r3, [pc, #576]	@ (8003c10 <HAL_ADC_ConfigChannel+0x470>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	0691      	lsls	r1, r2, #26
 80039d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039d8:	430a      	orrs	r2, r1
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80039e4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80039e6:	e06a      	b.n	8003abe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80039ee:	4b88      	ldr	r3, [pc, #544]	@ (8003c10 <HAL_ADC_ConfigChannel+0x470>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	0691      	lsls	r1, r2, #26
 80039f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039fa:	430a      	orrs	r2, r1
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a06:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a08:	e059      	b.n	8003abe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a10:	4b7f      	ldr	r3, [pc, #508]	@ (8003c10 <HAL_ADC_ConfigChannel+0x470>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	0691      	lsls	r1, r2, #26
 8003a1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a28:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003a2a:	e048      	b.n	8003abe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	069b      	lsls	r3, r3, #26
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d107      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a4e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	069b      	lsls	r3, r3, #26
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a72:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	069b      	lsls	r3, r3, #26
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a96:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	069b      	lsls	r3, r3, #26
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003aba:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8003abc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d108      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x33e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x33e>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x340>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f040 8131 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d00f      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43da      	mvns	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	400a      	ands	r2, r1
 8003b08:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003b0c:	e049      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b09      	cmp	r3, #9
 8003b2e:	d91c      	bls.n	8003b6a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6999      	ldr	r1, [r3, #24]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	3b1b      	subs	r3, #27
 8003b42:	2207      	movs	r2, #7
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	4019      	ands	r1, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6898      	ldr	r0, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	3b1b      	subs	r3, #27
 8003b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	619a      	str	r2, [r3, #24]
 8003b68:	e01b      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6959      	ldr	r1, [r3, #20]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	4019      	ands	r1, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6898      	ldr	r0, [r3, #8]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003baa:	d004      	beq.n	8003bb6 <HAL_ADC_ConfigChannel+0x416>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <HAL_ADC_ConfigChannel+0x474>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x41a>
 8003bb6:	4b18      	ldr	r3, [pc, #96]	@ (8003c18 <HAL_ADC_ConfigChannel+0x478>)
 8003bb8:	e000      	b.n	8003bbc <HAL_ADC_ConfigChannel+0x41c>
 8003bba:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <HAL_ADC_ConfigChannel+0x47c>)
 8003bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d105      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003bd6:	2b11      	cmp	r3, #17
 8003bd8:	d105      	bne.n	8003be6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003bea:	2b12      	cmp	r3, #18
 8003bec:	f040 80ac 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003bf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f040 80a5 	bne.w	8003d48 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c06:	d10b      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x480>
 8003c08:	4b02      	ldr	r3, [pc, #8]	@ (8003c14 <HAL_ADC_ConfigChannel+0x474>)
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e023      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x4b6>
 8003c0e:	bf00      	nop
 8003c10:	83fff000 	.word	0x83fff000
 8003c14:	50000100 	.word	0x50000100
 8003c18:	50000300 	.word	0x50000300
 8003c1c:	50000700 	.word	0x50000700
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a4e      	ldr	r2, [pc, #312]	@ (8003d60 <HAL_ADC_ConfigChannel+0x5c0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d103      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x492>
 8003c2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e011      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x4b6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4b      	ldr	r2, [pc, #300]	@ (8003d64 <HAL_ADC_ConfigChannel+0x5c4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d102      	bne.n	8003c42 <HAL_ADC_ConfigChannel+0x4a2>
 8003c3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d68 <HAL_ADC_ConfigChannel+0x5c8>)
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e009      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x4b6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a48      	ldr	r2, [pc, #288]	@ (8003d68 <HAL_ADC_ConfigChannel+0x5c8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d102      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x4b2>
 8003c4c:	4b45      	ldr	r3, [pc, #276]	@ (8003d64 <HAL_ADC_ConfigChannel+0x5c4>)
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e001      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x4b6>
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d108      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x4d6>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x4d6>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x4d8>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d150      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d010      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x4fe>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x4fe>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x500>
 8003c9e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d13c      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b10      	cmp	r3, #16
 8003caa:	d11d      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x548>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cb4:	d118      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cc0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d6c <HAL_ADC_ConfigChannel+0x5cc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d70 <HAL_ADC_ConfigChannel+0x5d0>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	0c9a      	lsrs	r2, r3, #18
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003cd8:	e002      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f9      	bne.n	8003cda <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ce6:	e02e      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b11      	cmp	r3, #17
 8003cee:	d10b      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x568>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cf8:	d106      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d04:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d06:	e01e      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b12      	cmp	r3, #18
 8003d0e:	d11a      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003d10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d1a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d1c:	e013      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003d30:	e00a      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003d44:	e000      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003d46:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	376c      	adds	r7, #108	@ 0x6c
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	50000100 	.word	0x50000100
 8003d64:	50000400 	.word	0x50000400
 8003d68:	50000500 	.word	0x50000500
 8003d6c:	20000014 	.word	0x20000014
 8003d70:	431bde83 	.word	0x431bde83

08003d74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d108      	bne.n	8003da0 <ADC_Enable+0x2c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <ADC_Enable+0x2c>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <ADC_Enable+0x2e>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d143      	bne.n	8003e2e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	4b22      	ldr	r3, [pc, #136]	@ (8003e38 <ADC_Enable+0xc4>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00d      	beq.n	8003dd0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	f043 0210 	orr.w	r2, r3, #16
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e02f      	b.n	8003e30 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003de0:	f7ff f88e 	bl	8002f00 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003de6:	e01b      	b.n	8003e20 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003de8:	f7ff f88a 	bl	8002f00 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d914      	bls.n	8003e20 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d00d      	beq.n	8003e20 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e007      	b.n	8003e30 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d1dc      	bne.n	8003de8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	8000003f 	.word	0x8000003f

08003e3c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d108      	bne.n	8003e68 <ADC_Disable+0x2c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <ADC_Disable+0x2c>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <ADC_Disable+0x2e>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d047      	beq.n	8003efe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030d 	and.w	r3, r3, #13
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d10f      	bne.n	8003e9c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0202 	orr.w	r2, r2, #2
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2203      	movs	r2, #3
 8003e92:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003e94:	f7ff f834 	bl	8002f00 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e9a:	e029      	b.n	8003ef0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	f043 0210 	orr.w	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eac:	f043 0201 	orr.w	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e023      	b.n	8003f00 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb8:	f7ff f822 	bl	8002f00 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d914      	bls.n	8003ef0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d10d      	bne.n	8003ef0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f043 0210 	orr.w	r2, r3, #16
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d0dc      	beq.n	8003eb8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f18:	4b0c      	ldr	r3, [pc, #48]	@ (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f24:	4013      	ands	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f3a:	4a04      	ldr	r2, [pc, #16]	@ (8003f4c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	60d3      	str	r3, [r2, #12]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f54:	4b04      	ldr	r3, [pc, #16]	@ (8003f68 <__NVIC_GetPriorityGrouping+0x18>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	f003 0307 	and.w	r3, r3, #7
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	db0b      	blt.n	8003f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	f003 021f 	and.w	r2, r3, #31
 8003f84:	4907      	ldr	r1, [pc, #28]	@ (8003fa4 <__NVIC_EnableIRQ+0x38>)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	e000e100 	.word	0xe000e100

08003fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	db0a      	blt.n	8003fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	490c      	ldr	r1, [pc, #48]	@ (8003ff4 <__NVIC_SetPriority+0x4c>)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	0112      	lsls	r2, r2, #4
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd0:	e00a      	b.n	8003fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	4908      	ldr	r1, [pc, #32]	@ (8003ff8 <__NVIC_SetPriority+0x50>)
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	3b04      	subs	r3, #4
 8003fe0:	0112      	lsls	r2, r2, #4
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	761a      	strb	r2, [r3, #24]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	e000e100 	.word	0xe000e100
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f1c3 0307 	rsb	r3, r3, #7
 8004016:	2b04      	cmp	r3, #4
 8004018:	bf28      	it	cs
 800401a:	2304      	movcs	r3, #4
 800401c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3304      	adds	r3, #4
 8004022:	2b06      	cmp	r3, #6
 8004024:	d902      	bls.n	800402c <NVIC_EncodePriority+0x30>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3b03      	subs	r3, #3
 800402a:	e000      	b.n	800402e <NVIC_EncodePriority+0x32>
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004030:	f04f 32ff 	mov.w	r2, #4294967295
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	401a      	ands	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004044:	f04f 31ff 	mov.w	r1, #4294967295
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	fa01 f303 	lsl.w	r3, r1, r3
 800404e:	43d9      	mvns	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004054:	4313      	orrs	r3, r2
         );
}
 8004056:	4618      	mov	r0, r3
 8004058:	3724      	adds	r7, #36	@ 0x24
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004074:	d301      	bcc.n	800407a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004076:	2301      	movs	r3, #1
 8004078:	e00f      	b.n	800409a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800407a:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <SysTick_Config+0x40>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3b01      	subs	r3, #1
 8004080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004082:	210f      	movs	r1, #15
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	f7ff ff8e 	bl	8003fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800408c:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <SysTick_Config+0x40>)
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004092:	4b04      	ldr	r3, [pc, #16]	@ (80040a4 <SysTick_Config+0x40>)
 8004094:	2207      	movs	r2, #7
 8004096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	e000e010 	.word	0xe000e010

080040a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ff29 	bl	8003f08 <__NVIC_SetPriorityGrouping>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	4603      	mov	r3, r0
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
 80040ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040d0:	f7ff ff3e 	bl	8003f50 <__NVIC_GetPriorityGrouping>
 80040d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f7ff ff8e 	bl	8003ffc <NVIC_EncodePriority>
 80040e0:	4602      	mov	r2, r0
 80040e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff5d 	bl	8003fa8 <__NVIC_SetPriority>
}
 80040ee:	bf00      	nop
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	4603      	mov	r3, r0
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff31 	bl	8003f6c <__NVIC_EnableIRQ>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ffa2 	bl	8004064 <SysTick_Config>
 8004120:	4603      	mov	r3, r0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800413a:	e160      	b.n	80043fe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	4013      	ands	r3, r2
 800414a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8152 	beq.w	80043f8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d005      	beq.n	800416c <HAL_GPIO_Init+0x40>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d130      	bne.n	80041ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	2203      	movs	r2, #3
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a2:	2201      	movs	r2, #1
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 0201 	and.w	r2, r3, #1
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d017      	beq.n	800420a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	2203      	movs	r2, #3
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689a      	ldr	r2, [r3, #8]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d123      	bne.n	800425e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	08da      	lsrs	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3208      	adds	r2, #8
 800421e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	08da      	lsrs	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3208      	adds	r2, #8
 8004258:	6939      	ldr	r1, [r7, #16]
 800425a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	2203      	movs	r2, #3
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0203 	and.w	r2, r3, #3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80ac 	beq.w	80043f8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a0:	4b5e      	ldr	r3, [pc, #376]	@ (800441c <HAL_GPIO_Init+0x2f0>)
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	4a5d      	ldr	r2, [pc, #372]	@ (800441c <HAL_GPIO_Init+0x2f0>)
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6193      	str	r3, [r2, #24]
 80042ac:	4b5b      	ldr	r3, [pc, #364]	@ (800441c <HAL_GPIO_Init+0x2f0>)
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042b8:	4a59      	ldr	r2, [pc, #356]	@ (8004420 <HAL_GPIO_Init+0x2f4>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	3302      	adds	r3, #2
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	220f      	movs	r2, #15
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042e2:	d025      	beq.n	8004330 <HAL_GPIO_Init+0x204>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a4f      	ldr	r2, [pc, #316]	@ (8004424 <HAL_GPIO_Init+0x2f8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01f      	beq.n	800432c <HAL_GPIO_Init+0x200>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004428 <HAL_GPIO_Init+0x2fc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d019      	beq.n	8004328 <HAL_GPIO_Init+0x1fc>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a4d      	ldr	r2, [pc, #308]	@ (800442c <HAL_GPIO_Init+0x300>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_GPIO_Init+0x1f8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a4c      	ldr	r2, [pc, #304]	@ (8004430 <HAL_GPIO_Init+0x304>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00d      	beq.n	8004320 <HAL_GPIO_Init+0x1f4>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a4b      	ldr	r2, [pc, #300]	@ (8004434 <HAL_GPIO_Init+0x308>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d007      	beq.n	800431c <HAL_GPIO_Init+0x1f0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a4a      	ldr	r2, [pc, #296]	@ (8004438 <HAL_GPIO_Init+0x30c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_GPIO_Init+0x1ec>
 8004314:	2306      	movs	r3, #6
 8004316:	e00c      	b.n	8004332 <HAL_GPIO_Init+0x206>
 8004318:	2307      	movs	r3, #7
 800431a:	e00a      	b.n	8004332 <HAL_GPIO_Init+0x206>
 800431c:	2305      	movs	r3, #5
 800431e:	e008      	b.n	8004332 <HAL_GPIO_Init+0x206>
 8004320:	2304      	movs	r3, #4
 8004322:	e006      	b.n	8004332 <HAL_GPIO_Init+0x206>
 8004324:	2303      	movs	r3, #3
 8004326:	e004      	b.n	8004332 <HAL_GPIO_Init+0x206>
 8004328:	2302      	movs	r3, #2
 800432a:	e002      	b.n	8004332 <HAL_GPIO_Init+0x206>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_GPIO_Init+0x206>
 8004330:	2300      	movs	r3, #0
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	f002 0203 	and.w	r2, r2, #3
 8004338:	0092      	lsls	r2, r2, #2
 800433a:	4093      	lsls	r3, r2
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004342:	4937      	ldr	r1, [pc, #220]	@ (8004420 <HAL_GPIO_Init+0x2f4>)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	3302      	adds	r3, #2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004350:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <HAL_GPIO_Init+0x310>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	43db      	mvns	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <HAL_GPIO_Init+0x310>)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800437a:	4b30      	ldr	r3, [pc, #192]	@ (800443c <HAL_GPIO_Init+0x310>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800439e:	4a27      	ldr	r2, [pc, #156]	@ (800443c <HAL_GPIO_Init+0x310>)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043a4:	4b25      	ldr	r3, [pc, #148]	@ (800443c <HAL_GPIO_Init+0x310>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4013      	ands	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80043c8:	4a1c      	ldr	r2, [pc, #112]	@ (800443c <HAL_GPIO_Init+0x310>)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ce:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_GPIO_Init+0x310>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043f2:	4a12      	ldr	r2, [pc, #72]	@ (800443c <HAL_GPIO_Init+0x310>)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	3301      	adds	r3, #1
 80043fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	f47f ae97 	bne.w	800413c <HAL_GPIO_Init+0x10>
  }
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	40021000 	.word	0x40021000
 8004420:	40010000 	.word	0x40010000
 8004424:	48000400 	.word	0x48000400
 8004428:	48000800 	.word	0x48000800
 800442c:	48000c00 	.word	0x48000c00
 8004430:	48001000 	.word	0x48001000
 8004434:	48001400 	.word	0x48001400
 8004438:	48001800 	.word	0x48001800
 800443c:	40010400 	.word	0x40010400

08004440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e001      	b.n	8004462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
 800447c:	4613      	mov	r3, r2
 800447e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004480:	787b      	ldrb	r3, [r7, #1]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004486:	887a      	ldrh	r2, [r7, #2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800448c:	e002      	b.n	8004494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044aa:	4b08      	ldr	r3, [pc, #32]	@ (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b6:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fbf6 	bl	8000cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40010400 	.word	0x40010400

080044d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f001 b80a 	b.w	800550a <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 8161 	beq.w	80047ce <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800450c:	4bae      	ldr	r3, [pc, #696]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b04      	cmp	r3, #4
 8004516:	d00c      	beq.n	8004532 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004518:	4bab      	ldr	r3, [pc, #684]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b08      	cmp	r3, #8
 8004522:	d157      	bne.n	80045d4 <HAL_RCC_OscConfig+0x104>
 8004524:	4ba8      	ldr	r3, [pc, #672]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d150      	bne.n	80045d4 <HAL_RCC_OscConfig+0x104>
 8004532:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004536:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800453e:	fa93 f3a3 	rbit	r3, r3
 8004542:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8004546:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b3f      	cmp	r3, #63	@ 0x3f
 8004552:	d802      	bhi.n	800455a <HAL_RCC_OscConfig+0x8a>
 8004554:	4b9c      	ldr	r3, [pc, #624]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0xb6>
 800455a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800455e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800456e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004572:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004576:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004582:	4b91      	ldr	r3, [pc, #580]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800458a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800458e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004592:	fa92 f2a2 	rbit	r2, r2
 8004596:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800459a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800459e:	fab2 f282 	clz	r2, r2
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	f042 0220 	orr.w	r2, r2, #32
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	f002 021f 	and.w	r2, r2, #31
 80045ae:	2101      	movs	r1, #1
 80045b0:	fa01 f202 	lsl.w	r2, r1, r2
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8108 	beq.w	80047cc <HAL_RCC_OscConfig+0x2fc>
 80045bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 80ff 	bne.w	80047cc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f000 bf9b 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e4:	d106      	bne.n	80045f4 <HAL_RCC_OscConfig+0x124>
 80045e6:	4b78      	ldr	r3, [pc, #480]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a77      	ldr	r2, [pc, #476]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e036      	b.n	8004662 <HAL_RCC_OscConfig+0x192>
 80045f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10c      	bne.n	800461e <HAL_RCC_OscConfig+0x14e>
 8004604:	4b70      	ldr	r3, [pc, #448]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a6f      	ldr	r2, [pc, #444]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800460a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b6d      	ldr	r3, [pc, #436]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a6c      	ldr	r2, [pc, #432]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e021      	b.n	8004662 <HAL_RCC_OscConfig+0x192>
 800461e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004622:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800462e:	d10c      	bne.n	800464a <HAL_RCC_OscConfig+0x17a>
 8004630:	4b65      	ldr	r3, [pc, #404]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a64      	ldr	r2, [pc, #400]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004636:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b62      	ldr	r3, [pc, #392]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a61      	ldr	r2, [pc, #388]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e00b      	b.n	8004662 <HAL_RCC_OscConfig+0x192>
 800464a:	4b5f      	ldr	r3, [pc, #380]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a5e      	ldr	r2, [pc, #376]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	4b5c      	ldr	r3, [pc, #368]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a5b      	ldr	r2, [pc, #364]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800465c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004660:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004666:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d054      	beq.n	800471c <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fc45 	bl	8002f00 <HAL_GetTick>
 8004676:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800467c:	f7fe fc40 	bl	8002f00 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	@ 0x64
 800468a:	d902      	bls.n	8004692 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	f000 bf3c 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
 8004692:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004696:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80046a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80046b2:	d802      	bhi.n	80046ba <HAL_RCC_OscConfig+0x1ea>
 80046b4:	4b44      	ldr	r3, [pc, #272]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	e015      	b.n	80046e6 <HAL_RCC_OscConfig+0x216>
 80046ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046be:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80046c6:	fa93 f3a3 	rbit	r3, r3
 80046ca:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80046ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046d2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80046d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80046e2:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046ea:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80046ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80046f2:	fa92 f2a2 	rbit	r2, r2
 80046f6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80046fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f002 021f 	and.w	r2, r2, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0b0      	beq.n	800467c <HAL_RCC_OscConfig+0x1ac>
 800471a:	e058      	b.n	80047ce <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fe fbf0 	bl	8002f00 <HAL_GetTick>
 8004720:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004726:	f7fe fbeb 	bl	8002f00 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	@ 0x64
 8004734:	d902      	bls.n	800473c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	f000 bee7 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
 800473c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004740:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004744:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004750:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b3f      	cmp	r3, #63	@ 0x3f
 800475c:	d802      	bhi.n	8004764 <HAL_RCC_OscConfig+0x294>
 800475e:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	e015      	b.n	8004790 <HAL_RCC_OscConfig+0x2c0>
 8004764:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004768:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004778:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800477c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004780:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_RCC_OscConfig+0x2f8>)
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004794:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004798:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800479c:	fa92 f2a2 	rbit	r2, r2
 80047a0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80047a4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80047a8:	fab2 f282 	clz	r2, r2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	f042 0220 	orr.w	r2, r2, #32
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	f002 021f 	and.w	r2, r2, #31
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1b0      	bne.n	8004726 <HAL_RCC_OscConfig+0x256>
 80047c4:	e003      	b.n	80047ce <HAL_RCC_OscConfig+0x2fe>
 80047c6:	bf00      	nop
 80047c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 816d 	beq.w	8004abe <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80047e4:	4bcd      	ldr	r3, [pc, #820]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 030c 	and.w	r3, r3, #12
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80047f0:	4bca      	ldr	r3, [pc, #808]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d16e      	bne.n	80048da <HAL_RCC_OscConfig+0x40a>
 80047fc:	4bc7      	ldr	r3, [pc, #796]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004808:	d167      	bne.n	80048da <HAL_RCC_OscConfig+0x40a>
 800480a:	2302      	movs	r3, #2
 800480c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004814:	fa93 f3a3 	rbit	r3, r3
 8004818:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 800481c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004820:	fab3 f383 	clz	r3, r3
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b3f      	cmp	r3, #63	@ 0x3f
 8004828:	d802      	bhi.n	8004830 <HAL_RCC_OscConfig+0x360>
 800482a:	4bbc      	ldr	r3, [pc, #752]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e013      	b.n	8004858 <HAL_RCC_OscConfig+0x388>
 8004830:	2302      	movs	r3, #2
 8004832:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004842:	2302      	movs	r3, #2
 8004844:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004848:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004854:	4bb1      	ldr	r3, [pc, #708]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	2202      	movs	r2, #2
 800485a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800485e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004862:	fa92 f2a2 	rbit	r2, r2
 8004866:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800486a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800486e:	fab2 f282 	clz	r2, r2
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	f042 0220 	orr.w	r2, r2, #32
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	f002 021f 	and.w	r2, r2, #31
 800487e:	2101      	movs	r1, #1
 8004880:	fa01 f202 	lsl.w	r2, r1, r2
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_RCC_OscConfig+0x3d0>
 800488a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800488e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d002      	beq.n	80048a0 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f000 be35 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a0:	4b9e      	ldr	r3, [pc, #632]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	21f8      	movs	r1, #248	@ 0xf8
 80048b6:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80048be:	fa91 f1a1 	rbit	r1, r1
 80048c2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80048c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80048ca:	fab1 f181 	clz	r1, r1
 80048ce:	b2c9      	uxtb	r1, r1
 80048d0:	408b      	lsls	r3, r1
 80048d2:	4992      	ldr	r1, [pc, #584]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d8:	e0f1      	b.n	8004abe <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8083 	beq.w	80049f2 <HAL_RCC_OscConfig+0x522>
 80048ec:	2301      	movs	r3, #1
 80048ee:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80048fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800490c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	461a      	mov	r2, r3
 8004914:	2301      	movs	r3, #1
 8004916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fe faf2 	bl	8002f00 <HAL_GetTick>
 800491c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004922:	f7fe faed 	bl	8002f00 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d902      	bls.n	8004938 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	f000 bde9 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
 8004938:	2302      	movs	r3, #2
 800493a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800494a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b3f      	cmp	r3, #63	@ 0x3f
 8004956:	d802      	bhi.n	800495e <HAL_RCC_OscConfig+0x48e>
 8004958:	4b70      	ldr	r3, [pc, #448]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	e013      	b.n	8004986 <HAL_RCC_OscConfig+0x4b6>
 800495e:	2302      	movs	r3, #2
 8004960:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004970:	2302      	movs	r3, #2
 8004972:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004976:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004982:	4b66      	ldr	r3, [pc, #408]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 8004984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004986:	2202      	movs	r2, #2
 8004988:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800498c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004990:	fa92 f2a2 	rbit	r2, r2
 8004994:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8004998:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800499c:	fab2 f282 	clz	r2, r2
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	f042 0220 	orr.w	r2, r2, #32
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	f002 021f 	and.w	r2, r2, #31
 80049ac:	2101      	movs	r1, #1
 80049ae:	fa01 f202 	lsl.w	r2, r1, r2
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0b4      	beq.n	8004922 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b8:	4b58      	ldr	r3, [pc, #352]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80049c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	21f8      	movs	r1, #248	@ 0xf8
 80049ce:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80049d6:	fa91 f1a1 	rbit	r1, r1
 80049da:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80049de:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80049e2:	fab1 f181 	clz	r1, r1
 80049e6:	b2c9      	uxtb	r1, r1
 80049e8:	408b      	lsls	r3, r1
 80049ea:	494c      	ldr	r1, [pc, #304]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]
 80049f0:	e065      	b.n	8004abe <HAL_RCC_OscConfig+0x5ee>
 80049f2:	2301      	movs	r3, #1
 80049f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80049fc:	fa93 f3a3 	rbit	r3, r3
 8004a00:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8004a04:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a08:	fab3 f383 	clz	r3, r3
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004a12:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1e:	f7fe fa6f 	bl	8002f00 <HAL_GetTick>
 8004a22:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fe fa6a 	bl	8002f00 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d902      	bls.n	8004a3e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f000 bd66 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004a48:	fa93 f3a3 	rbit	r3, r3
 8004a4c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8004a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a54:	fab3 f383 	clz	r3, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a5c:	d802      	bhi.n	8004a64 <HAL_RCC_OscConfig+0x594>
 8004a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e013      	b.n	8004a8c <HAL_RCC_OscConfig+0x5bc>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004a6e:	fa93 f3a3 	rbit	r3, r3
 8004a72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004a76:	2302      	movs	r3, #2
 8004a78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004a7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004a80:	fa93 f3a3 	rbit	r3, r3
 8004a84:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004a88:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <HAL_RCC_OscConfig+0x64c>)
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004a92:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004a96:	fa92 f2a2 	rbit	r2, r2
 8004a9a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8004a9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004aa2:	fab2 f282 	clz	r2, r2
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	f042 0220 	orr.w	r2, r2, #32
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	f002 021f 	and.w	r2, r2, #31
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1b4      	bne.n	8004a28 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ac2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8119 	beq.w	8004d06 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ad8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8082 	beq.w	8004bea <HAL_RCC_OscConfig+0x71a>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8004af8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afc:	fab3 f383 	clz	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <HAL_RCC_OscConfig+0x650>)
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b10:	f7fe f9f6 	bl	8002f00 <HAL_GetTick>
 8004b14:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b18:	e00f      	b.n	8004b3a <HAL_RCC_OscConfig+0x66a>
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fe f9ec 	bl	8002f00 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d902      	bls.n	8004b3a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	f000 bce8 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b44:	fa93 f2a3 	rbit	r2, r3
 8004b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b4c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	fa93 f2a3 	rbit	r2, r3
 8004b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b7e:	2202      	movs	r2, #2
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	fa93 f2a3 	rbit	r2, r3
 8004b90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004b94:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004b98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4bb0      	ldr	r3, [pc, #704]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ba2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	fa93 f1a3 	rbit	r1, r3
 8004bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bbc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004bc0:	6019      	str	r1, [r3, #0]
  return result;
 8004bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bc6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fab3 f383 	clz	r3, r3
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	2101      	movs	r1, #1
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d09d      	beq.n	8004b24 <HAL_RCC_OscConfig+0x654>
 8004be8:	e08d      	b.n	8004d06 <HAL_RCC_OscConfig+0x836>
 8004bea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004bfa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	fa93 f2a3 	rbit	r2, r3
 8004c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c0c:	601a      	str	r2, [r3, #0]
  return result;
 8004c0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004c16:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b8f      	ldr	r3, [pc, #572]	@ (8004e60 <HAL_RCC_OscConfig+0x990>)
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	461a      	mov	r2, r3
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2c:	f7fe f968 	bl	8002f00 <HAL_GetTick>
 8004c30:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fe f963 	bl	8002f00 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d902      	bls.n	8004c4c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	f000 bc5f 	b.w	800550a <HAL_RCC_OscConfig+0x103a>
 8004c4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c50:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004c54:	2202      	movs	r2, #2
 8004c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	fa93 f2a3 	rbit	r2, r3
 8004c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c78:	2202      	movs	r2, #2
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	fa93 f2a3 	rbit	r2, r3
 8004c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c98:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ca4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	fa93 f2a3 	rbit	r2, r3
 8004cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004cb6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb8:	4b68      	ldr	r3, [pc, #416]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004cba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004cc4:	2102      	movs	r1, #2
 8004cc6:	6019      	str	r1, [r3, #0]
 8004cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ccc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	fa93 f1a3 	rbit	r1, r3
 8004cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004cda:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004cde:	6019      	str	r1, [r3, #0]
  return result;
 8004ce0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ce4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d197      	bne.n	8004c36 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 819c 	beq.w	8005054 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b4e      	ldr	r3, [pc, #312]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d116      	bne.n	8004d5c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4a4a      	ldr	r2, [pc, #296]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d38:	61d3      	str	r3, [r2, #28]
 8004d3a:	4b48      	ldr	r3, [pc, #288]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d54:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5c:	4b41      	ldr	r3, [pc, #260]	@ (8004e64 <HAL_RCC_OscConfig+0x994>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11a      	bne.n	8004d9e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d68:	4b3e      	ldr	r3, [pc, #248]	@ (8004e64 <HAL_RCC_OscConfig+0x994>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e64 <HAL_RCC_OscConfig+0x994>)
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d72:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d74:	f7fe f8c4 	bl	8002f00 <HAL_GetTick>
 8004d78:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	e009      	b.n	8004d92 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fe f8bf 	bl	8002f00 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	@ 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e3bb      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b34      	ldr	r3, [pc, #208]	@ (8004e64 <HAL_RCC_OscConfig+0x994>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0ef      	beq.n	8004d7e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004da2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d106      	bne.n	8004dbc <HAL_RCC_OscConfig+0x8ec>
 8004dae:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	6213      	str	r3, [r2, #32]
 8004dba:	e035      	b.n	8004e28 <HAL_RCC_OscConfig+0x958>
 8004dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x916>
 8004dcc:	4b23      	ldr	r3, [pc, #140]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	4a22      	ldr	r2, [pc, #136]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	6213      	str	r3, [r2, #32]
 8004dd8:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004dde:	f023 0304 	bic.w	r3, r3, #4
 8004de2:	6213      	str	r3, [r2, #32]
 8004de4:	e020      	b.n	8004e28 <HAL_RCC_OscConfig+0x958>
 8004de6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x940>
 8004df6:	4b19      	ldr	r3, [pc, #100]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004dfc:	f043 0304 	orr.w	r3, r3, #4
 8004e00:	6213      	str	r3, [r2, #32]
 8004e02:	4b16      	ldr	r3, [pc, #88]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4a15      	ldr	r2, [pc, #84]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6213      	str	r3, [r2, #32]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0x958>
 8004e10:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	6213      	str	r3, [r2, #32]
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4a0e      	ldr	r2, [pc, #56]	@ (8004e5c <HAL_RCC_OscConfig+0x98c>)
 8004e22:	f023 0304 	bic.w	r3, r3, #4
 8004e26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8085 	beq.w	8004f44 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fe f861 	bl	8002f00 <HAL_GetTick>
 8004e3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e42:	e011      	b.n	8004e68 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e44:	f7fe f85c 	bl	8002f00 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d907      	bls.n	8004e68 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e356      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	10908120 	.word	0x10908120
 8004e64:	40007000 	.word	0x40007000
 8004e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e6c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004e70:	2202      	movs	r2, #2
 8004e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e78:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	fa93 f2a3 	rbit	r2, r3
 8004e82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e86:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e90:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004e94:	2202      	movs	r2, #2
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004e9c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	fa93 f2a3 	rbit	r2, r3
 8004ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eaa:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004eae:	601a      	str	r2, [r3, #0]
  return result;
 8004eb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eb4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004eb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xa00>
 8004eca:	4b98      	ldr	r3, [pc, #608]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	e013      	b.n	8004ef8 <HAL_RCC_OscConfig+0xa28>
 8004ed0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ed4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004ed8:	2202      	movs	r2, #2
 8004eda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004ee0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	fa93 f2a3 	rbit	r2, r3
 8004eea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004eee:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	4b8d      	ldr	r3, [pc, #564]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004efc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004f00:	2102      	movs	r1, #2
 8004f02:	6011      	str	r1, [r2, #0]
 8004f04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f08:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	fa92 f1a2 	rbit	r1, r2
 8004f12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f16:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004f1a:	6011      	str	r1, [r2, #0]
  return result;
 8004f1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004f20:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	fab2 f282 	clz	r2, r2
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	f002 021f 	and.w	r2, r2, #31
 8004f36:	2101      	movs	r1, #1
 8004f38:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d080      	beq.n	8004e44 <HAL_RCC_OscConfig+0x974>
 8004f42:	e07d      	b.n	8005040 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7fd ffdc 	bl	8002f00 <HAL_GetTick>
 8004f48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4c:	e00b      	b.n	8004f66 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fd ffd7 	bl	8002f00 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e2d1      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
 8004f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f6a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004f6e:	2202      	movs	r2, #2
 8004f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f76:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f84:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f8e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004f92:	2202      	movs	r2, #2
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	fa93 f2a3 	rbit	r2, r3
 8004fa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fa8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004fac:	601a      	str	r2, [r3, #0]
  return result;
 8004fae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fb2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004fb6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb8:	fab3 f383 	clz	r3, r3
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <HAL_RCC_OscConfig+0xafe>
 8004fc8:	4b58      	ldr	r3, [pc, #352]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	e013      	b.n	8004ff6 <HAL_RCC_OscConfig+0xb26>
 8004fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fd2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fde:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	fa93 f2a3 	rbit	r2, r3
 8004fe8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004fec:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004ffa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004ffe:	2102      	movs	r1, #2
 8005000:	6011      	str	r1, [r2, #0]
 8005002:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005006:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	fa92 f1a2 	rbit	r1, r2
 8005010:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005014:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005018:	6011      	str	r1, [r2, #0]
  return result;
 800501a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800501e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	fab2 f282 	clz	r2, r2
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	f002 021f 	and.w	r2, r2, #31
 8005034:	2101      	movs	r1, #1
 8005036:	fa01 f202 	lsl.w	r2, r1, r2
 800503a:	4013      	ands	r3, r2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d186      	bne.n	8004f4e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005040:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8005044:	2b01      	cmp	r3, #1
 8005046:	d105      	bne.n	8005054 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005048:	4b38      	ldr	r3, [pc, #224]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	4a37      	ldr	r2, [pc, #220]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005052:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005054:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005058:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 8251 	beq.w	8005508 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005066:	4b31      	ldr	r3, [pc, #196]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 030c 	and.w	r3, r3, #12
 800506e:	2b08      	cmp	r3, #8
 8005070:	f000 820f 	beq.w	8005492 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005078:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b02      	cmp	r3, #2
 8005082:	f040 8165 	bne.w	8005350 <HAL_RCC_OscConfig+0xe80>
 8005086:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800508a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800508e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005098:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	fa93 f2a3 	rbit	r2, r3
 80050a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80050aa:	601a      	str	r2, [r3, #0]
  return result;
 80050ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050b0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80050b4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	fab3 f383 	clz	r3, r3
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80050c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	461a      	mov	r2, r3
 80050c8:	2300      	movs	r3, #0
 80050ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fd ff18 	bl	8002f00 <HAL_GetTick>
 80050d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d4:	e009      	b.n	80050ea <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fd ff13 	bl	8002f00 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e20f      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
 80050ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80050f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80050fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	fa93 f2a3 	rbit	r2, r3
 8005106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800510a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800510e:	601a      	str	r2, [r3, #0]
  return result;
 8005110:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005114:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8005118:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511a:	fab3 f383 	clz	r3, r3
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b3f      	cmp	r3, #63	@ 0x3f
 8005122:	d805      	bhi.n	8005130 <HAL_RCC_OscConfig+0xc60>
 8005124:	4b01      	ldr	r3, [pc, #4]	@ (800512c <HAL_RCC_OscConfig+0xc5c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	e02a      	b.n	8005180 <HAL_RCC_OscConfig+0xcb0>
 800512a:	bf00      	nop
 800512c:	40021000 	.word	0x40021000
 8005130:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005134:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005138:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800513c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005142:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	fa93 f2a3 	rbit	r2, r3
 800514c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005150:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800515a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800515e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005168:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	fa93 f2a3 	rbit	r2, r3
 8005172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005176:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	4bca      	ldr	r3, [pc, #808]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005184:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005188:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800518c:	6011      	str	r1, [r2, #0]
 800518e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005192:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	fa92 f1a2 	rbit	r1, r2
 800519c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80051a0:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80051a4:	6011      	str	r1, [r2, #0]
  return result;
 80051a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80051aa:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	fab2 f282 	clz	r2, r2
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	f042 0220 	orr.w	r2, r2, #32
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	f002 021f 	and.w	r2, r2, #31
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f202 	lsl.w	r2, r1, r2
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d184      	bne.n	80050d6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051cc:	4bb6      	ldr	r3, [pc, #728]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	f023 020f 	bic.w	r2, r3, #15
 80051d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051d8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	49b1      	ldr	r1, [pc, #708]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80051e6:	4bb0      	ldr	r3, [pc, #704]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80051ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6a19      	ldr	r1, [r3, #32]
 80051fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80051fe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	430b      	orrs	r3, r1
 8005208:	49a7      	ldr	r1, [pc, #668]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
 800520e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005212:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005216:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800521a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005220:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	fa93 f2a3 	rbit	r2, r3
 800522a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800522e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005232:	601a      	str	r2, [r3, #0]
  return result;
 8005234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005238:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800523c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523e:	fab3 f383 	clz	r3, r3
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005248:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	461a      	mov	r2, r3
 8005250:	2301      	movs	r3, #1
 8005252:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7fd fe54 	bl	8002f00 <HAL_GetTick>
 8005258:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800525c:	e009      	b.n	8005272 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7fd fe4f 	bl	8002f00 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e14b      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
 8005272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005276:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800527a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800527e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005284:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	fa93 f2a3 	rbit	r2, r3
 800528e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005292:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005296:	601a      	str	r2, [r3, #0]
  return result;
 8005298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800529c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80052a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052a2:	fab3 f383 	clz	r3, r3
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80052aa:	d802      	bhi.n	80052b2 <HAL_RCC_OscConfig+0xde2>
 80052ac:	4b7e      	ldr	r3, [pc, #504]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	e027      	b.n	8005302 <HAL_RCC_OscConfig+0xe32>
 80052b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052b6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80052ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052c4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	fa93 f2a3 	rbit	r2, r3
 80052ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052dc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80052e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052ea:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	fa93 f2a3 	rbit	r2, r3
 80052f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052f8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	4b6a      	ldr	r3, [pc, #424]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005306:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800530a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800530e:	6011      	str	r1, [r2, #0]
 8005310:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005314:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	fa92 f1a2 	rbit	r1, r2
 800531e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005322:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005326:	6011      	str	r1, [r2, #0]
  return result;
 8005328:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800532c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	fab2 f282 	clz	r2, r2
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	f042 0220 	orr.w	r2, r2, #32
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	f002 021f 	and.w	r2, r2, #31
 8005342:	2101      	movs	r1, #1
 8005344:	fa01 f202 	lsl.w	r2, r1, r2
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d087      	beq.n	800525e <HAL_RCC_OscConfig+0xd8e>
 800534e:	e0db      	b.n	8005508 <HAL_RCC_OscConfig+0x1038>
 8005350:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005354:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800535c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005362:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	fa93 f2a3 	rbit	r2, r3
 800536c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005370:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005374:	601a      	str	r2, [r3, #0]
  return result;
 8005376:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800537a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800537e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800538a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fd fdb3 	bl	8002f00 <HAL_GetTick>
 800539a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800539e:	e009      	b.n	80053b4 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd fdae 	bl	8002f00 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e0aa      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
 80053b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80053bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80053c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053c6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80053d8:	601a      	str	r2, [r3, #0]
  return result;
 80053da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053de:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80053e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80053ec:	d802      	bhi.n	80053f4 <HAL_RCC_OscConfig+0xf24>
 80053ee:	4b2e      	ldr	r3, [pc, #184]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	e027      	b.n	8005444 <HAL_RCC_OscConfig+0xf74>
 80053f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80053fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005406:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	fa93 f2a3 	rbit	r2, r3
 8005410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005414:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800541e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005422:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800542c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	fa93 f2a3 	rbit	r2, r3
 8005436:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800543a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	4b19      	ldr	r3, [pc, #100]	@ (80054a8 <HAL_RCC_OscConfig+0xfd8>)
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005448:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800544c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005450:	6011      	str	r1, [r2, #0]
 8005452:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005456:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	fa92 f1a2 	rbit	r1, r2
 8005460:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005464:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005468:	6011      	str	r1, [r2, #0]
  return result;
 800546a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800546e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	fab2 f282 	clz	r2, r2
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	f042 0220 	orr.w	r2, r2, #32
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	f002 021f 	and.w	r2, r2, #31
 8005484:	2101      	movs	r1, #1
 8005486:	fa01 f202 	lsl.w	r2, r1, r2
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d187      	bne.n	80053a0 <HAL_RCC_OscConfig+0xed0>
 8005490:	e03a      	b.n	8005508 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005496:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d104      	bne.n	80054ac <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e031      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054ac:	4b19      	ldr	r3, [pc, #100]	@ (8005514 <HAL_RCC_OscConfig+0x1044>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80054b4:	4b17      	ldr	r3, [pc, #92]	@ (8005514 <HAL_RCC_OscConfig+0x1044>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80054c0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80054c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d117      	bne.n	8005504 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80054d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80054d8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80054dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d10b      	bne.n	8005504 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80054ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000

08005518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b09e      	sub	sp, #120	@ 0x78
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e154      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005530:	4b89      	ldr	r3, [pc, #548]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d910      	bls.n	8005560 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553e:	4b86      	ldr	r3, [pc, #536]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 0207 	bic.w	r2, r3, #7
 8005546:	4984      	ldr	r1, [pc, #528]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	4313      	orrs	r3, r2
 800554c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800554e:	4b82      	ldr	r3, [pc, #520]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d001      	beq.n	8005560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e13c      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556c:	4b7b      	ldr	r3, [pc, #492]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	4978      	ldr	r1, [pc, #480]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800557a:	4313      	orrs	r3, r2
 800557c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80cd 	beq.w	8005726 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d137      	bne.n	8005604 <HAL_RCC_ClockConfig+0xec>
 8005594:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005598:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800559c:	fa93 f3a3 	rbit	r3, r3
 80055a0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80055a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80055ac:	d802      	bhi.n	80055b4 <HAL_RCC_ClockConfig+0x9c>
 80055ae:	4b6b      	ldr	r3, [pc, #428]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	e00f      	b.n	80055d4 <HAL_RCC_ClockConfig+0xbc>
 80055b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055bc:	fa93 f3a3 	rbit	r3, r3
 80055c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80055c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80055c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055d0:	4b62      	ldr	r3, [pc, #392]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80055d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055dc:	fa92 f2a2 	rbit	r2, r2
 80055e0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80055e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055e4:	fab2 f282 	clz	r2, r2
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	f042 0220 	orr.w	r2, r2, #32
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	f002 021f 	and.w	r2, r2, #31
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f202 	lsl.w	r2, r1, r2
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d171      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0ea      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d137      	bne.n	800567c <HAL_RCC_ClockConfig+0x164>
 800560c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005610:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005614:	fa93 f3a3 	rbit	r3, r3
 8005618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800561a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561c:	fab3 f383 	clz	r3, r3
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b3f      	cmp	r3, #63	@ 0x3f
 8005624:	d802      	bhi.n	800562c <HAL_RCC_ClockConfig+0x114>
 8005626:	4b4d      	ldr	r3, [pc, #308]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	e00f      	b.n	800564c <HAL_RCC_ClockConfig+0x134>
 800562c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005630:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	647b      	str	r3, [r7, #68]	@ 0x44
 800563a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800563e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005642:	fa93 f3a3 	rbit	r3, r3
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005648:	4b44      	ldr	r3, [pc, #272]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005650:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005654:	fa92 f2a2 	rbit	r2, r2
 8005658:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800565a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800565c:	fab2 f282 	clz	r2, r2
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	f042 0220 	orr.w	r2, r2, #32
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	f002 021f 	and.w	r2, r2, #31
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d135      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0ae      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
 800567c:	2302      	movs	r3, #2
 800567e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005682:	fa93 f3a3 	rbit	r3, r3
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	fab3 f383 	clz	r3, r3
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b3f      	cmp	r3, #63	@ 0x3f
 8005692:	d802      	bhi.n	800569a <HAL_RCC_ClockConfig+0x182>
 8005694:	4b31      	ldr	r3, [pc, #196]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	e00d      	b.n	80056b6 <HAL_RCC_ClockConfig+0x19e>
 800569a:	2302      	movs	r3, #2
 800569c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a0:	fa93 f3a3 	rbit	r3, r3
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a6:	2302      	movs	r3, #2
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	61fb      	str	r3, [r7, #28]
 80056b2:	4b2a      	ldr	r3, [pc, #168]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	2202      	movs	r2, #2
 80056b8:	61ba      	str	r2, [r7, #24]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	fa92 f2a2 	rbit	r2, r2
 80056c0:	617a      	str	r2, [r7, #20]
  return result;
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	fab2 f282 	clz	r2, r2
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	f042 0220 	orr.w	r2, r2, #32
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	f002 021f 	and.w	r2, r2, #31
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f202 	lsl.w	r2, r1, r2
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e07a      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056e4:	4b1d      	ldr	r3, [pc, #116]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f023 0203 	bic.w	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	491a      	ldr	r1, [pc, #104]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f6:	f7fd fc03 	bl	8002f00 <HAL_GetTick>
 80056fa:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fc:	e00a      	b.n	8005714 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fe:	f7fd fbff 	bl	8002f00 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e062      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005714:	4b11      	ldr	r3, [pc, #68]	@ (800575c <HAL_RCC_ClockConfig+0x244>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 020c 	and.w	r2, r3, #12
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	429a      	cmp	r2, r3
 8005724:	d1eb      	bne.n	80056fe <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005726:	4b0c      	ldr	r3, [pc, #48]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d215      	bcs.n	8005760 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005734:	4b08      	ldr	r3, [pc, #32]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 0207 	bic.w	r2, r3, #7
 800573c:	4906      	ldr	r1, [pc, #24]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <HAL_RCC_ClockConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d006      	beq.n	8005760 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e041      	b.n	80057da <HAL_RCC_ClockConfig+0x2c2>
 8005756:	bf00      	nop
 8005758:	40022000 	.word	0x40022000
 800575c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <HAL_RCC_ClockConfig+0x2cc>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	491a      	ldr	r1, [pc, #104]	@ (80057e4 <HAL_RCC_ClockConfig+0x2cc>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578a:	4b16      	ldr	r3, [pc, #88]	@ (80057e4 <HAL_RCC_ClockConfig+0x2cc>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4912      	ldr	r1, [pc, #72]	@ (80057e4 <HAL_RCC_ClockConfig+0x2cc>)
 800579a:	4313      	orrs	r3, r2
 800579c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800579e:	f000 f829 	bl	80057f4 <HAL_RCC_GetSysClockFreq>
 80057a2:	4601      	mov	r1, r0
 80057a4:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <HAL_RCC_ClockConfig+0x2cc>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057ac:	22f0      	movs	r2, #240	@ 0xf0
 80057ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	fa92 f2a2 	rbit	r2, r2
 80057b6:	60fa      	str	r2, [r7, #12]
  return result;
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	fab2 f282 	clz	r2, r2
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	40d3      	lsrs	r3, r2
 80057c2:	4a09      	ldr	r2, [pc, #36]	@ (80057e8 <HAL_RCC_ClockConfig+0x2d0>)
 80057c4:	5cd3      	ldrb	r3, [r2, r3]
 80057c6:	fa21 f303 	lsr.w	r3, r1, r3
 80057ca:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <HAL_RCC_ClockConfig+0x2d4>)
 80057cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80057ce:	4b08      	ldr	r3, [pc, #32]	@ (80057f0 <HAL_RCC_ClockConfig+0x2d8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7fd fb50 	bl	8002e78 <HAL_InitTick>
  
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3778      	adds	r7, #120	@ 0x78
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	08008870 	.word	0x08008870
 80057ec:	20000014 	.word	0x20000014
 80057f0:	2000001c 	.word	0x2000001c

080057f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800580e:	4b1f      	ldr	r3, [pc, #124]	@ (800588c <HAL_RCC_GetSysClockFreq+0x98>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f003 030c 	and.w	r3, r3, #12
 800581a:	2b04      	cmp	r3, #4
 800581c:	d002      	beq.n	8005824 <HAL_RCC_GetSysClockFreq+0x30>
 800581e:	2b08      	cmp	r3, #8
 8005820:	d003      	beq.n	800582a <HAL_RCC_GetSysClockFreq+0x36>
 8005822:	e029      	b.n	8005878 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005824:	4b1a      	ldr	r3, [pc, #104]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005826:	613b      	str	r3, [r7, #16]
      break;
 8005828:	e029      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	0c9b      	lsrs	r3, r3, #18
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	4a18      	ldr	r2, [pc, #96]	@ (8005894 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005834:	5cd3      	ldrb	r3, [r2, r3]
 8005836:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005838:	4b14      	ldr	r3, [pc, #80]	@ (800588c <HAL_RCC_GetSysClockFreq+0x98>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	4a15      	ldr	r2, [pc, #84]	@ (8005898 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005842:	5cd3      	ldrb	r3, [r2, r3]
 8005844:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005850:	4a0f      	ldr	r2, [pc, #60]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	fbb2 f2f3 	udiv	r2, r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	fb02 f303 	mul.w	r3, r2, r3
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e007      	b.n	8005872 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005862:	4a0b      	ldr	r2, [pc, #44]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	fbb2 f2f3 	udiv	r2, r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	fb02 f303 	mul.w	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	613b      	str	r3, [r7, #16]
      break;
 8005876:	e002      	b.n	800587e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <HAL_RCC_GetSysClockFreq+0x9c>)
 800587a:	613b      	str	r3, [r7, #16]
      break;
 800587c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800587e:	693b      	ldr	r3, [r7, #16]
}
 8005880:	4618      	mov	r0, r3
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40021000 	.word	0x40021000
 8005890:	007a1200 	.word	0x007a1200
 8005894:	08008880 	.word	0x08008880
 8005898:	08008890 	.word	0x08008890

0800589c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b092      	sub	sp, #72	@ 0x48
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80058ac:	2300      	movs	r3, #0
 80058ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80d2 	beq.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c0:	4b4d      	ldr	r3, [pc, #308]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10e      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058cc:	4b4a      	ldr	r3, [pc, #296]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	4a49      	ldr	r2, [pc, #292]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d6:	61d3      	str	r3, [r2, #28]
 80058d8:	4b47      	ldr	r3, [pc, #284]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ea:	4b44      	ldr	r3, [pc, #272]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d118      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058f6:	4b41      	ldr	r3, [pc, #260]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a40      	ldr	r2, [pc, #256]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005900:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005902:	f7fd fafd 	bl	8002f00 <HAL_GetTick>
 8005906:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005908:	e008      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590a:	f7fd faf9 	bl	8002f00 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b64      	cmp	r3, #100	@ 0x64
 8005916:	d901      	bls.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e1d4      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591c:	4b37      	ldr	r3, [pc, #220]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005928:	4b33      	ldr	r3, [pc, #204]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8082 	beq.w	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005942:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005944:	429a      	cmp	r2, r3
 8005946:	d07a      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005948:	4b2b      	ldr	r3, [pc, #172]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005950:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005956:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595a:	fa93 f3a3 	rbit	r3, r3
 800595e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005962:	fab3 f383 	clz	r3, r3
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	4b25      	ldr	r3, [pc, #148]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	461a      	mov	r2, r3
 8005972:	2301      	movs	r3, #1
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800597a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	fa93 f3a3 	rbit	r3, r3
 8005982:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005986:	fab3 f383 	clz	r3, r3
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	461a      	mov	r2, r3
 8005996:	2300      	movs	r3, #0
 8005998:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800599c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d049      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059aa:	f7fd faa9 	bl	8002f00 <HAL_GetTick>
 80059ae:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fd faa5 	bl	8002f00 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e17e      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80059c8:	2302      	movs	r3, #2
 80059ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	fa93 f3a3 	rbit	r3, r3
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	2302      	movs	r3, #2
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	61fb      	str	r3, [r7, #28]
  return result;
 80059e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059e2:	fab3 f383 	clz	r3, r3
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80059f2:	4b01      	ldr	r3, [pc, #4]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	e00d      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40007000 	.word	0x40007000
 8005a00:	10908100 	.word	0x10908100
 8005a04:	2302      	movs	r3, #2
 8005a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	4b9a      	ldr	r3, [pc, #616]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	2202      	movs	r2, #2
 8005a16:	613a      	str	r2, [r7, #16]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	fa92 f2a2 	rbit	r2, r2
 8005a1e:	60fa      	str	r2, [r7, #12]
  return result;
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	fab2 f282 	clz	r2, r2
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	f002 021f 	and.w	r2, r2, #31
 8005a32:	2101      	movs	r1, #1
 8005a34:	fa01 f202 	lsl.w	r2, r1, r2
 8005a38:	4013      	ands	r3, r2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0b9      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	498c      	ldr	r1, [pc, #560]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a58:	4b88      	ldr	r3, [pc, #544]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	4a87      	ldr	r2, [pc, #540]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a70:	4b82      	ldr	r3, [pc, #520]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a74:	f023 0203 	bic.w	r2, r3, #3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	497f      	ldr	r1, [pc, #508]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a92:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	4978      	ldr	r1, [pc, #480]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aac:	4b73      	ldr	r3, [pc, #460]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	4970      	ldr	r1, [pc, #448]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aca:	4b6c      	ldr	r3, [pc, #432]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ace:	f023 0210 	bic.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4969      	ldr	r1, [pc, #420]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005ae8:	4b64      	ldr	r3, [pc, #400]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af4:	4961      	ldr	r1, [pc, #388]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b06:	4b5d      	ldr	r3, [pc, #372]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	f023 0220 	bic.w	r2, r3, #32
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	495a      	ldr	r1, [pc, #360]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b24:	4b55      	ldr	r3, [pc, #340]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b28:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	4952      	ldr	r1, [pc, #328]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b42:	4b4e      	ldr	r3, [pc, #312]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	494b      	ldr	r1, [pc, #300]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0310 	and.w	r3, r3, #16
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b60:	4b46      	ldr	r3, [pc, #280]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	4943      	ldr	r1, [pc, #268]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	493c      	ldr	r1, [pc, #240]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b9c:	4b37      	ldr	r3, [pc, #220]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	4934      	ldr	r1, [pc, #208]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d008      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005bba:	4b30      	ldr	r3, [pc, #192]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	492d      	ldr	r1, [pc, #180]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005bd8:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be4:	4925      	ldr	r1, [pc, #148]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d008      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005bf6:	4b21      	ldr	r3, [pc, #132]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	491e      	ldr	r1, [pc, #120]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c20:	4916      	ldr	r1, [pc, #88]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d008      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c3e:	490f      	ldr	r1, [pc, #60]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c54:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5c:	4907      	ldr	r1, [pc, #28]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005c6e:	4b03      	ldr	r3, [pc, #12]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c72:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c82:	4913      	ldr	r1, [pc, #76]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d008      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005c94:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca0:	490b      	ldr	r1, [pc, #44]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d008      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005cb2:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbe:	4904      	ldr	r1, [pc, #16]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3748      	adds	r7, #72	@ 0x48
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40021000 	.word	0x40021000

08005cd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e073      	b.n	8005dd2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7f5b      	ldrb	r3, [r3, #29]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d105      	bne.n	8005d00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7fc fbd8 	bl	80024b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b10      	cmp	r3, #16
 8005d12:	d055      	beq.n	8005dc0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	22ca      	movs	r2, #202	@ 0xca
 8005d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2253      	movs	r2, #83	@ 0x53
 8005d22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fbd3 	bl	80064d0 <RTC_EnterInitMode>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d12c      	bne.n	8005d8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6899      	ldr	r1, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	68d2      	ldr	r2, [r2, #12]
 8005d6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6919      	ldr	r1, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	041a      	lsls	r2, r3, #16
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbda 	bl	800653e <RTC_ExitInitMode>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d110      	bne.n	8005db6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	22ff      	movs	r2, #255	@ 0xff
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8005dbe:	e001      	b.n	8005dc4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005dda:	b590      	push	{r4, r7, lr}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	7f1b      	ldrb	r3, [r3, #28]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_RTC_SetTime+0x1c>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e087      	b.n	8005f06 <HAL_RTC_SetTime+0x12c>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d126      	bne.n	8005e56 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d102      	bne.n	8005e1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fbb1 	bl	8006588 <RTC_ByteToBcd2>
 8005e26:	4603      	mov	r3, r0
 8005e28:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fbaa 	bl	8006588 <RTC_ByteToBcd2>
 8005e34:	4603      	mov	r3, r0
 8005e36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e38:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	789b      	ldrb	r3, [r3, #2]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fba2 	bl	8006588 <RTC_ByteToBcd2>
 8005e44:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	78db      	ldrb	r3, [r3, #3]
 8005e4e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e018      	b.n	8005e88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e76:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005e7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	78db      	ldrb	r3, [r3, #3]
 8005e82:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	22ca      	movs	r2, #202	@ 0xca
 8005e8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2253      	movs	r2, #83	@ 0x53
 8005e96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 fb19 	bl	80064d0 <RTC_EnterInitMode>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ea2:	7cfb      	ldrb	r3, [r7, #19]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d120      	bne.n	8005eea <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005eb2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ec6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6899      	ldr	r1, [r3, #8]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fb2c 	bl	800653e <RTC_ExitInitMode>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005eea:	7cfb      	ldrb	r3, [r7, #19]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d102      	bne.n	8005ef6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	22ff      	movs	r2, #255	@ 0xff
 8005efc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]

  return status;
 8005f04:	7cfb      	ldrb	r3, [r7, #19]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd90      	pop	{r4, r7, pc}

08005f0e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b086      	sub	sp, #24
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005f40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005f44:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	0d9b      	lsrs	r3, r3, #22
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11a      	bne.n	8005fc0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fb18 	bl	80065c4 <RTC_Bcd2ToByte>
 8005f94:	4603      	mov	r3, r0
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fb0f 	bl	80065c4 <RTC_Bcd2ToByte>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	789b      	ldrb	r3, [r3, #2]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb06 	bl	80065c4 <RTC_Bcd2ToByte>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fca:	b590      	push	{r4, r7, lr}
 8005fcc:	b087      	sub	sp, #28
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	7f1b      	ldrb	r3, [r3, #28]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RTC_SetDate+0x1c>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e071      	b.n	80060ca <HAL_RTC_SetDate+0x100>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10e      	bne.n	8006016 <HAL_RTC_SetDate+0x4c>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	b2db      	uxtb	r3, r3
 800600e:	330a      	adds	r3, #10
 8006010:	b2da      	uxtb	r2, r3
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11c      	bne.n	8006056 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 fab1 	bl	8006588 <RTC_ByteToBcd2>
 8006026:	4603      	mov	r3, r0
 8006028:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	785b      	ldrb	r3, [r3, #1]
 800602e:	4618      	mov	r0, r3
 8006030:	f000 faaa 	bl	8006588 <RTC_ByteToBcd2>
 8006034:	4603      	mov	r3, r0
 8006036:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006038:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	789b      	ldrb	r3, [r3, #2]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 faa2 	bl	8006588 <RTC_ByteToBcd2>
 8006044:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006046:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	e00e      	b.n	8006074 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	78db      	ldrb	r3, [r3, #3]
 800605a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006062:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006068:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	22ca      	movs	r2, #202	@ 0xca
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2253      	movs	r2, #83	@ 0x53
 8006082:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 fa23 	bl	80064d0 <RTC_EnterInitMode>
 800608a:	4603      	mov	r3, r0
 800608c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10c      	bne.n	80060ae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800609e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fa4a 	bl	800653e <RTC_ExitInitMode>
 80060aa:	4603      	mov	r3, r0
 80060ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80060ae:	7cfb      	ldrb	r3, [r7, #19]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	22ff      	movs	r2, #255	@ 0xff
 80060c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	771a      	strb	r2, [r3, #28]

  return status;
 80060c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd90      	pop	{r4, r7, pc}

080060d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80060ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80060f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	0c1b      	lsrs	r3, r3, #16
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	0a1b      	lsrs	r3, r3, #8
 8006100:	b2db      	uxtb	r3, r3
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	b2da      	uxtb	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	0b5b      	lsrs	r3, r3, #13
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d11a      	bne.n	8006166 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	78db      	ldrb	r3, [r3, #3]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fa45 	bl	80065c4 <RTC_Bcd2ToByte>
 800613a:	4603      	mov	r3, r0
 800613c:	461a      	mov	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fa3c 	bl	80065c4 <RTC_Bcd2ToByte>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	789b      	ldrb	r3, [r3, #2]
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fa33 	bl	80065c4 <RTC_Bcd2ToByte>
 800615e:	4603      	mov	r3, r0
 8006160:	461a      	mov	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b089      	sub	sp, #36	@ 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800617c:	4b9b      	ldr	r3, [pc, #620]	@ (80063ec <HAL_RTC_SetAlarm_IT+0x27c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a9b      	ldr	r2, [pc, #620]	@ (80063f0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	0adb      	lsrs	r3, r3, #11
 8006188:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800618c:	fb02 f303 	mul.w	r3, r2, r3
 8006190:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	7f1b      	ldrb	r3, [r3, #28]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_RTC_SetAlarm_IT+0x36>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e11e      	b.n	80063e4 <HAL_RTC_SetAlarm_IT+0x274>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2202      	movs	r2, #2
 80061b0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d137      	bne.n	8006228 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2200      	movs	r2, #0
 80061ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 f9d9 	bl	8006588 <RTC_ByteToBcd2>
 80061d6:	4603      	mov	r3, r0
 80061d8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f9d2 	bl	8006588 <RTC_ByteToBcd2>
 80061e4:	4603      	mov	r3, r0
 80061e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80061e8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	789b      	ldrb	r3, [r3, #2]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f9ca 	bl	8006588 <RTC_ByteToBcd2>
 80061f4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	78db      	ldrb	r3, [r3, #3]
 80061fe:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006200:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f9bc 	bl	8006588 <RTC_ByteToBcd2>
 8006210:	4603      	mov	r3, r0
 8006212:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8006214:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800621c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006222:	4313      	orrs	r3, r2
 8006224:	61fb      	str	r3, [r7, #28]
 8006226:	e023      	b.n	8006270 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d102      	bne.n	800623c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2200      	movs	r2, #0
 800623a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006248:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800624e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	78db      	ldrb	r3, [r3, #3]
 8006254:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006256:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800625e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8006260:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006266:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800626c:	4313      	orrs	r3, r2
 800626e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	22ca      	movs	r2, #202	@ 0xca
 8006282:	625a      	str	r2, [r3, #36]	@ 0x24
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2253      	movs	r2, #83	@ 0x53
 800628a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006294:	d142      	bne.n	800631c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062a4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80062b6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10b      	bne.n	80062dc <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	22ff      	movs	r2, #255	@ 0xff
 80062ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2203      	movs	r2, #3
 80062d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e083      	b.n	80063e4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0e6      	beq.n	80062b8 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006308:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006318:	609a      	str	r2, [r3, #8]
 800631a:	e04c      	b.n	80063b6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800632a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800633c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800633e:	4b2b      	ldr	r3, [pc, #172]	@ (80063ec <HAL_RTC_SetAlarm_IT+0x27c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a2b      	ldr	r2, [pc, #172]	@ (80063f0 <HAL_RTC_SetAlarm_IT+0x280>)
 8006344:	fba2 2303 	umull	r2, r3, r2, r3
 8006348:	0adb      	lsrs	r3, r3, #11
 800634a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800634e:	fb02 f303 	mul.w	r3, r2, r3
 8006352:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	3b01      	subs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	22ff      	movs	r2, #255	@ 0xff
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2203      	movs	r2, #3
 800636c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e035      	b.n	80063e4 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0e6      	beq.n	8006354 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063a4:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063b6:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <HAL_RTC_SetAlarm_IT+0x284>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0e      	ldr	r2, [pc, #56]	@ (80063f4 <HAL_RTC_SetAlarm_IT+0x284>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80063c2:	4b0c      	ldr	r3, [pc, #48]	@ (80063f4 <HAL_RTC_SetAlarm_IT+0x284>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	4a0b      	ldr	r2, [pc, #44]	@ (80063f4 <HAL_RTC_SetAlarm_IT+0x284>)
 80063c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063cc:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	22ff      	movs	r2, #255	@ 0xff
 80063d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3724      	adds	r7, #36	@ 0x24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd90      	pop	{r4, r7, pc}
 80063ec:	20000014 	.word	0x20000014
 80063f0:	10624dd3 	.word	0x10624dd3
 80063f4:	40010400 	.word	0x40010400

080063f8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006400:	4b1f      	ldr	r3, [pc, #124]	@ (8006480 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006402:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006406:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d012      	beq.n	800643c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006434:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7fb f8fc 	bl	8001634 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d012      	beq.n	8006470 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006454:	2b00      	cmp	r3, #0
 8006456:	d00b      	beq.n	8006470 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8006468:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f8c8 	bl	8006600 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	775a      	strb	r2, [r3, #29]
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40010400 	.word	0x40010400

08006484 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0d      	ldr	r2, [pc, #52]	@ (80064cc <HAL_RTC_WaitForSynchro+0x48>)
 8006496:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006498:	f7fc fd32 	bl	8002f00 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800649e:	e009      	b.n	80064b4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064a0:	f7fc fd2e 	bl	8002f00 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064ae:	d901      	bls.n	80064b4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e007      	b.n	80064c4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ee      	beq.n	80064a0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	0001ff5f 	.word	0x0001ff5f

080064d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d122      	bne.n	8006534 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064fe:	f7fc fcff 	bl	8002f00 <HAL_GetTick>
 8006502:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006504:	e00c      	b.n	8006520 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006506:	f7fc fcfb 	bl	8002f00 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006514:	d904      	bls.n	8006520 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2204      	movs	r2, #4
 800651a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <RTC_EnterInitMode+0x64>
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d1e8      	bne.n	8006506 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006558:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10a      	bne.n	800657e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff8b 	bl	8006484 <HAL_RTC_WaitForSynchro>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d004      	beq.n	800657e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2204      	movs	r2, #4
 8006578:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006596:	e005      	b.n	80065a4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	3b0a      	subs	r3, #10
 80065a2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b09      	cmp	r3, #9
 80065a8:	d8f6      	bhi.n	8006598 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b2db      	uxtb	r3, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	4413      	add	r3, r2
 80065f2:	b2db      	uxtb	r3, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e049      	b.n	80066ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb ff64 	bl	8002508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 fdb8 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d001      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e04f      	b.n	800677c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0201 	orr.w	r2, r2, #1
 80066f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a23      	ldr	r2, [pc, #140]	@ (8006788 <HAL_TIM_Base_Start_IT+0xc4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01d      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006706:	d018      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1f      	ldr	r2, [pc, #124]	@ (800678c <HAL_TIM_Base_Start_IT+0xc8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a1e      	ldr	r2, [pc, #120]	@ (8006790 <HAL_TIM_Base_Start_IT+0xcc>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00e      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1c      	ldr	r2, [pc, #112]	@ (8006794 <HAL_TIM_Base_Start_IT+0xd0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1b      	ldr	r2, [pc, #108]	@ (8006798 <HAL_TIM_Base_Start_IT+0xd4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <HAL_TIM_Base_Start_IT+0x76>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a19      	ldr	r2, [pc, #100]	@ (800679c <HAL_TIM_Base_Start_IT+0xd8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d115      	bne.n	8006766 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	4b17      	ldr	r3, [pc, #92]	@ (80067a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006742:	4013      	ands	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b06      	cmp	r3, #6
 800674a:	d015      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0xb4>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006752:	d011      	beq.n	8006778 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	e008      	b.n	8006778 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e000      	b.n	800677a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006778:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40012c00 	.word	0x40012c00
 800678c:	40000400 	.word	0x40000400
 8006790:	40000800 	.word	0x40000800
 8006794:	40013400 	.word	0x40013400
 8006798:	40014000 	.word	0x40014000
 800679c:	40015000 	.word	0x40015000
 80067a0:	00010007 	.word	0x00010007

080067a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e049      	b.n	800684a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f841 	bl	8006852 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f000 fcf0 	bl	80071c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d109      	bne.n	800688c <HAL_TIM_PWM_Start+0x24>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b01      	cmp	r3, #1
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e03c      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b04      	cmp	r3, #4
 8006890:	d109      	bne.n	80068a6 <HAL_TIM_PWM_Start+0x3e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b01      	cmp	r3, #1
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	e02f      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d109      	bne.n	80068c0 <HAL_TIM_PWM_Start+0x58>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	bf14      	ite	ne
 80068b8:	2301      	movne	r3, #1
 80068ba:	2300      	moveq	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	e022      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b0c      	cmp	r3, #12
 80068c4:	d109      	bne.n	80068da <HAL_TIM_PWM_Start+0x72>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	e015      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d109      	bne.n	80068f4 <HAL_TIM_PWM_Start+0x8c>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	e008      	b.n	8006906 <HAL_TIM_PWM_Start+0x9e>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e0a1      	b.n	8006a52 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_TIM_PWM_Start+0xb6>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800691c:	e023      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b04      	cmp	r3, #4
 8006922:	d104      	bne.n	800692e <HAL_TIM_PWM_Start+0xc6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800692c:	e01b      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b08      	cmp	r3, #8
 8006932:	d104      	bne.n	800693e <HAL_TIM_PWM_Start+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2202      	movs	r2, #2
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800693c:	e013      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d104      	bne.n	800694e <HAL_TIM_PWM_Start+0xe6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800694c:	e00b      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b10      	cmp	r3, #16
 8006952:	d104      	bne.n	800695e <HAL_TIM_PWM_Start+0xf6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800695c:	e003      	b.n	8006966 <HAL_TIM_PWM_Start+0xfe>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2201      	movs	r2, #1
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f001 f874 	bl	8007a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a38      	ldr	r2, [pc, #224]	@ (8006a5c <HAL_TIM_PWM_Start+0x1f4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d018      	beq.n	80069b0 <HAL_TIM_PWM_Start+0x148>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a37      	ldr	r2, [pc, #220]	@ (8006a60 <HAL_TIM_PWM_Start+0x1f8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d013      	beq.n	80069b0 <HAL_TIM_PWM_Start+0x148>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a35      	ldr	r2, [pc, #212]	@ (8006a64 <HAL_TIM_PWM_Start+0x1fc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00e      	beq.n	80069b0 <HAL_TIM_PWM_Start+0x148>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a34      	ldr	r2, [pc, #208]	@ (8006a68 <HAL_TIM_PWM_Start+0x200>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_TIM_PWM_Start+0x148>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a32      	ldr	r2, [pc, #200]	@ (8006a6c <HAL_TIM_PWM_Start+0x204>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d004      	beq.n	80069b0 <HAL_TIM_PWM_Start+0x148>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a31      	ldr	r2, [pc, #196]	@ (8006a70 <HAL_TIM_PWM_Start+0x208>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d101      	bne.n	80069b4 <HAL_TIM_PWM_Start+0x14c>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <HAL_TIM_PWM_Start+0x14e>
 80069b4:	2300      	movs	r3, #0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d007      	beq.n	80069ca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a23      	ldr	r2, [pc, #140]	@ (8006a5c <HAL_TIM_PWM_Start+0x1f4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01d      	beq.n	8006a10 <HAL_TIM_PWM_Start+0x1a8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069dc:	d018      	beq.n	8006a10 <HAL_TIM_PWM_Start+0x1a8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a24      	ldr	r2, [pc, #144]	@ (8006a74 <HAL_TIM_PWM_Start+0x20c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <HAL_TIM_PWM_Start+0x1a8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a22      	ldr	r2, [pc, #136]	@ (8006a78 <HAL_TIM_PWM_Start+0x210>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00e      	beq.n	8006a10 <HAL_TIM_PWM_Start+0x1a8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1a      	ldr	r2, [pc, #104]	@ (8006a60 <HAL_TIM_PWM_Start+0x1f8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_TIM_PWM_Start+0x1a8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a18      	ldr	r2, [pc, #96]	@ (8006a64 <HAL_TIM_PWM_Start+0x1fc>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <HAL_TIM_PWM_Start+0x1a8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a19      	ldr	r2, [pc, #100]	@ (8006a70 <HAL_TIM_PWM_Start+0x208>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d115      	bne.n	8006a3c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689a      	ldr	r2, [r3, #8]
 8006a16:	4b19      	ldr	r3, [pc, #100]	@ (8006a7c <HAL_TIM_PWM_Start+0x214>)
 8006a18:	4013      	ands	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b06      	cmp	r3, #6
 8006a20:	d015      	beq.n	8006a4e <HAL_TIM_PWM_Start+0x1e6>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a28:	d011      	beq.n	8006a4e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0201 	orr.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a3a:	e008      	b.n	8006a4e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e000      	b.n	8006a50 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40013400 	.word	0x40013400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	40015000 	.word	0x40015000
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	00010007 	.word	0x00010007

08006a80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 ffe2 	bl	8007a5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a40      	ldr	r2, [pc, #256]	@ (8006ba0 <HAL_TIM_PWM_Stop+0x120>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_TIM_PWM_Stop+0x54>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8006ba4 <HAL_TIM_PWM_Stop+0x124>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_TIM_PWM_Stop+0x54>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ba8 <HAL_TIM_PWM_Stop+0x128>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_TIM_PWM_Stop+0x54>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a3c      	ldr	r2, [pc, #240]	@ (8006bac <HAL_TIM_PWM_Stop+0x12c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_TIM_PWM_Stop+0x54>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8006bb0 <HAL_TIM_PWM_Stop+0x130>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIM_PWM_Stop+0x54>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a39      	ldr	r2, [pc, #228]	@ (8006bb4 <HAL_TIM_PWM_Stop+0x134>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIM_PWM_Stop+0x58>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <HAL_TIM_PWM_Stop+0x5a>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d017      	beq.n	8006b0e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ae8:	4013      	ands	r3, r2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10f      	bne.n	8006b0e <HAL_TIM_PWM_Stop+0x8e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	f240 4344 	movw	r3, #1092	@ 0x444
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d107      	bne.n	8006b0e <HAL_TIM_PWM_Stop+0x8e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b18:	4013      	ands	r3, r2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10f      	bne.n	8006b3e <HAL_TIM_PWM_Stop+0xbe>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d107      	bne.n	8006b3e <HAL_TIM_PWM_Stop+0xbe>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f022 0201 	bic.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d104      	bne.n	8006b4e <HAL_TIM_PWM_Stop+0xce>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b4c:	e023      	b.n	8006b96 <HAL_TIM_PWM_Stop+0x116>
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d104      	bne.n	8006b5e <HAL_TIM_PWM_Stop+0xde>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b5c:	e01b      	b.n	8006b96 <HAL_TIM_PWM_Stop+0x116>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d104      	bne.n	8006b6e <HAL_TIM_PWM_Stop+0xee>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b6c:	e013      	b.n	8006b96 <HAL_TIM_PWM_Stop+0x116>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b0c      	cmp	r3, #12
 8006b72:	d104      	bne.n	8006b7e <HAL_TIM_PWM_Stop+0xfe>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b7c:	e00b      	b.n	8006b96 <HAL_TIM_PWM_Stop+0x116>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d104      	bne.n	8006b8e <HAL_TIM_PWM_Stop+0x10e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b8c:	e003      	b.n	8006b96 <HAL_TIM_PWM_Stop+0x116>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40013400 	.word	0x40013400
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800
 8006bb4:	40015000 	.word	0x40015000

08006bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d020      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01b      	beq.n	8006c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0202 	mvn.w	r2, #2
 8006bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fac1 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fab3 	bl	8007176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fac4 	bl	800719e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d020      	beq.n	8006c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01b      	beq.n	8006c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0204 	mvn.w	r2, #4
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa9b 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006c54:	e005      	b.n	8006c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa8d 	bl	8007176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fa9e 	bl	800719e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d020      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01b      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0208 	mvn.w	r2, #8
 8006c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2204      	movs	r2, #4
 8006c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa75 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006ca0:	e005      	b.n	8006cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa67 	bl	8007176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa78 	bl	800719e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d020      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01b      	beq.n	8006d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0210 	mvn.w	r2, #16
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa4f 	bl	800718a <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa41 	bl	8007176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fa52 	bl	800719e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00c      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f06f 0201 	mvn.w	r2, #1
 8006d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fa fbbc 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00c      	beq.n	8006d48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 ffcc 	bl	8007ce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00c      	beq.n	8006d6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 ffc4 	bl	8007cf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa11 	bl	80071b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00c      	beq.n	8006db4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d007      	beq.n	8006db4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0220 	mvn.w	r2, #32
 8006dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 ff8c 	bl	8007ccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e0ff      	b.n	8006fda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b14      	cmp	r3, #20
 8006de6:	f200 80f0 	bhi.w	8006fca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006dea:	a201      	add	r2, pc, #4	@ (adr r2, 8006df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df0:	08006e45 	.word	0x08006e45
 8006df4:	08006fcb 	.word	0x08006fcb
 8006df8:	08006fcb 	.word	0x08006fcb
 8006dfc:	08006fcb 	.word	0x08006fcb
 8006e00:	08006e85 	.word	0x08006e85
 8006e04:	08006fcb 	.word	0x08006fcb
 8006e08:	08006fcb 	.word	0x08006fcb
 8006e0c:	08006fcb 	.word	0x08006fcb
 8006e10:	08006ec7 	.word	0x08006ec7
 8006e14:	08006fcb 	.word	0x08006fcb
 8006e18:	08006fcb 	.word	0x08006fcb
 8006e1c:	08006fcb 	.word	0x08006fcb
 8006e20:	08006f07 	.word	0x08006f07
 8006e24:	08006fcb 	.word	0x08006fcb
 8006e28:	08006fcb 	.word	0x08006fcb
 8006e2c:	08006fcb 	.word	0x08006fcb
 8006e30:	08006f49 	.word	0x08006f49
 8006e34:	08006fcb 	.word	0x08006fcb
 8006e38:	08006fcb 	.word	0x08006fcb
 8006e3c:	08006fcb 	.word	0x08006fcb
 8006e40:	08006f89 	.word	0x08006f89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fa66 	bl	800731c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0208 	orr.w	r2, r2, #8
 8006e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0204 	bic.w	r2, r2, #4
 8006e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6999      	ldr	r1, [r3, #24]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	619a      	str	r2, [r3, #24]
      break;
 8006e82:	e0a5      	b.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fae0 	bl	8007450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	699a      	ldr	r2, [r3, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6999      	ldr	r1, [r3, #24]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	619a      	str	r2, [r3, #24]
      break;
 8006ec4:	e084      	b.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fb53 	bl	8007578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69da      	ldr	r2, [r3, #28]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0208 	orr.w	r2, r2, #8
 8006ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0204 	bic.w	r2, r2, #4
 8006ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69d9      	ldr	r1, [r3, #28]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	61da      	str	r2, [r3, #28]
      break;
 8006f04:	e064      	b.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fbc5 	bl	800769c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	69da      	ldr	r2, [r3, #28]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	021a      	lsls	r2, r3, #8
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	61da      	str	r2, [r3, #28]
      break;
 8006f46:	e043      	b.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 fc14 	bl	800777c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0208 	orr.w	r2, r2, #8
 8006f62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0204 	bic.w	r2, r2, #4
 8006f72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f86:	e023      	b.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fc5e 	bl	8007850 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	021a      	lsls	r2, r3, #8
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006fc8:	e002      	b.n	8006fd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006fce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop

08006fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIM_ConfigClockSource+0x1c>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e0b6      	b.n	800716e <HAL_TIM_ConfigClockSource+0x18a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800701e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800702a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800703c:	d03e      	beq.n	80070bc <HAL_TIM_ConfigClockSource+0xd8>
 800703e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007042:	f200 8087 	bhi.w	8007154 <HAL_TIM_ConfigClockSource+0x170>
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704a:	f000 8086 	beq.w	800715a <HAL_TIM_ConfigClockSource+0x176>
 800704e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007052:	d87f      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 8007054:	2b70      	cmp	r3, #112	@ 0x70
 8007056:	d01a      	beq.n	800708e <HAL_TIM_ConfigClockSource+0xaa>
 8007058:	2b70      	cmp	r3, #112	@ 0x70
 800705a:	d87b      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 800705c:	2b60      	cmp	r3, #96	@ 0x60
 800705e:	d050      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x11e>
 8007060:	2b60      	cmp	r3, #96	@ 0x60
 8007062:	d877      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 8007064:	2b50      	cmp	r3, #80	@ 0x50
 8007066:	d03c      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0xfe>
 8007068:	2b50      	cmp	r3, #80	@ 0x50
 800706a:	d873      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 800706c:	2b40      	cmp	r3, #64	@ 0x40
 800706e:	d058      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x13e>
 8007070:	2b40      	cmp	r3, #64	@ 0x40
 8007072:	d86f      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 8007074:	2b30      	cmp	r3, #48	@ 0x30
 8007076:	d064      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x15e>
 8007078:	2b30      	cmp	r3, #48	@ 0x30
 800707a:	d86b      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 800707c:	2b20      	cmp	r3, #32
 800707e:	d060      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x15e>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d867      	bhi.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
 8007084:	2b00      	cmp	r3, #0
 8007086:	d05c      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x15e>
 8007088:	2b10      	cmp	r3, #16
 800708a:	d05a      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x15e>
 800708c:	e062      	b.n	8007154 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800709e:	f000 fcbd 	bl	8007a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	609a      	str	r2, [r3, #8]
      break;
 80070ba:	e04f      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070cc:	f000 fca6 	bl	8007a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070de:	609a      	str	r2, [r3, #8]
      break;
 80070e0:	e03c      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	461a      	mov	r2, r3
 80070f0:	f000 fc1a 	bl	8007928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2150      	movs	r1, #80	@ 0x50
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fc73 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 8007100:	e02c      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800710e:	461a      	mov	r2, r3
 8007110:	f000 fc39 	bl	8007986 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2160      	movs	r1, #96	@ 0x60
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fc63 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 8007120:	e01c      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800712e:	461a      	mov	r2, r3
 8007130:	f000 fbfa 	bl	8007928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2140      	movs	r1, #64	@ 0x40
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fc53 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 8007140:	e00c      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f000 fc4a 	bl	80079e6 <TIM_ITRx_SetConfig>
      break;
 8007152:	e003      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	73fb      	strb	r3, [r7, #15]
      break;
 8007158:	e000      	b.n	800715c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800715a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800717e:	bf00      	nop
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b083      	sub	sp, #12
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
	...

080071c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a48      	ldr	r2, [pc, #288]	@ (80072fc <TIM_Base_SetConfig+0x134>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d013      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e6:	d00f      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a45      	ldr	r2, [pc, #276]	@ (8007300 <TIM_Base_SetConfig+0x138>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00b      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a44      	ldr	r2, [pc, #272]	@ (8007304 <TIM_Base_SetConfig+0x13c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d007      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a43      	ldr	r2, [pc, #268]	@ (8007308 <TIM_Base_SetConfig+0x140>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a42      	ldr	r2, [pc, #264]	@ (800730c <TIM_Base_SetConfig+0x144>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a37      	ldr	r2, [pc, #220]	@ (80072fc <TIM_Base_SetConfig+0x134>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d01f      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007228:	d01b      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a34      	ldr	r2, [pc, #208]	@ (8007300 <TIM_Base_SetConfig+0x138>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d017      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a33      	ldr	r2, [pc, #204]	@ (8007304 <TIM_Base_SetConfig+0x13c>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a32      	ldr	r2, [pc, #200]	@ (8007308 <TIM_Base_SetConfig+0x140>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00f      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a32      	ldr	r2, [pc, #200]	@ (8007310 <TIM_Base_SetConfig+0x148>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d00b      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a31      	ldr	r2, [pc, #196]	@ (8007314 <TIM_Base_SetConfig+0x14c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d007      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a30      	ldr	r2, [pc, #192]	@ (8007318 <TIM_Base_SetConfig+0x150>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d003      	beq.n	8007262 <TIM_Base_SetConfig+0x9a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <TIM_Base_SetConfig+0x144>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d108      	bne.n	8007274 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a18      	ldr	r2, [pc, #96]	@ (80072fc <TIM_Base_SetConfig+0x134>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d013      	beq.n	80072c8 <TIM_Base_SetConfig+0x100>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a19      	ldr	r2, [pc, #100]	@ (8007308 <TIM_Base_SetConfig+0x140>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00f      	beq.n	80072c8 <TIM_Base_SetConfig+0x100>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a19      	ldr	r2, [pc, #100]	@ (8007310 <TIM_Base_SetConfig+0x148>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00b      	beq.n	80072c8 <TIM_Base_SetConfig+0x100>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a18      	ldr	r2, [pc, #96]	@ (8007314 <TIM_Base_SetConfig+0x14c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d007      	beq.n	80072c8 <TIM_Base_SetConfig+0x100>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a17      	ldr	r2, [pc, #92]	@ (8007318 <TIM_Base_SetConfig+0x150>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_Base_SetConfig+0x100>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a12      	ldr	r2, [pc, #72]	@ (800730c <TIM_Base_SetConfig+0x144>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d103      	bne.n	80072d0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d105      	bne.n	80072ee <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f023 0201 	bic.w	r2, r3, #1
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	611a      	str	r2, [r3, #16]
  }
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40012c00 	.word	0x40012c00
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40013400 	.word	0x40013400
 800730c:	40015000 	.word	0x40015000
 8007310:	40014000 	.word	0x40014000
 8007314:	40014400 	.word	0x40014400
 8007318:	40014800 	.word	0x40014800

0800731c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 0201 	bic.w	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800734a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0303 	bic.w	r3, r3, #3
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f023 0302 	bic.w	r3, r3, #2
 8007368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a30      	ldr	r2, [pc, #192]	@ (8007438 <TIM_OC1_SetConfig+0x11c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d013      	beq.n	80073a4 <TIM_OC1_SetConfig+0x88>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a2f      	ldr	r2, [pc, #188]	@ (800743c <TIM_OC1_SetConfig+0x120>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00f      	beq.n	80073a4 <TIM_OC1_SetConfig+0x88>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a2e      	ldr	r2, [pc, #184]	@ (8007440 <TIM_OC1_SetConfig+0x124>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d00b      	beq.n	80073a4 <TIM_OC1_SetConfig+0x88>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a2d      	ldr	r2, [pc, #180]	@ (8007444 <TIM_OC1_SetConfig+0x128>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d007      	beq.n	80073a4 <TIM_OC1_SetConfig+0x88>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a2c      	ldr	r2, [pc, #176]	@ (8007448 <TIM_OC1_SetConfig+0x12c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d003      	beq.n	80073a4 <TIM_OC1_SetConfig+0x88>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a2b      	ldr	r2, [pc, #172]	@ (800744c <TIM_OC1_SetConfig+0x130>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d10c      	bne.n	80073be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f023 0308 	bic.w	r3, r3, #8
 80073aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f023 0304 	bic.w	r3, r3, #4
 80073bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a1d      	ldr	r2, [pc, #116]	@ (8007438 <TIM_OC1_SetConfig+0x11c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <TIM_OC1_SetConfig+0xd2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a1c      	ldr	r2, [pc, #112]	@ (800743c <TIM_OC1_SetConfig+0x120>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00f      	beq.n	80073ee <TIM_OC1_SetConfig+0xd2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007440 <TIM_OC1_SetConfig+0x124>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00b      	beq.n	80073ee <TIM_OC1_SetConfig+0xd2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a1a      	ldr	r2, [pc, #104]	@ (8007444 <TIM_OC1_SetConfig+0x128>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d007      	beq.n	80073ee <TIM_OC1_SetConfig+0xd2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a19      	ldr	r2, [pc, #100]	@ (8007448 <TIM_OC1_SetConfig+0x12c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_OC1_SetConfig+0xd2>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a18      	ldr	r2, [pc, #96]	@ (800744c <TIM_OC1_SetConfig+0x130>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d111      	bne.n	8007412 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4313      	orrs	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	621a      	str	r2, [r3, #32]
}
 800742c:	bf00      	nop
 800742e:	371c      	adds	r7, #28
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40013400 	.word	0x40013400
 8007440:	40014000 	.word	0x40014000
 8007444:	40014400 	.word	0x40014400
 8007448:	40014800 	.word	0x40014800
 800744c:	40015000 	.word	0x40015000

08007450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f023 0210 	bic.w	r2, r3, #16
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800748a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	f023 0320 	bic.w	r3, r3, #32
 800749e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007560 <TIM_OC2_SetConfig+0x110>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d007      	beq.n	80074c4 <TIM_OC2_SetConfig+0x74>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a2b      	ldr	r2, [pc, #172]	@ (8007564 <TIM_OC2_SetConfig+0x114>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d003      	beq.n	80074c4 <TIM_OC2_SetConfig+0x74>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a2a      	ldr	r2, [pc, #168]	@ (8007568 <TIM_OC2_SetConfig+0x118>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d10d      	bne.n	80074e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	011b      	lsls	r3, r3, #4
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007560 <TIM_OC2_SetConfig+0x110>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <TIM_OC2_SetConfig+0xc0>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007564 <TIM_OC2_SetConfig+0x114>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00f      	beq.n	8007510 <TIM_OC2_SetConfig+0xc0>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a1e      	ldr	r2, [pc, #120]	@ (800756c <TIM_OC2_SetConfig+0x11c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00b      	beq.n	8007510 <TIM_OC2_SetConfig+0xc0>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <TIM_OC2_SetConfig+0x120>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d007      	beq.n	8007510 <TIM_OC2_SetConfig+0xc0>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a1c      	ldr	r2, [pc, #112]	@ (8007574 <TIM_OC2_SetConfig+0x124>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_OC2_SetConfig+0xc0>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a17      	ldr	r2, [pc, #92]	@ (8007568 <TIM_OC2_SetConfig+0x118>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d113      	bne.n	8007538 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007516:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800751e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	695b      	ldr	r3, [r3, #20]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40013400 	.word	0x40013400
 8007568:	40015000 	.word	0x40015000
 800756c:	40014000 	.word	0x40014000
 8007570:	40014400 	.word	0x40014400
 8007574:	40014800 	.word	0x40014800

08007578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0303 	bic.w	r3, r3, #3
 80075b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	021b      	lsls	r3, r3, #8
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2b      	ldr	r2, [pc, #172]	@ (8007684 <TIM_OC3_SetConfig+0x10c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_OC3_SetConfig+0x72>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2a      	ldr	r2, [pc, #168]	@ (8007688 <TIM_OC3_SetConfig+0x110>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_OC3_SetConfig+0x72>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a29      	ldr	r2, [pc, #164]	@ (800768c <TIM_OC3_SetConfig+0x114>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d10d      	bne.n	8007606 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007604:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a1e      	ldr	r2, [pc, #120]	@ (8007684 <TIM_OC3_SetConfig+0x10c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d013      	beq.n	8007636 <TIM_OC3_SetConfig+0xbe>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a1d      	ldr	r2, [pc, #116]	@ (8007688 <TIM_OC3_SetConfig+0x110>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00f      	beq.n	8007636 <TIM_OC3_SetConfig+0xbe>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a1d      	ldr	r2, [pc, #116]	@ (8007690 <TIM_OC3_SetConfig+0x118>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d00b      	beq.n	8007636 <TIM_OC3_SetConfig+0xbe>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1c      	ldr	r2, [pc, #112]	@ (8007694 <TIM_OC3_SetConfig+0x11c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d007      	beq.n	8007636 <TIM_OC3_SetConfig+0xbe>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a1b      	ldr	r2, [pc, #108]	@ (8007698 <TIM_OC3_SetConfig+0x120>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_OC3_SetConfig+0xbe>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a16      	ldr	r2, [pc, #88]	@ (800768c <TIM_OC3_SetConfig+0x114>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d113      	bne.n	800765e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800763c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40013400 	.word	0x40013400
 800768c:	40015000 	.word	0x40015000
 8007690:	40014000 	.word	0x40014000
 8007694:	40014400 	.word	0x40014400
 8007698:	40014800 	.word	0x40014800

0800769c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	021b      	lsls	r3, r3, #8
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	031b      	lsls	r3, r3, #12
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007764 <TIM_OC4_SetConfig+0xc8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <TIM_OC4_SetConfig+0x8c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a19      	ldr	r2, [pc, #100]	@ (8007768 <TIM_OC4_SetConfig+0xcc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00f      	beq.n	8007728 <TIM_OC4_SetConfig+0x8c>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a18      	ldr	r2, [pc, #96]	@ (800776c <TIM_OC4_SetConfig+0xd0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00b      	beq.n	8007728 <TIM_OC4_SetConfig+0x8c>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a17      	ldr	r2, [pc, #92]	@ (8007770 <TIM_OC4_SetConfig+0xd4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d007      	beq.n	8007728 <TIM_OC4_SetConfig+0x8c>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a16      	ldr	r2, [pc, #88]	@ (8007774 <TIM_OC4_SetConfig+0xd8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d003      	beq.n	8007728 <TIM_OC4_SetConfig+0x8c>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a15      	ldr	r2, [pc, #84]	@ (8007778 <TIM_OC4_SetConfig+0xdc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d109      	bne.n	800773c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800772e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	019b      	lsls	r3, r3, #6
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	4313      	orrs	r3, r2
 800773a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	621a      	str	r2, [r3, #32]
}
 8007756:	bf00      	nop
 8007758:	371c      	adds	r7, #28
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40013400 	.word	0x40013400
 800776c:	40014000 	.word	0x40014000
 8007770:	40014400 	.word	0x40014400
 8007774:	40014800 	.word	0x40014800
 8007778:	40015000 	.word	0x40015000

0800777c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a19      	ldr	r2, [pc, #100]	@ (8007838 <TIM_OC5_SetConfig+0xbc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <TIM_OC5_SetConfig+0x82>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a18      	ldr	r2, [pc, #96]	@ (800783c <TIM_OC5_SetConfig+0xc0>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00f      	beq.n	80077fe <TIM_OC5_SetConfig+0x82>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a17      	ldr	r2, [pc, #92]	@ (8007840 <TIM_OC5_SetConfig+0xc4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00b      	beq.n	80077fe <TIM_OC5_SetConfig+0x82>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a16      	ldr	r2, [pc, #88]	@ (8007844 <TIM_OC5_SetConfig+0xc8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d007      	beq.n	80077fe <TIM_OC5_SetConfig+0x82>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <TIM_OC5_SetConfig+0xcc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC5_SetConfig+0x82>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a14      	ldr	r2, [pc, #80]	@ (800784c <TIM_OC5_SetConfig+0xd0>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d109      	bne.n	8007812 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	621a      	str	r2, [r3, #32]
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40013400 	.word	0x40013400
 8007840:	40014000 	.word	0x40014000
 8007844:	40014400 	.word	0x40014400
 8007848:	40014800 	.word	0x40014800
 800784c:	40015000 	.word	0x40015000

08007850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800787e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	051b      	lsls	r3, r3, #20
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007910 <TIM_OC6_SetConfig+0xc0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d013      	beq.n	80078d4 <TIM_OC6_SetConfig+0x84>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a19      	ldr	r2, [pc, #100]	@ (8007914 <TIM_OC6_SetConfig+0xc4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00f      	beq.n	80078d4 <TIM_OC6_SetConfig+0x84>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a18      	ldr	r2, [pc, #96]	@ (8007918 <TIM_OC6_SetConfig+0xc8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00b      	beq.n	80078d4 <TIM_OC6_SetConfig+0x84>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a17      	ldr	r2, [pc, #92]	@ (800791c <TIM_OC6_SetConfig+0xcc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d007      	beq.n	80078d4 <TIM_OC6_SetConfig+0x84>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a16      	ldr	r2, [pc, #88]	@ (8007920 <TIM_OC6_SetConfig+0xd0>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d003      	beq.n	80078d4 <TIM_OC6_SetConfig+0x84>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a15      	ldr	r2, [pc, #84]	@ (8007924 <TIM_OC6_SetConfig+0xd4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d109      	bne.n	80078e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	029b      	lsls	r3, r3, #10
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	621a      	str	r2, [r3, #32]
}
 8007902:	bf00      	nop
 8007904:	371c      	adds	r7, #28
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800
 8007924:	40015000 	.word	0x40015000

08007928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6a1b      	ldr	r3, [r3, #32]
 8007938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	f023 0201 	bic.w	r2, r3, #1
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f023 030a 	bic.w	r3, r3, #10
 8007964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	621a      	str	r2, [r3, #32]
}
 800797a:	bf00      	nop
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007986:	b480      	push	{r7}
 8007988:	b087      	sub	sp, #28
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f023 0210 	bic.w	r2, r3, #16
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	031b      	lsls	r3, r3, #12
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f043 0307 	orr.w	r3, r3, #7
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	021a      	lsls	r2, r3, #8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	609a      	str	r2, [r3, #8]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f003 031f 	and.w	r3, r3, #31
 8007a6e:	2201      	movs	r2, #1
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6a1a      	ldr	r2, [r3, #32]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	401a      	ands	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1a      	ldr	r2, [r3, #32]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f003 031f 	and.w	r3, r3, #31
 8007a8e:	6879      	ldr	r1, [r7, #4]
 8007a90:	fa01 f303 	lsl.w	r3, r1, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007abc:	2302      	movs	r3, #2
 8007abe:	e06d      	b.n	8007b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a30      	ldr	r2, [pc, #192]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a2f      	ldr	r2, [pc, #188]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a2d      	ldr	r2, [pc, #180]	@ (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d108      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007b04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d01d      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3c:	d018      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1c      	ldr	r2, [pc, #112]	@ (8007bb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d013      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007bb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00e      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a15      	ldr	r2, [pc, #84]	@ (8007bac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d009      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a16      	ldr	r2, [pc, #88]	@ (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d004      	beq.n	8007b70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a11      	ldr	r2, [pc, #68]	@ (8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10c      	bne.n	8007b8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	40012c00 	.word	0x40012c00
 8007bac:	40013400 	.word	0x40013400
 8007bb0:	40015000 	.word	0x40015000
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40014000 	.word	0x40014000

08007bc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e06a      	b.n	8007cb2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d009      	beq.n	8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a17      	ldr	r2, [pc, #92]	@ (8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a16      	ldr	r2, [pc, #88]	@ (8007cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d115      	bne.n	8007ca0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7e:	051b      	lsls	r3, r3, #20
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40015000 	.word	0x40015000

08007ccc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007cfc:	bf00      	nop
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <sniprintf>:
 8007d08:	b40c      	push	{r2, r3}
 8007d0a:	b530      	push	{r4, r5, lr}
 8007d0c:	4b18      	ldr	r3, [pc, #96]	@ (8007d70 <sniprintf+0x68>)
 8007d0e:	1e0c      	subs	r4, r1, #0
 8007d10:	681d      	ldr	r5, [r3, #0]
 8007d12:	b09d      	sub	sp, #116	@ 0x74
 8007d14:	da08      	bge.n	8007d28 <sniprintf+0x20>
 8007d16:	238b      	movs	r3, #139	@ 0x8b
 8007d18:	602b      	str	r3, [r5, #0]
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1e:	b01d      	add	sp, #116	@ 0x74
 8007d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d24:	b002      	add	sp, #8
 8007d26:	4770      	bx	lr
 8007d28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d36:	bf14      	ite	ne
 8007d38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d3c:	4623      	moveq	r3, r4
 8007d3e:	9304      	str	r3, [sp, #16]
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d46:	9002      	str	r0, [sp, #8]
 8007d48:	9006      	str	r0, [sp, #24]
 8007d4a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007d4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d50:	ab21      	add	r3, sp, #132	@ 0x84
 8007d52:	a902      	add	r1, sp, #8
 8007d54:	4628      	mov	r0, r5
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	f000 f9c4 	bl	80080e4 <_svfiprintf_r>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	bfbc      	itt	lt
 8007d60:	238b      	movlt	r3, #139	@ 0x8b
 8007d62:	602b      	strlt	r3, [r5, #0]
 8007d64:	2c00      	cmp	r4, #0
 8007d66:	d0da      	beq.n	8007d1e <sniprintf+0x16>
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	701a      	strb	r2, [r3, #0]
 8007d6e:	e7d6      	b.n	8007d1e <sniprintf+0x16>
 8007d70:	20000024 	.word	0x20000024

08007d74 <siprintf>:
 8007d74:	b40e      	push	{r1, r2, r3}
 8007d76:	b510      	push	{r4, lr}
 8007d78:	b09d      	sub	sp, #116	@ 0x74
 8007d7a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007d7c:	9002      	str	r0, [sp, #8]
 8007d7e:	9006      	str	r0, [sp, #24]
 8007d80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d84:	480a      	ldr	r0, [pc, #40]	@ (8007db0 <siprintf+0x3c>)
 8007d86:	9107      	str	r1, [sp, #28]
 8007d88:	9104      	str	r1, [sp, #16]
 8007d8a:	490a      	ldr	r1, [pc, #40]	@ (8007db4 <siprintf+0x40>)
 8007d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d90:	9105      	str	r1, [sp, #20]
 8007d92:	2400      	movs	r4, #0
 8007d94:	a902      	add	r1, sp, #8
 8007d96:	6800      	ldr	r0, [r0, #0]
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007d9c:	f000 f9a2 	bl	80080e4 <_svfiprintf_r>
 8007da0:	9b02      	ldr	r3, [sp, #8]
 8007da2:	701c      	strb	r4, [r3, #0]
 8007da4:	b01d      	add	sp, #116	@ 0x74
 8007da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007daa:	b003      	add	sp, #12
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	20000024 	.word	0x20000024
 8007db4:	ffff0208 	.word	0xffff0208

08007db8 <memset>:
 8007db8:	4402      	add	r2, r0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <memset+0xa>
 8007dc0:	4770      	bx	lr
 8007dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc6:	e7f9      	b.n	8007dbc <memset+0x4>

08007dc8 <__errno>:
 8007dc8:	4b01      	ldr	r3, [pc, #4]	@ (8007dd0 <__errno+0x8>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000024 	.word	0x20000024

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007e0c <__libc_init_array+0x38>)
 8007dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007dda:	1b64      	subs	r4, r4, r5
 8007ddc:	10a4      	asrs	r4, r4, #2
 8007dde:	2600      	movs	r6, #0
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	4d0b      	ldr	r5, [pc, #44]	@ (8007e14 <__libc_init_array+0x40>)
 8007de6:	4c0c      	ldr	r4, [pc, #48]	@ (8007e18 <__libc_init_array+0x44>)
 8007de8:	f000 fc64 	bl	80086b4 <_init>
 8007dec:	1b64      	subs	r4, r4, r5
 8007dee:	10a4      	asrs	r4, r4, #2
 8007df0:	2600      	movs	r6, #0
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	080088dc 	.word	0x080088dc
 8007e10:	080088dc 	.word	0x080088dc
 8007e14:	080088dc 	.word	0x080088dc
 8007e18:	080088e0 	.word	0x080088e0

08007e1c <__retarget_lock_acquire_recursive>:
 8007e1c:	4770      	bx	lr

08007e1e <__retarget_lock_release_recursive>:
 8007e1e:	4770      	bx	lr

08007e20 <memcpy>:
 8007e20:	440a      	add	r2, r1
 8007e22:	4291      	cmp	r1, r2
 8007e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e28:	d100      	bne.n	8007e2c <memcpy+0xc>
 8007e2a:	4770      	bx	lr
 8007e2c:	b510      	push	{r4, lr}
 8007e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e36:	4291      	cmp	r1, r2
 8007e38:	d1f9      	bne.n	8007e2e <memcpy+0xe>
 8007e3a:	bd10      	pop	{r4, pc}

08007e3c <_free_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4605      	mov	r5, r0
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d041      	beq.n	8007ec8 <_free_r+0x8c>
 8007e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e48:	1f0c      	subs	r4, r1, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bfb8      	it	lt
 8007e4e:	18e4      	addlt	r4, r4, r3
 8007e50:	f000 f8e0 	bl	8008014 <__malloc_lock>
 8007e54:	4a1d      	ldr	r2, [pc, #116]	@ (8007ecc <_free_r+0x90>)
 8007e56:	6813      	ldr	r3, [r2, #0]
 8007e58:	b933      	cbnz	r3, 8007e68 <_free_r+0x2c>
 8007e5a:	6063      	str	r3, [r4, #4]
 8007e5c:	6014      	str	r4, [r2, #0]
 8007e5e:	4628      	mov	r0, r5
 8007e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e64:	f000 b8dc 	b.w	8008020 <__malloc_unlock>
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	d908      	bls.n	8007e7e <_free_r+0x42>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	1821      	adds	r1, r4, r0
 8007e70:	428b      	cmp	r3, r1
 8007e72:	bf01      	itttt	eq
 8007e74:	6819      	ldreq	r1, [r3, #0]
 8007e76:	685b      	ldreq	r3, [r3, #4]
 8007e78:	1809      	addeq	r1, r1, r0
 8007e7a:	6021      	streq	r1, [r4, #0]
 8007e7c:	e7ed      	b.n	8007e5a <_free_r+0x1e>
 8007e7e:	461a      	mov	r2, r3
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	b10b      	cbz	r3, 8007e88 <_free_r+0x4c>
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d9fa      	bls.n	8007e7e <_free_r+0x42>
 8007e88:	6811      	ldr	r1, [r2, #0]
 8007e8a:	1850      	adds	r0, r2, r1
 8007e8c:	42a0      	cmp	r0, r4
 8007e8e:	d10b      	bne.n	8007ea8 <_free_r+0x6c>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	4401      	add	r1, r0
 8007e94:	1850      	adds	r0, r2, r1
 8007e96:	4283      	cmp	r3, r0
 8007e98:	6011      	str	r1, [r2, #0]
 8007e9a:	d1e0      	bne.n	8007e5e <_free_r+0x22>
 8007e9c:	6818      	ldr	r0, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	6053      	str	r3, [r2, #4]
 8007ea2:	4408      	add	r0, r1
 8007ea4:	6010      	str	r0, [r2, #0]
 8007ea6:	e7da      	b.n	8007e5e <_free_r+0x22>
 8007ea8:	d902      	bls.n	8007eb0 <_free_r+0x74>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	602b      	str	r3, [r5, #0]
 8007eae:	e7d6      	b.n	8007e5e <_free_r+0x22>
 8007eb0:	6820      	ldr	r0, [r4, #0]
 8007eb2:	1821      	adds	r1, r4, r0
 8007eb4:	428b      	cmp	r3, r1
 8007eb6:	bf04      	itt	eq
 8007eb8:	6819      	ldreq	r1, [r3, #0]
 8007eba:	685b      	ldreq	r3, [r3, #4]
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	bf04      	itt	eq
 8007ec0:	1809      	addeq	r1, r1, r0
 8007ec2:	6021      	streq	r1, [r4, #0]
 8007ec4:	6054      	str	r4, [r2, #4]
 8007ec6:	e7ca      	b.n	8007e5e <_free_r+0x22>
 8007ec8:	bd38      	pop	{r3, r4, r5, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000404 	.word	0x20000404

08007ed0 <sbrk_aligned>:
 8007ed0:	b570      	push	{r4, r5, r6, lr}
 8007ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8007f10 <sbrk_aligned+0x40>)
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	6831      	ldr	r1, [r6, #0]
 8007ed8:	4605      	mov	r5, r0
 8007eda:	b911      	cbnz	r1, 8007ee2 <sbrk_aligned+0x12>
 8007edc:	f000 fba4 	bl	8008628 <_sbrk_r>
 8007ee0:	6030      	str	r0, [r6, #0]
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f000 fb9f 	bl	8008628 <_sbrk_r>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	d103      	bne.n	8007ef6 <sbrk_aligned+0x26>
 8007eee:	f04f 34ff 	mov.w	r4, #4294967295
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	1cc4      	adds	r4, r0, #3
 8007ef8:	f024 0403 	bic.w	r4, r4, #3
 8007efc:	42a0      	cmp	r0, r4
 8007efe:	d0f8      	beq.n	8007ef2 <sbrk_aligned+0x22>
 8007f00:	1a21      	subs	r1, r4, r0
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 fb90 	bl	8008628 <_sbrk_r>
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d1f2      	bne.n	8007ef2 <sbrk_aligned+0x22>
 8007f0c:	e7ef      	b.n	8007eee <sbrk_aligned+0x1e>
 8007f0e:	bf00      	nop
 8007f10:	20000400 	.word	0x20000400

08007f14 <_malloc_r>:
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	1ccd      	adds	r5, r1, #3
 8007f1a:	f025 0503 	bic.w	r5, r5, #3
 8007f1e:	3508      	adds	r5, #8
 8007f20:	2d0c      	cmp	r5, #12
 8007f22:	bf38      	it	cc
 8007f24:	250c      	movcc	r5, #12
 8007f26:	2d00      	cmp	r5, #0
 8007f28:	4606      	mov	r6, r0
 8007f2a:	db01      	blt.n	8007f30 <_malloc_r+0x1c>
 8007f2c:	42a9      	cmp	r1, r5
 8007f2e:	d904      	bls.n	8007f3a <_malloc_r+0x26>
 8007f30:	230c      	movs	r3, #12
 8007f32:	6033      	str	r3, [r6, #0]
 8007f34:	2000      	movs	r0, #0
 8007f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008010 <_malloc_r+0xfc>
 8007f3e:	f000 f869 	bl	8008014 <__malloc_lock>
 8007f42:	f8d8 3000 	ldr.w	r3, [r8]
 8007f46:	461c      	mov	r4, r3
 8007f48:	bb44      	cbnz	r4, 8007f9c <_malloc_r+0x88>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f7ff ffbf 	bl	8007ed0 <sbrk_aligned>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	4604      	mov	r4, r0
 8007f56:	d158      	bne.n	800800a <_malloc_r+0xf6>
 8007f58:	f8d8 4000 	ldr.w	r4, [r8]
 8007f5c:	4627      	mov	r7, r4
 8007f5e:	2f00      	cmp	r7, #0
 8007f60:	d143      	bne.n	8007fea <_malloc_r+0xd6>
 8007f62:	2c00      	cmp	r4, #0
 8007f64:	d04b      	beq.n	8007ffe <_malloc_r+0xea>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	4639      	mov	r1, r7
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	eb04 0903 	add.w	r9, r4, r3
 8007f70:	f000 fb5a 	bl	8008628 <_sbrk_r>
 8007f74:	4581      	cmp	r9, r0
 8007f76:	d142      	bne.n	8007ffe <_malloc_r+0xea>
 8007f78:	6821      	ldr	r1, [r4, #0]
 8007f7a:	1a6d      	subs	r5, r5, r1
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7ff ffa6 	bl	8007ed0 <sbrk_aligned>
 8007f84:	3001      	adds	r0, #1
 8007f86:	d03a      	beq.n	8007ffe <_malloc_r+0xea>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	442b      	add	r3, r5
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	bb62      	cbnz	r2, 8007ff0 <_malloc_r+0xdc>
 8007f96:	f8c8 7000 	str.w	r7, [r8]
 8007f9a:	e00f      	b.n	8007fbc <_malloc_r+0xa8>
 8007f9c:	6822      	ldr	r2, [r4, #0]
 8007f9e:	1b52      	subs	r2, r2, r5
 8007fa0:	d420      	bmi.n	8007fe4 <_malloc_r+0xd0>
 8007fa2:	2a0b      	cmp	r2, #11
 8007fa4:	d917      	bls.n	8007fd6 <_malloc_r+0xc2>
 8007fa6:	1961      	adds	r1, r4, r5
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	6025      	str	r5, [r4, #0]
 8007fac:	bf18      	it	ne
 8007fae:	6059      	strne	r1, [r3, #4]
 8007fb0:	6863      	ldr	r3, [r4, #4]
 8007fb2:	bf08      	it	eq
 8007fb4:	f8c8 1000 	streq.w	r1, [r8]
 8007fb8:	5162      	str	r2, [r4, r5]
 8007fba:	604b      	str	r3, [r1, #4]
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 f82f 	bl	8008020 <__malloc_unlock>
 8007fc2:	f104 000b 	add.w	r0, r4, #11
 8007fc6:	1d23      	adds	r3, r4, #4
 8007fc8:	f020 0007 	bic.w	r0, r0, #7
 8007fcc:	1ac2      	subs	r2, r0, r3
 8007fce:	bf1c      	itt	ne
 8007fd0:	1a1b      	subne	r3, r3, r0
 8007fd2:	50a3      	strne	r3, [r4, r2]
 8007fd4:	e7af      	b.n	8007f36 <_malloc_r+0x22>
 8007fd6:	6862      	ldr	r2, [r4, #4]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	bf0c      	ite	eq
 8007fdc:	f8c8 2000 	streq.w	r2, [r8]
 8007fe0:	605a      	strne	r2, [r3, #4]
 8007fe2:	e7eb      	b.n	8007fbc <_malloc_r+0xa8>
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	6864      	ldr	r4, [r4, #4]
 8007fe8:	e7ae      	b.n	8007f48 <_malloc_r+0x34>
 8007fea:	463c      	mov	r4, r7
 8007fec:	687f      	ldr	r7, [r7, #4]
 8007fee:	e7b6      	b.n	8007f5e <_malloc_r+0x4a>
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	d1fb      	bne.n	8007ff0 <_malloc_r+0xdc>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	6053      	str	r3, [r2, #4]
 8007ffc:	e7de      	b.n	8007fbc <_malloc_r+0xa8>
 8007ffe:	230c      	movs	r3, #12
 8008000:	6033      	str	r3, [r6, #0]
 8008002:	4630      	mov	r0, r6
 8008004:	f000 f80c 	bl	8008020 <__malloc_unlock>
 8008008:	e794      	b.n	8007f34 <_malloc_r+0x20>
 800800a:	6005      	str	r5, [r0, #0]
 800800c:	e7d6      	b.n	8007fbc <_malloc_r+0xa8>
 800800e:	bf00      	nop
 8008010:	20000404 	.word	0x20000404

08008014 <__malloc_lock>:
 8008014:	4801      	ldr	r0, [pc, #4]	@ (800801c <__malloc_lock+0x8>)
 8008016:	f7ff bf01 	b.w	8007e1c <__retarget_lock_acquire_recursive>
 800801a:	bf00      	nop
 800801c:	200003fc 	.word	0x200003fc

08008020 <__malloc_unlock>:
 8008020:	4801      	ldr	r0, [pc, #4]	@ (8008028 <__malloc_unlock+0x8>)
 8008022:	f7ff befc 	b.w	8007e1e <__retarget_lock_release_recursive>
 8008026:	bf00      	nop
 8008028:	200003fc 	.word	0x200003fc

0800802c <__ssputs_r>:
 800802c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008030:	688e      	ldr	r6, [r1, #8]
 8008032:	461f      	mov	r7, r3
 8008034:	42be      	cmp	r6, r7
 8008036:	680b      	ldr	r3, [r1, #0]
 8008038:	4682      	mov	sl, r0
 800803a:	460c      	mov	r4, r1
 800803c:	4690      	mov	r8, r2
 800803e:	d82d      	bhi.n	800809c <__ssputs_r+0x70>
 8008040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008048:	d026      	beq.n	8008098 <__ssputs_r+0x6c>
 800804a:	6965      	ldr	r5, [r4, #20]
 800804c:	6909      	ldr	r1, [r1, #16]
 800804e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008052:	eba3 0901 	sub.w	r9, r3, r1
 8008056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800805a:	1c7b      	adds	r3, r7, #1
 800805c:	444b      	add	r3, r9
 800805e:	106d      	asrs	r5, r5, #1
 8008060:	429d      	cmp	r5, r3
 8008062:	bf38      	it	cc
 8008064:	461d      	movcc	r5, r3
 8008066:	0553      	lsls	r3, r2, #21
 8008068:	d527      	bpl.n	80080ba <__ssputs_r+0x8e>
 800806a:	4629      	mov	r1, r5
 800806c:	f7ff ff52 	bl	8007f14 <_malloc_r>
 8008070:	4606      	mov	r6, r0
 8008072:	b360      	cbz	r0, 80080ce <__ssputs_r+0xa2>
 8008074:	6921      	ldr	r1, [r4, #16]
 8008076:	464a      	mov	r2, r9
 8008078:	f7ff fed2 	bl	8007e20 <memcpy>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	6126      	str	r6, [r4, #16]
 800808a:	6165      	str	r5, [r4, #20]
 800808c:	444e      	add	r6, r9
 800808e:	eba5 0509 	sub.w	r5, r5, r9
 8008092:	6026      	str	r6, [r4, #0]
 8008094:	60a5      	str	r5, [r4, #8]
 8008096:	463e      	mov	r6, r7
 8008098:	42be      	cmp	r6, r7
 800809a:	d900      	bls.n	800809e <__ssputs_r+0x72>
 800809c:	463e      	mov	r6, r7
 800809e:	6820      	ldr	r0, [r4, #0]
 80080a0:	4632      	mov	r2, r6
 80080a2:	4641      	mov	r1, r8
 80080a4:	f000 faa6 	bl	80085f4 <memmove>
 80080a8:	68a3      	ldr	r3, [r4, #8]
 80080aa:	1b9b      	subs	r3, r3, r6
 80080ac:	60a3      	str	r3, [r4, #8]
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	4433      	add	r3, r6
 80080b2:	6023      	str	r3, [r4, #0]
 80080b4:	2000      	movs	r0, #0
 80080b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ba:	462a      	mov	r2, r5
 80080bc:	f000 fac4 	bl	8008648 <_realloc_r>
 80080c0:	4606      	mov	r6, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	d1e0      	bne.n	8008088 <__ssputs_r+0x5c>
 80080c6:	6921      	ldr	r1, [r4, #16]
 80080c8:	4650      	mov	r0, sl
 80080ca:	f7ff feb7 	bl	8007e3c <_free_r>
 80080ce:	230c      	movs	r3, #12
 80080d0:	f8ca 3000 	str.w	r3, [sl]
 80080d4:	89a3      	ldrh	r3, [r4, #12]
 80080d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080da:	81a3      	strh	r3, [r4, #12]
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e7e9      	b.n	80080b6 <__ssputs_r+0x8a>
	...

080080e4 <_svfiprintf_r>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	4698      	mov	r8, r3
 80080ea:	898b      	ldrh	r3, [r1, #12]
 80080ec:	061b      	lsls	r3, r3, #24
 80080ee:	b09d      	sub	sp, #116	@ 0x74
 80080f0:	4607      	mov	r7, r0
 80080f2:	460d      	mov	r5, r1
 80080f4:	4614      	mov	r4, r2
 80080f6:	d510      	bpl.n	800811a <_svfiprintf_r+0x36>
 80080f8:	690b      	ldr	r3, [r1, #16]
 80080fa:	b973      	cbnz	r3, 800811a <_svfiprintf_r+0x36>
 80080fc:	2140      	movs	r1, #64	@ 0x40
 80080fe:	f7ff ff09 	bl	8007f14 <_malloc_r>
 8008102:	6028      	str	r0, [r5, #0]
 8008104:	6128      	str	r0, [r5, #16]
 8008106:	b930      	cbnz	r0, 8008116 <_svfiprintf_r+0x32>
 8008108:	230c      	movs	r3, #12
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	f04f 30ff 	mov.w	r0, #4294967295
 8008110:	b01d      	add	sp, #116	@ 0x74
 8008112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008116:	2340      	movs	r3, #64	@ 0x40
 8008118:	616b      	str	r3, [r5, #20]
 800811a:	2300      	movs	r3, #0
 800811c:	9309      	str	r3, [sp, #36]	@ 0x24
 800811e:	2320      	movs	r3, #32
 8008120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008124:	f8cd 800c 	str.w	r8, [sp, #12]
 8008128:	2330      	movs	r3, #48	@ 0x30
 800812a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80082c8 <_svfiprintf_r+0x1e4>
 800812e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008132:	f04f 0901 	mov.w	r9, #1
 8008136:	4623      	mov	r3, r4
 8008138:	469a      	mov	sl, r3
 800813a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800813e:	b10a      	cbz	r2, 8008144 <_svfiprintf_r+0x60>
 8008140:	2a25      	cmp	r2, #37	@ 0x25
 8008142:	d1f9      	bne.n	8008138 <_svfiprintf_r+0x54>
 8008144:	ebba 0b04 	subs.w	fp, sl, r4
 8008148:	d00b      	beq.n	8008162 <_svfiprintf_r+0x7e>
 800814a:	465b      	mov	r3, fp
 800814c:	4622      	mov	r2, r4
 800814e:	4629      	mov	r1, r5
 8008150:	4638      	mov	r0, r7
 8008152:	f7ff ff6b 	bl	800802c <__ssputs_r>
 8008156:	3001      	adds	r0, #1
 8008158:	f000 80a7 	beq.w	80082aa <_svfiprintf_r+0x1c6>
 800815c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800815e:	445a      	add	r2, fp
 8008160:	9209      	str	r2, [sp, #36]	@ 0x24
 8008162:	f89a 3000 	ldrb.w	r3, [sl]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 809f 	beq.w	80082aa <_svfiprintf_r+0x1c6>
 800816c:	2300      	movs	r3, #0
 800816e:	f04f 32ff 	mov.w	r2, #4294967295
 8008172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008176:	f10a 0a01 	add.w	sl, sl, #1
 800817a:	9304      	str	r3, [sp, #16]
 800817c:	9307      	str	r3, [sp, #28]
 800817e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008182:	931a      	str	r3, [sp, #104]	@ 0x68
 8008184:	4654      	mov	r4, sl
 8008186:	2205      	movs	r2, #5
 8008188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800818c:	484e      	ldr	r0, [pc, #312]	@ (80082c8 <_svfiprintf_r+0x1e4>)
 800818e:	f7f8 f83f 	bl	8000210 <memchr>
 8008192:	9a04      	ldr	r2, [sp, #16]
 8008194:	b9d8      	cbnz	r0, 80081ce <_svfiprintf_r+0xea>
 8008196:	06d0      	lsls	r0, r2, #27
 8008198:	bf44      	itt	mi
 800819a:	2320      	movmi	r3, #32
 800819c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081a0:	0711      	lsls	r1, r2, #28
 80081a2:	bf44      	itt	mi
 80081a4:	232b      	movmi	r3, #43	@ 0x2b
 80081a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b0:	d015      	beq.n	80081de <_svfiprintf_r+0xfa>
 80081b2:	9a07      	ldr	r2, [sp, #28]
 80081b4:	4654      	mov	r4, sl
 80081b6:	2000      	movs	r0, #0
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	4621      	mov	r1, r4
 80081be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c2:	3b30      	subs	r3, #48	@ 0x30
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d94b      	bls.n	8008260 <_svfiprintf_r+0x17c>
 80081c8:	b1b0      	cbz	r0, 80081f8 <_svfiprintf_r+0x114>
 80081ca:	9207      	str	r2, [sp, #28]
 80081cc:	e014      	b.n	80081f8 <_svfiprintf_r+0x114>
 80081ce:	eba0 0308 	sub.w	r3, r0, r8
 80081d2:	fa09 f303 	lsl.w	r3, r9, r3
 80081d6:	4313      	orrs	r3, r2
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	46a2      	mov	sl, r4
 80081dc:	e7d2      	b.n	8008184 <_svfiprintf_r+0xa0>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	1d19      	adds	r1, r3, #4
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	9103      	str	r1, [sp, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	bfbb      	ittet	lt
 80081ea:	425b      	neglt	r3, r3
 80081ec:	f042 0202 	orrlt.w	r2, r2, #2
 80081f0:	9307      	strge	r3, [sp, #28]
 80081f2:	9307      	strlt	r3, [sp, #28]
 80081f4:	bfb8      	it	lt
 80081f6:	9204      	strlt	r2, [sp, #16]
 80081f8:	7823      	ldrb	r3, [r4, #0]
 80081fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80081fc:	d10a      	bne.n	8008214 <_svfiprintf_r+0x130>
 80081fe:	7863      	ldrb	r3, [r4, #1]
 8008200:	2b2a      	cmp	r3, #42	@ 0x2a
 8008202:	d132      	bne.n	800826a <_svfiprintf_r+0x186>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	1d1a      	adds	r2, r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	9203      	str	r2, [sp, #12]
 800820c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008210:	3402      	adds	r4, #2
 8008212:	9305      	str	r3, [sp, #20]
 8008214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082d8 <_svfiprintf_r+0x1f4>
 8008218:	7821      	ldrb	r1, [r4, #0]
 800821a:	2203      	movs	r2, #3
 800821c:	4650      	mov	r0, sl
 800821e:	f7f7 fff7 	bl	8000210 <memchr>
 8008222:	b138      	cbz	r0, 8008234 <_svfiprintf_r+0x150>
 8008224:	9b04      	ldr	r3, [sp, #16]
 8008226:	eba0 000a 	sub.w	r0, r0, sl
 800822a:	2240      	movs	r2, #64	@ 0x40
 800822c:	4082      	lsls	r2, r0
 800822e:	4313      	orrs	r3, r2
 8008230:	3401      	adds	r4, #1
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008238:	4824      	ldr	r0, [pc, #144]	@ (80082cc <_svfiprintf_r+0x1e8>)
 800823a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800823e:	2206      	movs	r2, #6
 8008240:	f7f7 ffe6 	bl	8000210 <memchr>
 8008244:	2800      	cmp	r0, #0
 8008246:	d036      	beq.n	80082b6 <_svfiprintf_r+0x1d2>
 8008248:	4b21      	ldr	r3, [pc, #132]	@ (80082d0 <_svfiprintf_r+0x1ec>)
 800824a:	bb1b      	cbnz	r3, 8008294 <_svfiprintf_r+0x1b0>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	3307      	adds	r3, #7
 8008250:	f023 0307 	bic.w	r3, r3, #7
 8008254:	3308      	adds	r3, #8
 8008256:	9303      	str	r3, [sp, #12]
 8008258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825a:	4433      	add	r3, r6
 800825c:	9309      	str	r3, [sp, #36]	@ 0x24
 800825e:	e76a      	b.n	8008136 <_svfiprintf_r+0x52>
 8008260:	fb0c 3202 	mla	r2, ip, r2, r3
 8008264:	460c      	mov	r4, r1
 8008266:	2001      	movs	r0, #1
 8008268:	e7a8      	b.n	80081bc <_svfiprintf_r+0xd8>
 800826a:	2300      	movs	r3, #0
 800826c:	3401      	adds	r4, #1
 800826e:	9305      	str	r3, [sp, #20]
 8008270:	4619      	mov	r1, r3
 8008272:	f04f 0c0a 	mov.w	ip, #10
 8008276:	4620      	mov	r0, r4
 8008278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800827c:	3a30      	subs	r2, #48	@ 0x30
 800827e:	2a09      	cmp	r2, #9
 8008280:	d903      	bls.n	800828a <_svfiprintf_r+0x1a6>
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0c6      	beq.n	8008214 <_svfiprintf_r+0x130>
 8008286:	9105      	str	r1, [sp, #20]
 8008288:	e7c4      	b.n	8008214 <_svfiprintf_r+0x130>
 800828a:	fb0c 2101 	mla	r1, ip, r1, r2
 800828e:	4604      	mov	r4, r0
 8008290:	2301      	movs	r3, #1
 8008292:	e7f0      	b.n	8008276 <_svfiprintf_r+0x192>
 8008294:	ab03      	add	r3, sp, #12
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	462a      	mov	r2, r5
 800829a:	4b0e      	ldr	r3, [pc, #56]	@ (80082d4 <_svfiprintf_r+0x1f0>)
 800829c:	a904      	add	r1, sp, #16
 800829e:	4638      	mov	r0, r7
 80082a0:	f3af 8000 	nop.w
 80082a4:	1c42      	adds	r2, r0, #1
 80082a6:	4606      	mov	r6, r0
 80082a8:	d1d6      	bne.n	8008258 <_svfiprintf_r+0x174>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	065b      	lsls	r3, r3, #25
 80082ae:	f53f af2d 	bmi.w	800810c <_svfiprintf_r+0x28>
 80082b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082b4:	e72c      	b.n	8008110 <_svfiprintf_r+0x2c>
 80082b6:	ab03      	add	r3, sp, #12
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	462a      	mov	r2, r5
 80082bc:	4b05      	ldr	r3, [pc, #20]	@ (80082d4 <_svfiprintf_r+0x1f0>)
 80082be:	a904      	add	r1, sp, #16
 80082c0:	4638      	mov	r0, r7
 80082c2:	f000 f879 	bl	80083b8 <_printf_i>
 80082c6:	e7ed      	b.n	80082a4 <_svfiprintf_r+0x1c0>
 80082c8:	080088a0 	.word	0x080088a0
 80082cc:	080088aa 	.word	0x080088aa
 80082d0:	00000000 	.word	0x00000000
 80082d4:	0800802d 	.word	0x0800802d
 80082d8:	080088a6 	.word	0x080088a6

080082dc <_printf_common>:
 80082dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e0:	4616      	mov	r6, r2
 80082e2:	4698      	mov	r8, r3
 80082e4:	688a      	ldr	r2, [r1, #8]
 80082e6:	690b      	ldr	r3, [r1, #16]
 80082e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	bfb8      	it	lt
 80082f0:	4613      	movlt	r3, r2
 80082f2:	6033      	str	r3, [r6, #0]
 80082f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082f8:	4607      	mov	r7, r0
 80082fa:	460c      	mov	r4, r1
 80082fc:	b10a      	cbz	r2, 8008302 <_printf_common+0x26>
 80082fe:	3301      	adds	r3, #1
 8008300:	6033      	str	r3, [r6, #0]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	0699      	lsls	r1, r3, #26
 8008306:	bf42      	ittt	mi
 8008308:	6833      	ldrmi	r3, [r6, #0]
 800830a:	3302      	addmi	r3, #2
 800830c:	6033      	strmi	r3, [r6, #0]
 800830e:	6825      	ldr	r5, [r4, #0]
 8008310:	f015 0506 	ands.w	r5, r5, #6
 8008314:	d106      	bne.n	8008324 <_printf_common+0x48>
 8008316:	f104 0a19 	add.w	sl, r4, #25
 800831a:	68e3      	ldr	r3, [r4, #12]
 800831c:	6832      	ldr	r2, [r6, #0]
 800831e:	1a9b      	subs	r3, r3, r2
 8008320:	42ab      	cmp	r3, r5
 8008322:	dc26      	bgt.n	8008372 <_printf_common+0x96>
 8008324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	3b00      	subs	r3, #0
 800832c:	bf18      	it	ne
 800832e:	2301      	movne	r3, #1
 8008330:	0692      	lsls	r2, r2, #26
 8008332:	d42b      	bmi.n	800838c <_printf_common+0xb0>
 8008334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008338:	4641      	mov	r1, r8
 800833a:	4638      	mov	r0, r7
 800833c:	47c8      	blx	r9
 800833e:	3001      	adds	r0, #1
 8008340:	d01e      	beq.n	8008380 <_printf_common+0xa4>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	f003 0306 	and.w	r3, r3, #6
 800834a:	2b04      	cmp	r3, #4
 800834c:	bf02      	ittt	eq
 800834e:	68e5      	ldreq	r5, [r4, #12]
 8008350:	6833      	ldreq	r3, [r6, #0]
 8008352:	1aed      	subeq	r5, r5, r3
 8008354:	68a3      	ldr	r3, [r4, #8]
 8008356:	bf0c      	ite	eq
 8008358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800835c:	2500      	movne	r5, #0
 800835e:	4293      	cmp	r3, r2
 8008360:	bfc4      	itt	gt
 8008362:	1a9b      	subgt	r3, r3, r2
 8008364:	18ed      	addgt	r5, r5, r3
 8008366:	2600      	movs	r6, #0
 8008368:	341a      	adds	r4, #26
 800836a:	42b5      	cmp	r5, r6
 800836c:	d11a      	bne.n	80083a4 <_printf_common+0xc8>
 800836e:	2000      	movs	r0, #0
 8008370:	e008      	b.n	8008384 <_printf_common+0xa8>
 8008372:	2301      	movs	r3, #1
 8008374:	4652      	mov	r2, sl
 8008376:	4641      	mov	r1, r8
 8008378:	4638      	mov	r0, r7
 800837a:	47c8      	blx	r9
 800837c:	3001      	adds	r0, #1
 800837e:	d103      	bne.n	8008388 <_printf_common+0xac>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	3501      	adds	r5, #1
 800838a:	e7c6      	b.n	800831a <_printf_common+0x3e>
 800838c:	18e1      	adds	r1, r4, r3
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	2030      	movs	r0, #48	@ 0x30
 8008392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008396:	4422      	add	r2, r4
 8008398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800839c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80083a0:	3302      	adds	r3, #2
 80083a2:	e7c7      	b.n	8008334 <_printf_common+0x58>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4622      	mov	r2, r4
 80083a8:	4641      	mov	r1, r8
 80083aa:	4638      	mov	r0, r7
 80083ac:	47c8      	blx	r9
 80083ae:	3001      	adds	r0, #1
 80083b0:	d0e6      	beq.n	8008380 <_printf_common+0xa4>
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7d9      	b.n	800836a <_printf_common+0x8e>
	...

080083b8 <_printf_i>:
 80083b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083bc:	7e0f      	ldrb	r7, [r1, #24]
 80083be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80083c0:	2f78      	cmp	r7, #120	@ 0x78
 80083c2:	4691      	mov	r9, r2
 80083c4:	4680      	mov	r8, r0
 80083c6:	460c      	mov	r4, r1
 80083c8:	469a      	mov	sl, r3
 80083ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083ce:	d807      	bhi.n	80083e0 <_printf_i+0x28>
 80083d0:	2f62      	cmp	r7, #98	@ 0x62
 80083d2:	d80a      	bhi.n	80083ea <_printf_i+0x32>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	f000 80d1 	beq.w	800857c <_printf_i+0x1c4>
 80083da:	2f58      	cmp	r7, #88	@ 0x58
 80083dc:	f000 80b8 	beq.w	8008550 <_printf_i+0x198>
 80083e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083e8:	e03a      	b.n	8008460 <_printf_i+0xa8>
 80083ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083ee:	2b15      	cmp	r3, #21
 80083f0:	d8f6      	bhi.n	80083e0 <_printf_i+0x28>
 80083f2:	a101      	add	r1, pc, #4	@ (adr r1, 80083f8 <_printf_i+0x40>)
 80083f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083f8:	08008451 	.word	0x08008451
 80083fc:	08008465 	.word	0x08008465
 8008400:	080083e1 	.word	0x080083e1
 8008404:	080083e1 	.word	0x080083e1
 8008408:	080083e1 	.word	0x080083e1
 800840c:	080083e1 	.word	0x080083e1
 8008410:	08008465 	.word	0x08008465
 8008414:	080083e1 	.word	0x080083e1
 8008418:	080083e1 	.word	0x080083e1
 800841c:	080083e1 	.word	0x080083e1
 8008420:	080083e1 	.word	0x080083e1
 8008424:	08008563 	.word	0x08008563
 8008428:	0800848f 	.word	0x0800848f
 800842c:	0800851d 	.word	0x0800851d
 8008430:	080083e1 	.word	0x080083e1
 8008434:	080083e1 	.word	0x080083e1
 8008438:	08008585 	.word	0x08008585
 800843c:	080083e1 	.word	0x080083e1
 8008440:	0800848f 	.word	0x0800848f
 8008444:	080083e1 	.word	0x080083e1
 8008448:	080083e1 	.word	0x080083e1
 800844c:	08008525 	.word	0x08008525
 8008450:	6833      	ldr	r3, [r6, #0]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6032      	str	r2, [r6, #0]
 8008458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800845c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008460:	2301      	movs	r3, #1
 8008462:	e09c      	b.n	800859e <_printf_i+0x1e6>
 8008464:	6833      	ldr	r3, [r6, #0]
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	1d19      	adds	r1, r3, #4
 800846a:	6031      	str	r1, [r6, #0]
 800846c:	0606      	lsls	r6, r0, #24
 800846e:	d501      	bpl.n	8008474 <_printf_i+0xbc>
 8008470:	681d      	ldr	r5, [r3, #0]
 8008472:	e003      	b.n	800847c <_printf_i+0xc4>
 8008474:	0645      	lsls	r5, r0, #25
 8008476:	d5fb      	bpl.n	8008470 <_printf_i+0xb8>
 8008478:	f9b3 5000 	ldrsh.w	r5, [r3]
 800847c:	2d00      	cmp	r5, #0
 800847e:	da03      	bge.n	8008488 <_printf_i+0xd0>
 8008480:	232d      	movs	r3, #45	@ 0x2d
 8008482:	426d      	negs	r5, r5
 8008484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008488:	4858      	ldr	r0, [pc, #352]	@ (80085ec <_printf_i+0x234>)
 800848a:	230a      	movs	r3, #10
 800848c:	e011      	b.n	80084b2 <_printf_i+0xfa>
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	6833      	ldr	r3, [r6, #0]
 8008492:	0608      	lsls	r0, r1, #24
 8008494:	f853 5b04 	ldr.w	r5, [r3], #4
 8008498:	d402      	bmi.n	80084a0 <_printf_i+0xe8>
 800849a:	0649      	lsls	r1, r1, #25
 800849c:	bf48      	it	mi
 800849e:	b2ad      	uxthmi	r5, r5
 80084a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80084a2:	4852      	ldr	r0, [pc, #328]	@ (80085ec <_printf_i+0x234>)
 80084a4:	6033      	str	r3, [r6, #0]
 80084a6:	bf14      	ite	ne
 80084a8:	230a      	movne	r3, #10
 80084aa:	2308      	moveq	r3, #8
 80084ac:	2100      	movs	r1, #0
 80084ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80084b2:	6866      	ldr	r6, [r4, #4]
 80084b4:	60a6      	str	r6, [r4, #8]
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	db05      	blt.n	80084c6 <_printf_i+0x10e>
 80084ba:	6821      	ldr	r1, [r4, #0]
 80084bc:	432e      	orrs	r6, r5
 80084be:	f021 0104 	bic.w	r1, r1, #4
 80084c2:	6021      	str	r1, [r4, #0]
 80084c4:	d04b      	beq.n	800855e <_printf_i+0x1a6>
 80084c6:	4616      	mov	r6, r2
 80084c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80084cc:	fb03 5711 	mls	r7, r3, r1, r5
 80084d0:	5dc7      	ldrb	r7, [r0, r7]
 80084d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084d6:	462f      	mov	r7, r5
 80084d8:	42bb      	cmp	r3, r7
 80084da:	460d      	mov	r5, r1
 80084dc:	d9f4      	bls.n	80084c8 <_printf_i+0x110>
 80084de:	2b08      	cmp	r3, #8
 80084e0:	d10b      	bne.n	80084fa <_printf_i+0x142>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	07df      	lsls	r7, r3, #31
 80084e6:	d508      	bpl.n	80084fa <_printf_i+0x142>
 80084e8:	6923      	ldr	r3, [r4, #16]
 80084ea:	6861      	ldr	r1, [r4, #4]
 80084ec:	4299      	cmp	r1, r3
 80084ee:	bfde      	ittt	le
 80084f0:	2330      	movle	r3, #48	@ 0x30
 80084f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084fa:	1b92      	subs	r2, r2, r6
 80084fc:	6122      	str	r2, [r4, #16]
 80084fe:	f8cd a000 	str.w	sl, [sp]
 8008502:	464b      	mov	r3, r9
 8008504:	aa03      	add	r2, sp, #12
 8008506:	4621      	mov	r1, r4
 8008508:	4640      	mov	r0, r8
 800850a:	f7ff fee7 	bl	80082dc <_printf_common>
 800850e:	3001      	adds	r0, #1
 8008510:	d14a      	bne.n	80085a8 <_printf_i+0x1f0>
 8008512:	f04f 30ff 	mov.w	r0, #4294967295
 8008516:	b004      	add	sp, #16
 8008518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	f043 0320 	orr.w	r3, r3, #32
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	4832      	ldr	r0, [pc, #200]	@ (80085f0 <_printf_i+0x238>)
 8008526:	2778      	movs	r7, #120	@ 0x78
 8008528:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	6831      	ldr	r1, [r6, #0]
 8008530:	061f      	lsls	r7, r3, #24
 8008532:	f851 5b04 	ldr.w	r5, [r1], #4
 8008536:	d402      	bmi.n	800853e <_printf_i+0x186>
 8008538:	065f      	lsls	r7, r3, #25
 800853a:	bf48      	it	mi
 800853c:	b2ad      	uxthmi	r5, r5
 800853e:	6031      	str	r1, [r6, #0]
 8008540:	07d9      	lsls	r1, r3, #31
 8008542:	bf44      	itt	mi
 8008544:	f043 0320 	orrmi.w	r3, r3, #32
 8008548:	6023      	strmi	r3, [r4, #0]
 800854a:	b11d      	cbz	r5, 8008554 <_printf_i+0x19c>
 800854c:	2310      	movs	r3, #16
 800854e:	e7ad      	b.n	80084ac <_printf_i+0xf4>
 8008550:	4826      	ldr	r0, [pc, #152]	@ (80085ec <_printf_i+0x234>)
 8008552:	e7e9      	b.n	8008528 <_printf_i+0x170>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	f023 0320 	bic.w	r3, r3, #32
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	e7f6      	b.n	800854c <_printf_i+0x194>
 800855e:	4616      	mov	r6, r2
 8008560:	e7bd      	b.n	80084de <_printf_i+0x126>
 8008562:	6833      	ldr	r3, [r6, #0]
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	6961      	ldr	r1, [r4, #20]
 8008568:	1d18      	adds	r0, r3, #4
 800856a:	6030      	str	r0, [r6, #0]
 800856c:	062e      	lsls	r6, r5, #24
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	d501      	bpl.n	8008576 <_printf_i+0x1be>
 8008572:	6019      	str	r1, [r3, #0]
 8008574:	e002      	b.n	800857c <_printf_i+0x1c4>
 8008576:	0668      	lsls	r0, r5, #25
 8008578:	d5fb      	bpl.n	8008572 <_printf_i+0x1ba>
 800857a:	8019      	strh	r1, [r3, #0]
 800857c:	2300      	movs	r3, #0
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	4616      	mov	r6, r2
 8008582:	e7bc      	b.n	80084fe <_printf_i+0x146>
 8008584:	6833      	ldr	r3, [r6, #0]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	6032      	str	r2, [r6, #0]
 800858a:	681e      	ldr	r6, [r3, #0]
 800858c:	6862      	ldr	r2, [r4, #4]
 800858e:	2100      	movs	r1, #0
 8008590:	4630      	mov	r0, r6
 8008592:	f7f7 fe3d 	bl	8000210 <memchr>
 8008596:	b108      	cbz	r0, 800859c <_printf_i+0x1e4>
 8008598:	1b80      	subs	r0, r0, r6
 800859a:	6060      	str	r0, [r4, #4]
 800859c:	6863      	ldr	r3, [r4, #4]
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	2300      	movs	r3, #0
 80085a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085a6:	e7aa      	b.n	80084fe <_printf_i+0x146>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	4632      	mov	r2, r6
 80085ac:	4649      	mov	r1, r9
 80085ae:	4640      	mov	r0, r8
 80085b0:	47d0      	blx	sl
 80085b2:	3001      	adds	r0, #1
 80085b4:	d0ad      	beq.n	8008512 <_printf_i+0x15a>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	079b      	lsls	r3, r3, #30
 80085ba:	d413      	bmi.n	80085e4 <_printf_i+0x22c>
 80085bc:	68e0      	ldr	r0, [r4, #12]
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	4298      	cmp	r0, r3
 80085c2:	bfb8      	it	lt
 80085c4:	4618      	movlt	r0, r3
 80085c6:	e7a6      	b.n	8008516 <_printf_i+0x15e>
 80085c8:	2301      	movs	r3, #1
 80085ca:	4632      	mov	r2, r6
 80085cc:	4649      	mov	r1, r9
 80085ce:	4640      	mov	r0, r8
 80085d0:	47d0      	blx	sl
 80085d2:	3001      	adds	r0, #1
 80085d4:	d09d      	beq.n	8008512 <_printf_i+0x15a>
 80085d6:	3501      	adds	r5, #1
 80085d8:	68e3      	ldr	r3, [r4, #12]
 80085da:	9903      	ldr	r1, [sp, #12]
 80085dc:	1a5b      	subs	r3, r3, r1
 80085de:	42ab      	cmp	r3, r5
 80085e0:	dcf2      	bgt.n	80085c8 <_printf_i+0x210>
 80085e2:	e7eb      	b.n	80085bc <_printf_i+0x204>
 80085e4:	2500      	movs	r5, #0
 80085e6:	f104 0619 	add.w	r6, r4, #25
 80085ea:	e7f5      	b.n	80085d8 <_printf_i+0x220>
 80085ec:	080088b1 	.word	0x080088b1
 80085f0:	080088c2 	.word	0x080088c2

080085f4 <memmove>:
 80085f4:	4288      	cmp	r0, r1
 80085f6:	b510      	push	{r4, lr}
 80085f8:	eb01 0402 	add.w	r4, r1, r2
 80085fc:	d902      	bls.n	8008604 <memmove+0x10>
 80085fe:	4284      	cmp	r4, r0
 8008600:	4623      	mov	r3, r4
 8008602:	d807      	bhi.n	8008614 <memmove+0x20>
 8008604:	1e43      	subs	r3, r0, #1
 8008606:	42a1      	cmp	r1, r4
 8008608:	d008      	beq.n	800861c <memmove+0x28>
 800860a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800860e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008612:	e7f8      	b.n	8008606 <memmove+0x12>
 8008614:	4402      	add	r2, r0
 8008616:	4601      	mov	r1, r0
 8008618:	428a      	cmp	r2, r1
 800861a:	d100      	bne.n	800861e <memmove+0x2a>
 800861c:	bd10      	pop	{r4, pc}
 800861e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008626:	e7f7      	b.n	8008618 <memmove+0x24>

08008628 <_sbrk_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4d06      	ldr	r5, [pc, #24]	@ (8008644 <_sbrk_r+0x1c>)
 800862c:	2300      	movs	r3, #0
 800862e:	4604      	mov	r4, r0
 8008630:	4608      	mov	r0, r1
 8008632:	602b      	str	r3, [r5, #0]
 8008634:	f7fa f860 	bl	80026f8 <_sbrk>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_sbrk_r+0x1a>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_sbrk_r+0x1a>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	200003f8 	.word	0x200003f8

08008648 <_realloc_r>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	4607      	mov	r7, r0
 800864e:	4614      	mov	r4, r2
 8008650:	460d      	mov	r5, r1
 8008652:	b921      	cbnz	r1, 800865e <_realloc_r+0x16>
 8008654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	4611      	mov	r1, r2
 800865a:	f7ff bc5b 	b.w	8007f14 <_malloc_r>
 800865e:	b92a      	cbnz	r2, 800866c <_realloc_r+0x24>
 8008660:	f7ff fbec 	bl	8007e3c <_free_r>
 8008664:	4625      	mov	r5, r4
 8008666:	4628      	mov	r0, r5
 8008668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866c:	f000 f81a 	bl	80086a4 <_malloc_usable_size_r>
 8008670:	4284      	cmp	r4, r0
 8008672:	4606      	mov	r6, r0
 8008674:	d802      	bhi.n	800867c <_realloc_r+0x34>
 8008676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800867a:	d8f4      	bhi.n	8008666 <_realloc_r+0x1e>
 800867c:	4621      	mov	r1, r4
 800867e:	4638      	mov	r0, r7
 8008680:	f7ff fc48 	bl	8007f14 <_malloc_r>
 8008684:	4680      	mov	r8, r0
 8008686:	b908      	cbnz	r0, 800868c <_realloc_r+0x44>
 8008688:	4645      	mov	r5, r8
 800868a:	e7ec      	b.n	8008666 <_realloc_r+0x1e>
 800868c:	42b4      	cmp	r4, r6
 800868e:	4622      	mov	r2, r4
 8008690:	4629      	mov	r1, r5
 8008692:	bf28      	it	cs
 8008694:	4632      	movcs	r2, r6
 8008696:	f7ff fbc3 	bl	8007e20 <memcpy>
 800869a:	4629      	mov	r1, r5
 800869c:	4638      	mov	r0, r7
 800869e:	f7ff fbcd 	bl	8007e3c <_free_r>
 80086a2:	e7f1      	b.n	8008688 <_realloc_r+0x40>

080086a4 <_malloc_usable_size_r>:
 80086a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a8:	1f18      	subs	r0, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	bfbc      	itt	lt
 80086ae:	580b      	ldrlt	r3, [r1, r0]
 80086b0:	18c0      	addlt	r0, r0, r3
 80086b2:	4770      	bx	lr

080086b4 <_init>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	bf00      	nop
 80086b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ba:	bc08      	pop	{r3}
 80086bc:	469e      	mov	lr, r3
 80086be:	4770      	bx	lr

080086c0 <_fini>:
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	bf00      	nop
 80086c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c6:	bc08      	pop	{r3}
 80086c8:	469e      	mov	lr, r3
 80086ca:	4770      	bx	lr
