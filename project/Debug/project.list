
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070ec  080070ec  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070f4  080070f4  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070f4  080070f4  000080f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070f8  080070f8  000080f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080070fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00000318  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000116ed  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000084  00000000  00000000  0001a789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000dde9  00000000  00000000  0001a80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000246d  00000000  00000000  000285f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ce0  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbf4  00000000  00000000  0002b748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000009a8  00000000  00000000  000f733c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00021e2d  00000000  00000000  000f7ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00119b11  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003938  00000000  00000000  00119b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f28 	.word	0x08006f28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006f28 	.word	0x08006f28

080001e0 <coast_asm_delay>:
		i++;
	}
}
*/
coast_asm_delay:
	PUSH {r4}	// 1 + 1 = 2
 80001e0:	b410      	push	{r4}
	PUSH {r5} 	// 2
 80001e2:	b420      	push	{r5}

	// uint32_t i = 0
	MOV r4, #0	// 1
 80001e4:	2400      	movs	r4, #0
	LDR r1, =11999	// 2
 80001e6:	f642 61df 	movw	r1, #11999	@ 0x2edf

080001ea <loop1_start>:
loop1_start:
	CMP r4, r0	// 1
 80001ea:	4284      	cmp	r4, r0
	BHS loop1_end // 1 + P
 80001ec:	d206      	bcs.n	80001fc <loop1_end>

	MOV r5, #0	// 1
 80001ee:	2500      	movs	r5, #0

080001f0 <loop2_start>:

loop2_start:
	// ldr slower but has 32-bits, mov faster only 8-bit
	CMP r5, r1		// 1
 80001f0:	428d      	cmp	r5, r1
	BHS loop2_end	// 1 + P
 80001f2:	d201      	bcs.n	80001f8 <loop2_end>

	// j++
	ADD r5, r5, #1 // 1
 80001f4:	3501      	adds	r5, #1
	b loop2_start  // 1 + P
 80001f6:	e7fb      	b.n	80001f0 <loop2_start>

080001f8 <loop2_end>:
loop2_end:
	// i++
	ADD r4, r4, #1	// 1
 80001f8:	3401      	adds	r4, #1
	b loop1_start  	// 1 + P
 80001fa:	e7f6      	b.n	80001ea <loop1_start>

080001fc <loop1_end>:

loop1_end:
	pop {r5}	// 2
 80001fc:	bc20      	pop	{r5}
	pop {r4}	// 2
 80001fe:	bc10      	pop	{r4}

	BX LR 		// 1 + P
 8000200:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <generate_sound>:
 *      Author: Zhaoji Gou
 */

#include "main.h"
extern void coast_asm_delay(uint32_t milliseconds);
void generate_sound(uint16_t frequency, uint8_t duty_cycle, TIM_HandleTypeDef htim1) {
 80002b0:	b082      	sub	sp, #8
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	f107 0c18 	add.w	ip, r7, #24
 80002bc:	e88c 000c 	stmia.w	ip, {r2, r3}
 80002c0:	4603      	mov	r3, r0
 80002c2:	80fb      	strh	r3, [r7, #6]
 80002c4:	460b      	mov	r3, r1
 80002c6:	717b      	strb	r3, [r7, #5]
	/* protect the function from invalid frequency input */
	if (frequency == 0) return;
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d012      	beq.n	80002f4 <generate_sound+0x44>
	/* millisecond trigger period */
	uint32_t period = 72000 / frequency;
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <generate_sound+0x54>)
 80002d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	/* setup PWM channel and tim1 autoloader */
	htim1.Instance->ARR = period - 1;
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	3a01      	subs	r2, #1
 80002de:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim1.Instance->CCR3 = period / 2;
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	0852      	lsrs	r2, r2, #1
 80002e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* start the timer1 and buzzer */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002e8:	2108      	movs	r1, #8
 80002ea:	f107 0018 	add.w	r0, r7, #24
 80002ee:	f004 fef5 	bl	80050dc <HAL_TIM_PWM_Start>
 80002f2:	e000      	b.n	80002f6 <generate_sound+0x46>
	if (frequency == 0) return;
 80002f4:	bf00      	nop
}
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002fe:	b002      	add	sp, #8
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	00011940 	.word	0x00011940

08000308 <stop_sound>:

void stop_sound(TIM_HandleTypeDef htim1) {
 8000308:	b084      	sub	sp, #16
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
 800030e:	f107 0c08 	add.w	ip, r7, #8
 8000312:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* stop the timer1 and buzzer */
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000316:	2108      	movs	r1, #8
 8000318:	f107 0008 	add.w	r0, r7, #8
 800031c:	f004 ffea 	bl	80052f4 <HAL_TIM_PWM_Stop>
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <play_note>:

void play_note(uint16_t note, uint32_t duration, uint8_t volume, TIM_HandleTypeDef htim1) {
 800032c:	b082      	sub	sp, #8
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b094      	sub	sp, #80	@ 0x50
 8000332:	af12      	add	r7, sp, #72	@ 0x48
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	61fb      	str	r3, [r7, #28]
 8000338:	4603      	mov	r3, r0
 800033a:	80fb      	strh	r3, [r7, #6]
 800033c:	4613      	mov	r3, r2
 800033e:	717b      	strb	r3, [r7, #5]
	generate_sound(note, volume, htim1);
 8000340:	797d      	ldrb	r5, [r7, #5]
 8000342:	88fc      	ldrh	r4, [r7, #6]
 8000344:	4668      	mov	r0, sp
 8000346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800034a:	2244      	movs	r2, #68	@ 0x44
 800034c:	4619      	mov	r1, r3
 800034e:	f006 f9a1 	bl	8006694 <memcpy>
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	cb0c      	ldmia	r3, {r2, r3}
 8000358:	4629      	mov	r1, r5
 800035a:	4620      	mov	r0, r4
 800035c:	f7ff ffa8 	bl	80002b0 <generate_sound>
	coast_asm_delay(duration);
 8000360:	6838      	ldr	r0, [r7, #0]
 8000362:	f7ff ff3d 	bl	80001e0 <coast_asm_delay>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000370:	b002      	add	sp, #8
 8000372:	4770      	bx	lr

08000374 <homePage>:
#include "lcd.h"

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void homePage() {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

	LCD_SendStr("FITNESS ");
 800037a:	480c      	ldr	r0, [pc, #48]	@ (80003ac <homePage+0x38>)
 800037c:	f000 f8f0 	bl	8000560 <LCD_SendStr>

	char buff[16];

	int temp = 21; // placeholder
 8000380:	2315      	movs	r3, #21
 8000382:	617b      	str	r3, [r7, #20]
	sprintf(buff, "%dC ", temp);
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	697a      	ldr	r2, [r7, #20]
 8000388:	4909      	ldr	r1, [pc, #36]	@ (80003b0 <homePage+0x3c>)
 800038a:	4618      	mov	r0, r3
 800038c:	f006 f92c 	bl	80065e8 <siprintf>
	LCD_SendStr(buff);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f8e4 	bl	8000560 <LCD_SendStr>

	LCD_SendStr(" 57%");
 8000398:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <homePage+0x40>)
 800039a:	f000 f8e1 	bl	8000560 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 800039e:	20c0      	movs	r0, #192	@ 0xc0
 80003a0:	f000 f8a2 	bl	80004e8 <LCD_SendCmd>

//	LCD_SendStr("OPT ");

}
 80003a4:	bf00      	nop
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	08006f40 	.word	0x08006f40
 80003b0:	08006f4c 	.word	0x08006f4c
 80003b4:	08006f54 	.word	0x08006f54

080003b8 <coast_lcd_init>:

#include "main.h"
#include "coast.h"
#include "lcd.h"

void coast_lcd_init(){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	// 1. wait for enough time to stabilise
	 HAL_Delay(50);
 80003bc:	2032      	movs	r0, #50	@ 0x32
 80003be:	f002 f8df 	bl	8002580 <HAL_Delay>
	 // 2. send command 0011 (function set) and wait for >=4.1 ms (enough wait inside
	 // the pulse)
	 LCD_PutNibble(0b0011);
 80003c2:	2003      	movs	r0, #3
 80003c4:	f000 f83e 	bl	8000444 <LCD_PutNibble>
	 LCD_Pulse();
 80003c8:	f000 f826 	bl	8000418 <LCD_Pulse>
	 HAL_Delay(5);
 80003cc:	2005      	movs	r0, #5
 80003ce:	f002 f8d7 	bl	8002580 <HAL_Delay>
	 // 3. send command 0011 (function set) again and wait for >=100 us
	 // fill this
	 LCD_PutNibble(0b0011);
 80003d2:	2003      	movs	r0, #3
 80003d4:	f000 f836 	bl	8000444 <LCD_PutNibble>
	 LCD_Pulse();
 80003d8:	f000 f81e 	bl	8000418 <LCD_Pulse>
	 HAL_Delay(1);
 80003dc:	2001      	movs	r0, #1
 80003de:	f002 f8cf 	bl	8002580 <HAL_Delay>
	 // 4. send command 0011 (function set) again
	 // fill this
	 LCD_PutNibble(0b0011);
 80003e2:	2003      	movs	r0, #3
 80003e4:	f000 f82e 	bl	8000444 <LCD_PutNibble>
	 LCD_Pulse();
 80003e8:	f000 f816 	bl	8000418 <LCD_Pulse>
	 // 5. send command 0010 to set to 4-bit bus mode
	 // fill this
	 LCD_PutNibble(0b0010);
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 f829 	bl	8000444 <LCD_PutNibble>
	 LCD_Pulse();
 80003f2:	f000 f811 	bl	8000418 <LCD_Pulse>
	 // 6. send command 0010 1100 (function set: 4-bit mode, 2-lines, 5x8 font)
	 LCD_SendCmd(0b00101100);
 80003f6:	202c      	movs	r0, #44	@ 0x2c
 80003f8:	f000 f876 	bl	80004e8 <LCD_SendCmd>
	 // 7. Send command 0000 1000 to display ON/OFF
	 LCD_SendCmd(0b00001000);
 80003fc:	2008      	movs	r0, #8
 80003fe:	f000 f873 	bl	80004e8 <LCD_SendCmd>
	 // 8. Send command to clear the display
	 // fill this
	 LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000402:	2001      	movs	r0, #1
 8000404:	f000 f870 	bl	80004e8 <LCD_SendCmd>
	 // 9. Send command set entry mode (increment cursor, no display shift)
	 // fill this
	 LCD_SendCmd(0b00000110);
 8000408:	2006      	movs	r0, #6
 800040a:	f000 f86d 	bl	80004e8 <LCD_SendCmd>
	 // 10. send command 0000 1111 to display on, cursor on, blink on
	 // fill this
	 LCD_SendCmd(0b00001111);
 800040e:	200f      	movs	r0, #15
 8000410:	f000 f86a 	bl	80004e8 <LCD_SendCmd>
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}

08000418 <LCD_Pulse>:

void LCD_Pulse(){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 1);
 800041c:	2201      	movs	r2, #1
 800041e:	2104      	movs	r1, #4
 8000420:	4807      	ldr	r0, [pc, #28]	@ (8000440 <LCD_Pulse+0x28>)
 8000422:	f002 fb85 	bl	8002b30 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f002 f8aa 	bl	8002580 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 0);
 800042c:	2200      	movs	r2, #0
 800042e:	2104      	movs	r1, #4
 8000430:	4803      	ldr	r0, [pc, #12]	@ (8000440 <LCD_Pulse+0x28>)
 8000432:	f002 fb7d 	bl	8002b30 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f002 f8a2 	bl	8002580 <HAL_Delay>
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	48000c00 	.word	0x48000c00

08000444 <LCD_PutNibble>:

void LCD_PutNibble(uint8_t nibble){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	uint8_t D4 = nibble & 1;
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	f003 0301 	and.w	r3, r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
	uint8_t D5 = (nibble >> 1) & 1;
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	085b      	lsrs	r3, r3, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	73bb      	strb	r3, [r7, #14]
	uint8_t D6 = (nibble >> 2) & 1;
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	089b      	lsrs	r3, r3, #2
 8000466:	b2db      	uxtb	r3, r3
 8000468:	f003 0301 	and.w	r3, r3, #1
 800046c:	737b      	strb	r3, [r7, #13]
	uint8_t D7 = (nibble >> 3) & 1;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	08db      	lsrs	r3, r3, #3
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, D4? GPIO_PIN_SET : GPIO_PIN_RESET);
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	2b00      	cmp	r3, #0
 800047e:	bf14      	ite	ne
 8000480:	2301      	movne	r3, #1
 8000482:	2300      	moveq	r3, #0
 8000484:	b2db      	uxtb	r3, r3
 8000486:	461a      	mov	r2, r3
 8000488:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800048c:	4815      	ldr	r0, [pc, #84]	@ (80004e4 <LCD_PutNibble+0xa0>)
 800048e:	f002 fb4f 	bl	8002b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, D5? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000492:	7bbb      	ldrb	r3, [r7, #14]
 8000494:	2b00      	cmp	r3, #0
 8000496:	bf14      	ite	ne
 8000498:	2301      	movne	r3, #1
 800049a:	2300      	moveq	r3, #0
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004a4:	480f      	ldr	r0, [pc, #60]	@ (80004e4 <LCD_PutNibble+0xa0>)
 80004a6:	f002 fb43 	bl	8002b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, D6? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	bf14      	ite	ne
 80004b0:	2301      	movne	r3, #1
 80004b2:	2300      	moveq	r3, #0
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004bc:	4809      	ldr	r0, [pc, #36]	@ (80004e4 <LCD_PutNibble+0xa0>)
 80004be:	f002 fb37 	bl	8002b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, D7? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004c2:	7b3b      	ldrb	r3, [r7, #12]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	bf14      	ite	ne
 80004c8:	2301      	movne	r3, #1
 80004ca:	2300      	moveq	r3, #0
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004d4:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <LCD_PutNibble+0xa0>)
 80004d6:	f002 fb2b 	bl	8002b30 <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	48000800 	.word	0x48000800

080004e8 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	LCD_PutNibble(c >> 4);
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	091b      	lsrs	r3, r3, #4
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffa3 	bl	8000444 <LCD_PutNibble>
	LCD_Pulse();
 80004fe:	f7ff ff8b 	bl	8000418 <LCD_Pulse>
	LCD_PutNibble(c);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff9d 	bl	8000444 <LCD_PutNibble>
	LCD_Pulse();
 800050a:	f7ff ff85 	bl	8000418 <LCD_Pulse>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <LCD_SendData>:


void LCD_SendData(uint8_t c){
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	4603      	mov	r3, r0
 800051e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 1);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f002 fb01 	bl	8002b30 <HAL_GPIO_WritePin>
	LCD_PutNibble(c >> 4);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	091b      	lsrs	r3, r3, #4
 8000532:	b2db      	uxtb	r3, r3
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff85 	bl	8000444 <LCD_PutNibble>
	LCD_Pulse();
 800053a:	f7ff ff6d 	bl	8000418 <LCD_Pulse>
	LCD_PutNibble(c);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff ff7f 	bl	8000444 <LCD_PutNibble>
	LCD_Pulse();
 8000546:	f7ff ff67 	bl	8000418 <LCD_Pulse>
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f002 faec 	bl	8002b30 <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <LCD_SendStr>:

// send string to LCD data
void LCD_SendStr(char *str){
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e00f      	b.n	800058e <LCD_SendStr+0x2e>
		if (i == 15) {
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b0f      	cmp	r3, #15
 8000572:	d102      	bne.n	800057a <LCD_SendStr+0x1a>
			LCD_SendCmd(LCD_SECOND_LINE);
 8000574:	20c0      	movs	r0, #192	@ 0xc0
 8000576:	f7ff ffb7 	bl	80004e8 <LCD_SendCmd>
		}
		LCD_SendData((uint8_t)str[i]);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4413      	add	r3, r2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff ffc7 	bl	8000516 <LCD_SendData>
	for (int i = 0; str[i]; i++) {
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1e9      	bne.n	800056e <LCD_SendStr+0xe>
	}
}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a6:	b093      	sub	sp, #76	@ 0x4c
 80005a8:	af10      	add	r7, sp, #64	@ 0x40
 80005aa:	4603      	mov	r3, r0
 80005ac:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005b4:	f040 80a4 	bne.w	8000700 <HAL_GPIO_EXTI_Callback+0x15c>
		/* B1 is pressed */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 80005b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005bc:	48a3      	ldr	r0, [pc, #652]	@ (800084c <HAL_GPIO_EXTI_Callback+0x2a8>)
 80005be:	f002 fa9f 	bl	8002b00 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d164      	bne.n	8000692 <HAL_GPIO_EXTI_Callback+0xee>
			/* sound indication */
			if (enable_sound) {
 80005c8:	4ba1      	ldr	r3, [pc, #644]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_GPIO_EXTI_Callback+0x32>
				button_sound = true;
 80005d0:	4ba0      	ldr	r3, [pc, #640]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
			}
			if (enable_vibration) {
 80005d6:	4ba0      	ldr	r3, [pc, #640]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <HAL_GPIO_EXTI_Callback+0x40>
				button_vibration = true;
 80005de:	4b9f      	ldr	r3, [pc, #636]	@ (800085c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
			}
//			check_double_press(0, is_single_press, is_double_press, is_holding,
//					decimal_second_count, double_press_interval,
//					button_double_press_time, button_holding_time);
			if (is_single_press[0] == true &&
 80005e4:	4b9e      	ldr	r3, [pc, #632]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d019      	beq.n	8000620 <HAL_GPIO_EXTI_Callback+0x7c>
				is_double_press[0] == false &&
 80005ec:	4b9d      	ldr	r3, [pc, #628]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f083 0301 	eor.w	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
			if (is_single_press[0] == true &&
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d012      	beq.n	8000620 <HAL_GPIO_EXTI_Callback+0x7c>
				(decimal_second_count - button_double_press_time[0]) <= double_press_interval) {
 80005fa:	4b9b      	ldr	r3, [pc, #620]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b9b      	ldr	r3, [pc, #620]	@ (800086c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1ad2      	subs	r2, r2, r3
 8000604:	4b9a      	ldr	r3, [pc, #616]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000606:	681b      	ldr	r3, [r3, #0]
				is_double_press[0] == false &&
 8000608:	429a      	cmp	r2, r3
 800060a:	d809      	bhi.n	8000620 <HAL_GPIO_EXTI_Callback+0x7c>
				is_double_press[0] = true;
 800060c:	4b95      	ldr	r3, [pc, #596]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 8000612:	4b93      	ldr	r3, [pc, #588]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 8000618:	4b96      	ldr	r3, [pc, #600]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e008      	b.n	8000632 <HAL_GPIO_EXTI_Callback+0x8e>

			} else {
				is_single_press[0] = true;
 8000620:	4b8f      	ldr	r3, [pc, #572]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 8000626:	4b8f      	ldr	r3, [pc, #572]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 800062c:	4b91      	ldr	r3, [pc, #580]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
			}

			button_holding_time[0] = decimal_second_count;
 8000632:	4b8d      	ldr	r3, [pc, #564]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a90      	ldr	r2, [pc, #576]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000638:	6013      	str	r3, [r2, #0]
			if (is_single_press[0]) {
 800063a:	4b89      	ldr	r3, [pc, #548]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 829f 	beq.w	8000b82 <HAL_GPIO_EXTI_Callback+0x5de>
				switch (currentScreen) {
 8000644:	4b8d      	ldr	r3, [pc, #564]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	3b01      	subs	r3, #1
 800064c:	2b06      	cmp	r3, #6
 800064e:	f200 829b 	bhi.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000652:	a201      	add	r2, pc, #4	@ (adr r2, 8000658 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000658:	08000675 	.word	0x08000675
 800065c:	08000b89 	.word	0x08000b89
 8000660:	0800067d 	.word	0x0800067d
 8000664:	08000b89 	.word	0x08000b89
 8000668:	08000b89 	.word	0x08000b89
 800066c:	08000683 	.word	0x08000683
 8000670:	0800068b 	.word	0x0800068b
					case HOME:
						currentScreen = TIME;
 8000674:	4b81      	ldr	r3, [pc, #516]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000676:	2202      	movs	r2, #2
 8000678:	701a      	strb	r2, [r3, #0]
						break;
 800067a:	e285      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					case ALARM:
						changeAlarmMin();
 800067c:	f001 fafe 	bl	8001c7c <changeAlarmMin>
						break;
 8000680:	e282      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					case COUNTDOWN:
						toggleCountdown(&countdown);
 8000682:	487f      	ldr	r0, [pc, #508]	@ (8000880 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000684:	f001 fb7a 	bl	8001d7c <toggleCountdown>
						break;
 8000688:	e27e      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					case STOPWATCH:
						toggleStopwatch(&stopwatch);
 800068a:	487e      	ldr	r0, [pc, #504]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800068c:	f001 fd6b 	bl	8002166 <toggleStopwatch>
						break;
 8000690:	e27a      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
				}
			}
		}
		/* B1 is released */
		else {
			stop_sound(htim1);
 8000692:	4e7d      	ldr	r6, [pc, #500]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8000694:	466d      	mov	r5, sp
 8000696:	f106 0410 	add.w	r4, r6, #16
 800069a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800069c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800069e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006b2:	f7ff fe29 	bl	8000308 <stop_sound>

			if ((decimal_second_count - button_holding_time[0]) >= holding_bound) {
 80006b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	1ad2      	subs	r2, r2, r3
 80006c0:	4b72      	ldr	r3, [pc, #456]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2e8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d309      	bcc.n	80006dc <HAL_GPIO_EXTI_Callback+0x138>
				is_holding[0] = true;
 80006c8:	4b6a      	ldr	r3, [pc, #424]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 80006ce:	4b65      	ldr	r3, [pc, #404]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 80006d4:	4b62      	ldr	r3, [pc, #392]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
 80006da:	e003      	b.n	80006e4 <HAL_GPIO_EXTI_Callback+0x140>
			} else {
				button_double_press_time[0] = decimal_second_count;
 80006dc:	4b62      	ldr	r3, [pc, #392]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a62      	ldr	r2, [pc, #392]	@ (800086c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80006e2:	6013      	str	r3, [r2, #0]
			}
			if (is_holding[0]) {
 80006e4:	4b63      	ldr	r3, [pc, #396]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	f000 824c 	beq.w	8000b86 <HAL_GPIO_EXTI_Callback+0x5e2>
				switch (currentScreen) {
 80006ee:	4b63      	ldr	r3, [pc, #396]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	f040 8247 	bne.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					case TIME:
						switchTimeFormat();
 80006fa:	f001 fa5b 	bl	8001bb4 <switchTimeFormat>
						break;
 80006fe:	e243      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					default:
					}
			}
		}
	} else if (GPIO_Pin == SW1_Pin) {
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	2b02      	cmp	r3, #2
 8000704:	f040 80cc 	bne.w	80008a0 <HAL_GPIO_EXTI_Callback+0x2fc>
		/* The sw1 pin is pressed */

		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1) {
 8000708:	2102      	movs	r1, #2
 800070a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070e:	f002 f9f7 	bl	8002b00 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b01      	cmp	r3, #1
 8000716:	d139      	bne.n	800078c <HAL_GPIO_EXTI_Callback+0x1e8>
			/* sound indication */
			if (enable_sound) {
 8000718:	4b4d      	ldr	r3, [pc, #308]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <HAL_GPIO_EXTI_Callback+0x182>
				button_sound = true;
 8000720:	4b4c      	ldr	r3, [pc, #304]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
			}
			if (enable_vibration) {
 8000726:	4b4c      	ldr	r3, [pc, #304]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <HAL_GPIO_EXTI_Callback+0x190>
				button_vibration = true;
 800072e:	4b4b      	ldr	r3, [pc, #300]	@ (800085c <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]
			}
//			check_double_press(1, is_single_press, is_double_press, is_holding,
//					decimal_second_count, double_press_interval,
//					button_double_press_time, button_holding_time);

			if (is_single_press[1] == true &&
 8000734:	4b4a      	ldr	r3, [pc, #296]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d019      	beq.n	8000770 <HAL_GPIO_EXTI_Callback+0x1cc>
				is_double_press[1] == false &&
 800073c:	4b49      	ldr	r3, [pc, #292]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
			if (is_single_press[1] == true &&
 8000746:	2b00      	cmp	r3, #0
 8000748:	d012      	beq.n	8000770 <HAL_GPIO_EXTI_Callback+0x1cc>
				(decimal_second_count - button_double_press_time[1]) <= double_press_interval) {
 800074a:	4b47      	ldr	r3, [pc, #284]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b47      	ldr	r3, [pc, #284]	@ (800086c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	4b46      	ldr	r3, [pc, #280]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000756:	681b      	ldr	r3, [r3, #0]
				is_double_press[1] == false &&
 8000758:	429a      	cmp	r2, r3
 800075a:	d809      	bhi.n	8000770 <HAL_GPIO_EXTI_Callback+0x1cc>
				is_double_press[1] = true;
 800075c:	4b41      	ldr	r3, [pc, #260]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800075e:	2201      	movs	r2, #1
 8000760:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 8000762:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000764:	2200      	movs	r2, #0
 8000766:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 8000768:	4b42      	ldr	r3, [pc, #264]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800076a:	2200      	movs	r2, #0
 800076c:	705a      	strb	r2, [r3, #1]
 800076e:	e008      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0x1de>

			} else {
				is_single_press[1] = true;
 8000770:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000772:	2201      	movs	r2, #1
 8000774:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 8000776:	4b3b      	ldr	r3, [pc, #236]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000778:	2200      	movs	r2, #0
 800077a:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 800077c:	4b3d      	ldr	r3, [pc, #244]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800077e:	2200      	movs	r2, #0
 8000780:	705a      	strb	r2, [r3, #1]
			}

			button_holding_time[1] = decimal_second_count;
 8000782:	4b39      	ldr	r3, [pc, #228]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a3c      	ldr	r2, [pc, #240]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000788:	6053      	str	r3, [r2, #4]
				}
			}

		}
	}
}
 800078a:	e1fd      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
			stop_sound(htim1);
 800078c:	4e3e      	ldr	r6, [pc, #248]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800078e:	466d      	mov	r5, sp
 8000790:	f106 0410 	add.w	r4, r6, #16
 8000794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800079c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800079e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007ac:	f7ff fdac 	bl	8000308 <stop_sound>
			if ((decimal_second_count - button_holding_time[1]) >= holding_bound) {
 80007b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	1ad2      	subs	r2, r2, r3
 80007ba:	4b34      	ldr	r3, [pc, #208]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2e8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d309      	bcc.n	80007d6 <HAL_GPIO_EXTI_Callback+0x232>
				is_holding[1] = true;
 80007c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 80007c8:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 80007ce:	4b24      	ldr	r3, [pc, #144]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	705a      	strb	r2, [r3, #1]
 80007d4:	e003      	b.n	80007de <HAL_GPIO_EXTI_Callback+0x23a>
				button_double_press_time[1] = decimal_second_count;
 80007d6:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a24      	ldr	r2, [pc, #144]	@ (800086c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80007dc:	6053      	str	r3, [r2, #4]
			if (is_holding[1]) {
 80007de:	4b25      	ldr	r3, [pc, #148]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d009      	beq.n	80007fa <HAL_GPIO_EXTI_Callback+0x256>
				switch (currentScreen){
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	f040 81cb 	bne.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
				currentScreen = STOPWATCH;
 80007f2:	4b22      	ldr	r3, [pc, #136]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	701a      	strb	r2, [r3, #0]
				break;
 80007f8:	e1c6      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
			} else if (is_single_press[1]) {
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80007fc:	785b      	ldrb	r3, [r3, #1]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	f000 81c2 	beq.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
				switch (currentScreen) {
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	3b02      	subs	r3, #2
 800080c:	2b06      	cmp	r3, #6
 800080e:	f200 81bb 	bhi.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000812:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <HAL_GPIO_EXTI_Callback+0x274>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000835 	.word	0x08000835
 800081c:	0800083d 	.word	0x0800083d
 8000820:	08000b89 	.word	0x08000b89
 8000824:	08000b89 	.word	0x08000b89
 8000828:	08000891 	.word	0x08000891
 800082c:	08000899 	.word	0x08000899
 8000830:	08000845 	.word	0x08000845
					currentScreen = HOME;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
					break;
 800083a:	e1a5      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = TIME;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800083e:	2202      	movs	r2, #2
 8000840:	701a      	strb	r2, [r3, #0]
					break;
 8000842:	e1a1      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = ALARM;
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000846:	2203      	movs	r2, #3
 8000848:	701a      	strb	r2, [r3, #0]
					break;
 800084a:	e19d      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
 800084c:	48000800 	.word	0x48000800
 8000850:	20000008 	.word	0x20000008
 8000854:	200001e8 	.word	0x200001e8
 8000858:	20000009 	.word	0x20000009
 800085c:	200001e9 	.word	0x200001e9
 8000860:	200001dc 	.word	0x200001dc
 8000864:	200001e0 	.word	0x200001e0
 8000868:	200001b4 	.word	0x200001b4
 800086c:	200001b8 	.word	0x200001b8
 8000870:	20000000 	.word	0x20000000
 8000874:	200001e4 	.word	0x200001e4
 8000878:	200001c8 	.word	0x200001c8
 800087c:	2000000a 	.word	0x2000000a
 8000880:	200001ec 	.word	0x200001ec
 8000884:	200001f8 	.word	0x200001f8
 8000888:	200000c0 	.word	0x200000c0
 800088c:	20000004 	.word	0x20000004
					currentScreen = TIME;
 8000890:	4b9c      	ldr	r3, [pc, #624]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 8000892:	2202      	movs	r2, #2
 8000894:	701a      	strb	r2, [r3, #0]
					break;
 8000896:	e177      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = TIME;
 8000898:	4b9a      	ldr	r3, [pc, #616]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 800089a:	2202      	movs	r2, #2
 800089c:	701a      	strb	r2, [r3, #0]
					break;
 800089e:	e173      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
	} else if (GPIO_Pin == SW2_Pin) {
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	2b10      	cmp	r3, #16
 80008a4:	f040 80a0 	bne.w	80009e8 <HAL_GPIO_EXTI_Callback+0x444>
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1) {
 80008a8:	2110      	movs	r1, #16
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ae:	f002 f927 	bl	8002b00 <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d139      	bne.n	800092c <HAL_GPIO_EXTI_Callback+0x388>
			if (enable_sound) {
 80008b8:	4b93      	ldr	r3, [pc, #588]	@ (8000b08 <HAL_GPIO_EXTI_Callback+0x564>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <HAL_GPIO_EXTI_Callback+0x322>
				button_sound = true;
 80008c0:	4b92      	ldr	r3, [pc, #584]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x568>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 80008c6:	4b92      	ldr	r3, [pc, #584]	@ (8000b10 <HAL_GPIO_EXTI_Callback+0x56c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <HAL_GPIO_EXTI_Callback+0x330>
				button_vibration = true;
 80008ce:	4b91      	ldr	r3, [pc, #580]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x570>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	701a      	strb	r2, [r3, #0]
		    if (is_single_press[2] == true &&
 80008d4:	4b90      	ldr	r3, [pc, #576]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d019      	beq.n	8000910 <HAL_GPIO_EXTI_Callback+0x36c>
		        is_double_press[2] == false &&
 80008dc:	4b8f      	ldr	r3, [pc, #572]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
		    if (is_single_press[2] == true &&
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d012      	beq.n	8000910 <HAL_GPIO_EXTI_Callback+0x36c>
		        (decimal_second_count - button_double_press_time[2]) <= double_press_interval) {
 80008ea:	4b8d      	ldr	r3, [pc, #564]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b8d      	ldr	r3, [pc, #564]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x580>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	1ad2      	subs	r2, r2, r3
 80008f4:	4b8c      	ldr	r3, [pc, #560]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x584>)
 80008f6:	681b      	ldr	r3, [r3, #0]
		        is_double_press[2] == false &&
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d809      	bhi.n	8000910 <HAL_GPIO_EXTI_Callback+0x36c>
		        is_double_press[2] = true;
 80008fc:	4b87      	ldr	r3, [pc, #540]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 80008fe:	2201      	movs	r2, #1
 8000900:	709a      	strb	r2, [r3, #2]
		        is_single_press[2] = false;
 8000902:	4b85      	ldr	r3, [pc, #532]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000904:	2200      	movs	r2, #0
 8000906:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 8000908:	4b88      	ldr	r3, [pc, #544]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 800090a:	2200      	movs	r2, #0
 800090c:	709a      	strb	r2, [r3, #2]
 800090e:	e008      	b.n	8000922 <HAL_GPIO_EXTI_Callback+0x37e>
		        is_single_press[2] = true;
 8000910:	4b81      	ldr	r3, [pc, #516]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000912:	2201      	movs	r2, #1
 8000914:	709a      	strb	r2, [r3, #2]
		        is_double_press[2] = false;
 8000916:	4b81      	ldr	r3, [pc, #516]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 800091c:	4b83      	ldr	r3, [pc, #524]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 800091e:	2200      	movs	r2, #0
 8000920:	709a      	strb	r2, [r3, #2]
		    button_holding_time[2] = decimal_second_count;
 8000922:	4b7f      	ldr	r3, [pc, #508]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a82      	ldr	r2, [pc, #520]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000928:	6093      	str	r3, [r2, #8]
}
 800092a:	e12d      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
			stop_sound(htim1);
 800092c:	4e81      	ldr	r6, [pc, #516]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x590>)
 800092e:	466d      	mov	r5, sp
 8000930:	f106 0410 	add.w	r4, r6, #16
 8000934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000944:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000948:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800094c:	f7ff fcdc 	bl	8000308 <stop_sound>
			if ((decimal_second_count - button_holding_time[2]) >= holding_bound) {
 8000950:	4b73      	ldr	r3, [pc, #460]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b76      	ldr	r3, [pc, #472]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	1ad2      	subs	r2, r2, r3
 800095a:	4b77      	ldr	r3, [pc, #476]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x594>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	429a      	cmp	r2, r3
 8000960:	d309      	bcc.n	8000976 <HAL_GPIO_EXTI_Callback+0x3d2>
				is_holding[2] = true;
 8000962:	4b72      	ldr	r3, [pc, #456]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 8000964:	2201      	movs	r2, #1
 8000966:	709a      	strb	r2, [r3, #2]
				is_double_press[2] = false;
 8000968:	4b6c      	ldr	r3, [pc, #432]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 800096a:	2200      	movs	r2, #0
 800096c:	709a      	strb	r2, [r3, #2]
				is_single_press[2] = false;
 800096e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000970:	2200      	movs	r2, #0
 8000972:	709a      	strb	r2, [r3, #2]
 8000974:	e003      	b.n	800097e <HAL_GPIO_EXTI_Callback+0x3da>
				button_double_press_time[2] = decimal_second_count;
 8000976:	4b6a      	ldr	r3, [pc, #424]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a6a      	ldr	r2, [pc, #424]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x580>)
 800097c:	6093      	str	r3, [r2, #8]
			if (is_holding[2] == true) {
 800097e:	4b6b      	ldr	r3, [pc, #428]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d005      	beq.n	8000992 <HAL_GPIO_EXTI_Callback+0x3ee>
				switch (currentScreen){
 8000986:	4b5f      	ldr	r3, [pc, #380]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 8000988:	781b      	ldrb	r3, [r3, #0]
					currentScreen = HOME;
 800098a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
					break;
 8000990:	e0fa      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
			} else if (is_single_press[2]) {
 8000992:	4b61      	ldr	r3, [pc, #388]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000994:	789b      	ldrb	r3, [r3, #2]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80f6 	beq.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
				switch (currentScreen) {
 800099c:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3b02      	subs	r3, #2
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	f200 80ef 	bhi.w	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
 80009aa:	a201      	add	r2, pc, #4	@ (adr r2, 80009b0 <HAL_GPIO_EXTI_Callback+0x40c>)
 80009ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b0:	080009d1 	.word	0x080009d1
 80009b4:	080009c9 	.word	0x080009c9
 80009b8:	08000b89 	.word	0x08000b89
 80009bc:	08000b89 	.word	0x08000b89
 80009c0:	080009d9 	.word	0x080009d9
 80009c4:	080009e1 	.word	0x080009e1
					currentScreen = ALARM_SET;  // request alarm set
 80009c8:	4b4e      	ldr	r3, [pc, #312]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	701a      	strb	r2, [r3, #0]
					break;
 80009ce:	e0db      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = COUNTDOWN;
 80009d0:	4b4c      	ldr	r3, [pc, #304]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 80009d2:	2206      	movs	r2, #6
 80009d4:	701a      	strb	r2, [r3, #0]
					break;
 80009d6:	e0d7      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					mintueCountdown(&countdown);
 80009d8:	4858      	ldr	r0, [pc, #352]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x598>)
 80009da:	f001 f9e4 	bl	8001da6 <mintueCountdown>
					break;
 80009de:	e0d3      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					lapStopwatchFlag = true;
 80009e0:	4b57      	ldr	r3, [pc, #348]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0x59c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
					break;
 80009e6:	e0cf      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == 1) {
 80009e8:	2101      	movs	r1, #1
 80009ea:	4856      	ldr	r0, [pc, #344]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80009ec:	f002 f888 	bl	8002b00 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d139      	bne.n	8000a6a <HAL_GPIO_EXTI_Callback+0x4c6>
			if (enable_sound) {
 80009f6:	4b44      	ldr	r3, [pc, #272]	@ (8000b08 <HAL_GPIO_EXTI_Callback+0x564>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <HAL_GPIO_EXTI_Callback+0x460>
				button_sound = true;
 80009fe:	4b43      	ldr	r3, [pc, #268]	@ (8000b0c <HAL_GPIO_EXTI_Callback+0x568>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 8000a04:	4b42      	ldr	r3, [pc, #264]	@ (8000b10 <HAL_GPIO_EXTI_Callback+0x56c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <HAL_GPIO_EXTI_Callback+0x46e>
				button_vibration = true;
 8000a0c:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x570>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
			if (is_single_press[3] == true &&
 8000a12:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000a14:	78db      	ldrb	r3, [r3, #3]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d019      	beq.n	8000a4e <HAL_GPIO_EXTI_Callback+0x4aa>
				is_double_press[3] == false &&
 8000a1a:	4b40      	ldr	r3, [pc, #256]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 8000a1c:	78db      	ldrb	r3, [r3, #3]
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
			if (is_single_press[3] == true &&
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d012      	beq.n	8000a4e <HAL_GPIO_EXTI_Callback+0x4aa>
				(decimal_second_count - button_double_press_time[3]) <= double_press_interval) {
 8000a28:	4b3d      	ldr	r3, [pc, #244]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x580>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	1ad2      	subs	r2, r2, r3
 8000a32:	4b3d      	ldr	r3, [pc, #244]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x584>)
 8000a34:	681b      	ldr	r3, [r3, #0]
				is_double_press[3] == false &&
 8000a36:	429a      	cmp	r2, r3
 8000a38:	d809      	bhi.n	8000a4e <HAL_GPIO_EXTI_Callback+0x4aa>
				is_double_press[3] = true;
 8000a3a:	4b38      	ldr	r3, [pc, #224]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 8000a40:	4b35      	ldr	r3, [pc, #212]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 8000a46:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	70da      	strb	r2, [r3, #3]
 8000a4c:	e008      	b.n	8000a60 <HAL_GPIO_EXTI_Callback+0x4bc>
				is_single_press[3] = true;
 8000a4e:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8000a54:	4b31      	ldr	r3, [pc, #196]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 8000a5a:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	70da      	strb	r2, [r3, #3]
			button_holding_time[3] = decimal_second_count;
 8000a60:	4b2f      	ldr	r3, [pc, #188]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a32      	ldr	r2, [pc, #200]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	e08e      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
			stop_sound(htim1);
 8000a6a:	4e32      	ldr	r6, [pc, #200]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x590>)
 8000a6c:	466d      	mov	r5, sp
 8000a6e:	f106 0410 	add.w	r4, r6, #16
 8000a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a7e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a86:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a8a:	f7ff fc3d 	bl	8000308 <stop_sound>
			if ((decimal_second_count - button_holding_time[3]) >= holding_bound) {
 8000a8e:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	1ad2      	subs	r2, r2, r3
 8000a98:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x594>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d309      	bcc.n	8000ab4 <HAL_GPIO_EXTI_Callback+0x510>
				is_holding[3] = true;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	70da      	strb	r2, [r3, #3]
 8000ab2:	e003      	b.n	8000abc <HAL_GPIO_EXTI_Callback+0x518>
				button_double_press_time[3] = decimal_second_count;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x580>)
 8000aba:	60d3      	str	r3, [r2, #12]
			if (is_holding[3]) {
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x588>)
 8000abe:	78db      	ldrb	r3, [r3, #3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00f      	beq.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x540>
				switch(currentScreen) {
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d002      	beq.n	8000ad4 <HAL_GPIO_EXTI_Callback+0x530>
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	d004      	beq.n	8000adc <HAL_GPIO_EXTI_Callback+0x538>
 8000ad2:	e007      	b.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x540>
					resetCountdown(&countdown);
 8000ad4:	4819      	ldr	r0, [pc, #100]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x598>)
 8000ad6:	f001 f9b3 	bl	8001e40 <resetCountdown>
					break;
 8000ada:	e003      	b.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x540>
					resetStopwatch(&stopwatch);
 8000adc:	481a      	ldr	r0, [pc, #104]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000ade:	f001 fb2f 	bl	8002140 <resetStopwatch>
					break;
 8000ae2:	bf00      	nop
			if (is_double_press[3]) {
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x578>)
 8000ae6:	78db      	ldrb	r3, [r3, #3]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d02f      	beq.n	8000b4c <HAL_GPIO_EXTI_Callback+0x5a8>
				is_single_press[3] = false; // cancel single press
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x574>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	70da      	strb	r2, [r3, #3]
				switch (currentScreen){
 8000af2:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x560>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b03      	cmp	r3, #3
 8000afa:	d145      	bne.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
						switchAMPM();
 8000afc:	f001 f878 	bl	8001bf0 <switchAMPM>
						break;
 8000b00:	e042      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000b02:	bf00      	nop
 8000b04:	2000000a 	.word	0x2000000a
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200001e8 	.word	0x200001e8
 8000b10:	20000009 	.word	0x20000009
 8000b14:	200001e9 	.word	0x200001e9
 8000b18:	200001dc 	.word	0x200001dc
 8000b1c:	200001e0 	.word	0x200001e0
 8000b20:	200001b4 	.word	0x200001b4
 8000b24:	200001b8 	.word	0x200001b8
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	200001e4 	.word	0x200001e4
 8000b30:	200001c8 	.word	0x200001c8
 8000b34:	200000c0 	.word	0x200000c0
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	200001ec 	.word	0x200001ec
 8000b40:	20000208 	.word	0x20000208
 8000b44:	48000400 	.word	0x48000400
 8000b48:	200001f8 	.word	0x200001f8
			else if (is_single_press[3]) {
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_GPIO_EXTI_Callback+0x5ec>)
 8000b4e:	78db      	ldrb	r3, [r3, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d019      	beq.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
				switch (currentScreen) {
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d00d      	beq.n	8000b7a <HAL_GPIO_EXTI_Callback+0x5d6>
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	dc12      	bgt.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d002      	beq.n	8000b6c <HAL_GPIO_EXTI_Callback+0x5c8>
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d004      	beq.n	8000b74 <HAL_GPIO_EXTI_Callback+0x5d0>
}
 8000b6a:	e00d      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
						currentScreen = ALARM;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8000b6e:	2203      	movs	r2, #3
 8000b70:	701a      	strb	r2, [r3, #0]
						break;
 8000b72:	e009      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
						changeAlarmHour();
 8000b74:	f001 f860 	bl	8001c38 <changeAlarmHour>
						break;
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
						secondCountdown(&countdown);
 8000b7a:	4807      	ldr	r0, [pc, #28]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b7c:	f001 f92a 	bl	8001dd4 <secondCountdown>
						break;
 8000b80:	e002      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					default:
 8000b82:	bf00      	nop
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_EXTI_Callback+0x5e4>
					default:
 8000b86:	bf00      	nop
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b90:	200001dc 	.word	0x200001dc
 8000b94:	2000000a 	.word	0x2000000a
 8000b98:	200001ec 	.word	0x200001ec

08000b9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d105      	bne.n	8000bb8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		second++;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	4a10      	ldr	r2, [pc, #64]	@ (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bb4:	6013      	str	r3, [r2, #0]
		if (period_count >= 100) {
			period_count = 0;
			decimal_second_count++;
		}
	}
}
 8000bb6:	e014      	b.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x46>
	} else if (htim == &htim7) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d110      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x46>
		period_count++;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bc8:	6013      	str	r3, [r2, #0]
		if (period_count >= 100) {
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b63      	cmp	r3, #99	@ 0x63
 8000bd0:	d907      	bls.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x46>
			period_count = 0;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
			decimal_second_count++;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000010c 	.word	0x2000010c
 8000bf4:	200001a8 	.word	0x200001a8
 8000bf8:	20000158 	.word	0x20000158
 8000bfc:	200001b0 	.word	0x200001b0
 8000c00:	200001b4 	.word	0x200001b4

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	b095      	sub	sp, #84	@ 0x54
 8000c08:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f001 fc53 	bl	80024b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f93b 	bl	8000e88 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  system_clock_setup();
 8000c12:	f000 fc5d 	bl	80014d0 <system_clock_setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 fb59 	bl	80012cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000c1a:	f000 f99b 	bl	8000f54 <MX_RTC_Init>
  MX_TIM1_Init();
 8000c1e:	f000 fa2d 	bl	800107c <MX_TIM1_Init>
  MX_TIM6_Init();
 8000c22:	f000 fae5 	bl	80011f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c26:	f000 fb1b 	bl	8001260 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //timeDateInit();
  coast_lcd_init();
 8000c2a:	f7ff fbc5 	bl	80003b8 <coast_lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c2e:	4886      	ldr	r0, [pc, #536]	@ (8000e48 <main+0x244>)
 8000c30:	f004 f982 	bl	8004f38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000c34:	4885      	ldr	r0, [pc, #532]	@ (8000e4c <main+0x248>)
 8000c36:	f004 f97f 	bl	8004f38 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  runCountdown(&countdown, &lastSecond, second, htim1, enable_sound);
 8000c3a:	4b85      	ldr	r3, [pc, #532]	@ (8000e50 <main+0x24c>)
 8000c3c:	681d      	ldr	r5, [r3, #0]
 8000c3e:	4b85      	ldr	r3, [pc, #532]	@ (8000e54 <main+0x250>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4c85      	ldr	r4, [pc, #532]	@ (8000e58 <main+0x254>)
 8000c44:	9312      	str	r3, [sp, #72]	@ 0x48
 8000c46:	4668      	mov	r0, sp
 8000c48:	1d23      	adds	r3, r4, #4
 8000c4a:	2248      	movs	r2, #72	@ 0x48
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f005 fd21 	bl	8006694 <memcpy>
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	462a      	mov	r2, r5
 8000c56:	4981      	ldr	r1, [pc, #516]	@ (8000e5c <main+0x258>)
 8000c58:	4881      	ldr	r0, [pc, #516]	@ (8000e60 <main+0x25c>)
 8000c5a:	f001 f905 	bl	8001e68 <runCountdown>
	  runStopwatch(&stopwatch, &lastSecond, second);
 8000c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e50 <main+0x24c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	497d      	ldr	r1, [pc, #500]	@ (8000e5c <main+0x258>)
 8000c66:	487f      	ldr	r0, [pc, #508]	@ (8000e64 <main+0x260>)
 8000c68:	f001 fab2 	bl	80021d0 <runStopwatch>
	  if (button_sound) {
 8000c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e68 <main+0x264>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01f      	beq.n	8000cb4 <main+0xb0>
		  /* frequency ： duration ：volume : htim1 */
		  play_note(460, 150, 50, htim1);
 8000c74:	4c78      	ldr	r4, [pc, #480]	@ (8000e58 <main+0x254>)
 8000c76:	4668      	mov	r0, sp
 8000c78:	1d23      	adds	r3, r4, #4
 8000c7a:	2248      	movs	r2, #72	@ 0x48
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f005 fd09 	bl	8006694 <memcpy>
 8000c82:	6823      	ldr	r3, [r4, #0]
 8000c84:	2232      	movs	r2, #50	@ 0x32
 8000c86:	2196      	movs	r1, #150	@ 0x96
 8000c88:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000c8c:	f7ff fb4e 	bl	800032c <play_note>
		  play_note(300, 50, 50, htim1);
 8000c90:	4c71      	ldr	r4, [pc, #452]	@ (8000e58 <main+0x254>)
 8000c92:	4668      	mov	r0, sp
 8000c94:	1d23      	adds	r3, r4, #4
 8000c96:	2248      	movs	r2, #72	@ 0x48
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f005 fcfb 	bl	8006694 <memcpy>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	2232      	movs	r2, #50	@ 0x32
 8000ca2:	2132      	movs	r1, #50	@ 0x32
 8000ca4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000ca8:	f7ff fb40 	bl	800032c <play_note>
		  button_sound = false;
 8000cac:	4b6e      	ldr	r3, [pc, #440]	@ (8000e68 <main+0x264>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	e011      	b.n	8000cd8 <main+0xd4>
	  } else {
		  stop_sound(htim1);
 8000cb4:	4e68      	ldr	r6, [pc, #416]	@ (8000e58 <main+0x254>)
 8000cb6:	466d      	mov	r5, sp
 8000cb8:	f106 0410 	add.w	r4, r6, #16
 8000cbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ccc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000cd0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cd4:	f7ff fb18 	bl	8000308 <stop_sound>
	  }
	  if (button_vibration) {
 8000cd8:	4b64      	ldr	r3, [pc, #400]	@ (8000e6c <main+0x268>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <main+0xe6>
		  generate_vibration();
 8000ce0:	f001 fabe 	bl	8002260 <generate_vibration>
		  button_vibration = false;
 8000ce4:	4b61      	ldr	r3, [pc, #388]	@ (8000e6c <main+0x268>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
	  }
	  if (currentScreen != previousScreen || timeFormatChanged) {
 8000cea:	4b61      	ldr	r3, [pc, #388]	@ (8000e70 <main+0x26c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b60      	ldr	r3, [pc, #384]	@ (8000e74 <main+0x270>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d103      	bne.n	8000d02 <main+0xfe>
 8000cfa:	4b5f      	ldr	r3, [pc, #380]	@ (8000e78 <main+0x274>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d04c      	beq.n	8000d9c <main+0x198>
			LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fbf0 	bl	80004e8 <LCD_SendCmd>
//			coast_asm_delay(2);

			switch (currentScreen) {
 8000d08:	4b59      	ldr	r3, [pc, #356]	@ (8000e70 <main+0x26c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d836      	bhi.n	8000d82 <main+0x17e>
 8000d14:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <main+0x118>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d3d 	.word	0x08000d3d
 8000d20:	08000d4b 	.word	0x08000d4b
 8000d24:	08000d59 	.word	0x08000d59
 8000d28:	08000d83 	.word	0x08000d83
 8000d2c:	08000d83 	.word	0x08000d83
 8000d30:	08000d6d 	.word	0x08000d6d
 8000d34:	08000d79 	.word	0x08000d79
 8000d38:	08000d67 	.word	0x08000d67
				case HOME:
					homePage(); // draw layout only
 8000d3c:	f7ff fb1a 	bl	8000374 <homePage>
					updateTime(1, 4);
 8000d40:	2104      	movs	r1, #4
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fe08 	bl	8001958 <updateTime>
					break;
 8000d48:	e01b      	b.n	8000d82 <main+0x17e>
				case TIME:
					timePage();
 8000d4a:	f000 fdaf 	bl	80018ac <timePage>
					updateTime(0, 4);
 8000d4e:	2104      	movs	r1, #4
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 fe01 	bl	8001958 <updateTime>
					break;
 8000d56:	e014      	b.n	8000d82 <main+0x17e>
				case ALARM:
					alarmPage();
 8000d58:	f000 fe68 	bl	8001a2c <alarmPage>
					updateAlarm(1, 0);
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fec2 	bl	8001ae8 <updateAlarm>
					break;
 8000d64:	e00d      	b.n	8000d82 <main+0x17e>
				case ALARM_SET:
				    alarmConfirm();
 8000d66:	f000 ffad 	bl	8001cc4 <alarmConfirm>
				    break;
 8000d6a:	e00a      	b.n	8000d82 <main+0x17e>
				case COUNTDOWN:
					countdownPage(countdown);
 8000d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e60 <main+0x25c>)
 8000d6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000d72:	f000 ffdd 	bl	8001d30 <countdownPage>
					break;
 8000d76:	e004      	b.n	8000d82 <main+0x17e>
				case STOPWATCH:
					stopwatchPage(stopwatch);
 8000d78:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <main+0x260>)
 8000d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d7c:	f001 f990 	bl	80020a0 <stopwatchPage>
					break;
 8000d80:	bf00      	nop
			}
			previousScreen = currentScreen;
 8000d82:	4b3b      	ldr	r3, [pc, #236]	@ (8000e70 <main+0x26c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <main+0x270>)
 8000d8a:	701a      	strb	r2, [r3, #0]
			timeFormatChanged = false;  // ✅ clear the flag
 8000d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e78 <main+0x274>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 8000d92:	f001 fbe9 	bl	8002568 <HAL_GetTick>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a38      	ldr	r2, [pc, #224]	@ (8000e7c <main+0x278>)
 8000d9a:	6013      	str	r3, [r2, #0]

	  }
	  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000da2:	4837      	ldr	r0, [pc, #220]	@ (8000e80 <main+0x27c>)
 8000da4:	f001 fec4 	bl	8002b30 <HAL_GPIO_WritePin>
	  /* UPDATE TIME EVERY SECOND ELAPSED */
	  if ((HAL_GetTick() - last_tick) >= 1000) {
 8000da8:	f001 fbde 	bl	8002568 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b33      	ldr	r3, [pc, #204]	@ (8000e7c <main+0x278>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000db8:	f4ff af3f 	bcc.w	8000c3a <main+0x36>
	  	switch (currentScreen) {
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <main+0x26c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d836      	bhi.n	8000e36 <main+0x232>
 8000dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd0 <main+0x1cc>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000ded 	.word	0x08000ded
 8000dd4:	08000df7 	.word	0x08000df7
 8000dd8:	08000e01 	.word	0x08000e01
 8000ddc:	08000e37 	.word	0x08000e37
 8000de0:	08000e37 	.word	0x08000e37
 8000de4:	08000e0b 	.word	0x08000e0b
 8000de8:	08000e17 	.word	0x08000e17
	  		case HOME:
	  			updateTime(1, 4);  // row 1 (second line), column 4
 8000dec:	2104      	movs	r1, #4
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 fdb2 	bl	8001958 <updateTime>
	  			break;
 8000df4:	e020      	b.n	8000e38 <main+0x234>
	  		case TIME:
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
 8000df6:	2104      	movs	r1, #4
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 fdad 	bl	8001958 <updateTime>
	  			break;
 8000dfe:	e01b      	b.n	8000e38 <main+0x234>
	  		case ALARM:
	  			updateAlarm(1, 0);
 8000e00:	2100      	movs	r1, #0
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 fe70 	bl	8001ae8 <updateAlarm>
	  			break;
 8000e08:	e016      	b.n	8000e38 <main+0x234>
	  		case COUNTDOWN:
	  			updateCountdown(countdown);
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <main+0x25c>)
 8000e0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e10:	f000 fff8 	bl	8001e04 <updateCountdown>
	  			break;
 8000e14:	e010      	b.n	8000e38 <main+0x234>
	  		case STOPWATCH:
	  			if (lapStopwatchFlag) {
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <main+0x280>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <main+0x228>
	  				lapStopwatch(stopwatch);
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <main+0x260>)
 8000e20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e22:	f001 f963 	bl	80020ec <lapStopwatch>
	  				lapStopwatchFlag = false;
 8000e26:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <main+0x280>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	  			}
		  		updateStopwatch(stopwatch);
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <main+0x260>)
 8000e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e30:	f001 f9ae 	bl	8002190 <updateStopwatch>


				break;
 8000e34:	e000      	b.n	8000e38 <main+0x234>
	  		default:
	  			break;
 8000e36:	bf00      	nop
	  	}
	  	last_tick += 1000;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <main+0x278>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000e40:	4a0e      	ldr	r2, [pc, #56]	@ (8000e7c <main+0x278>)
 8000e42:	6013      	str	r3, [r2, #0]
	  runCountdown(&countdown, &lastSecond, second, htim1, enable_sound);
 8000e44:	e6f9      	b.n	8000c3a <main+0x36>
 8000e46:	bf00      	nop
 8000e48:	2000010c 	.word	0x2000010c
 8000e4c:	20000158 	.word	0x20000158
 8000e50:	200001a8 	.word	0x200001a8
 8000e54:	20000008 	.word	0x20000008
 8000e58:	200000c0 	.word	0x200000c0
 8000e5c:	200001ac 	.word	0x200001ac
 8000e60:	200001ec 	.word	0x200001ec
 8000e64:	200001f8 	.word	0x200001f8
 8000e68:	200001e8 	.word	0x200001e8
 8000e6c:	200001e9 	.word	0x200001e9
 8000e70:	2000000a 	.word	0x2000000a
 8000e74:	20000209 	.word	0x20000209
 8000e78:	200001d8 	.word	0x200001d8
 8000e7c:	200001a4 	.word	0x200001a4
 8000e80:	48000400 	.word	0x48000400
 8000e84:	20000208 	.word	0x20000208

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b0a6      	sub	sp, #152	@ 0x98
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e92:	2228      	movs	r2, #40	@ 0x28
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 fbc8 	bl	800662c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2258      	movs	r2, #88	@ 0x58
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f005 fbba 	bl	800662c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000eb8:	230a      	movs	r3, #10
 8000eba:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000eda:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fe4f 	bl	8002b90 <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ef8:	f000 fb51 	bl	800159e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	230f      	movs	r3, #15
 8000efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f00:	2302      	movs	r3, #2
 8000f02:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f12:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f16:	2101      	movs	r1, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fe5d 	bl	8003bd8 <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f24:	f000 fb3b 	bl	800159e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8000f28:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8000f2c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f32:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f80e 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f46:	f000 fb2a 	bl	800159e <Error_Handler>
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3798      	adds	r7, #152	@ 0x98
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b090      	sub	sp, #64	@ 0x40
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2228      	movs	r2, #40	@ 0x28
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fb59 	bl	800662c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <MX_RTC_Init+0x120>)
 8000f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001078 <MX_RTC_Init+0x124>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f80:	4b3c      	ldr	r3, [pc, #240]	@ (8001074 <MX_RTC_Init+0x120>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <MX_RTC_Init+0x120>)
 8000f88:	227f      	movs	r2, #127	@ 0x7f
 8000f8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <MX_RTC_Init+0x120>)
 8000f8e:	22ff      	movs	r2, #255	@ 0xff
 8000f90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <MX_RTC_Init+0x120>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f98:	4b36      	ldr	r3, [pc, #216]	@ (8001074 <MX_RTC_Init+0x120>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	@ (8001074 <MX_RTC_Init+0x120>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fa4:	4833      	ldr	r0, [pc, #204]	@ (8001074 <MX_RTC_Init+0x120>)
 8000fa6:	f003 f9f5 	bl	8004394 <HAL_RTC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000fb0:	f000 faf5 	bl	800159e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x30;
 8000fba:	2330      	movs	r3, #48	@ 0x30
 8000fbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4827      	ldr	r0, [pc, #156]	@ (8001074 <MX_RTC_Init+0x120>)
 8000fd8:	f003 fa5f 	bl	800449a <HAL_RTC_SetTime>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000fe2:	f000 fadc 	bl	800159e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 8000fec:	2308      	movs	r3, #8
 8000fee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x3;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8000ff8:	2325      	movs	r3, #37	@ 0x25
 8000ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ffe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001002:	2201      	movs	r2, #1
 8001004:	4619      	mov	r1, r3
 8001006:	481b      	ldr	r0, [pc, #108]	@ (8001074 <MX_RTC_Init+0x120>)
 8001008:	f003 fb3f 	bl	800468a <HAL_RTC_SetDate>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001012:	f000 fac4 	bl	800159e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001016:	2300      	movs	r3, #0
 8001018:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800101a:	2300      	movs	r3, #0
 800101c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800101e:	2300      	movs	r3, #0
 8001020:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800103a:	2301      	movs	r3, #1
 800103c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	4809      	ldr	r0, [pc, #36]	@ (8001074 <MX_RTC_Init+0x120>)
 800104e:	f003 fd19 	bl	8004a84 <HAL_RTC_SetAlarm_IT>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001058:	f000 faa1 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	2029      	movs	r0, #41	@ 0x29
 8001062:	f001 fb8c 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001066:	2029      	movs	r0, #41	@ 0x29
 8001068:	f001 fba5 	bl	80027b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3740      	adds	r7, #64	@ 0x40
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000a0 	.word	0x200000a0
 8001078:	40002800 	.word	0x40002800

0800107c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09a      	sub	sp, #104	@ 0x68
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
 80010ac:	615a      	str	r2, [r3, #20]
 80010ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	222c      	movs	r2, #44	@ 0x2c
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 fab8 	bl	800662c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010bc:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010be:	4a4b      	ldr	r2, [pc, #300]	@ (80011ec <MX_TIM1_Init+0x170>)
 80010c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000 -1;
 80010c2:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b47      	ldr	r3, [pc, #284]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 296;
 80010d0:	4b45      	ldr	r3, [pc, #276]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010d2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80010d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010de:	4b42      	ldr	r3, [pc, #264]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b40      	ldr	r3, [pc, #256]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ea:	483f      	ldr	r0, [pc, #252]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80010ec:	f003 fecc 	bl	8004e88 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80010f6:	f000 fa52 	bl	800159e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001100:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001104:	4619      	mov	r1, r3
 8001106:	4838      	ldr	r0, [pc, #224]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 8001108:	f004 fba6 	bl	8005858 <HAL_TIM_ConfigClockSource>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001112:	f000 fa44 	bl	800159e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001116:	4834      	ldr	r0, [pc, #208]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 8001118:	f003 ff7e 	bl	8005018 <HAL_TIM_PWM_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001122:	f000 fa3c 	bl	800159e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001132:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001136:	4619      	mov	r1, r3
 8001138:	482b      	ldr	r0, [pc, #172]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 800113a:	f005 f8ef 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001144:	f000 fa2b 	bl	800159e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001148:	2360      	movs	r3, #96	@ 0x60
 800114a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001164:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	481e      	ldr	r0, [pc, #120]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 800116e:	f004 fa5f 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001178:	f000 fa11 	bl	800159e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001180:	2208      	movs	r2, #8
 8001182:	4619      	mov	r1, r3
 8001184:	4818      	ldr	r0, [pc, #96]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 8001186:	f004 fa53 	bl	8005630 <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001190:	f000 fa05 	bl	800159e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80011ca:	f005 f933 	bl	8006434 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80011d4:	f000 f9e3 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d8:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <MX_TIM1_Init+0x16c>)
 80011da:	f000 fa87 	bl	80016ec <HAL_TIM_MspPostInit>

}
 80011de:	bf00      	nop
 80011e0:	3768      	adds	r7, #104	@ 0x68
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200000c0 	.word	0x200000c0
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_TIM6_Init+0x68>)
 8001202:	4a16      	ldr	r2, [pc, #88]	@ (800125c <MX_TIM6_Init+0x6c>)
 8001204:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_TIM6_Init+0x68>)
 8001208:	f242 720f 	movw	r2, #9999	@ 0x270f
 800120c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_TIM6_Init+0x68>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <MX_TIM6_Init+0x68>)
 8001216:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800121a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_TIM6_Init+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001222:	480d      	ldr	r0, [pc, #52]	@ (8001258 <MX_TIM6_Init+0x68>)
 8001224:	f003 fe30 	bl	8004e88 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800122e:	f000 f9b6 	bl	800159e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <MX_TIM6_Init+0x68>)
 8001240:	f005 f86c 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800124a:	f000 f9a8 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000010c 	.word	0x2000010c
 800125c:	40001000 	.word	0x40001000

08001260 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_TIM7_Init+0x64>)
 8001272:	4a15      	ldr	r2, [pc, #84]	@ (80012c8 <MX_TIM7_Init+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_TIM7_Init+0x64>)
 8001278:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800127c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_TIM7_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 71;
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_TIM7_Init+0x64>)
 8001286:	2247      	movs	r2, #71	@ 0x47
 8001288:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_TIM7_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <MX_TIM7_Init+0x64>)
 8001292:	f003 fdf9 	bl	8004e88 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800129c:	f000 f97f 	bl	800159e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_TIM7_Init+0x64>)
 80012ae:	f005 f835 	bl	800631c <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 f971 	bl	800159e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000158 	.word	0x20000158
 80012c8:	40001400 	.word	0x40001400

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	4b77      	ldr	r3, [pc, #476]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a76      	ldr	r2, [pc, #472]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 80012e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b74      	ldr	r3, [pc, #464]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	4b71      	ldr	r3, [pc, #452]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a70      	ldr	r2, [pc, #448]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b6e      	ldr	r3, [pc, #440]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b6b      	ldr	r3, [pc, #428]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a6a      	ldr	r2, [pc, #424]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b68      	ldr	r3, [pc, #416]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b65      	ldr	r3, [pc, #404]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a64      	ldr	r2, [pc, #400]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b62      	ldr	r3, [pc, #392]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	4b5f      	ldr	r3, [pc, #380]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a5e      	ldr	r2, [pc, #376]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001348:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b5c      	ldr	r3, [pc, #368]	@ (80014c0 <MX_GPIO_Init+0x1f4>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 800135a:	2200      	movs	r2, #0
 800135c:	f640 71e1 	movw	r1, #4065	@ 0xfe1
 8001360:	4858      	ldr	r0, [pc, #352]	@ (80014c4 <MX_GPIO_Init+0x1f8>)
 8001362:	f001 fbe5 	bl	8002b30 <HAL_GPIO_WritePin>
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|COILB_Pin|Control_RS_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f249 0120 	movw	r1, #36896	@ 0x9020
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f001 fbde 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 8001374:	2200      	movs	r2, #0
 8001376:	f248 41bc 	movw	r1, #33980	@ 0x84bc
 800137a:	4853      	ldr	r0, [pc, #332]	@ (80014c8 <MX_GPIO_Init+0x1fc>)
 800137c:	f001 fbd8 	bl	8002b30 <HAL_GPIO_WritePin>
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Control_E_GPIO_Port, Control_E_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2104      	movs	r1, #4
 8001384:	4851      	ldr	r0, [pc, #324]	@ (80014cc <MX_GPIO_Init+0x200>)
 8001386:	f001 fbd3 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001390:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001394:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4848      	ldr	r0, [pc, #288]	@ (80014c4 <MX_GPIO_Init+0x1f8>)
 80013a2:	f001 fa23 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin COILA_Pin Control_RW_Pin COILC_Pin
                           Data_D4_Pin Data_D5_Pin Data_D6_Pin Data_D7_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 80013a6:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 80013aa:	617b      	str	r3, [r7, #20]
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	4841      	ldr	r0, [pc, #260]	@ (80014c4 <MX_GPIO_Init+0x1f8>)
 80013c0:	f001 fa14 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80013c4:	2312      	movs	r3, #18
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f001 fa06 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013e0:	230c      	movs	r3, #12
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f0:	2307      	movs	r3, #7
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fe:	f001 f9f5 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin COILB_Pin Control_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|COILB_Pin|Control_RS_Pin;
 8001402:	f249 0320 	movw	r3, #36896	@ 0x9020
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f001 f9e5 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8001422:	2301      	movs	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001426:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800142a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4824      	ldr	r0, [pc, #144]	@ (80014c8 <MX_GPIO_Init+0x1fc>)
 8001438:	f001 f9d8 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : COILD_Pin LED_D1_Pin SER_Data_IN_Pin LED_D2_Pin
                           LED_D2B4_Pin LED_D3_Pin RCLK_Latch_Pin */
  GPIO_InitStruct.Pin = COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 800143c:	f248 43bc 	movw	r3, #33980	@ 0x84bc
 8001440:	617b      	str	r3, [r7, #20]
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	481c      	ldr	r0, [pc, #112]	@ (80014c8 <MX_GPIO_Init+0x1fc>)
 8001456:	f001 f9c9 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_E_Pin */
  GPIO_InitStruct.Pin = Control_E_Pin;
 800145a:	2304      	movs	r3, #4
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_E_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4816      	ldr	r0, [pc, #88]	@ (80014cc <MX_GPIO_Init+0x200>)
 8001472:	f001 f9bb 	bl	80027ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2006      	movs	r0, #6
 800147c:	f001 f97f 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001480:	2006      	movs	r0, #6
 8001482:	f001 f998 	bl	80027b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2007      	movs	r0, #7
 800148c:	f001 f977 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001490:	2007      	movs	r0, #7
 8001492:	f001 f990 	bl	80027b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	200a      	movs	r0, #10
 800149c:	f001 f96f 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014a0:	200a      	movs	r0, #10
 80014a2:	f001 f988 	bl	80027b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2028      	movs	r0, #40	@ 0x28
 80014ac:	f001 f967 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b0:	2028      	movs	r0, #40	@ 0x28
 80014b2:	f001 f980 	bl	80027b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000c00 	.word	0x48000c00

080014d0 <system_clock_setup>:

/* USER CODE BEGIN 4 */
void system_clock_setup() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0a6      	sub	sp, #152	@ 0x98
 80014d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80014da:	2228      	movs	r2, #40	@ 0x28
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 f8a4 	bl	800662c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2258      	movs	r2, #88	@ 0x58
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 f896 	bl	800662c <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001500:	2306      	movs	r3, #6
 8001502:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001504:	2301      	movs	r3, #1
 8001506:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001508:	2310      	movs	r3, #16
 800150a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001526:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800152a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fb29 	bl	8002b90 <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <system_clock_setup+0x78>
	{
	Error_Handler();
 8001544:	f000 f82b 	bl	800159e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001548:	230f      	movs	r3, #15
 800154a:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	2302      	movs	r3, #2
 800154e:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001558:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800155e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001562:	2101      	movs	r1, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f002 fb37 	bl	8003bd8 <HAL_RCC_ClockConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <system_clock_setup+0xa4>
	{
	Error_Handler();
 8001570:	f000 f815 	bl	800159e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8001574:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8001578:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800157a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001580:	2300      	movs	r3, #0
 8001582:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fce8 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <system_clock_setup+0xc6>
	{
	Error_Handler();
 8001592:	f000 f804 	bl	800159e <Error_Handler>
	}
}
 8001596:	bf00      	nop
 8001598:	3798      	adds	r7, #152	@ 0x98
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a6:	bf00      	nop
 80015a8:	e7fd      	b.n	80015a6 <Error_Handler+0x8>
	...

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_MspInit+0x44>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_MspInit+0x44>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015e2:	2007      	movs	r0, #7
 80015e4:	f001 f8c0 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_RTC_MspInit+0x44>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d111      	bne.n	800162a <HAL_RTC_MspInit+0x36>
 8001606:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800160a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001614:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <HAL_RTC_MspInit+0x48>)
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	461a      	mov	r2, r3
 8001626:	2301      	movs	r3, #1
 8001628:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40002800 	.word	0x40002800
 800163c:	10908100 	.word	0x10908100

08001640 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <HAL_TIM_Base_MspInit+0x9c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d10c      	bne.n	800166c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001652:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a22      	ldr	r2, [pc, #136]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001658:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 800166a:	e032      	b.n	80016d2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1c      	ldr	r2, [pc, #112]	@ (80016e4 <HAL_TIM_Base_MspInit+0xa4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d114      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a19      	ldr	r2, [pc, #100]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2036      	movs	r0, #54	@ 0x36
 8001694:	f001 f873 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001698:	2036      	movs	r0, #54	@ 0x36
 800169a:	f001 f88c 	bl	80027b6 <HAL_NVIC_EnableIRQ>
}
 800169e:	e018      	b.n	80016d2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <HAL_TIM_Base_MspInit+0xa8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d113      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <HAL_TIM_Base_MspInit+0xa0>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0320 	and.w	r3, r3, #32
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2037      	movs	r0, #55	@ 0x37
 80016c8:	f001 f859 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016cc:	2037      	movs	r0, #55	@ 0x37
 80016ce:	f001 f872 	bl	80027b6 <HAL_NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40001000 	.word	0x40001000
 80016e8:	40001400 	.word	0x40001400

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <HAL_TIM_MspPostInit+0x64>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11b      	bne.n	8001746 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <HAL_TIM_MspPostInit+0x68>)
 8001714:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <HAL_TIM_MspPostInit+0x68>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001726:	2304      	movs	r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001742:	f001 f853 	bl	80027ec <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40021000 	.word	0x40021000
 8001758:	48000800 	.word	0x48000800

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f000 fec5 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}

080017ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 80017be:	2001      	movs	r0, #1
 80017c0:	f001 f9ce 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80017cc:	2002      	movs	r0, #2
 80017ce:	f001 f9c7 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80017da:	2010      	movs	r0, #16
 80017dc:	f001 f9c0 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017ec:	f001 f9b8 	bl	8002b60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <TIM6_DAC_IRQHandler+0x10>)
 80017fa:	f003 fe17 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2000010c 	.word	0x2000010c

08001808 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <TIM7_IRQHandler+0x10>)
 800180e:	f003 fe0d 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000158 	.word	0x20000158

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f004 fef6 	bl	800663c <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20010000 	.word	0x20010000
 800187c:	00000400 	.word	0x00000400
 8001880:	2000020c 	.word	0x2000020c
 8001884:	20000388 	.word	0x20000388

08001888 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <timePage>:
RTC_AlarmTypeDef sAlarm;
bool is_24_hour_format = true;
extern bool timeFormatChanged;
extern void coast_asm_delay(uint32_t milliseconds);

void timePage() {
 80018ac:	b5b0      	push	{r4, r5, r7, lr}
 80018ae:	b08c      	sub	sp, #48	@ 0x30
 80018b0:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f7fe fe18 	bl	80004e8 <LCD_SendCmd>
	char buff[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018b8:	2200      	movs	r2, #0
 80018ba:	491e      	ldr	r1, [pc, #120]	@ (8001934 <timePage+0x88>)
 80018bc:	481e      	ldr	r0, [pc, #120]	@ (8001938 <timePage+0x8c>)
 80018be:	f002 fe86 	bl	80045ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80018c2:	2200      	movs	r2, #0
 80018c4:	491d      	ldr	r1, [pc, #116]	@ (800193c <timePage+0x90>)
 80018c6:	481c      	ldr	r0, [pc, #112]	@ (8001938 <timePage+0x8c>)
 80018c8:	f002 ff63 	bl	8004792 <HAL_RTC_GetDate>

	char *weekDayMap[7] = {"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
 80018cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <timePage+0x94>)
 80018ce:	463c      	mov	r4, r7
 80018d0:	461d      	mov	r5, r3
 80018d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char *weekday = weekDayMap[sDate.WeekDay - 1];
 80018de:	4b17      	ldr	r3, [pc, #92]	@ (800193c <timePage+0x90>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	3330      	adds	r3, #48	@ 0x30
 80018e8:	443b      	add	r3, r7
 80018ea:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	sprintf(buff, "%s ", weekday);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f6:	4913      	ldr	r1, [pc, #76]	@ (8001944 <timePage+0x98>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fe75 	bl	80065e8 <siprintf>

	LCD_SendStr(buff);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe2c 	bl	8000560 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 8001908:	20c0      	movs	r0, #192	@ 0xc0
 800190a:	f7fe fded 	bl	80004e8 <LCD_SendCmd>

	LCD_SendStr("ALARM");
 800190e:	480e      	ldr	r0, [pc, #56]	@ (8001948 <timePage+0x9c>)
 8001910:	f7fe fe26 	bl	8000560 <LCD_SendStr>


	if (is_24_hour_format) {
 8001914:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <timePage+0xa0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <timePage+0x78>
	    LCD_SendStr("   24H_TIME");
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <timePage+0xa4>)
 800191e:	f7fe fe1f 	bl	8000560 <LCD_SendStr>
	} else {
	    LCD_SendStr("   12H_TIME");
	}

}
 8001922:	e002      	b.n	800192a <timePage+0x7e>
	    LCD_SendStr("   12H_TIME");
 8001924:	480b      	ldr	r0, [pc, #44]	@ (8001954 <timePage+0xa8>)
 8001926:	f7fe fe1b 	bl	8000560 <LCD_SendStr>
}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	@ 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	20000088 	.word	0x20000088
 8001938:	200000a0 	.word	0x200000a0
 800193c:	2000009c 	.word	0x2000009c
 8001940:	08006f9c 	.word	0x08006f9c
 8001944:	08006f5c 	.word	0x08006f5c
 8001948:	08006f60 	.word	0x08006f60
 800194c:	20000010 	.word	0x20000010
 8001950:	08006f68 	.word	0x08006f68
 8001954:	08006f74 	.word	0x08006f74

08001958 <updateTime>:

void updateTime(uint8_t row, uint8_t col) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]
	char buff[8];
	char dateBuff[8];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001968:	2200      	movs	r2, #0
 800196a:	492a      	ldr	r1, [pc, #168]	@ (8001a14 <updateTime+0xbc>)
 800196c:	482a      	ldr	r0, [pc, #168]	@ (8001a18 <updateTime+0xc0>)
 800196e:	f002 fe2e 	bl	80045ce <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001972:	2200      	movs	r2, #0
 8001974:	4929      	ldr	r1, [pc, #164]	@ (8001a1c <updateTime+0xc4>)
 8001976:	4828      	ldr	r0, [pc, #160]	@ (8001a18 <updateTime+0xc0>)
 8001978:	f002 ff0b 	bl	8004792 <HAL_RTC_GetDate>

	uint8_t hours = sTime.Hours;
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <updateTime+0xbc>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	77bb      	strb	r3, [r7, #30]
	uint8_t minutes = sTime.Minutes;
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <updateTime+0xbc>)
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	777b      	strb	r3, [r7, #29]
	uint8_t day = sDate.Date;
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <updateTime+0xc4>)
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	773b      	strb	r3, [r7, #28]
	uint8_t month = sDate.Month;
 800198e:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <updateTime+0xc4>)
 8001990:	785b      	ldrb	r3, [r3, #1]
 8001992:	76fb      	strb	r3, [r7, #27]

	uint8_t displayHour = hours;
 8001994:	7fbb      	ldrb	r3, [r7, #30]
 8001996:	77fb      	strb	r3, [r7, #31]
	 if (!is_24_hour_format) {
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <updateTime+0xc8>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <updateTime+0x66>
	        if (hours == 0) {
 80019a6:	7fbb      	ldrb	r3, [r7, #30]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <updateTime+0x5a>
	        	displayHour = 12;
 80019ac:	230c      	movs	r3, #12
 80019ae:	77fb      	strb	r3, [r7, #31]
 80019b0:	e005      	b.n	80019be <updateTime+0x66>
	        }
	        else if (hours > 12) {
 80019b2:	7fbb      	ldrb	r3, [r7, #30]
 80019b4:	2b0c      	cmp	r3, #12
 80019b6:	d902      	bls.n	80019be <updateTime+0x66>
	        	displayHour = hours - 12;
 80019b8:	7fbb      	ldrb	r3, [r7, #30]
 80019ba:	3b0c      	subs	r3, #12
 80019bc:	77fb      	strb	r3, [r7, #31]
	        }
	    }
	// Move cursor to desired position (row 0 or 1)
	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <updateTime+0x70>
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	e000      	b.n	80019ca <updateTime+0x72>
 80019c8:	23c0      	movs	r3, #192	@ 0xc0
 80019ca:	76bb      	strb	r3, [r7, #26]
	LCD_SendCmd(baseCmd + col);
 80019cc:	7eba      	ldrb	r2, [r7, #26]
 80019ce:	79bb      	ldrb	r3, [r7, #6]
 80019d0:	4413      	add	r3, r2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd87 	bl	80004e8 <LCD_SendCmd>

	sprintf(buff, "%02d:%02d ", displayHour, minutes);
 80019da:	7ffa      	ldrb	r2, [r7, #31]
 80019dc:	7f7b      	ldrb	r3, [r7, #29]
 80019de:	f107 0010 	add.w	r0, r7, #16
 80019e2:	4910      	ldr	r1, [pc, #64]	@ (8001a24 <updateTime+0xcc>)
 80019e4:	f004 fe00 	bl	80065e8 <siprintf>
	LCD_SendStr(buff);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdb7 	bl	8000560 <LCD_SendStr>

	sprintf(dateBuff, " %02d/%02d", day, month);
 80019f2:	7f3a      	ldrb	r2, [r7, #28]
 80019f4:	7efb      	ldrb	r3, [r7, #27]
 80019f6:	f107 0008 	add.w	r0, r7, #8
 80019fa:	490b      	ldr	r1, [pc, #44]	@ (8001a28 <updateTime+0xd0>)
 80019fc:	f004 fdf4 	bl	80065e8 <siprintf>
	LCD_SendStr(dateBuff);
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fdab 	bl	8000560 <LCD_SendStr>
}
 8001a0a:	bf00      	nop
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000088 	.word	0x20000088
 8001a18:	200000a0 	.word	0x200000a0
 8001a1c:	2000009c 	.word	0x2000009c
 8001a20:	20000010 	.word	0x20000010
 8001a24:	08006fb8 	.word	0x08006fb8
 8001a28:	08006fc4 	.word	0x08006fc4

08001a2c <alarmPage>:


void alarmPage() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af02      	add	r7, sp, #8
	char buff[20];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7fe fd58 	bl	80004e8 <LCD_SendCmd>
//	coast_asm_delay(2);

	LCD_SendCmd(0x80);
 8001a38:	2080      	movs	r0, #128	@ 0x80
 8001a3a:	f7fe fd55 	bl	80004e8 <LCD_SendCmd>
	LCD_SendStr("Set Alarm for:");
 8001a3e:	4822      	ldr	r0, [pc, #136]	@ (8001ac8 <alarmPage+0x9c>)
 8001a40:	f7fe fd8e 	bl	8000560 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 8001a44:	20c0      	movs	r0, #192	@ 0xc0
 8001a46:	f7fe fd4f 	bl	80004e8 <LCD_SendCmd>
	uint8_t h = sAlarm.AlarmTime.Hours;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <alarmPage+0xa0>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	77bb      	strb	r3, [r7, #30]
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	@ (8001acc <alarmPage+0xa0>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	777b      	strb	r3, [r7, #29]

	if (is_24_hour_format) {
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <alarmPage+0xa4>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d009      	beq.n	8001a72 <alarmPage+0x46>
		snprintf(buff, sizeof(buff), "%02d:%02d", h, m);
 8001a5e:	7fba      	ldrb	r2, [r7, #30]
 8001a60:	7f7b      	ldrb	r3, [r7, #29]
 8001a62:	1d38      	adds	r0, r7, #4
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad4 <alarmPage+0xa8>)
 8001a6a:	2114      	movs	r1, #20
 8001a6c:	f004 fd86 	bl	800657c <sniprintf>
 8001a70:	e021      	b.n	8001ab6 <alarmPage+0x8a>
	} else {
		const char *ampm = (h >= 12) ? "P.M" : "A.M";
 8001a72:	7fbb      	ldrb	r3, [r7, #30]
 8001a74:	2b0b      	cmp	r3, #11
 8001a76:	d901      	bls.n	8001a7c <alarmPage+0x50>
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <alarmPage+0xac>)
 8001a7a:	e000      	b.n	8001a7e <alarmPage+0x52>
 8001a7c:	4b17      	ldr	r3, [pc, #92]	@ (8001adc <alarmPage+0xb0>)
 8001a7e:	61bb      	str	r3, [r7, #24]
		uint8_t dh = h % 12;
 8001a80:	7fba      	ldrb	r2, [r7, #30]
 8001a82:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <alarmPage+0xb4>)
 8001a84:	fba3 1302 	umull	r1, r3, r3, r2
 8001a88:	08d9      	lsrs	r1, r3, #3
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	440b      	add	r3, r1
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	77fb      	strb	r3, [r7, #31]
		if (dh == 0) dh = 12;
 8001a96:	7ffb      	ldrb	r3, [r7, #31]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <alarmPage+0x74>
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	77fb      	strb	r3, [r7, #31]
		snprintf(buff, sizeof(buff), "%02d:%02d %s", dh, m, ampm);
 8001aa0:	7ff9      	ldrb	r1, [r7, #31]
 8001aa2:	7f7b      	ldrb	r3, [r7, #29]
 8001aa4:	1d38      	adds	r0, r7, #4
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	9201      	str	r2, [sp, #4]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	460b      	mov	r3, r1
 8001aae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae4 <alarmPage+0xb8>)
 8001ab0:	2114      	movs	r1, #20
 8001ab2:	f004 fd63 	bl	800657c <sniprintf>
	}
	LCD_SendStr(buff);
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd51 	bl	8000560 <LCD_SendStr>
}
 8001abe:	bf00      	nop
 8001ac0:	3720      	adds	r7, #32
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	08006fd0 	.word	0x08006fd0
 8001acc:	20000210 	.word	0x20000210
 8001ad0:	20000010 	.word	0x20000010
 8001ad4:	08006fe0 	.word	0x08006fe0
 8001ad8:	08006fec 	.word	0x08006fec
 8001adc:	08006ff0 	.word	0x08006ff0
 8001ae0:	aaaaaaab 	.word	0xaaaaaaab
 8001ae4:	08006ff4 	.word	0x08006ff4

08001ae8 <updateAlarm>:

void updateAlarm(uint8_t row, uint8_t col) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	4603      	mov	r3, r0
 8001af0:	460a      	mov	r2, r1
 8001af2:	71fb      	strb	r3, [r7, #7]
 8001af4:	4613      	mov	r3, r2
 8001af6:	71bb      	strb	r3, [r7, #6]

	char buff[16];
	uint8_t h = sAlarm.AlarmTime.Hours;
 8001af8:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <updateAlarm+0xb0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	77bb      	strb	r3, [r7, #30]
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <updateAlarm+0xb0>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	777b      	strb	r3, [r7, #29]

	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0;
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <updateAlarm+0x26>
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	e000      	b.n	8001b10 <updateAlarm+0x28>
 8001b0e:	23c0      	movs	r3, #192	@ 0xc0
 8001b10:	773b      	strb	r3, [r7, #28]
	LCD_SendCmd(baseCmd + col);
 8001b12:	7f3a      	ldrb	r2, [r7, #28]
 8001b14:	79bb      	ldrb	r3, [r7, #6]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fce4 	bl	80004e8 <LCD_SendCmd>

	if (is_24_hour_format) {
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <updateAlarm+0xb4>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00a      	beq.n	8001b3e <updateAlarm+0x56>
		snprintf(buff, sizeof(buff), "%02d:%02d", h, m);
 8001b28:	7fba      	ldrb	r2, [r7, #30]
 8001b2a:	7f7b      	ldrb	r3, [r7, #29]
 8001b2c:	f107 0008 	add.w	r0, r7, #8
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4613      	mov	r3, r2
 8001b34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <updateAlarm+0xb8>)
 8001b36:	2110      	movs	r1, #16
 8001b38:	f004 fd20 	bl	800657c <sniprintf>
 8001b3c:	e022      	b.n	8001b84 <updateAlarm+0x9c>
	} else {
		const char *ampm = (h >= 12) ? "P.M" : "A.M";
 8001b3e:	7fbb      	ldrb	r3, [r7, #30]
 8001b40:	2b0b      	cmp	r3, #11
 8001b42:	d901      	bls.n	8001b48 <updateAlarm+0x60>
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <updateAlarm+0xbc>)
 8001b46:	e000      	b.n	8001b4a <updateAlarm+0x62>
 8001b48:	4b17      	ldr	r3, [pc, #92]	@ (8001ba8 <updateAlarm+0xc0>)
 8001b4a:	61bb      	str	r3, [r7, #24]
		uint8_t dh = h % 12; if (dh == 0) dh = 12;
 8001b4c:	7fba      	ldrb	r2, [r7, #30]
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <updateAlarm+0xc4>)
 8001b50:	fba3 1302 	umull	r1, r3, r3, r2
 8001b54:	08d9      	lsrs	r1, r3, #3
 8001b56:	460b      	mov	r3, r1
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	440b      	add	r3, r1
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	77fb      	strb	r3, [r7, #31]
 8001b62:	7ffb      	ldrb	r3, [r7, #31]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <updateAlarm+0x84>
 8001b68:	230c      	movs	r3, #12
 8001b6a:	77fb      	strb	r3, [r7, #31]
		snprintf(buff, sizeof(buff), "%02d:%02d%s", dh, m, ampm);
 8001b6c:	7ff9      	ldrb	r1, [r7, #31]
 8001b6e:	7f7b      	ldrb	r3, [r7, #29]
 8001b70:	f107 0008 	add.w	r0, r7, #8
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb0 <updateAlarm+0xc8>)
 8001b7e:	2110      	movs	r1, #16
 8001b80:	f004 fcfc 	bl	800657c <sniprintf>
	}
	LCD_SendStr(buff);
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fce9 	bl	8000560 <LCD_SendStr>
}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000210 	.word	0x20000210
 8001b9c:	20000010 	.word	0x20000010
 8001ba0:	08006fe0 	.word	0x08006fe0
 8001ba4:	08006fec 	.word	0x08006fec
 8001ba8:	08006ff0 	.word	0x08006ff0
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	08007004 	.word	0x08007004

08001bb4 <switchTimeFormat>:

void switchTimeFormat() {
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
    is_24_hour_format = !is_24_hour_format;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <switchTimeFormat+0x34>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <switchTimeFormat+0x34>)
 8001bd4:	701a      	strb	r2, [r3, #0]
    timeFormatChanged = true;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <switchTimeFormat+0x38>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000010 	.word	0x20000010
 8001bec:	200001d8 	.word	0x200001d8

08001bf0 <switchAMPM>:

void switchAMPM(){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0

	if (is_24_hour_format) return;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <switchAMPM+0x40>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d111      	bne.n	8001c22 <switchAMPM+0x32>
	uint8_t h = sAlarm.AlarmTime.Hours; // 0..23
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <switchAMPM+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
	    if (h >= 12) {
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b0b      	cmp	r3, #11
 8001c08:	d905      	bls.n	8001c16 <switchAMPM+0x26>
	        sAlarm.AlarmTime.Hours = h - 12; // PM -> AM
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	3b0c      	subs	r3, #12
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <switchAMPM+0x44>)
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e006      	b.n	8001c24 <switchAMPM+0x34>
	    } else {
	        sAlarm.AlarmTime.Hours = h + 12; // AM -> PM
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <switchAMPM+0x44>)
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	e000      	b.n	8001c24 <switchAMPM+0x34>
	if (is_24_hour_format) return;
 8001c22:	bf00      	nop
	    }
}
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000010 	.word	0x20000010
 8001c34:	20000210 	.word	0x20000210

08001c38 <changeAlarmHour>:

void changeAlarmHour() {
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
	uint8_t h = sAlarm.AlarmTime.Hours;
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <changeAlarmHour+0x3c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	71fb      	strb	r3, [r7, #7]
	h = (h + 1) % 24;
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <changeAlarmHour+0x40>)
 8001c4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c4e:	1099      	asrs	r1, r3, #2
 8001c50:	17d3      	asrs	r3, r2, #31
 8001c52:	1ac9      	subs	r1, r1, r3
 8001c54:	460b      	mov	r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	440b      	add	r3, r1
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	1ad1      	subs	r1, r2, r3
 8001c5e:	460b      	mov	r3, r1
 8001c60:	71fb      	strb	r3, [r7, #7]
	sAlarm.AlarmTime.Hours = h;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <changeAlarmHour+0x3c>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	7013      	strb	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000210 	.word	0x20000210
 8001c78:	2aaaaaab 	.word	0x2aaaaaab

08001c7c <changeAlarmMin>:

void changeAlarmMin() {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <changeAlarmMin+0x40>)
 8001c84:	785b      	ldrb	r3, [r3, #1]
 8001c86:	71fb      	strb	r3, [r7, #7]
	m = (m + 5) % 60;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	1d5a      	adds	r2, r3, #5
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <changeAlarmMin+0x44>)
 8001c8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c92:	4413      	add	r3, r2
 8001c94:	1159      	asrs	r1, r3, #5
 8001c96:	17d3      	asrs	r3, r2, #31
 8001c98:	1ac9      	subs	r1, r1, r3
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	1a5b      	subs	r3, r3, r1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	1ad1      	subs	r1, r2, r3
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
	sAlarm.AlarmTime.Minutes = m;
 8001ca8:	4a04      	ldr	r2, [pc, #16]	@ (8001cbc <changeAlarmMin+0x40>)
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	7053      	strb	r3, [r2, #1]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000210 	.word	0x20000210
 8001cc0:	88888889 	.word	0x88888889

08001cc4 <alarmConfirm>:

void alarmConfirm(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8

	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4914      	ldr	r1, [pc, #80]	@ (8001d20 <alarmConfirm+0x5c>)
 8001cce:	4815      	ldr	r0, [pc, #84]	@ (8001d24 <alarmConfirm+0x60>)
 8001cd0:	f002 fdae 	bl	8004830 <HAL_RTC_SetAlarm>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <alarmConfirm+0x1a>
		Error_Handler();
 8001cda:	f7ff fc60 	bl	800159e <Error_Handler>
	}

	LCD_SendCmd(LCD_CLEAR_DISPLAY);   // clear display for confirmation
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7fe fc02 	bl	80004e8 <LCD_SendCmd>
	coast_asm_delay(2);
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7fe fa7b 	bl	80001e0 <coast_asm_delay>

	LCD_SendStr("ALARM SET FOR:");    // top line
 8001cea:	480f      	ldr	r0, [pc, #60]	@ (8001d28 <alarmConfirm+0x64>)
 8001cec:	f7fe fc38 	bl	8000560 <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 8001cf0:	20c0      	movs	r0, #192	@ 0xc0
 8001cf2:	f7fe fbf9 	bl	80004e8 <LCD_SendCmd>
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%02d:%02d", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes);
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <alarmConfirm+0x5c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <alarmConfirm+0x5c>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	4638      	mov	r0, r7
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <alarmConfirm+0x68>)
 8001d08:	2110      	movs	r1, #16
 8001d0a:	f004 fc37 	bl	800657c <sniprintf>
	LCD_SendStr(buffer);
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc25 	bl	8000560 <LCD_SendStr>


}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000210 	.word	0x20000210
 8001d24:	200000a0 	.word	0x200000a0
 8001d28:	08007010 	.word	0x08007010
 8001d2c:	08006fe0 	.word	0x08006fe0

08001d30 <countdownPage>:

void countdownPage(Countdown countdown) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[16];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7fe fbd3 	bl	80004e8 <LCD_SendCmd>
	LCD_SendStr("Countdown:");
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <countdownPage+0x44>)
 8001d44:	f7fe fc0c 	bl	8000560 <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 8001d48:	20c0      	movs	r0, #192	@ 0xc0
 8001d4a:	f7fe fbcd 	bl	80004e8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", countdown.minute, countdown.second);
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f107 0010 	add.w	r0, r7, #16
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <countdownPage+0x48>)
 8001d5c:	2110      	movs	r1, #16
 8001d5e:	f004 fc0d 	bl	800657c <sniprintf>
	LCD_SendStr(buffer);
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbfa 	bl	8000560 <LCD_SendStr>
}
 8001d6c:	bf00      	nop
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08007020 	.word	0x08007020
 8001d78:	0800702c 	.word	0x0800702c

08001d7c <toggleCountdown>:

void toggleCountdown(Countdown *countdown) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if (countdown->countdown_enable) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7a1b      	ldrb	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <toggleCountdown+0x18>
		countdown->countdown_enable = false;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	721a      	strb	r2, [r3, #8]
	} else {
		countdown->countdown_enable = true;
	}
}
 8001d92:	e002      	b.n	8001d9a <toggleCountdown+0x1e>
		countdown->countdown_enable = true;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	721a      	strb	r2, [r3, #8]
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <mintueCountdown>:
void mintueCountdown(Countdown *countdown) {
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
	if (countdown->minute >= 60) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001db4:	d903      	bls.n	8001dbe <mintueCountdown+0x18>
		countdown->minute = 60;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223c      	movs	r2, #60	@ 0x3c
 8001dba:	601a      	str	r2, [r3, #0]
	} else {
		(countdown->minute)++;
	}
}
 8001dbc:	e004      	b.n	8001dc8 <mintueCountdown+0x22>
		(countdown->minute)++;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <secondCountdown>:

void secondCountdown(Countdown *countdown) {
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	if (countdown->second >= 60) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001de2:	d903      	bls.n	8001dec <secondCountdown+0x18>
		countdown->second = 60;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	223c      	movs	r2, #60	@ 0x3c
 8001de8:	605a      	str	r2, [r3, #4]
	} else {
		(countdown->second)++;
	}
}
 8001dea:	e004      	b.n	8001df6 <secondCountdown+0x22>
		(countdown->second)++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <updateCountdown>:
void updateCountdown(Countdown countdown) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	@ 0x28
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[16];
	LCD_SendCmd(LCD_SECOND_LINE);
 8001e10:	20c0      	movs	r0, #192	@ 0xc0
 8001e12:	f7fe fb69 	bl	80004e8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", countdown.minute, countdown.second);
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f107 0010 	add.w	r0, r7, #16
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <updateCountdown+0x38>)
 8001e24:	2110      	movs	r1, #16
 8001e26:	f004 fba9 	bl	800657c <sniprintf>
	LCD_SendStr(buffer);
 8001e2a:	f107 0310 	add.w	r3, r7, #16
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb96 	bl	8000560 <LCD_SendStr>
}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	0800702c 	.word	0x0800702c

08001e40 <resetCountdown>:
void resetCountdown(Countdown *countdown) {
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	countdown->minute = 0;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
	countdown->second = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
	countdown->countdown_enable = false;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	721a      	strb	r2, [r3, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <runCountdown>:

void runCountdown(Countdown *countdown, uint32_t *lastSecond, uint32_t second, TIM_HandleTypeDef htim1, bool enable_sound) {
 8001e68:	b082      	sub	sp, #8
 8001e6a:	b5b0      	push	{r4, r5, r7, lr}
 8001e6c:	b096      	sub	sp, #88	@ 0x58
 8001e6e:	af12      	add	r7, sp, #72	@ 0x48
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
	if (*lastSecond >= second) {
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	f240 8101 	bls.w	8002086 <runCountdown+0x21e>
		return;
	}
	if (countdown->countdown_enable == false) {
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	7a1b      	ldrb	r3, [r3, #8]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80fb 	bne.w	800208a <runCountdown+0x222>
		return;
	}
	if (countdown->second > 0) {
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <runCountdown+0x40>
		countdown->second--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	1e5a      	subs	r2, r3, #1
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	e012      	b.n	8001ece <runCountdown+0x66>
	} else if (countdown->minute > 0) {
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <runCountdown+0x5a>
		countdown->second = 59;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	223b      	movs	r2, #59	@ 0x3b
 8001eb4:	605a      	str	r2, [r3, #4]
		countdown->minute--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e005      	b.n	8001ece <runCountdown+0x66>
	} else {
		countdown->second = 0;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]
		countdown->minute = 0;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
	}
	if (countdown->second == 0 && countdown->minute == 0) {
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 80d3 	bne.w	800207e <runCountdown+0x216>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 80ce 	bne.w	800207e <runCountdown+0x216>
		countdown->countdown_enable = false;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	721a      	strb	r2, [r3, #8]
		if (enable_sound) {
 8001ee8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a4 	beq.w	800203a <runCountdown+0x1d2>
			play_note(460, 300, 50, htim1);
 8001ef2:	4668      	mov	r0, sp
 8001ef4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ef8:	2248      	movs	r2, #72	@ 0x48
 8001efa:	4619      	mov	r1, r3
 8001efc:	f004 fbca 	bl	8006694 <memcpy>
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f02:	2232      	movs	r2, #50	@ 0x32
 8001f04:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f08:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8001f0c:	f7fe fa0e 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001f10:	4668      	mov	r0, sp
 8001f12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f16:	2248      	movs	r2, #72	@ 0x48
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f004 fbbb 	bl	8006694 <memcpy>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	2232      	movs	r2, #50	@ 0x32
 8001f22:	2132      	movs	r1, #50	@ 0x32
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe fa01 	bl	800032c <play_note>
			play_note(300, 150, 50, htim1);
 8001f2a:	4668      	mov	r0, sp
 8001f2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f30:	2248      	movs	r2, #72	@ 0x48
 8001f32:	4619      	mov	r1, r3
 8001f34:	f004 fbae 	bl	8006694 <memcpy>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	2232      	movs	r2, #50	@ 0x32
 8001f3c:	2196      	movs	r1, #150	@ 0x96
 8001f3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f42:	f7fe f9f3 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001f46:	4668      	mov	r0, sp
 8001f48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f4c:	2248      	movs	r2, #72	@ 0x48
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f004 fba0 	bl	8006694 <memcpy>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	2232      	movs	r2, #50	@ 0x32
 8001f58:	2132      	movs	r1, #50	@ 0x32
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7fe f9e6 	bl	800032c <play_note>
			play_note(220, 300, 50, htim1);
 8001f60:	4668      	mov	r0, sp
 8001f62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f66:	2248      	movs	r2, #72	@ 0x48
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f004 fb93 	bl	8006694 <memcpy>
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	2232      	movs	r2, #50	@ 0x32
 8001f72:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f76:	20dc      	movs	r0, #220	@ 0xdc
 8001f78:	f7fe f9d8 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001f7c:	4668      	mov	r0, sp
 8001f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f82:	2248      	movs	r2, #72	@ 0x48
 8001f84:	4619      	mov	r1, r3
 8001f86:	f004 fb85 	bl	8006694 <memcpy>
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	2232      	movs	r2, #50	@ 0x32
 8001f8e:	2132      	movs	r1, #50	@ 0x32
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7fe f9cb 	bl	800032c <play_note>
			play_note(460, 300, 50, htim1);
 8001f96:	4668      	mov	r0, sp
 8001f98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f9c:	2248      	movs	r2, #72	@ 0x48
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f004 fb78 	bl	8006694 <memcpy>
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	2232      	movs	r2, #50	@ 0x32
 8001fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001fac:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8001fb0:	f7fe f9bc 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001fb4:	4668      	mov	r0, sp
 8001fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fba:	2248      	movs	r2, #72	@ 0x48
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f004 fb69 	bl	8006694 <memcpy>
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	2232      	movs	r2, #50	@ 0x32
 8001fc6:	2132      	movs	r1, #50	@ 0x32
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7fe f9af 	bl	800032c <play_note>
			play_note(300, 150, 50, htim1);
 8001fce:	4668      	mov	r0, sp
 8001fd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fd4:	2248      	movs	r2, #72	@ 0x48
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f004 fb5c 	bl	8006694 <memcpy>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	2232      	movs	r2, #50	@ 0x32
 8001fe0:	2196      	movs	r1, #150	@ 0x96
 8001fe2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fe6:	f7fe f9a1 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001fea:	4668      	mov	r0, sp
 8001fec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff0:	2248      	movs	r2, #72	@ 0x48
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f004 fb4e 	bl	8006694 <memcpy>
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	2232      	movs	r2, #50	@ 0x32
 8001ffc:	2132      	movs	r1, #50	@ 0x32
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7fe f994 	bl	800032c <play_note>
			play_note(220, 300, 50, htim1);
 8002004:	4668      	mov	r0, sp
 8002006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200a:	2248      	movs	r2, #72	@ 0x48
 800200c:	4619      	mov	r1, r3
 800200e:	f004 fb41 	bl	8006694 <memcpy>
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	2232      	movs	r2, #50	@ 0x32
 8002016:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800201a:	20dc      	movs	r0, #220	@ 0xdc
 800201c:	f7fe f986 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8002020:	4668      	mov	r0, sp
 8002022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002026:	2248      	movs	r2, #72	@ 0x48
 8002028:	4619      	mov	r1, r3
 800202a:	f004 fb33 	bl	8006694 <memcpy>
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	2232      	movs	r2, #50	@ 0x32
 8002032:	2132      	movs	r1, #50	@ 0x32
 8002034:	2000      	movs	r0, #0
 8002036:	f7fe f979 	bl	800032c <play_note>
		}
		LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800203a:	2001      	movs	r0, #1
 800203c:	f7fe fa54 	bl	80004e8 <LCD_SendCmd>
		LCD_SendStr("Countdown Done");
 8002040:	4815      	ldr	r0, [pc, #84]	@ (8002098 <runCountdown+0x230>)
 8002042:	f7fe fa8d 	bl	8000560 <LCD_SendStr>
		stop_sound(htim1);
 8002046:	466d      	mov	r5, sp
 8002048:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002058:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800205c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002066:	f7fe f94f 	bl	8000308 <stop_sound>
		coast_asm_delay(1500);
 800206a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800206e:	f7fe f8b7 	bl	80001e0 <coast_asm_delay>
		LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8002072:	2001      	movs	r0, #1
 8002074:	f7fe fa38 	bl	80004e8 <LCD_SendCmd>
		LCD_SendStr("Countdown:");
 8002078:	4808      	ldr	r0, [pc, #32]	@ (800209c <runCountdown+0x234>)
 800207a:	f7fe fa71 	bl	8000560 <LCD_SendStr>
	}
	*lastSecond = second;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e002      	b.n	800208c <runCountdown+0x224>
		return;
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <runCountdown+0x224>
		return;
 800208a:	bf00      	nop
}
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002094:	b002      	add	sp, #8
 8002096:	4770      	bx	lr
 8002098:	08007038 	.word	0x08007038
 800209c:	08007020 	.word	0x08007020

080020a0 <stopwatchPage>:

void stopwatchPage(Stopwatch stopwatch) {
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b08b      	sub	sp, #44	@ 0x2c
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	463c      	mov	r4, r7
 80020a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7fe fa1b 	bl	80004e8 <LCD_SendCmd>
	LCD_SendStr("Stopwatch:  lap:");
 80020b2:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <stopwatchPage+0x44>)
 80020b4:	f7fe fa54 	bl	8000560 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 80020b8:	20c0      	movs	r0, #192	@ 0xc0
 80020ba:	f7fe fa15 	bl	80004e8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", stopwatch.minute, stopwatch.second);
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f107 0010 	add.w	r0, r7, #16
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <stopwatchPage+0x48>)
 80020cc:	2110      	movs	r1, #16
 80020ce:	f004 fa55 	bl	800657c <sniprintf>
	LCD_SendStr(buffer);
 80020d2:	f107 0310 	add.w	r3, r7, #16
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa42 	bl	8000560 <LCD_SendStr>
}
 80020dc:	bf00      	nop
 80020de:	3724      	adds	r7, #36	@ 0x24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}
 80020e4:	08007048 	.word	0x08007048
 80020e8:	0800702c 	.word	0x0800702c

080020ec <lapStopwatch>:


void lapStopwatch(Stopwatch stopwatch) {
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08b      	sub	sp, #44	@ 0x2c
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	463c      	mov	r4, r7
 80020f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	coast_asm_delay(11);
 80020f8:	200b      	movs	r0, #11
 80020fa:	f7fe f871 	bl	80001e0 <coast_asm_delay>
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7fe f9f2 	bl	80004e8 <LCD_SendCmd>
	coast_asm_delay(11);
 8002104:	200b      	movs	r0, #11
 8002106:	f7fe f86b 	bl	80001e0 <coast_asm_delay>
	LCD_SendCmd(LCD_RETURN_HOME);
 800210a:	2002      	movs	r0, #2
 800210c:	f7fe f9ec 	bl	80004e8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "lap:%02ld:%02ld:%02ld", stopwatch.hour, stopwatch.minute, stopwatch.second);
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	f107 0010 	add.w	r0, r7, #16
 800211a:	9201      	str	r2, [sp, #4]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <lapStopwatch+0x50>)
 8002122:	2110      	movs	r1, #16
 8002124:	f004 fa2a 	bl	800657c <sniprintf>
	LCD_SendStr(buffer);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fa17 	bl	8000560 <LCD_SendStr>
}
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	0800705c 	.word	0x0800705c

08002140 <resetStopwatch>:

void resetStopwatch(Stopwatch *stopwatch) {
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	stopwatch->minute = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
	stopwatch->second = 0;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
	stopwatch->stopwatch_enable = false;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	731a      	strb	r2, [r3, #12]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <toggleStopwatch>:
void toggleStopwatch(Stopwatch *stopwatch) {
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
	if (stopwatch->stopwatch_enable) {
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7b1b      	ldrb	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <toggleStopwatch+0x18>
		stopwatch->stopwatch_enable = false;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	731a      	strb	r2, [r3, #12]
	} else {
		stopwatch->stopwatch_enable = true;
	}
}
 800217c:	e002      	b.n	8002184 <toggleStopwatch+0x1e>
		stopwatch->stopwatch_enable = true;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	731a      	strb	r2, [r3, #12]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <updateStopwatch>:

void updateStopwatch(Stopwatch stopwatch) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b08b      	sub	sp, #44	@ 0x2c
 8002194:	af02      	add	r7, sp, #8
 8002196:	463c      	mov	r4, r7
 8002198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	LCD_SendCmd(LCD_SECOND_LINE);
 800219c:	20c0      	movs	r0, #192	@ 0xc0
 800219e:	f7fe f9a3 	bl	80004e8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld:%02ld", stopwatch.hour, stopwatch.minute, stopwatch.second);
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f107 0010 	add.w	r0, r7, #16
 80021ac:	9201      	str	r2, [sp, #4]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	460b      	mov	r3, r1
 80021b2:	4a06      	ldr	r2, [pc, #24]	@ (80021cc <updateStopwatch+0x3c>)
 80021b4:	2110      	movs	r1, #16
 80021b6:	f004 f9e1 	bl	800657c <sniprintf>
	LCD_SendStr(buffer);
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9ce 	bl	8000560 <LCD_SendStr>
}
 80021c4:	bf00      	nop
 80021c6:	3724      	adds	r7, #36	@ 0x24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}
 80021cc:	08007074 	.word	0x08007074

080021d0 <runStopwatch>:
void runStopwatch(Stopwatch *stopwatch, uint32_t *lastSecond, uint32_t second) {
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	if (*lastSecond >= second) {
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d934      	bls.n	8002250 <runStopwatch+0x80>
		return;
	}
	if (stopwatch->stopwatch_enable == false) {
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	7b1b      	ldrb	r3, [r3, #12]
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d12f      	bne.n	8002254 <runStopwatch+0x84>
		return;
	}
	if (stopwatch->hour == 99) {
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b63      	cmp	r3, #99	@ 0x63
 80021fa:	d103      	bne.n	8002204 <runStopwatch+0x34>
		stopwatch->hour = 0;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e021      	b.n	8002248 <runStopwatch+0x78>
	} else if (stopwatch->minute == 60) {
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b3c      	cmp	r3, #60	@ 0x3c
 800220a:	d10b      	bne.n	8002224 <runStopwatch+0x54>
		stopwatch->hour++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]
		stopwatch->second = 0;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
		stopwatch->minute = 0;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	e011      	b.n	8002248 <runStopwatch+0x78>
	} else if (stopwatch->second == 60) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b3c      	cmp	r3, #60	@ 0x3c
 800222a:	d108      	bne.n	800223e <runStopwatch+0x6e>
		stopwatch->second = 0;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
		stopwatch->minute++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	e004      	b.n	8002248 <runStopwatch+0x78>
	} else {
		stopwatch->second++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]
	}
	*lastSecond = second;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	e002      	b.n	8002256 <runStopwatch+0x86>
		return;
 8002250:	bf00      	nop
 8002252:	e000      	b.n	8002256 <runStopwatch+0x86>
		return;
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <generate_vibration>:
#include "vibration.h"
//uint16_t coil_port[4] = {COILA_GPIO_Port, COILB_GPIO_Port, COILC_GPIO_Port, COILD_GPIO_Port};
//uint16_t coil_pin[4] = {COILA_Pin, COILB_Pin, COILC_Pin, COILD_Pin};
extern void coast_asm_delay(uint32_t milliseconds);

void generate_vibration(void) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2048; i++) {
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	e0eb      	b.n	8002444 <generate_vibration+0x1e4>
		// 1
		int index = i % 8;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	425a      	negs	r2, r3
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	f002 0207 	and.w	r2, r2, #7
 8002278:	bf58      	it	pl
 800227a:	4253      	negpl	r3, r2
 800227c:	603b      	str	r3, [r7, #0]
		if (index == 0) {
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d118      	bne.n	80022b6 <generate_vibration+0x56>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 8002284:	2200      	movs	r2, #0
 8002286:	2120      	movs	r1, #32
 8002288:	4873      	ldr	r0, [pc, #460]	@ (8002458 <generate_vibration+0x1f8>)
 800228a:	f000 fc51 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002294:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002298:	f000 fc4a 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 800229c:	2201      	movs	r2, #1
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	486d      	ldr	r0, [pc, #436]	@ (8002458 <generate_vibration+0x1f8>)
 80022a2:	f000 fc45 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2104      	movs	r1, #4
 80022aa:	486c      	ldr	r0, [pc, #432]	@ (800245c <generate_vibration+0x1fc>)
 80022ac:	f000 fc40 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7fd ff95 	bl	80001e0 <coast_asm_delay>
		}
		// 2
		if (index == 1) {
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d118      	bne.n	80022ee <generate_vibration+0x8e>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 80022bc:	2201      	movs	r2, #1
 80022be:	2120      	movs	r1, #32
 80022c0:	4865      	ldr	r0, [pc, #404]	@ (8002458 <generate_vibration+0x1f8>)
 80022c2:	f000 fc35 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022d0:	f000 fc2e 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	@ 0x80
 80022d8:	485f      	ldr	r0, [pc, #380]	@ (8002458 <generate_vibration+0x1f8>)
 80022da:	f000 fc29 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2104      	movs	r1, #4
 80022e2:	485e      	ldr	r0, [pc, #376]	@ (800245c <generate_vibration+0x1fc>)
 80022e4:	f000 fc24 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7fd ff79 	bl	80001e0 <coast_asm_delay>
		}
		// 3
		if (index == 2) {
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d118      	bne.n	8002326 <generate_vibration+0xc6>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2120      	movs	r1, #32
 80022f8:	4857      	ldr	r0, [pc, #348]	@ (8002458 <generate_vibration+0x1f8>)
 80022fa:	f000 fc19 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002308:	f000 fc12 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	4851      	ldr	r0, [pc, #324]	@ (8002458 <generate_vibration+0x1f8>)
 8002312:	f000 fc0d 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 8002316:	2201      	movs	r2, #1
 8002318:	2104      	movs	r1, #4
 800231a:	4850      	ldr	r0, [pc, #320]	@ (800245c <generate_vibration+0x1fc>)
 800231c:	f000 fc08 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 8002320:	2001      	movs	r0, #1
 8002322:	f7fd ff5d 	bl	80001e0 <coast_asm_delay>
		}
		// 4
		if (index == 3) {
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d118      	bne.n	800235e <generate_vibration+0xfe>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2120      	movs	r1, #32
 8002330:	4849      	ldr	r0, [pc, #292]	@ (8002458 <generate_vibration+0x1f8>)
 8002332:	f000 fbfd 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800233c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002340:	f000 fbf6 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 8002344:	2201      	movs	r2, #1
 8002346:	2180      	movs	r1, #128	@ 0x80
 8002348:	4843      	ldr	r0, [pc, #268]	@ (8002458 <generate_vibration+0x1f8>)
 800234a:	f000 fbf1 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 800234e:	2201      	movs	r2, #1
 8002350:	2104      	movs	r1, #4
 8002352:	4842      	ldr	r0, [pc, #264]	@ (800245c <generate_vibration+0x1fc>)
 8002354:	f000 fbec 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f7fd ff41 	bl	80001e0 <coast_asm_delay>
		}

		// 5
		if (index == 4)  {
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b04      	cmp	r3, #4
 8002362:	d118      	bne.n	8002396 <generate_vibration+0x136>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2120      	movs	r1, #32
 8002368:	483b      	ldr	r0, [pc, #236]	@ (8002458 <generate_vibration+0x1f8>)
 800236a:	f000 fbe1 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002374:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002378:	f000 fbda 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 800237c:	2201      	movs	r2, #1
 800237e:	2180      	movs	r1, #128	@ 0x80
 8002380:	4835      	ldr	r0, [pc, #212]	@ (8002458 <generate_vibration+0x1f8>)
 8002382:	f000 fbd5 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2104      	movs	r1, #4
 800238a:	4834      	ldr	r0, [pc, #208]	@ (800245c <generate_vibration+0x1fc>)
 800238c:	f000 fbd0 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 8002390:	2001      	movs	r0, #1
 8002392:	f7fd ff25 	bl	80001e0 <coast_asm_delay>
		}

		// 6
		if (index == 5) {
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d118      	bne.n	80023ce <generate_vibration+0x16e>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 800239c:	2201      	movs	r2, #1
 800239e:	2120      	movs	r1, #32
 80023a0:	482d      	ldr	r0, [pc, #180]	@ (8002458 <generate_vibration+0x1f8>)
 80023a2:	f000 fbc5 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023b0:	f000 fbbe 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 80023b4:	2200      	movs	r2, #0
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	4827      	ldr	r0, [pc, #156]	@ (8002458 <generate_vibration+0x1f8>)
 80023ba:	f000 fbb9 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2104      	movs	r1, #4
 80023c2:	4826      	ldr	r0, [pc, #152]	@ (800245c <generate_vibration+0x1fc>)
 80023c4:	f000 fbb4 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7fd ff09 	bl	80001e0 <coast_asm_delay>
		}

		// 7
		if (index == 6) {
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b06      	cmp	r3, #6
 80023d2:	d118      	bne.n	8002406 <generate_vibration+0x1a6>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2120      	movs	r1, #32
 80023d8:	481f      	ldr	r0, [pc, #124]	@ (8002458 <generate_vibration+0x1f8>)
 80023da:	f000 fba9 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e8:	f000 fba2 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2180      	movs	r1, #128	@ 0x80
 80023f0:	4819      	ldr	r0, [pc, #100]	@ (8002458 <generate_vibration+0x1f8>)
 80023f2:	f000 fb9d 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 80023f6:	2201      	movs	r2, #1
 80023f8:	2104      	movs	r1, #4
 80023fa:	4818      	ldr	r0, [pc, #96]	@ (800245c <generate_vibration+0x1fc>)
 80023fc:	f000 fb98 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 8002400:	2001      	movs	r0, #1
 8002402:	f7fd feed 	bl	80001e0 <coast_asm_delay>
		}
		// 8
		if (index == 7) {
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b07      	cmp	r3, #7
 800240a:	d118      	bne.n	800243e <generate_vibration+0x1de>
			HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 800240c:	2200      	movs	r2, #0
 800240e:	2120      	movs	r1, #32
 8002410:	4811      	ldr	r0, [pc, #68]	@ (8002458 <generate_vibration+0x1f8>)
 8002412:	f000 fb8d 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800241c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002420:	f000 fb86 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 8002424:	2201      	movs	r2, #1
 8002426:	2180      	movs	r1, #128	@ 0x80
 8002428:	480b      	ldr	r0, [pc, #44]	@ (8002458 <generate_vibration+0x1f8>)
 800242a:	f000 fb81 	bl	8002b30 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 800242e:	2201      	movs	r2, #1
 8002430:	2104      	movs	r1, #4
 8002432:	480a      	ldr	r0, [pc, #40]	@ (800245c <generate_vibration+0x1fc>)
 8002434:	f000 fb7c 	bl	8002b30 <HAL_GPIO_WritePin>
			coast_asm_delay(1);
 8002438:	2001      	movs	r0, #1
 800243a:	f7fd fed1 	bl	80001e0 <coast_asm_delay>
	for (int i = 0; i < 2048; i++) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3301      	adds	r3, #1
 8002442:	607b      	str	r3, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800244a:	f6ff af0f 	blt.w	800226c <generate_vibration+0xc>
		}
	}
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	48000800 	.word	0x48000800
 800245c:	48000400 	.word	0x48000400

08002460 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002498 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002464:	f7ff fa10 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <LoopForever+0x6>)
  ldr r1, =_edata
 800246a:	490d      	ldr	r1, [pc, #52]	@ (80024a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <LoopForever+0xe>)
  movs r3, #0
 800246e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002470:	e002      	b.n	8002478 <LoopCopyDataInit>

08002472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002476:	3304      	adds	r3, #4

08002478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800247c:	d3f9      	bcc.n	8002472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002480:	4c0a      	ldr	r4, [pc, #40]	@ (80024ac <LoopForever+0x16>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002484:	e001      	b.n	800248a <LoopFillZerobss>

08002486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002488:	3204      	adds	r2, #4

0800248a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800248c:	d3fb      	bcc.n	8002486 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248e:	f004 f8db 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002492:	f7fe fbb7 	bl	8000c04 <main>

08002496 <LoopForever>:

LoopForever:
    b LoopForever
 8002496:	e7fe      	b.n	8002496 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002498:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800249c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80024a4:	080070fc 	.word	0x080070fc
  ldr r2, =_sbss
 80024a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80024ac:	20000384 	.word	0x20000384

080024b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024b0:	e7fe      	b.n	80024b0 <ADC1_2_IRQHandler>
	...

080024b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_Init+0x28>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_Init+0x28>)
 80024be:	f043 0310 	orr.w	r3, r3, #16
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 f94f 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff f86c 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 f967 	bl	80027d2 <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f000 f92f 	bl	800277e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	@ (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20000018 	.word	0x20000018
 800253c:	20000014 	.word	0x20000014

08002540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000018 	.word	0x20000018
 8002564:	20000238 	.word	0x20000238

08002568 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;  
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000238 	.word	0x20000238

08002580 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff ffee 	bl	8002568 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffde 	bl	8002568 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000018 	.word	0x20000018

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	@ (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	@ (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	@ (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	@ (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002734:	d301      	bcc.n	800273a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002736:	2301      	movs	r3, #1
 8002738:	e00f      	b.n	800275a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <SysTick_Config+0x40>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002742:	210f      	movs	r1, #15
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f7ff ff8e 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <SysTick_Config+0x40>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <SysTick_Config+0x40>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff29 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002790:	f7ff ff3e 	bl	8002610 <__NVIC_GetPriorityGrouping>
 8002794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ff8e 	bl	80026bc <NVIC_EncodePriority>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff5d 	bl	8002668 <__NVIC_SetPriority>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff31 	bl	800262c <__NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffa2 	bl	8002724 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	e160      	b.n	8002abe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8152 	beq.w	8002ab8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_GPIO_Init+0x40>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d130      	bne.n	800288e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002862:	2201      	movs	r2, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0201 	and.w	r2, r3, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d017      	beq.n	80028ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d123      	bne.n	800291e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	6939      	ldr	r1, [r7, #16]
 800291a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80ac 	beq.w	8002ab8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002960:	4b5e      	ldr	r3, [pc, #376]	@ (8002adc <HAL_GPIO_Init+0x2f0>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a5d      	ldr	r2, [pc, #372]	@ (8002adc <HAL_GPIO_Init+0x2f0>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b5b      	ldr	r3, [pc, #364]	@ (8002adc <HAL_GPIO_Init+0x2f0>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002978:	4a59      	ldr	r2, [pc, #356]	@ (8002ae0 <HAL_GPIO_Init+0x2f4>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029a2:	d025      	beq.n	80029f0 <HAL_GPIO_Init+0x204>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae4 <HAL_GPIO_Init+0x2f8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d01f      	beq.n	80029ec <HAL_GPIO_Init+0x200>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a4e      	ldr	r2, [pc, #312]	@ (8002ae8 <HAL_GPIO_Init+0x2fc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d019      	beq.n	80029e8 <HAL_GPIO_Init+0x1fc>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4d      	ldr	r2, [pc, #308]	@ (8002aec <HAL_GPIO_Init+0x300>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1f8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a4c      	ldr	r2, [pc, #304]	@ (8002af0 <HAL_GPIO_Init+0x304>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1f4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a4b      	ldr	r2, [pc, #300]	@ (8002af4 <HAL_GPIO_Init+0x308>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1f0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a4a      	ldr	r2, [pc, #296]	@ (8002af8 <HAL_GPIO_Init+0x30c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1ec>
 80029d4:	2306      	movs	r3, #6
 80029d6:	e00c      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029d8:	2307      	movs	r3, #7
 80029da:	e00a      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029dc:	2305      	movs	r3, #5
 80029de:	e008      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029e0:	2304      	movs	r3, #4
 80029e2:	e006      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029e4:	2303      	movs	r3, #3
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x206>
 80029f0:	2300      	movs	r3, #0
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a02:	4937      	ldr	r1, [pc, #220]	@ (8002ae0 <HAL_GPIO_Init+0x2f4>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a10:	4b3a      	ldr	r3, [pc, #232]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a34:	4a31      	ldr	r2, [pc, #196]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3a:	4b30      	ldr	r3, [pc, #192]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a5e:	4a27      	ldr	r2, [pc, #156]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a64:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a88:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ab2:	4a12      	ldr	r2, [pc, #72]	@ (8002afc <HAL_GPIO_Init+0x310>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f ae97 	bne.w	80027fc <HAL_GPIO_Init+0x10>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010000 	.word	0x40010000
 8002ae4:	48000400 	.word	0x48000400
 8002ae8:	48000800 	.word	0x48000800
 8002aec:	48000c00 	.word	0x48000c00
 8002af0:	48001000 	.word	0x48001000
 8002af4:	48001400 	.word	0x48001400
 8002af8:	48001800 	.word	0x48001800
 8002afc:	40010400 	.word	0x40010400

08002b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	887b      	ldrh	r3, [r7, #2]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
 8002b1c:	e001      	b.n	8002b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b6a:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fd10 	bl	80005a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40010400 	.word	0x40010400

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ba0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ba2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ba6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f001 b80a 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8161 	beq.w	8002e8e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002bcc:	4bae      	ldr	r3, [pc, #696]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd8:	4bab      	ldr	r3, [pc, #684]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x104>
 8002be4:	4ba8      	ldr	r3, [pc, #672]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bf0:	d150      	bne.n	8002c94 <HAL_RCC_OscConfig+0x104>
 8002bf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bf6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8002c06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c12:	d802      	bhi.n	8002c1a <HAL_RCC_OscConfig+0x8a>
 8002c14:	4b9c      	ldr	r3, [pc, #624]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0xb6>
 8002c1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c1e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002c2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c32:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c36:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c42:	4b91      	ldr	r3, [pc, #580]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c4a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002c4e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002c52:	fa92 f2a2 	rbit	r2, r2
 8002c56:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002c5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c5e:	fab2 f282 	clz	r2, r2
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	f042 0220 	orr.w	r2, r2, #32
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	f002 021f 	and.w	r2, r2, #31
 8002c6e:	2101      	movs	r1, #1
 8002c70:	fa01 f202 	lsl.w	r2, r1, r2
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8108 	beq.w	8002e8c <HAL_RCC_OscConfig+0x2fc>
 8002c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f040 80ff 	bne.w	8002e8c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	f000 bf9b 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x124>
 8002ca6:	4b78      	ldr	r3, [pc, #480]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a77      	ldr	r2, [pc, #476]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e036      	b.n	8002d22 <HAL_RCC_OscConfig+0x192>
 8002cb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x14e>
 8002cc4:	4b70      	ldr	r3, [pc, #448]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6f      	ldr	r2, [pc, #444]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6d      	ldr	r3, [pc, #436]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6c      	ldr	r2, [pc, #432]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e021      	b.n	8002d22 <HAL_RCC_OscConfig+0x192>
 8002cde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x17a>
 8002cf0:	4b65      	ldr	r3, [pc, #404]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a64      	ldr	r2, [pc, #400]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b62      	ldr	r3, [pc, #392]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a61      	ldr	r2, [pc, #388]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e00b      	b.n	8002d22 <HAL_RCC_OscConfig+0x192>
 8002d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b5c      	ldr	r3, [pc, #368]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002d1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d054      	beq.n	8002ddc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7ff fc19 	bl	8002568 <HAL_GetTick>
 8002d36:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7ff fc14 	bl	8002568 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b64      	cmp	r3, #100	@ 0x64
 8002d4a:	d902      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	f000 bf3c 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
 8002d52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d56:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002d66:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d72:	d802      	bhi.n	8002d7a <HAL_RCC_OscConfig+0x1ea>
 8002d74:	4b44      	ldr	r3, [pc, #272]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x216>
 8002d7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d82:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002d8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d92:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d96:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002da2:	4b39      	ldr	r3, [pc, #228]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002daa:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002dae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002db2:	fa92 f2a2 	rbit	r2, r2
 8002db6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002dba:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002dbe:	fab2 f282 	clz	r2, r2
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	f042 0220 	orr.w	r2, r2, #32
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f002 021f 	and.w	r2, r2, #31
 8002dce:	2101      	movs	r1, #1
 8002dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0b0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x1ac>
 8002dda:	e058      	b.n	8002e8e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fbc4 	bl	8002568 <HAL_GetTick>
 8002de0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de6:	f7ff fbbf 	bl	8002568 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d902      	bls.n	8002dfc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	f000 bee7 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
 8002dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e00:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002e10:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e1c:	d802      	bhi.n	8002e24 <HAL_RCC_OscConfig+0x294>
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	e015      	b.n	8002e50 <HAL_RCC_OscConfig+0x2c0>
 8002e24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e28:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002e30:	fa93 f3a3 	rbit	r3, r3
 8002e34:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002e38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e3c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_RCC_OscConfig+0x2f8>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e54:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002e58:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002e5c:	fa92 f2a2 	rbit	r2, r2
 8002e60:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002e64:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f002 021f 	and.w	r2, r2, #31
 8002e78:	2101      	movs	r1, #1
 8002e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1b0      	bne.n	8002de6 <HAL_RCC_OscConfig+0x256>
 8002e84:	e003      	b.n	8002e8e <HAL_RCC_OscConfig+0x2fe>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 816d 	beq.w	800317e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ea4:	4bcd      	ldr	r3, [pc, #820]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00c      	beq.n	8002eca <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002eb0:	4bca      	ldr	r3, [pc, #808]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 030c 	and.w	r3, r3, #12
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d16e      	bne.n	8002f9a <HAL_RCC_OscConfig+0x40a>
 8002ebc:	4bc7      	ldr	r3, [pc, #796]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002ec4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec8:	d167      	bne.n	8002f9a <HAL_RCC_OscConfig+0x40a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002edc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ee8:	d802      	bhi.n	8002ef0 <HAL_RCC_OscConfig+0x360>
 8002eea:	4bbc      	ldr	r3, [pc, #752]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	e013      	b.n	8002f18 <HAL_RCC_OscConfig+0x388>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002f02:	2302      	movs	r3, #2
 8002f04:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002f08:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002f14:	4bb1      	ldr	r3, [pc, #708]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	2202      	movs	r2, #2
 8002f1a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002f1e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002f22:	fa92 f2a2 	rbit	r2, r2
 8002f26:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002f2a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f2e:	fab2 f282 	clz	r2, r2
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	f042 0220 	orr.w	r2, r2, #32
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	f002 021f 	and.w	r2, r2, #31
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3d0>
 8002f4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d002      	beq.n	8002f60 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f000 be35 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b9e      	ldr	r3, [pc, #632]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	21f8      	movs	r1, #248	@ 0xf8
 8002f76:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002f7e:	fa91 f1a1 	rbit	r1, r1
 8002f82:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002f86:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f8a:	fab1 f181 	clz	r1, r1
 8002f8e:	b2c9      	uxtb	r1, r1
 8002f90:	408b      	lsls	r3, r1
 8002f92:	4992      	ldr	r1, [pc, #584]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f98:	e0f1      	b.n	800317e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8083 	beq.w	80030b2 <HAL_RCC_OscConfig+0x522>
 8002fac:	2301      	movs	r3, #1
 8002fae:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002fbe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fac6 	bl	8002568 <HAL_GetTick>
 8002fdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	e00a      	b.n	8002ff8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7ff fac1 	bl	8002568 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	f000 bde9 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800300a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b3f      	cmp	r3, #63	@ 0x3f
 8003016:	d802      	bhi.n	800301e <HAL_RCC_OscConfig+0x48e>
 8003018:	4b70      	ldr	r3, [pc, #448]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e013      	b.n	8003046 <HAL_RCC_OscConfig+0x4b6>
 800301e:	2302      	movs	r3, #2
 8003020:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003036:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003042:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	2202      	movs	r2, #2
 8003048:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800304c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003050:	fa92 f2a2 	rbit	r2, r2
 8003054:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003058:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f002 021f 	and.w	r2, r2, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0b4      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b58      	ldr	r3, [pc, #352]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003084:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	21f8      	movs	r1, #248	@ 0xf8
 800308e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003096:	fa91 f1a1 	rbit	r1, r1
 800309a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800309e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80030a2:	fab1 f181 	clz	r1, r1
 80030a6:	b2c9      	uxtb	r1, r1
 80030a8:	408b      	lsls	r3, r1
 80030aa:	494c      	ldr	r1, [pc, #304]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
 80030b0:	e065      	b.n	800317e <HAL_RCC_OscConfig+0x5ee>
 80030b2:	2301      	movs	r3, #1
 80030b4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80030c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030d2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	461a      	mov	r2, r3
 80030da:	2300      	movs	r3, #0
 80030dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030de:	f7ff fa43 	bl	8002568 <HAL_GetTick>
 80030e2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e00a      	b.n	80030fe <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7ff fa3e 	bl	8002568 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f000 bd66 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
 80030fe:	2302      	movs	r3, #2
 8003100:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003110:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003114:	fab3 f383 	clz	r3, r3
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b3f      	cmp	r3, #63	@ 0x3f
 800311c:	d802      	bhi.n	8003124 <HAL_RCC_OscConfig+0x594>
 800311e:	4b2f      	ldr	r3, [pc, #188]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	e013      	b.n	800314c <HAL_RCC_OscConfig+0x5bc>
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800313c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_OscConfig+0x64c>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	2202      	movs	r2, #2
 800314e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003152:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800315e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003162:	fab2 f282 	clz	r2, r2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f002 021f 	and.w	r2, r2, #31
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f202 	lsl.w	r2, r1, r2
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1b4      	bne.n	80030e8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003182:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8119 	beq.w	80033c6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8082 	beq.w	80032aa <HAL_RCC_OscConfig+0x71a>
 80031a6:	2301      	movs	r3, #1
 80031a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80031b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x650>)
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	461a      	mov	r2, r3
 80031cc:	2301      	movs	r3, #1
 80031ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d0:	f7ff f9ca 	bl	8002568 <HAL_GetTick>
 80031d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d8:	e00f      	b.n	80031fa <HAL_RCC_OscConfig+0x66a>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7ff f9c0 	bl	8002568 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d902      	bls.n	80031fa <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	f000 bce8 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
 80031fa:	2302      	movs	r3, #2
 80031fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003204:	fa93 f2a3 	rbit	r2, r3
 8003208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800320c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800321a:	2202      	movs	r2, #2
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	fa93 f2a3 	rbit	r2, r3
 800322c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003258:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4bb0      	ldr	r3, [pc, #704]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 800325c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003266:	2102      	movs	r1, #2
 8003268:	6019      	str	r1, [r3, #0]
 800326a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800326e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	fa93 f1a3 	rbit	r1, r3
 8003278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003280:	6019      	str	r1, [r3, #0]
  return result;
 8003282:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003286:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d09d      	beq.n	80031e4 <HAL_RCC_OscConfig+0x654>
 80032a8:	e08d      	b.n	80033c6 <HAL_RCC_OscConfig+0x836>
 80032aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032cc:	601a      	str	r2, [r3, #0]
  return result;
 80032ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032d6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	4b8f      	ldr	r3, [pc, #572]	@ (8003520 <HAL_RCC_OscConfig+0x990>)
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	461a      	mov	r2, r3
 80032e8:	2300      	movs	r3, #0
 80032ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7ff f93c 	bl	8002568 <HAL_GetTick>
 80032f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f6:	f7ff f937 	bl	8002568 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d902      	bls.n	800330c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	f000 bc5f 	b.w	8003bca <HAL_RCC_OscConfig+0x103a>
 800330c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003310:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003314:	2202      	movs	r2, #2
 8003316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	fa93 f2a3 	rbit	r2, r3
 8003326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800332a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003338:	2202      	movs	r2, #2
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800334e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003358:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800335c:	2202      	movs	r2, #2
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003364:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f2a3 	rbit	r2, r3
 800336e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003372:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003376:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b68      	ldr	r3, [pc, #416]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 800337a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800337c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003380:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003384:	2102      	movs	r1, #2
 8003386:	6019      	str	r1, [r3, #0]
 8003388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800338c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	fa93 f1a3 	rbit	r1, r3
 8003396:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800339a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800339e:	6019      	str	r1, [r3, #0]
  return result;
 80033a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d197      	bne.n	80032f6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 819c 	beq.w	8003714 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e2:	4b4e      	ldr	r3, [pc, #312]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d116      	bne.n	800341c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ee:	4b4b      	ldr	r3, [pc, #300]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f8:	61d3      	str	r3, [r2, #28]
 80033fa:	4b48      	ldr	r3, [pc, #288]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003414:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <HAL_RCC_OscConfig+0x994>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11a      	bne.n	800345e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003428:	4b3e      	ldr	r3, [pc, #248]	@ (8003524 <HAL_RCC_OscConfig+0x994>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3d      	ldr	r2, [pc, #244]	@ (8003524 <HAL_RCC_OscConfig+0x994>)
 800342e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003432:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003434:	f7ff f898 	bl	8002568 <HAL_GetTick>
 8003438:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e009      	b.n	8003452 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7ff f893 	bl	8002568 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e3bb      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b34      	ldr	r3, [pc, #208]	@ (8003524 <HAL_RCC_OscConfig+0x994>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ef      	beq.n	800343e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003462:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d106      	bne.n	800347c <HAL_RCC_OscConfig+0x8ec>
 800346e:	4b2b      	ldr	r3, [pc, #172]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6213      	str	r3, [r2, #32]
 800347a:	e035      	b.n	80034e8 <HAL_RCC_OscConfig+0x958>
 800347c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003480:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10c      	bne.n	80034a6 <HAL_RCC_OscConfig+0x916>
 800348c:	4b23      	ldr	r3, [pc, #140]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4a22      	ldr	r2, [pc, #136]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	6213      	str	r3, [r2, #32]
 8003498:	4b20      	ldr	r3, [pc, #128]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 800349e:	f023 0304 	bic.w	r3, r3, #4
 80034a2:	6213      	str	r3, [r2, #32]
 80034a4:	e020      	b.n	80034e8 <HAL_RCC_OscConfig+0x958>
 80034a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x940>
 80034b6:	4b19      	ldr	r3, [pc, #100]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4a18      	ldr	r2, [pc, #96]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6213      	str	r3, [r2, #32]
 80034c2:	4b16      	ldr	r3, [pc, #88]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4a15      	ldr	r2, [pc, #84]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6213      	str	r3, [r2, #32]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0x958>
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a11      	ldr	r2, [pc, #68]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	4a0e      	ldr	r2, [pc, #56]	@ (800351c <HAL_RCC_OscConfig+0x98c>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8085 	beq.w	8003604 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fa:	f7ff f835 	bl	8002568 <HAL_GetTick>
 80034fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	e011      	b.n	8003528 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7ff f830 	bl	8002568 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d907      	bls.n	8003528 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e356      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
 800351c:	40021000 	.word	0x40021000
 8003520:	10908120 	.word	0x10908120
 8003524:	40007000 	.word	0x40007000
 8003528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800352c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003530:	2202      	movs	r2, #2
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003538:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003546:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800355c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	fa93 f2a3 	rbit	r2, r3
 8003566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800356e:	601a      	str	r2, [r3, #0]
  return result;
 8003570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003574:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003578:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357a:	fab3 f383 	clz	r3, r3
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <HAL_RCC_OscConfig+0xa00>
 800358a:	4b98      	ldr	r3, [pc, #608]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0xa28>
 8003590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003594:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003598:	2202      	movs	r2, #2
 800359a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ae:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	4b8d      	ldr	r3, [pc, #564]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035c0:	2102      	movs	r1, #2
 80035c2:	6011      	str	r1, [r2, #0]
 80035c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035c8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	fa92 f1a2 	rbit	r1, r2
 80035d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035d6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80035da:	6011      	str	r1, [r2, #0]
  return result;
 80035dc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80035e0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d080      	beq.n	8003504 <HAL_RCC_OscConfig+0x974>
 8003602:	e07d      	b.n	8003700 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fe ffb0 	bl	8002568 <HAL_GetTick>
 8003608:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fe ffab 	bl	8002568 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e2d1      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
 8003626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800362a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800362e:	2202      	movs	r2, #2
 8003630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003636:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003644:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800364e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003652:	2202      	movs	r2, #2
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800365a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	fa93 f2a3 	rbit	r2, r3
 8003664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003668:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800366c:	601a      	str	r2, [r3, #0]
  return result;
 800366e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003672:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003676:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d102      	bne.n	800368e <HAL_RCC_OscConfig+0xafe>
 8003688:	4b58      	ldr	r3, [pc, #352]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	e013      	b.n	80036b6 <HAL_RCC_OscConfig+0xb26>
 800368e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003692:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003696:	2202      	movs	r2, #2
 8003698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	fa93 f2a3 	rbit	r2, r3
 80036a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036ac:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	4b4e      	ldr	r3, [pc, #312]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036ba:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036be:	2102      	movs	r1, #2
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fa92 f1a2 	rbit	r1, r2
 80036d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036d4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80036d8:	6011      	str	r1, [r2, #0]
  return result;
 80036da:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80036de:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	fab2 f282 	clz	r2, r2
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	f002 021f 	and.w	r2, r2, #31
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f202 	lsl.w	r2, r1, r2
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d186      	bne.n	800360e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003700:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b38      	ldr	r3, [pc, #224]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4a37      	ldr	r2, [pc, #220]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003712:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003718:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8251 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	2b08      	cmp	r3, #8
 8003730:	f000 820f 	beq.w	8003b52 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003734:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003738:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b02      	cmp	r3, #2
 8003742:	f040 8165 	bne.w	8003a10 <HAL_RCC_OscConfig+0xe80>
 8003746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800374a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800374e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003758:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003766:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800376a:	601a      	str	r2, [r3, #0]
  return result;
 800376c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003770:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003774:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003780:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	461a      	mov	r2, r3
 8003788:	2300      	movs	r3, #0
 800378a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fe feec 	bl	8002568 <HAL_GetTick>
 8003790:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003794:	e009      	b.n	80037aa <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003796:	f7fe fee7 	bl	8002568 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e20f      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
 80037aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	fa93 f2a3 	rbit	r2, r3
 80037c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037ce:	601a      	str	r2, [r3, #0]
  return result;
 80037d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b3f      	cmp	r3, #63	@ 0x3f
 80037e2:	d805      	bhi.n	80037f0 <HAL_RCC_OscConfig+0xc60>
 80037e4:	4b01      	ldr	r3, [pc, #4]	@ (80037ec <HAL_RCC_OscConfig+0xc5c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	e02a      	b.n	8003840 <HAL_RCC_OscConfig+0xcb0>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80037f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003802:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fa93 f2a3 	rbit	r2, r3
 800380c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003810:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800381e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003828:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	fa93 f2a3 	rbit	r2, r3
 8003832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003836:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	4bca      	ldr	r3, [pc, #808]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003844:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003848:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003852:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	fa92 f1a2 	rbit	r1, r2
 800385c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003860:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003864:	6011      	str	r1, [r2, #0]
  return result;
 8003866:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800386a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	fab2 f282 	clz	r2, r2
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f042 0220 	orr.w	r2, r2, #32
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	f002 021f 	and.w	r2, r2, #31
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d184      	bne.n	8003796 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388c:	4bb6      	ldr	r3, [pc, #728]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 800388e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003890:	f023 020f 	bic.w	r2, r3, #15
 8003894:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003898:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	49b1      	ldr	r1, [pc, #708]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80038a6:	4bb0      	ldr	r3, [pc, #704]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80038ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a19      	ldr	r1, [r3, #32]
 80038ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	430b      	orrs	r3, r1
 80038c8:	49a7      	ldr	r1, [pc, #668]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
 80038ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	fa93 f2a3 	rbit	r2, r3
 80038ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ee:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038f2:	601a      	str	r2, [r3, #0]
  return result;
 80038f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80038fc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fe:	fab3 f383 	clz	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003908:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	461a      	mov	r2, r3
 8003910:	2301      	movs	r3, #1
 8003912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fe28 	bl	8002568 <HAL_GetTick>
 8003918:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	e009      	b.n	8003932 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fe23 	bl	8002568 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e14b      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
 8003932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003936:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800393a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800393e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003944:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	fa93 f2a3 	rbit	r2, r3
 800394e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003952:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003956:	601a      	str	r2, [r3, #0]
  return result;
 8003958:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003960:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003962:	fab3 f383 	clz	r3, r3
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b3f      	cmp	r3, #63	@ 0x3f
 800396a:	d802      	bhi.n	8003972 <HAL_RCC_OscConfig+0xde2>
 800396c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	e027      	b.n	80039c2 <HAL_RCC_OscConfig+0xe32>
 8003972:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003976:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800397a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800397e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003980:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003992:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	4b6a      	ldr	r3, [pc, #424]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039ca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039ce:	6011      	str	r1, [r2, #0]
 80039d0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	fa92 f1a2 	rbit	r1, r2
 80039de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039e2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80039e6:	6011      	str	r1, [r2, #0]
  return result;
 80039e8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80039ec:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d087      	beq.n	800391e <HAL_RCC_OscConfig+0xd8e>
 8003a0e:	e0db      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1038>
 8003a10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	fa93 f2a3 	rbit	r2, r3
 8003a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a34:	601a      	str	r2, [r3, #0]
  return result;
 8003a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a3a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a3e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a4a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	461a      	mov	r2, r3
 8003a52:	2300      	movs	r3, #0
 8003a54:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe fd87 	bl	8002568 <HAL_GetTick>
 8003a5a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	e009      	b.n	8003a74 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe fd82 	bl	8002568 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e0aa      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
 8003a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	fa93 f2a3 	rbit	r2, r3
 8003a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a98:	601a      	str	r2, [r3, #0]
  return result;
 8003a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003aa2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aac:	d802      	bhi.n	8003ab4 <HAL_RCC_OscConfig+0xf24>
 8003aae:	4b2e      	ldr	r3, [pc, #184]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	e027      	b.n	8003b04 <HAL_RCC_OscConfig+0xf74>
 8003ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ad4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ade:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f2a3 	rbit	r2, r3
 8003af6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003afa:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	4b19      	ldr	r3, [pc, #100]	@ (8003b68 <HAL_RCC_OscConfig+0xfd8>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b10:	6011      	str	r1, [r2, #0]
 8003b12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	fa92 f1a2 	rbit	r1, r2
 8003b20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b24:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003b28:	6011      	str	r1, [r2, #0]
  return result;
 8003b2a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b2e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f042 0220 	orr.w	r2, r2, #32
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f002 021f 	and.w	r2, r2, #31
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d187      	bne.n	8003a60 <HAL_RCC_OscConfig+0xed0>
 8003b50:	e03a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d104      	bne.n	8003b6c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e031      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b6c:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_RCC_OscConfig+0x1044>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <HAL_RCC_OscConfig+0x1044>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b80:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d117      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b98:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ba0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003bb0:	f003 020f 	and.w	r2, r3, #15
 8003bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000

08003bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b09e      	sub	sp, #120	@ 0x78
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e154      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b89      	ldr	r3, [pc, #548]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d910      	bls.n	8003c20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b86      	ldr	r3, [pc, #536]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f023 0207 	bic.w	r2, r3, #7
 8003c06:	4984      	ldr	r1, [pc, #528]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b82      	ldr	r3, [pc, #520]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e13c      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4978      	ldr	r1, [pc, #480]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80cd 	beq.w	8003de6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d137      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xec>
 8003c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c58:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c5c:	fa93 f3a3 	rbit	r3, r3
 8003c60:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c6c:	d802      	bhi.n	8003c74 <HAL_RCC_ClockConfig+0x9c>
 8003c6e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	e00f      	b.n	8003c94 <HAL_RCC_ClockConfig+0xbc>
 8003c74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c86:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c88:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c90:	4b62      	ldr	r3, [pc, #392]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c9c:	fa92 f2a2 	rbit	r2, r2
 8003ca0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003ca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f002 021f 	and.w	r2, r2, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d171      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0ea      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d137      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x164>
 8003ccc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ce4:	d802      	bhi.n	8003cec <HAL_RCC_ClockConfig+0x114>
 8003ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	e00f      	b.n	8003d0c <HAL_RCC_ClockConfig+0x134>
 8003cec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d02:	fa93 f3a3 	rbit	r3, r3
 8003d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d08:	4b44      	ldr	r3, [pc, #272]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d10:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d14:	fa92 f2a2 	rbit	r2, r2
 8003d18:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d1c:	fab2 f282 	clz	r2, r2
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f042 0220 	orr.w	r2, r2, #32
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f002 021f 	and.w	r2, r2, #31
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d135      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0ae      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	fab3 f383 	clz	r3, r3
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d52:	d802      	bhi.n	8003d5a <HAL_RCC_ClockConfig+0x182>
 8003d54:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e00d      	b.n	8003d76 <HAL_RCC_ClockConfig+0x19e>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d66:	2302      	movs	r3, #2
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	fa93 f3a3 	rbit	r3, r3
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	4b2a      	ldr	r3, [pc, #168]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	2202      	movs	r2, #2
 8003d78:	61ba      	str	r2, [r7, #24]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	fa92 f2a2 	rbit	r2, r2
 8003d80:	617a      	str	r2, [r7, #20]
  return result;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	fab2 f282 	clz	r2, r2
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	f042 0220 	orr.w	r2, r2, #32
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	f002 021f 	and.w	r2, r2, #31
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e07a      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f023 0203 	bic.w	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	491a      	ldr	r1, [pc, #104]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db6:	f7fe fbd7 	bl	8002568 <HAL_GetTick>
 8003dba:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dbe:	f7fe fbd3 	bl	8002568 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e062      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd4:	4b11      	ldr	r3, [pc, #68]	@ (8003e1c <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 020c 	and.w	r2, r3, #12
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d1eb      	bne.n	8003dbe <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d215      	bcs.n	8003e20 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df4:	4b08      	ldr	r3, [pc, #32]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f023 0207 	bic.w	r2, r3, #7
 8003dfc:	4906      	ldr	r1, [pc, #24]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e04:	4b04      	ldr	r3, [pc, #16]	@ (8003e18 <HAL_RCC_ClockConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d006      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e041      	b.n	8003e9a <HAL_RCC_ClockConfig+0x2c2>
 8003e16:	bf00      	nop
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	491a      	ldr	r1, [pc, #104]	@ (8003ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4912      	ldr	r1, [pc, #72]	@ (8003ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e5e:	f000 f829 	bl	8003eb4 <HAL_RCC_GetSysClockFreq>
 8003e62:	4601      	mov	r1, r0
 8003e64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <HAL_RCC_ClockConfig+0x2cc>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e6c:	22f0      	movs	r2, #240	@ 0xf0
 8003e6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	fa92 f2a2 	rbit	r2, r2
 8003e76:	60fa      	str	r2, [r7, #12]
  return result;
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	fab2 f282 	clz	r2, r2
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	40d3      	lsrs	r3, r2
 8003e82:	4a09      	ldr	r2, [pc, #36]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2d0>)
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	fa21 f303 	lsr.w	r3, r1, r3
 8003e8a:	4a08      	ldr	r2, [pc, #32]	@ (8003eac <HAL_RCC_ClockConfig+0x2d4>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <HAL_RCC_ClockConfig+0x2d8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fb24 	bl	80024e0 <HAL_InitTick>
  
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3778      	adds	r7, #120	@ 0x78
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	08007088 	.word	0x08007088
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	20000014 	.word	0x20000014

08003eb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ece:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d002      	beq.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x30>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x36>
 8003ee2:	e029      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ee6:	613b      	str	r3, [r7, #16]
      break;
 8003ee8:	e029      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	0c9b      	lsrs	r3, r3, #18
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	4a18      	ldr	r2, [pc, #96]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ef4:	5cd3      	ldrb	r3, [r2, r3]
 8003ef6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ef8:	4b14      	ldr	r3, [pc, #80]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	4a15      	ldr	r2, [pc, #84]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f02:	5cd3      	ldrb	r3, [r2, r3]
 8003f04:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f10:	4a0f      	ldr	r2, [pc, #60]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	e007      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f22:	4a0b      	ldr	r2, [pc, #44]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	fb02 f303 	mul.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	613b      	str	r3, [r7, #16]
      break;
 8003f36:	e002      	b.n	8003f3e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f3a:	613b      	str	r3, [r7, #16]
      break;
 8003f3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f3e:	693b      	ldr	r3, [r7, #16]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	08007098 	.word	0x08007098
 8003f58:	080070a8 	.word	0x080070a8

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b092      	sub	sp, #72	@ 0x48
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80d2 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f80:	4b4d      	ldr	r3, [pc, #308]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10e      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	4b4a      	ldr	r3, [pc, #296]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4a49      	ldr	r2, [pc, #292]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	61d3      	str	r3, [r2, #28]
 8003f98:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003faa:	4b44      	ldr	r3, [pc, #272]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d118      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a40      	ldr	r2, [pc, #256]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fad1 	bl	8002568 <HAL_GetTick>
 8003fc6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	e008      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fca:	f7fe facd 	bl	8002568 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b64      	cmp	r3, #100	@ 0x64
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e1d4      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	4b37      	ldr	r3, [pc, #220]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0f0      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe8:	4b33      	ldr	r3, [pc, #204]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8082 	beq.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004002:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004004:	429a      	cmp	r2, r3
 8004006:	d07a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004008:	4b2b      	ldr	r3, [pc, #172]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004012:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004022:	fab3 f383 	clz	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	461a      	mov	r2, r3
 8004032:	2301      	movs	r3, #1
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800403a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	4b1c      	ldr	r3, [pc, #112]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	461a      	mov	r2, r3
 8004056:	2300      	movs	r3, #0
 8004058:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800405a:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d049      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fe fa7d 	bl	8002568 <HAL_GetTick>
 800406e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	e00a      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe fa79 	bl	8002568 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e17e      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004088:	2302      	movs	r3, #2
 800408a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408e:	fa93 f3a3 	rbit	r3, r3
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
 8004094:	2302      	movs	r3, #2
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	61fb      	str	r3, [r7, #28]
  return result;
 80040a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d108      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80040b2:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	e00d      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	10908100 	.word	0x10908100
 80040c4:	2302      	movs	r3, #2
 80040c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	4b9a      	ldr	r3, [pc, #616]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	2202      	movs	r2, #2
 80040d6:	613a      	str	r2, [r7, #16]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	fa92 f2a2 	rbit	r2, r2
 80040de:	60fa      	str	r2, [r7, #12]
  return result;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	fab2 f282 	clz	r2, r2
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	f002 021f 	and.w	r2, r2, #31
 80040f2:	2101      	movs	r1, #1
 80040f4:	fa01 f202 	lsl.w	r2, r1, r2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0b9      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040fe:	4b8f      	ldr	r3, [pc, #572]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	498c      	ldr	r1, [pc, #560]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004110:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004118:	4b88      	ldr	r3, [pc, #544]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4a87      	ldr	r2, [pc, #540]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004122:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004130:	4b82      	ldr	r3, [pc, #520]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	f023 0203 	bic.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	497f      	ldr	r1, [pc, #508]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	4313      	orrs	r3, r2
 8004140:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800414e:	4b7b      	ldr	r3, [pc, #492]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4978      	ldr	r1, [pc, #480]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415c:	4313      	orrs	r3, r2
 800415e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800416c:	4b73      	ldr	r3, [pc, #460]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4970      	ldr	r1, [pc, #448]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418a:	4b6c      	ldr	r3, [pc, #432]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f023 0210 	bic.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4969      	ldr	r1, [pc, #420]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041a8:	4b64      	ldr	r3, [pc, #400]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b4:	4961      	ldr	r1, [pc, #388]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c6:	4b5d      	ldr	r3, [pc, #372]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	f023 0220 	bic.w	r2, r3, #32
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	495a      	ldr	r1, [pc, #360]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e4:	4b55      	ldr	r3, [pc, #340]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	4952      	ldr	r1, [pc, #328]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0308 	and.w	r3, r3, #8
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004202:	4b4e      	ldr	r3, [pc, #312]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	494b      	ldr	r1, [pc, #300]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004220:	4b46      	ldr	r3, [pc, #280]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	4943      	ldr	r1, [pc, #268]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800423e:	4b3f      	ldr	r3, [pc, #252]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	493c      	ldr	r1, [pc, #240]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800425c:	4b37      	ldr	r3, [pc, #220]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	4934      	ldr	r1, [pc, #208]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800427a:	4b30      	ldr	r3, [pc, #192]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	492d      	ldr	r1, [pc, #180]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004288:	4313      	orrs	r3, r2
 800428a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004298:	4b28      	ldr	r3, [pc, #160]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a4:	4925      	ldr	r1, [pc, #148]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80042b6:	4b21      	ldr	r3, [pc, #132]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	491e      	ldr	r1, [pc, #120]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80042d4:	4b19      	ldr	r3, [pc, #100]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	4916      	ldr	r1, [pc, #88]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d008      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80042f2:	4b12      	ldr	r3, [pc, #72]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fe:	490f      	ldr	r1, [pc, #60]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d008      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004314:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431c:	4907      	ldr	r1, [pc, #28]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00c      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800432e:	4b03      	ldr	r3, [pc, #12]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	e002      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000
 8004340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004342:	4913      	ldr	r1, [pc, #76]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004344:	4313      	orrs	r3, r2
 8004346:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004354:	4b0e      	ldr	r3, [pc, #56]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004358:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004360:	490b      	ldr	r1, [pc, #44]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004372:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437e:	4904      	ldr	r1, [pc, #16]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3748      	adds	r7, #72	@ 0x48
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000

08004394 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e073      	b.n	8004492 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7f5b      	ldrb	r3, [r3, #29]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd f91a 	bl	80015f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d055      	beq.n	8004480 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	22ca      	movs	r2, #202	@ 0xca
 80043da:	625a      	str	r2, [r3, #36]	@ 0x24
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2253      	movs	r2, #83	@ 0x53
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fcb7 	bl	8004d58 <RTC_EnterInitMode>
 80043ea:	4603      	mov	r3, r0
 80043ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d12c      	bne.n	800444e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6899      	ldr	r1, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6919      	ldr	r1, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	041a      	lsls	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fcbe 	bl	8004dc6 <RTC_ExitInitMode>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d110      	bne.n	8004476 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004462:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	22ff      	movs	r2, #255	@ 0xff
 800447c:	625a      	str	r2, [r3, #36]	@ 0x24
 800447e:	e001      	b.n	8004484 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800449a:	b590      	push	{r4, r7, lr}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	7f1b      	ldrb	r3, [r3, #28]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_RTC_SetTime+0x1c>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e087      	b.n	80045c6 <HAL_RTC_SetTime+0x12c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2202      	movs	r2, #2
 80044c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d126      	bne.n	8004516 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2200      	movs	r2, #0
 80044da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fc95 	bl	8004e10 <RTC_ByteToBcd2>
 80044e6:	4603      	mov	r3, r0
 80044e8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	785b      	ldrb	r3, [r3, #1]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fc8e 	bl	8004e10 <RTC_ByteToBcd2>
 80044f4:	4603      	mov	r3, r0
 80044f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80044f8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	789b      	ldrb	r3, [r3, #2]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fc86 	bl	8004e10 <RTC_ByteToBcd2>
 8004504:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004506:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	78db      	ldrb	r3, [r3, #3]
 800450e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e018      	b.n	8004548 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2200      	movs	r2, #0
 8004528:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004536:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800453c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	78db      	ldrb	r3, [r3, #3]
 8004542:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	22ca      	movs	r2, #202	@ 0xca
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2253      	movs	r2, #83	@ 0x53
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 fbfd 	bl	8004d58 <RTC_EnterInitMode>
 800455e:	4603      	mov	r3, r0
 8004560:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004562:	7cfb      	ldrb	r3, [r7, #19]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d120      	bne.n	80045aa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004572:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004576:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004586:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 fc10 	bl	8004dc6 <RTC_ExitInitMode>
 80045a6:	4603      	mov	r3, r0
 80045a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	22ff      	movs	r2, #255	@ 0xff
 80045bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	771a      	strb	r2, [r3, #28]

  return status;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd90      	pop	{r4, r7, pc}

080045ce <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b086      	sub	sp, #24
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004600:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004604:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	0d9b      	lsrs	r3, r3, #22
 8004638:	b2db      	uxtb	r3, r3
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d11a      	bne.n	8004680 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fbfc 	bl	8004e4c <RTC_Bcd2ToByte>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	785b      	ldrb	r3, [r3, #1]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fbf3 	bl	8004e4c <RTC_Bcd2ToByte>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	789b      	ldrb	r3, [r3, #2]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fbea 	bl	8004e4c <RTC_Bcd2ToByte>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800468a:	b590      	push	{r4, r7, lr}
 800468c:	b087      	sub	sp, #28
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	7f1b      	ldrb	r3, [r3, #28]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_RTC_SetDate+0x1c>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e071      	b.n	800478a <HAL_RTC_SetDate+0x100>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2202      	movs	r2, #2
 80046b0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10e      	bne.n	80046d6 <HAL_RTC_SetDate+0x4c>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	f003 0310 	and.w	r3, r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	f023 0310 	bic.w	r3, r3, #16
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	330a      	adds	r3, #10
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11c      	bne.n	8004716 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	78db      	ldrb	r3, [r3, #3]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fb95 	bl	8004e10 <RTC_ByteToBcd2>
 80046e6:	4603      	mov	r3, r0
 80046e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	785b      	ldrb	r3, [r3, #1]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fb8e 	bl	8004e10 <RTC_ByteToBcd2>
 80046f4:	4603      	mov	r3, r0
 80046f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80046f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	789b      	ldrb	r3, [r3, #2]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fb86 	bl	8004e10 <RTC_ByteToBcd2>
 8004704:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004706:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e00e      	b.n	8004734 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	78db      	ldrb	r3, [r3, #3]
 800471a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004722:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004728:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	22ca      	movs	r2, #202	@ 0xca
 800473a:	625a      	str	r2, [r3, #36]	@ 0x24
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2253      	movs	r2, #83	@ 0x53
 8004742:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fb07 	bl	8004d58 <RTC_EnterInitMode>
 800474a:	4603      	mov	r3, r0
 800474c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10c      	bne.n	800476e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800475e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004762:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fb2e 	bl	8004dc6 <RTC_ExitInitMode>
 800476a:	4603      	mov	r3, r0
 800476c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800476e:	7cfb      	ldrb	r3, [r7, #19]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	22ff      	movs	r2, #255	@ 0xff
 8004780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]

  return status;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
}
 800478a:	4618      	mov	r0, r3
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd90      	pop	{r4, r7, pc}

08004792 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	0c1b      	lsrs	r3, r3, #16
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	0a1b      	lsrs	r3, r3, #8
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	0b5b      	lsrs	r3, r3, #13
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	78db      	ldrb	r3, [r3, #3]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fb29 	bl	8004e4c <RTC_Bcd2ToByte>
 80047fa:	4603      	mov	r3, r0
 80047fc:	461a      	mov	r2, r3
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	785b      	ldrb	r3, [r3, #1]
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fb20 	bl	8004e4c <RTC_Bcd2ToByte>
 800480c:	4603      	mov	r3, r0
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	789b      	ldrb	r3, [r3, #2]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fb17 	bl	8004e4c <RTC_Bcd2ToByte>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3718      	adds	r7, #24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b089      	sub	sp, #36	@ 0x24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	7f1b      	ldrb	r3, [r3, #28]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d101      	bne.n	8004854 <HAL_RTC_SetAlarm+0x24>
 8004850:	2302      	movs	r3, #2
 8004852:	e113      	b.n	8004a7c <HAL_RTC_SetAlarm+0x24c>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2201      	movs	r2, #1
 8004858:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2202      	movs	r2, #2
 800485e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d137      	bne.n	80048d6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d102      	bne.n	800487a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fac6 	bl	8004e10 <RTC_ByteToBcd2>
 8004884:	4603      	mov	r3, r0
 8004886:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	785b      	ldrb	r3, [r3, #1]
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fabf 	bl	8004e10 <RTC_ByteToBcd2>
 8004892:	4603      	mov	r3, r0
 8004894:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004896:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	789b      	ldrb	r3, [r3, #2]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fab7 	bl	8004e10 <RTC_ByteToBcd2>
 80048a2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80048a4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	78db      	ldrb	r3, [r3, #3]
 80048ac:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80048ae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 faa9 	bl	8004e10 <RTC_ByteToBcd2>
 80048be:	4603      	mov	r3, r0
 80048c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80048c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80048ca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	e023      	b.n	800491e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80048f6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80048fc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004904:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800490c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800490e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004914:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800491a:	4313      	orrs	r3, r2
 800491c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	22ca      	movs	r2, #202	@ 0xca
 8004930:	625a      	str	r2, [r3, #36]	@ 0x24
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2253      	movs	r2, #83	@ 0x53
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004942:	d148      	bne.n	80049d6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004952:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004962:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004974:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004976:	f7fd fdf7 	bl	8002568 <HAL_GetTick>
 800497a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800497c:	e013      	b.n	80049a6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800497e:	f7fd fdf3 	bl	8002568 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800498c:	d90b      	bls.n	80049a6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	22ff      	movs	r2, #255	@ 0xff
 8004994:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2203      	movs	r2, #3
 800499a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e06a      	b.n	8004a7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0e4      	beq.n	800497e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	e047      	b.n	8004a66 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80049e4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004a06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a08:	f7fd fdae 	bl	8002568 <HAL_GetTick>
 8004a0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a0e:	e013      	b.n	8004a38 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a10:	f7fd fdaa 	bl	8002568 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a1e:	d90b      	bls.n	8004a38 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	22ff      	movs	r2, #255	@ 0xff
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2203      	movs	r2, #3
 8004a2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e021      	b.n	8004a7c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0e4      	beq.n	8004a10 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a64:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	22ff      	movs	r2, #255	@ 0xff
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3724      	adds	r7, #36	@ 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd90      	pop	{r4, r7, pc}

08004a84 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a84:	b590      	push	{r4, r7, lr}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004a90:	4b9b      	ldr	r3, [pc, #620]	@ (8004d00 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a9b      	ldr	r2, [pc, #620]	@ (8004d04 <HAL_RTC_SetAlarm_IT+0x280>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	0adb      	lsrs	r3, r3, #11
 8004a9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004aa0:	fb02 f303 	mul.w	r3, r2, r3
 8004aa4:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	7f1b      	ldrb	r3, [r3, #28]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_RTC_SetAlarm_IT+0x36>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e11e      	b.n	8004cf8 <HAL_RTC_SetAlarm_IT+0x274>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d137      	bne.n	8004b3c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2200      	movs	r2, #0
 8004ade:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f993 	bl	8004e10 <RTC_ByteToBcd2>
 8004aea:	4603      	mov	r3, r0
 8004aec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f98c 	bl	8004e10 <RTC_ByteToBcd2>
 8004af8:	4603      	mov	r3, r0
 8004afa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004afc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	789b      	ldrb	r3, [r3, #2]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 f984 	bl	8004e10 <RTC_ByteToBcd2>
 8004b08:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004b0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	78db      	ldrb	r3, [r3, #3]
 8004b12:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004b14:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f976 	bl	8004e10 <RTC_ByteToBcd2>
 8004b24:	4603      	mov	r3, r0
 8004b26:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004b28:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004b30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e023      	b.n	8004b84 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	785b      	ldrb	r3, [r3, #1]
 8004b5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b5c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004b62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	78db      	ldrb	r3, [r3, #3]
 8004b68:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004b6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004b74:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004b7a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	22ca      	movs	r2, #202	@ 0xca
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2253      	movs	r2, #83	@ 0x53
 8004b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba8:	d142      	bne.n	8004c30 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bb8:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004bca:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10b      	bne.n	8004bf0 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	22ff      	movs	r2, #255	@ 0xff
 8004bde:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2203      	movs	r2, #3
 8004be4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e083      	b.n	8004cf8 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0e6      	beq.n	8004bcc <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c1c:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	e04c      	b.n	8004cca <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c3e:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004c50:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004c52:	4b2b      	ldr	r3, [pc, #172]	@ (8004d00 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2b      	ldr	r2, [pc, #172]	@ (8004d04 <HAL_RTC_SetAlarm_IT+0x280>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0adb      	lsrs	r3, r3, #11
 8004c5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	22ff      	movs	r2, #255	@ 0xff
 8004c7a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e035      	b.n	8004cf8 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0e6      	beq.n	8004c68 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cb8:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cc8:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004cca:	4b0f      	ldr	r3, [pc, #60]	@ (8004d08 <HAL_RTC_SetAlarm_IT+0x284>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0e      	ldr	r2, [pc, #56]	@ (8004d08 <HAL_RTC_SetAlarm_IT+0x284>)
 8004cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd4:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <HAL_RTC_SetAlarm_IT+0x284>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4a0b      	ldr	r2, [pc, #44]	@ (8004d08 <HAL_RTC_SetAlarm_IT+0x284>)
 8004cdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	22ff      	movs	r2, #255	@ 0xff
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3724      	adds	r7, #36	@ 0x24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}
 8004d00:	2000000c 	.word	0x2000000c
 8004d04:	10624dd3 	.word	0x10624dd3
 8004d08:	40010400 	.word	0x40010400

08004d0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d54 <HAL_RTC_WaitForSynchro+0x48>)
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d20:	f7fd fc22 	bl	8002568 <HAL_GetTick>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d26:	e009      	b.n	8004d3c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d28:	f7fd fc1e 	bl	8002568 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d36:	d901      	bls.n	8004d3c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e007      	b.n	8004d4c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ee      	beq.n	8004d28 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	0001ff5f 	.word	0x0001ff5f

08004d58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d122      	bne.n	8004dbc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d86:	f7fd fbef 	bl	8002568 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d8c:	e00c      	b.n	8004da8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d8e:	f7fd fbeb 	bl	8002568 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d9c:	d904      	bls.n	8004da8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2204      	movs	r2, #4
 8004da2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <RTC_EnterInitMode+0x64>
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d1e8      	bne.n	8004d8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004de0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff ff8b 	bl	8004d0c <HAL_RTC_WaitForSynchro>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2204      	movs	r2, #4
 8004e00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e1e:	e005      	b.n	8004e2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3301      	adds	r3, #1
 8004e24:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	3b0a      	subs	r3, #10
 8004e2a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	d8f6      	bhi.n	8004e20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	b2db      	uxtb	r3, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	091b      	lsrs	r3, r3, #4
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	79fb      	ldrb	r3, [r7, #7]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	b2db      	uxtb	r3, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e049      	b.n	8004f2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fbc6 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 fdb8 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e04f      	b.n	8004ff0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7a:	d018      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1f      	ldr	r2, [pc, #124]	@ (8005000 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005004 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a1c      	ldr	r2, [pc, #112]	@ (8005008 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIM_Base_Start_IT+0x76>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	@ (8005010 <HAL_TIM_Base_Start_IT+0xd8>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d115      	bne.n	8004fda <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b06      	cmp	r3, #6
 8004fbe:	d015      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0xb4>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fc6:	d011      	beq.n	8004fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	e008      	b.n	8004fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	e000      	b.n	8004fee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40000800 	.word	0x40000800
 8005008:	40013400 	.word	0x40013400
 800500c:	40014000 	.word	0x40014000
 8005010:	40015000 	.word	0x40015000
 8005014:	00010007 	.word	0x00010007

08005018 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e049      	b.n	80050be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f841 	bl	80050c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3304      	adds	r3, #4
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 fcf0 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_TIM_PWM_Start+0x24>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e03c      	b.n	800517a <HAL_TIM_PWM_Start+0x9e>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b04      	cmp	r3, #4
 8005104:	d109      	bne.n	800511a <HAL_TIM_PWM_Start+0x3e>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	bf14      	ite	ne
 8005112:	2301      	movne	r3, #1
 8005114:	2300      	moveq	r3, #0
 8005116:	b2db      	uxtb	r3, r3
 8005118:	e02f      	b.n	800517a <HAL_TIM_PWM_Start+0x9e>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b08      	cmp	r3, #8
 800511e:	d109      	bne.n	8005134 <HAL_TIM_PWM_Start+0x58>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e022      	b.n	800517a <HAL_TIM_PWM_Start+0x9e>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d109      	bne.n	800514e <HAL_TIM_PWM_Start+0x72>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e015      	b.n	800517a <HAL_TIM_PWM_Start+0x9e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b10      	cmp	r3, #16
 8005152:	d109      	bne.n	8005168 <HAL_TIM_PWM_Start+0x8c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e008      	b.n	800517a <HAL_TIM_PWM_Start+0x9e>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0a1      	b.n	80052c6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0xb6>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005190:	e023      	b.n	80051da <HAL_TIM_PWM_Start+0xfe>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b04      	cmp	r3, #4
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0xc6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a0:	e01b      	b.n	80051da <HAL_TIM_PWM_Start+0xfe>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xd6>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	e013      	b.n	80051da <HAL_TIM_PWM_Start+0xfe>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b0c      	cmp	r3, #12
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0xe6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c0:	e00b      	b.n	80051da <HAL_TIM_PWM_Start+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xf6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051d0:	e003      	b.n	80051da <HAL_TIM_PWM_Start+0xfe>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2201      	movs	r2, #1
 80051e0:	6839      	ldr	r1, [r7, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f874 	bl	80062d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a38      	ldr	r2, [pc, #224]	@ (80052d0 <HAL_TIM_PWM_Start+0x1f4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d018      	beq.n	8005224 <HAL_TIM_PWM_Start+0x148>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a37      	ldr	r2, [pc, #220]	@ (80052d4 <HAL_TIM_PWM_Start+0x1f8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d013      	beq.n	8005224 <HAL_TIM_PWM_Start+0x148>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a35      	ldr	r2, [pc, #212]	@ (80052d8 <HAL_TIM_PWM_Start+0x1fc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00e      	beq.n	8005224 <HAL_TIM_PWM_Start+0x148>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a34      	ldr	r2, [pc, #208]	@ (80052dc <HAL_TIM_PWM_Start+0x200>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d009      	beq.n	8005224 <HAL_TIM_PWM_Start+0x148>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a32      	ldr	r2, [pc, #200]	@ (80052e0 <HAL_TIM_PWM_Start+0x204>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d004      	beq.n	8005224 <HAL_TIM_PWM_Start+0x148>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a31      	ldr	r2, [pc, #196]	@ (80052e4 <HAL_TIM_PWM_Start+0x208>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d101      	bne.n	8005228 <HAL_TIM_PWM_Start+0x14c>
 8005224:	2301      	movs	r3, #1
 8005226:	e000      	b.n	800522a <HAL_TIM_PWM_Start+0x14e>
 8005228:	2300      	movs	r3, #0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d007      	beq.n	800523e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800523c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <HAL_TIM_PWM_Start+0x1f4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d01d      	beq.n	8005284 <HAL_TIM_PWM_Start+0x1a8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005250:	d018      	beq.n	8005284 <HAL_TIM_PWM_Start+0x1a8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a24      	ldr	r2, [pc, #144]	@ (80052e8 <HAL_TIM_PWM_Start+0x20c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d013      	beq.n	8005284 <HAL_TIM_PWM_Start+0x1a8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a22      	ldr	r2, [pc, #136]	@ (80052ec <HAL_TIM_PWM_Start+0x210>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_PWM_Start+0x1a8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1a      	ldr	r2, [pc, #104]	@ (80052d4 <HAL_TIM_PWM_Start+0x1f8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_PWM_Start+0x1a8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a18      	ldr	r2, [pc, #96]	@ (80052d8 <HAL_TIM_PWM_Start+0x1fc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_PWM_Start+0x1a8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a19      	ldr	r2, [pc, #100]	@ (80052e4 <HAL_TIM_PWM_Start+0x208>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d115      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	4b19      	ldr	r3, [pc, #100]	@ (80052f0 <HAL_TIM_PWM_Start+0x214>)
 800528c:	4013      	ands	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d015      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x1e6>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529c:	d011      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e008      	b.n	80052c2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	e000      	b.n	80052c4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40013400 	.word	0x40013400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	40015000 	.word	0x40015000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	00010007 	.word	0x00010007

080052f4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 ffe2 	bl	80062d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a40      	ldr	r2, [pc, #256]	@ (8005414 <HAL_TIM_PWM_Stop+0x120>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_TIM_PWM_Stop+0x54>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a3f      	ldr	r2, [pc, #252]	@ (8005418 <HAL_TIM_PWM_Stop+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_TIM_PWM_Stop+0x54>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a3d      	ldr	r2, [pc, #244]	@ (800541c <HAL_TIM_PWM_Stop+0x128>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_TIM_PWM_Stop+0x54>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a3c      	ldr	r2, [pc, #240]	@ (8005420 <HAL_TIM_PWM_Stop+0x12c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_TIM_PWM_Stop+0x54>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a3a      	ldr	r2, [pc, #232]	@ (8005424 <HAL_TIM_PWM_Stop+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_PWM_Stop+0x54>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a39      	ldr	r2, [pc, #228]	@ (8005428 <HAL_TIM_PWM_Stop+0x134>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <HAL_TIM_PWM_Stop+0x58>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <HAL_TIM_PWM_Stop+0x5a>
 800534c:	2300      	movs	r3, #0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d017      	beq.n	8005382 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a1a      	ldr	r2, [r3, #32]
 8005358:	f241 1311 	movw	r3, #4369	@ 0x1111
 800535c:	4013      	ands	r3, r2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <HAL_TIM_PWM_Stop+0x8e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	f240 4344 	movw	r3, #1092	@ 0x444
 800536c:	4013      	ands	r3, r2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d107      	bne.n	8005382 <HAL_TIM_PWM_Stop+0x8e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	f241 1311 	movw	r3, #4369	@ 0x1111
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10f      	bne.n	80053b2 <HAL_TIM_PWM_Stop+0xbe>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1a      	ldr	r2, [r3, #32]
 8005398:	f240 4344 	movw	r3, #1092	@ 0x444
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_PWM_Stop+0xbe>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0201 	bic.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_PWM_Stop+0xce>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c0:	e023      	b.n	800540a <HAL_TIM_PWM_Stop+0x116>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_PWM_Stop+0xde>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d0:	e01b      	b.n	800540a <HAL_TIM_PWM_Stop+0x116>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Stop+0xee>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e0:	e013      	b.n	800540a <HAL_TIM_PWM_Stop+0x116>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Stop+0xfe>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053f0:	e00b      	b.n	800540a <HAL_TIM_PWM_Stop+0x116>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Stop+0x10e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005400:	e003      	b.n	800540a <HAL_TIM_PWM_Stop+0x116>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	40015000 	.word	0x40015000

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01b      	beq.n	8005490 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0202 	mvn.w	r2, #2
 8005460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fac1 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 800547c:	e005      	b.n	800548a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fab3 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fac4 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d020      	beq.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01b      	beq.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa9b 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fa8d 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa9e 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d020      	beq.n	8005528 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0208 	mvn.w	r2, #8
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0303 	and.w	r3, r3, #3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa75 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa67 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fa78 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	d020      	beq.n	8005574 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f003 0310 	and.w	r3, r3, #16
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01b      	beq.n	8005574 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0210 	mvn.w	r2, #16
 8005544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2208      	movs	r2, #8
 800554a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fa4f 	bl	80059fe <HAL_TIM_IC_CaptureCallback>
 8005560:	e005      	b.n	800556e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fa41 	bl	80059ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fa52 	bl	8005a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d007      	beq.n	8005598 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0201 	mvn.w	r2, #1
 8005590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fb fb02 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00c      	beq.n	80055bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 ffcc 	bl	8006554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 ffc4 	bl	8006568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa11 	bl	8005a26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0220 	mvn.w	r2, #32
 8005620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 ff8c 	bl	8006540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800564a:	2302      	movs	r3, #2
 800564c:	e0ff      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b14      	cmp	r3, #20
 800565a:	f200 80f0 	bhi.w	800583e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800565e:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	080056b9 	.word	0x080056b9
 8005668:	0800583f 	.word	0x0800583f
 800566c:	0800583f 	.word	0x0800583f
 8005670:	0800583f 	.word	0x0800583f
 8005674:	080056f9 	.word	0x080056f9
 8005678:	0800583f 	.word	0x0800583f
 800567c:	0800583f 	.word	0x0800583f
 8005680:	0800583f 	.word	0x0800583f
 8005684:	0800573b 	.word	0x0800573b
 8005688:	0800583f 	.word	0x0800583f
 800568c:	0800583f 	.word	0x0800583f
 8005690:	0800583f 	.word	0x0800583f
 8005694:	0800577b 	.word	0x0800577b
 8005698:	0800583f 	.word	0x0800583f
 800569c:	0800583f 	.word	0x0800583f
 80056a0:	0800583f 	.word	0x0800583f
 80056a4:	080057bd 	.word	0x080057bd
 80056a8:	0800583f 	.word	0x0800583f
 80056ac:	0800583f 	.word	0x0800583f
 80056b0:	0800583f 	.word	0x0800583f
 80056b4:	080057fd 	.word	0x080057fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fa66 	bl	8005b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0204 	bic.w	r2, r2, #4
 80056e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6999      	ldr	r1, [r3, #24]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	619a      	str	r2, [r3, #24]
      break;
 80056f6:	e0a5      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fae0 	bl	8005cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	619a      	str	r2, [r3, #24]
      break;
 8005738:	e084      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fb53 	bl	8005dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0208 	orr.w	r2, r2, #8
 8005754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0204 	bic.w	r2, r2, #4
 8005764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69d9      	ldr	r1, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	61da      	str	r2, [r3, #28]
      break;
 8005778:	e064      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fbc5 	bl	8005f10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	021a      	lsls	r2, r3, #8
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	61da      	str	r2, [r3, #28]
      break;
 80057ba:	e043      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fc14 	bl	8005ff0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0208 	orr.w	r2, r2, #8
 80057d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0204 	bic.w	r2, r2, #4
 80057e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691a      	ldr	r2, [r3, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80057fa:	e023      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fc5e 	bl	80060c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	021a      	lsls	r2, r3, #8
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800583c:	e002      	b.n	8005844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
      break;
 8005842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop

08005858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_TIM_ConfigClockSource+0x1c>
 8005870:	2302      	movs	r3, #2
 8005872:	e0b6      	b.n	80059e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800589e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b0:	d03e      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0xd8>
 80058b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058b6:	f200 8087 	bhi.w	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058be:	f000 8086 	beq.w	80059ce <HAL_TIM_ConfigClockSource+0x176>
 80058c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058c6:	d87f      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058c8:	2b70      	cmp	r3, #112	@ 0x70
 80058ca:	d01a      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0xaa>
 80058cc:	2b70      	cmp	r3, #112	@ 0x70
 80058ce:	d87b      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058d0:	2b60      	cmp	r3, #96	@ 0x60
 80058d2:	d050      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x11e>
 80058d4:	2b60      	cmp	r3, #96	@ 0x60
 80058d6:	d877      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058d8:	2b50      	cmp	r3, #80	@ 0x50
 80058da:	d03c      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0xfe>
 80058dc:	2b50      	cmp	r3, #80	@ 0x50
 80058de:	d873      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058e0:	2b40      	cmp	r3, #64	@ 0x40
 80058e2:	d058      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x13e>
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d86f      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058e8:	2b30      	cmp	r3, #48	@ 0x30
 80058ea:	d064      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15e>
 80058ec:	2b30      	cmp	r3, #48	@ 0x30
 80058ee:	d86b      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d060      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15e>
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d867      	bhi.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d05c      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15e>
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d05a      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0x15e>
 8005900:	e062      	b.n	80059c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005912:	f000 fcbd 	bl	8006290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005924:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	609a      	str	r2, [r3, #8]
      break;
 800592e:	e04f      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005940:	f000 fca6 	bl	8006290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005952:	609a      	str	r2, [r3, #8]
      break;
 8005954:	e03c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	461a      	mov	r2, r3
 8005964:	f000 fc1a 	bl	800619c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2150      	movs	r1, #80	@ 0x50
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fc73 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005974:	e02c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005982:	461a      	mov	r2, r3
 8005984:	f000 fc39 	bl	80061fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2160      	movs	r1, #96	@ 0x60
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fc63 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 8005994:	e01c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	461a      	mov	r2, r3
 80059a4:	f000 fbfa 	bl	800619c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2140      	movs	r1, #64	@ 0x40
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fc53 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 80059b4:	e00c      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f000 fc4a 	bl	800625a <TIM_ITRx_SetConfig>
      break;
 80059c6:	e003      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
      break;
 80059cc:	e000      	b.n	80059d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a48      	ldr	r2, [pc, #288]	@ (8005b70 <TIM_Base_SetConfig+0x134>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a5a:	d00f      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a45      	ldr	r2, [pc, #276]	@ (8005b74 <TIM_Base_SetConfig+0x138>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a44      	ldr	r2, [pc, #272]	@ (8005b78 <TIM_Base_SetConfig+0x13c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a43      	ldr	r2, [pc, #268]	@ (8005b7c <TIM_Base_SetConfig+0x140>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_Base_SetConfig+0x40>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a42      	ldr	r2, [pc, #264]	@ (8005b80 <TIM_Base_SetConfig+0x144>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d108      	bne.n	8005a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a37      	ldr	r2, [pc, #220]	@ (8005b70 <TIM_Base_SetConfig+0x134>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01f      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a9c:	d01b      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a34      	ldr	r2, [pc, #208]	@ (8005b74 <TIM_Base_SetConfig+0x138>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d017      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a33      	ldr	r2, [pc, #204]	@ (8005b78 <TIM_Base_SetConfig+0x13c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a32      	ldr	r2, [pc, #200]	@ (8005b7c <TIM_Base_SetConfig+0x140>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00f      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a32      	ldr	r2, [pc, #200]	@ (8005b84 <TIM_Base_SetConfig+0x148>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a31      	ldr	r2, [pc, #196]	@ (8005b88 <TIM_Base_SetConfig+0x14c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a30      	ldr	r2, [pc, #192]	@ (8005b8c <TIM_Base_SetConfig+0x150>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0x9a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b80 <TIM_Base_SetConfig+0x144>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <TIM_Base_SetConfig+0x134>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <TIM_Base_SetConfig+0x100>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a19      	ldr	r2, [pc, #100]	@ (8005b7c <TIM_Base_SetConfig+0x140>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00f      	beq.n	8005b3c <TIM_Base_SetConfig+0x100>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <TIM_Base_SetConfig+0x148>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x100>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <TIM_Base_SetConfig+0x14c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x100>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_Base_SetConfig+0x150>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x100>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a12      	ldr	r2, [pc, #72]	@ (8005b80 <TIM_Base_SetConfig+0x144>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d103      	bne.n	8005b44 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d105      	bne.n	8005b62 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f023 0201 	bic.w	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	611a      	str	r2, [r3, #16]
  }
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40013400 	.word	0x40013400
 8005b80:	40015000 	.word	0x40015000
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800

08005b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0201 	bic.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 0302 	bic.w	r3, r3, #2
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a30      	ldr	r2, [pc, #192]	@ (8005cac <TIM_OC1_SetConfig+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d013      	beq.n	8005c18 <TIM_OC1_SetConfig+0x88>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb0 <TIM_OC1_SetConfig+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00f      	beq.n	8005c18 <TIM_OC1_SetConfig+0x88>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb4 <TIM_OC1_SetConfig+0x124>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00b      	beq.n	8005c18 <TIM_OC1_SetConfig+0x88>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <TIM_OC1_SetConfig+0x128>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d007      	beq.n	8005c18 <TIM_OC1_SetConfig+0x88>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <TIM_OC1_SetConfig+0x12c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d003      	beq.n	8005c18 <TIM_OC1_SetConfig+0x88>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc0 <TIM_OC1_SetConfig+0x130>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d10c      	bne.n	8005c32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0308 	bic.w	r3, r3, #8
 8005c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <TIM_OC1_SetConfig+0x11c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_OC1_SetConfig+0xd2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb0 <TIM_OC1_SetConfig+0x120>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_OC1_SetConfig+0xd2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb4 <TIM_OC1_SetConfig+0x124>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_OC1_SetConfig+0xd2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8005cb8 <TIM_OC1_SetConfig+0x128>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_OC1_SetConfig+0xd2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a19      	ldr	r2, [pc, #100]	@ (8005cbc <TIM_OC1_SetConfig+0x12c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC1_SetConfig+0xd2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a18      	ldr	r2, [pc, #96]	@ (8005cc0 <TIM_OC1_SetConfig+0x130>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d111      	bne.n	8005c86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800
 8005cc0:	40015000 	.word	0x40015000

08005cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f023 0210 	bic.w	r2, r3, #16
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f023 0320 	bic.w	r3, r3, #32
 8005d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd4 <TIM_OC2_SetConfig+0x110>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC2_SetConfig+0x74>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd8 <TIM_OC2_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC2_SetConfig+0x74>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a2a      	ldr	r2, [pc, #168]	@ (8005ddc <TIM_OC2_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d10d      	bne.n	8005d54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a1f      	ldr	r2, [pc, #124]	@ (8005dd4 <TIM_OC2_SetConfig+0x110>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <TIM_OC2_SetConfig+0xc0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd8 <TIM_OC2_SetConfig+0x114>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00f      	beq.n	8005d84 <TIM_OC2_SetConfig+0xc0>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1e      	ldr	r2, [pc, #120]	@ (8005de0 <TIM_OC2_SetConfig+0x11c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <TIM_OC2_SetConfig+0xc0>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005de4 <TIM_OC2_SetConfig+0x120>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d007      	beq.n	8005d84 <TIM_OC2_SetConfig+0xc0>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <TIM_OC2_SetConfig+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_OC2_SetConfig+0xc0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a17      	ldr	r2, [pc, #92]	@ (8005ddc <TIM_OC2_SetConfig+0x118>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d113      	bne.n	8005dac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40015000 	.word	0x40015000
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef8 <TIM_OC3_SetConfig+0x10c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_OC3_SetConfig+0x72>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2a      	ldr	r2, [pc, #168]	@ (8005efc <TIM_OC3_SetConfig+0x110>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_OC3_SetConfig+0x72>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a29      	ldr	r2, [pc, #164]	@ (8005f00 <TIM_OC3_SetConfig+0x114>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d10d      	bne.n	8005e7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef8 <TIM_OC3_SetConfig+0x10c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_OC3_SetConfig+0xbe>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a1d      	ldr	r2, [pc, #116]	@ (8005efc <TIM_OC3_SetConfig+0x110>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_OC3_SetConfig+0xbe>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f04 <TIM_OC3_SetConfig+0x118>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_OC3_SetConfig+0xbe>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <TIM_OC3_SetConfig+0x11c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_OC3_SetConfig+0xbe>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f0c <TIM_OC3_SetConfig+0x120>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_OC3_SetConfig+0xbe>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a16      	ldr	r2, [pc, #88]	@ (8005f00 <TIM_OC3_SetConfig+0x114>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d113      	bne.n	8005ed2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	621a      	str	r2, [r3, #32]
}
 8005eec:	bf00      	nop
 8005eee:	371c      	adds	r7, #28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40013400 	.word	0x40013400
 8005f00:	40015000 	.word	0x40015000
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800

08005f10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	031b      	lsls	r3, r3, #12
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fd8 <TIM_OC4_SetConfig+0xc8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d013      	beq.n	8005f9c <TIM_OC4_SetConfig+0x8c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a19      	ldr	r2, [pc, #100]	@ (8005fdc <TIM_OC4_SetConfig+0xcc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00f      	beq.n	8005f9c <TIM_OC4_SetConfig+0x8c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <TIM_OC4_SetConfig+0xd0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00b      	beq.n	8005f9c <TIM_OC4_SetConfig+0x8c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a17      	ldr	r2, [pc, #92]	@ (8005fe4 <TIM_OC4_SetConfig+0xd4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d007      	beq.n	8005f9c <TIM_OC4_SetConfig+0x8c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a16      	ldr	r2, [pc, #88]	@ (8005fe8 <TIM_OC4_SetConfig+0xd8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC4_SetConfig+0x8c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a15      	ldr	r2, [pc, #84]	@ (8005fec <TIM_OC4_SetConfig+0xdc>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d109      	bne.n	8005fb0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40014400 	.word	0x40014400
 8005fe8:	40014800 	.word	0x40014800
 8005fec:	40015000 	.word	0x40015000

08005ff0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a19      	ldr	r2, [pc, #100]	@ (80060ac <TIM_OC5_SetConfig+0xbc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <TIM_OC5_SetConfig+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a18      	ldr	r2, [pc, #96]	@ (80060b0 <TIM_OC5_SetConfig+0xc0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00f      	beq.n	8006072 <TIM_OC5_SetConfig+0x82>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a17      	ldr	r2, [pc, #92]	@ (80060b4 <TIM_OC5_SetConfig+0xc4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00b      	beq.n	8006072 <TIM_OC5_SetConfig+0x82>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a16      	ldr	r2, [pc, #88]	@ (80060b8 <TIM_OC5_SetConfig+0xc8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d007      	beq.n	8006072 <TIM_OC5_SetConfig+0x82>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a15      	ldr	r2, [pc, #84]	@ (80060bc <TIM_OC5_SetConfig+0xcc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC5_SetConfig+0x82>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a14      	ldr	r2, [pc, #80]	@ (80060c0 <TIM_OC5_SetConfig+0xd0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d109      	bne.n	8006086 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006078:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	621a      	str	r2, [r3, #32]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800
 80060c0:	40015000 	.word	0x40015000

080060c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	021b      	lsls	r3, r3, #8
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800610a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	051b      	lsls	r3, r3, #20
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a1a      	ldr	r2, [pc, #104]	@ (8006184 <TIM_OC6_SetConfig+0xc0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d013      	beq.n	8006148 <TIM_OC6_SetConfig+0x84>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a19      	ldr	r2, [pc, #100]	@ (8006188 <TIM_OC6_SetConfig+0xc4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00f      	beq.n	8006148 <TIM_OC6_SetConfig+0x84>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a18      	ldr	r2, [pc, #96]	@ (800618c <TIM_OC6_SetConfig+0xc8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00b      	beq.n	8006148 <TIM_OC6_SetConfig+0x84>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <TIM_OC6_SetConfig+0xcc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_OC6_SetConfig+0x84>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <TIM_OC6_SetConfig+0xd0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_OC6_SetConfig+0x84>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <TIM_OC6_SetConfig+0xd4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d109      	bne.n	800615c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800614e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	029b      	lsls	r3, r3, #10
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	621a      	str	r2, [r3, #32]
}
 8006176:	bf00      	nop
 8006178:	371c      	adds	r7, #28
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40012c00 	.word	0x40012c00
 8006188:	40013400 	.word	0x40013400
 800618c:	40014000 	.word	0x40014000
 8006190:	40014400 	.word	0x40014400
 8006194:	40014800 	.word	0x40014800
 8006198:	40015000 	.word	0x40015000

0800619c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0201 	bic.w	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f023 030a 	bic.w	r3, r3, #10
 80061d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f023 0210 	bic.w	r2, r3, #16
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	031b      	lsls	r3, r3, #12
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800625a:	b480      	push	{r7}
 800625c:	b085      	sub	sp, #20
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	f043 0307 	orr.w	r3, r3, #7
 800627c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	021a      	lsls	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	609a      	str	r2, [r3, #8]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2201      	movs	r2, #1
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	401a      	ands	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
}
 800630e:	bf00      	nop
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
	...

0800631c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006330:	2302      	movs	r3, #2
 8006332:	e06d      	b.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a30      	ldr	r2, [pc, #192]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2f      	ldr	r2, [pc, #188]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a2d      	ldr	r2, [pc, #180]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d108      	bne.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006378:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1e      	ldr	r2, [pc, #120]	@ (800641c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d01d      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b0:	d018      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00e      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a15      	ldr	r2, [pc, #84]	@ (8006420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d009      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a11      	ldr	r2, [pc, #68]	@ (8006424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10c      	bne.n	80063fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40015000 	.word	0x40015000
 8006428:	40000400 	.word	0x40000400
 800642c:	40000800 	.word	0x40000800
 8006430:	40014000 	.word	0x40014000

08006434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800644c:	2302      	movs	r3, #2
 800644e:	e06a      	b.n	8006526 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4313      	orrs	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a19      	ldr	r2, [pc, #100]	@ (8006534 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d009      	beq.n	80064e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a17      	ldr	r2, [pc, #92]	@ (8006538 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d004      	beq.n	80064e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a16      	ldr	r2, [pc, #88]	@ (800653c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d115      	bne.n	8006514 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	051b      	lsls	r3, r3, #20
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40012c00 	.word	0x40012c00
 8006538:	40013400 	.word	0x40013400
 800653c:	40015000 	.word	0x40015000

08006540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <sniprintf>:
 800657c:	b40c      	push	{r2, r3}
 800657e:	b530      	push	{r4, r5, lr}
 8006580:	4b18      	ldr	r3, [pc, #96]	@ (80065e4 <sniprintf+0x68>)
 8006582:	1e0c      	subs	r4, r1, #0
 8006584:	681d      	ldr	r5, [r3, #0]
 8006586:	b09d      	sub	sp, #116	@ 0x74
 8006588:	da08      	bge.n	800659c <sniprintf+0x20>
 800658a:	238b      	movs	r3, #139	@ 0x8b
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	b01d      	add	sp, #116	@ 0x74
 8006594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006598:	b002      	add	sp, #8
 800659a:	4770      	bx	lr
 800659c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80065aa:	bf14      	ite	ne
 80065ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065b0:	4623      	moveq	r3, r4
 80065b2:	9304      	str	r3, [sp, #16]
 80065b4:	9307      	str	r3, [sp, #28]
 80065b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065ba:	9002      	str	r0, [sp, #8]
 80065bc:	9006      	str	r0, [sp, #24]
 80065be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065c4:	ab21      	add	r3, sp, #132	@ 0x84
 80065c6:	a902      	add	r1, sp, #8
 80065c8:	4628      	mov	r0, r5
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	f000 f9c4 	bl	8006958 <_svfiprintf_r>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	bfbc      	itt	lt
 80065d4:	238b      	movlt	r3, #139	@ 0x8b
 80065d6:	602b      	strlt	r3, [r5, #0]
 80065d8:	2c00      	cmp	r4, #0
 80065da:	d0da      	beq.n	8006592 <sniprintf+0x16>
 80065dc:	9b02      	ldr	r3, [sp, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e7d6      	b.n	8006592 <sniprintf+0x16>
 80065e4:	2000001c 	.word	0x2000001c

080065e8 <siprintf>:
 80065e8:	b40e      	push	{r1, r2, r3}
 80065ea:	b510      	push	{r4, lr}
 80065ec:	b09d      	sub	sp, #116	@ 0x74
 80065ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065f0:	9002      	str	r0, [sp, #8]
 80065f2:	9006      	str	r0, [sp, #24]
 80065f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80065f8:	480a      	ldr	r0, [pc, #40]	@ (8006624 <siprintf+0x3c>)
 80065fa:	9107      	str	r1, [sp, #28]
 80065fc:	9104      	str	r1, [sp, #16]
 80065fe:	490a      	ldr	r1, [pc, #40]	@ (8006628 <siprintf+0x40>)
 8006600:	f853 2b04 	ldr.w	r2, [r3], #4
 8006604:	9105      	str	r1, [sp, #20]
 8006606:	2400      	movs	r4, #0
 8006608:	a902      	add	r1, sp, #8
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006610:	f000 f9a2 	bl	8006958 <_svfiprintf_r>
 8006614:	9b02      	ldr	r3, [sp, #8]
 8006616:	701c      	strb	r4, [r3, #0]
 8006618:	b01d      	add	sp, #116	@ 0x74
 800661a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661e:	b003      	add	sp, #12
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	2000001c 	.word	0x2000001c
 8006628:	ffff0208 	.word	0xffff0208

0800662c <memset>:
 800662c:	4402      	add	r2, r0
 800662e:	4603      	mov	r3, r0
 8006630:	4293      	cmp	r3, r2
 8006632:	d100      	bne.n	8006636 <memset+0xa>
 8006634:	4770      	bx	lr
 8006636:	f803 1b01 	strb.w	r1, [r3], #1
 800663a:	e7f9      	b.n	8006630 <memset+0x4>

0800663c <__errno>:
 800663c:	4b01      	ldr	r3, [pc, #4]	@ (8006644 <__errno+0x8>)
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	2000001c 	.word	0x2000001c

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4d0d      	ldr	r5, [pc, #52]	@ (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	@ (8006684 <__libc_init_array+0x3c>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2600      	movs	r6, #0
 8006654:	42a6      	cmp	r6, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4d0b      	ldr	r5, [pc, #44]	@ (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	@ (800668c <__libc_init_array+0x44>)
 800665c:	f000 fc64 	bl	8006f28 <_init>
 8006660:	1b64      	subs	r4, r4, r5
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2600      	movs	r6, #0
 8006666:	42a6      	cmp	r6, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006670:	4798      	blx	r3
 8006672:	3601      	adds	r6, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f855 3b04 	ldr.w	r3, [r5], #4
 800667a:	4798      	blx	r3
 800667c:	3601      	adds	r6, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	080070f4 	.word	0x080070f4
 8006684:	080070f4 	.word	0x080070f4
 8006688:	080070f4 	.word	0x080070f4
 800668c:	080070f8 	.word	0x080070f8

08006690 <__retarget_lock_acquire_recursive>:
 8006690:	4770      	bx	lr

08006692 <__retarget_lock_release_recursive>:
 8006692:	4770      	bx	lr

08006694 <memcpy>:
 8006694:	440a      	add	r2, r1
 8006696:	4291      	cmp	r1, r2
 8006698:	f100 33ff 	add.w	r3, r0, #4294967295
 800669c:	d100      	bne.n	80066a0 <memcpy+0xc>
 800669e:	4770      	bx	lr
 80066a0:	b510      	push	{r4, lr}
 80066a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066aa:	4291      	cmp	r1, r2
 80066ac:	d1f9      	bne.n	80066a2 <memcpy+0xe>
 80066ae:	bd10      	pop	{r4, pc}

080066b0 <_free_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4605      	mov	r5, r0
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d041      	beq.n	800673c <_free_r+0x8c>
 80066b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066bc:	1f0c      	subs	r4, r1, #4
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfb8      	it	lt
 80066c2:	18e4      	addlt	r4, r4, r3
 80066c4:	f000 f8e0 	bl	8006888 <__malloc_lock>
 80066c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006740 <_free_r+0x90>)
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	b933      	cbnz	r3, 80066dc <_free_r+0x2c>
 80066ce:	6063      	str	r3, [r4, #4]
 80066d0:	6014      	str	r4, [r2, #0]
 80066d2:	4628      	mov	r0, r5
 80066d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d8:	f000 b8dc 	b.w	8006894 <__malloc_unlock>
 80066dc:	42a3      	cmp	r3, r4
 80066de:	d908      	bls.n	80066f2 <_free_r+0x42>
 80066e0:	6820      	ldr	r0, [r4, #0]
 80066e2:	1821      	adds	r1, r4, r0
 80066e4:	428b      	cmp	r3, r1
 80066e6:	bf01      	itttt	eq
 80066e8:	6819      	ldreq	r1, [r3, #0]
 80066ea:	685b      	ldreq	r3, [r3, #4]
 80066ec:	1809      	addeq	r1, r1, r0
 80066ee:	6021      	streq	r1, [r4, #0]
 80066f0:	e7ed      	b.n	80066ce <_free_r+0x1e>
 80066f2:	461a      	mov	r2, r3
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b10b      	cbz	r3, 80066fc <_free_r+0x4c>
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d9fa      	bls.n	80066f2 <_free_r+0x42>
 80066fc:	6811      	ldr	r1, [r2, #0]
 80066fe:	1850      	adds	r0, r2, r1
 8006700:	42a0      	cmp	r0, r4
 8006702:	d10b      	bne.n	800671c <_free_r+0x6c>
 8006704:	6820      	ldr	r0, [r4, #0]
 8006706:	4401      	add	r1, r0
 8006708:	1850      	adds	r0, r2, r1
 800670a:	4283      	cmp	r3, r0
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	d1e0      	bne.n	80066d2 <_free_r+0x22>
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	6053      	str	r3, [r2, #4]
 8006716:	4408      	add	r0, r1
 8006718:	6010      	str	r0, [r2, #0]
 800671a:	e7da      	b.n	80066d2 <_free_r+0x22>
 800671c:	d902      	bls.n	8006724 <_free_r+0x74>
 800671e:	230c      	movs	r3, #12
 8006720:	602b      	str	r3, [r5, #0]
 8006722:	e7d6      	b.n	80066d2 <_free_r+0x22>
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	1821      	adds	r1, r4, r0
 8006728:	428b      	cmp	r3, r1
 800672a:	bf04      	itt	eq
 800672c:	6819      	ldreq	r1, [r3, #0]
 800672e:	685b      	ldreq	r3, [r3, #4]
 8006730:	6063      	str	r3, [r4, #4]
 8006732:	bf04      	itt	eq
 8006734:	1809      	addeq	r1, r1, r0
 8006736:	6021      	streq	r1, [r4, #0]
 8006738:	6054      	str	r4, [r2, #4]
 800673a:	e7ca      	b.n	80066d2 <_free_r+0x22>
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	bf00      	nop
 8006740:	20000380 	.word	0x20000380

08006744 <sbrk_aligned>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	4e0f      	ldr	r6, [pc, #60]	@ (8006784 <sbrk_aligned+0x40>)
 8006748:	460c      	mov	r4, r1
 800674a:	6831      	ldr	r1, [r6, #0]
 800674c:	4605      	mov	r5, r0
 800674e:	b911      	cbnz	r1, 8006756 <sbrk_aligned+0x12>
 8006750:	f000 fba4 	bl	8006e9c <_sbrk_r>
 8006754:	6030      	str	r0, [r6, #0]
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	f000 fb9f 	bl	8006e9c <_sbrk_r>
 800675e:	1c43      	adds	r3, r0, #1
 8006760:	d103      	bne.n	800676a <sbrk_aligned+0x26>
 8006762:	f04f 34ff 	mov.w	r4, #4294967295
 8006766:	4620      	mov	r0, r4
 8006768:	bd70      	pop	{r4, r5, r6, pc}
 800676a:	1cc4      	adds	r4, r0, #3
 800676c:	f024 0403 	bic.w	r4, r4, #3
 8006770:	42a0      	cmp	r0, r4
 8006772:	d0f8      	beq.n	8006766 <sbrk_aligned+0x22>
 8006774:	1a21      	subs	r1, r4, r0
 8006776:	4628      	mov	r0, r5
 8006778:	f000 fb90 	bl	8006e9c <_sbrk_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d1f2      	bne.n	8006766 <sbrk_aligned+0x22>
 8006780:	e7ef      	b.n	8006762 <sbrk_aligned+0x1e>
 8006782:	bf00      	nop
 8006784:	2000037c 	.word	0x2000037c

08006788 <_malloc_r>:
 8006788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678c:	1ccd      	adds	r5, r1, #3
 800678e:	f025 0503 	bic.w	r5, r5, #3
 8006792:	3508      	adds	r5, #8
 8006794:	2d0c      	cmp	r5, #12
 8006796:	bf38      	it	cc
 8006798:	250c      	movcc	r5, #12
 800679a:	2d00      	cmp	r5, #0
 800679c:	4606      	mov	r6, r0
 800679e:	db01      	blt.n	80067a4 <_malloc_r+0x1c>
 80067a0:	42a9      	cmp	r1, r5
 80067a2:	d904      	bls.n	80067ae <_malloc_r+0x26>
 80067a4:	230c      	movs	r3, #12
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	2000      	movs	r0, #0
 80067aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006884 <_malloc_r+0xfc>
 80067b2:	f000 f869 	bl	8006888 <__malloc_lock>
 80067b6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ba:	461c      	mov	r4, r3
 80067bc:	bb44      	cbnz	r4, 8006810 <_malloc_r+0x88>
 80067be:	4629      	mov	r1, r5
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff ffbf 	bl	8006744 <sbrk_aligned>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	4604      	mov	r4, r0
 80067ca:	d158      	bne.n	800687e <_malloc_r+0xf6>
 80067cc:	f8d8 4000 	ldr.w	r4, [r8]
 80067d0:	4627      	mov	r7, r4
 80067d2:	2f00      	cmp	r7, #0
 80067d4:	d143      	bne.n	800685e <_malloc_r+0xd6>
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	d04b      	beq.n	8006872 <_malloc_r+0xea>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	4639      	mov	r1, r7
 80067de:	4630      	mov	r0, r6
 80067e0:	eb04 0903 	add.w	r9, r4, r3
 80067e4:	f000 fb5a 	bl	8006e9c <_sbrk_r>
 80067e8:	4581      	cmp	r9, r0
 80067ea:	d142      	bne.n	8006872 <_malloc_r+0xea>
 80067ec:	6821      	ldr	r1, [r4, #0]
 80067ee:	1a6d      	subs	r5, r5, r1
 80067f0:	4629      	mov	r1, r5
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff ffa6 	bl	8006744 <sbrk_aligned>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d03a      	beq.n	8006872 <_malloc_r+0xea>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	442b      	add	r3, r5
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	f8d8 3000 	ldr.w	r3, [r8]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	bb62      	cbnz	r2, 8006864 <_malloc_r+0xdc>
 800680a:	f8c8 7000 	str.w	r7, [r8]
 800680e:	e00f      	b.n	8006830 <_malloc_r+0xa8>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	1b52      	subs	r2, r2, r5
 8006814:	d420      	bmi.n	8006858 <_malloc_r+0xd0>
 8006816:	2a0b      	cmp	r2, #11
 8006818:	d917      	bls.n	800684a <_malloc_r+0xc2>
 800681a:	1961      	adds	r1, r4, r5
 800681c:	42a3      	cmp	r3, r4
 800681e:	6025      	str	r5, [r4, #0]
 8006820:	bf18      	it	ne
 8006822:	6059      	strne	r1, [r3, #4]
 8006824:	6863      	ldr	r3, [r4, #4]
 8006826:	bf08      	it	eq
 8006828:	f8c8 1000 	streq.w	r1, [r8]
 800682c:	5162      	str	r2, [r4, r5]
 800682e:	604b      	str	r3, [r1, #4]
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f82f 	bl	8006894 <__malloc_unlock>
 8006836:	f104 000b 	add.w	r0, r4, #11
 800683a:	1d23      	adds	r3, r4, #4
 800683c:	f020 0007 	bic.w	r0, r0, #7
 8006840:	1ac2      	subs	r2, r0, r3
 8006842:	bf1c      	itt	ne
 8006844:	1a1b      	subne	r3, r3, r0
 8006846:	50a3      	strne	r3, [r4, r2]
 8006848:	e7af      	b.n	80067aa <_malloc_r+0x22>
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	42a3      	cmp	r3, r4
 800684e:	bf0c      	ite	eq
 8006850:	f8c8 2000 	streq.w	r2, [r8]
 8006854:	605a      	strne	r2, [r3, #4]
 8006856:	e7eb      	b.n	8006830 <_malloc_r+0xa8>
 8006858:	4623      	mov	r3, r4
 800685a:	6864      	ldr	r4, [r4, #4]
 800685c:	e7ae      	b.n	80067bc <_malloc_r+0x34>
 800685e:	463c      	mov	r4, r7
 8006860:	687f      	ldr	r7, [r7, #4]
 8006862:	e7b6      	b.n	80067d2 <_malloc_r+0x4a>
 8006864:	461a      	mov	r2, r3
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	42a3      	cmp	r3, r4
 800686a:	d1fb      	bne.n	8006864 <_malloc_r+0xdc>
 800686c:	2300      	movs	r3, #0
 800686e:	6053      	str	r3, [r2, #4]
 8006870:	e7de      	b.n	8006830 <_malloc_r+0xa8>
 8006872:	230c      	movs	r3, #12
 8006874:	6033      	str	r3, [r6, #0]
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f80c 	bl	8006894 <__malloc_unlock>
 800687c:	e794      	b.n	80067a8 <_malloc_r+0x20>
 800687e:	6005      	str	r5, [r0, #0]
 8006880:	e7d6      	b.n	8006830 <_malloc_r+0xa8>
 8006882:	bf00      	nop
 8006884:	20000380 	.word	0x20000380

08006888 <__malloc_lock>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__malloc_lock+0x8>)
 800688a:	f7ff bf01 	b.w	8006690 <__retarget_lock_acquire_recursive>
 800688e:	bf00      	nop
 8006890:	20000378 	.word	0x20000378

08006894 <__malloc_unlock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_unlock+0x8>)
 8006896:	f7ff befc 	b.w	8006692 <__retarget_lock_release_recursive>
 800689a:	bf00      	nop
 800689c:	20000378 	.word	0x20000378

080068a0 <__ssputs_r>:
 80068a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a4:	688e      	ldr	r6, [r1, #8]
 80068a6:	461f      	mov	r7, r3
 80068a8:	42be      	cmp	r6, r7
 80068aa:	680b      	ldr	r3, [r1, #0]
 80068ac:	4682      	mov	sl, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	4690      	mov	r8, r2
 80068b2:	d82d      	bhi.n	8006910 <__ssputs_r+0x70>
 80068b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068bc:	d026      	beq.n	800690c <__ssputs_r+0x6c>
 80068be:	6965      	ldr	r5, [r4, #20]
 80068c0:	6909      	ldr	r1, [r1, #16]
 80068c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068c6:	eba3 0901 	sub.w	r9, r3, r1
 80068ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068ce:	1c7b      	adds	r3, r7, #1
 80068d0:	444b      	add	r3, r9
 80068d2:	106d      	asrs	r5, r5, #1
 80068d4:	429d      	cmp	r5, r3
 80068d6:	bf38      	it	cc
 80068d8:	461d      	movcc	r5, r3
 80068da:	0553      	lsls	r3, r2, #21
 80068dc:	d527      	bpl.n	800692e <__ssputs_r+0x8e>
 80068de:	4629      	mov	r1, r5
 80068e0:	f7ff ff52 	bl	8006788 <_malloc_r>
 80068e4:	4606      	mov	r6, r0
 80068e6:	b360      	cbz	r0, 8006942 <__ssputs_r+0xa2>
 80068e8:	6921      	ldr	r1, [r4, #16]
 80068ea:	464a      	mov	r2, r9
 80068ec:	f7ff fed2 	bl	8006694 <memcpy>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	6126      	str	r6, [r4, #16]
 80068fe:	6165      	str	r5, [r4, #20]
 8006900:	444e      	add	r6, r9
 8006902:	eba5 0509 	sub.w	r5, r5, r9
 8006906:	6026      	str	r6, [r4, #0]
 8006908:	60a5      	str	r5, [r4, #8]
 800690a:	463e      	mov	r6, r7
 800690c:	42be      	cmp	r6, r7
 800690e:	d900      	bls.n	8006912 <__ssputs_r+0x72>
 8006910:	463e      	mov	r6, r7
 8006912:	6820      	ldr	r0, [r4, #0]
 8006914:	4632      	mov	r2, r6
 8006916:	4641      	mov	r1, r8
 8006918:	f000 faa6 	bl	8006e68 <memmove>
 800691c:	68a3      	ldr	r3, [r4, #8]
 800691e:	1b9b      	subs	r3, r3, r6
 8006920:	60a3      	str	r3, [r4, #8]
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	4433      	add	r3, r6
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	2000      	movs	r0, #0
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	462a      	mov	r2, r5
 8006930:	f000 fac4 	bl	8006ebc <_realloc_r>
 8006934:	4606      	mov	r6, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	d1e0      	bne.n	80068fc <__ssputs_r+0x5c>
 800693a:	6921      	ldr	r1, [r4, #16]
 800693c:	4650      	mov	r0, sl
 800693e:	f7ff feb7 	bl	80066b0 <_free_r>
 8006942:	230c      	movs	r3, #12
 8006944:	f8ca 3000 	str.w	r3, [sl]
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	e7e9      	b.n	800692a <__ssputs_r+0x8a>
	...

08006958 <_svfiprintf_r>:
 8006958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695c:	4698      	mov	r8, r3
 800695e:	898b      	ldrh	r3, [r1, #12]
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	b09d      	sub	sp, #116	@ 0x74
 8006964:	4607      	mov	r7, r0
 8006966:	460d      	mov	r5, r1
 8006968:	4614      	mov	r4, r2
 800696a:	d510      	bpl.n	800698e <_svfiprintf_r+0x36>
 800696c:	690b      	ldr	r3, [r1, #16]
 800696e:	b973      	cbnz	r3, 800698e <_svfiprintf_r+0x36>
 8006970:	2140      	movs	r1, #64	@ 0x40
 8006972:	f7ff ff09 	bl	8006788 <_malloc_r>
 8006976:	6028      	str	r0, [r5, #0]
 8006978:	6128      	str	r0, [r5, #16]
 800697a:	b930      	cbnz	r0, 800698a <_svfiprintf_r+0x32>
 800697c:	230c      	movs	r3, #12
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	f04f 30ff 	mov.w	r0, #4294967295
 8006984:	b01d      	add	sp, #116	@ 0x74
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	2340      	movs	r3, #64	@ 0x40
 800698c:	616b      	str	r3, [r5, #20]
 800698e:	2300      	movs	r3, #0
 8006990:	9309      	str	r3, [sp, #36]	@ 0x24
 8006992:	2320      	movs	r3, #32
 8006994:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006998:	f8cd 800c 	str.w	r8, [sp, #12]
 800699c:	2330      	movs	r3, #48	@ 0x30
 800699e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b3c <_svfiprintf_r+0x1e4>
 80069a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069a6:	f04f 0901 	mov.w	r9, #1
 80069aa:	4623      	mov	r3, r4
 80069ac:	469a      	mov	sl, r3
 80069ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069b2:	b10a      	cbz	r2, 80069b8 <_svfiprintf_r+0x60>
 80069b4:	2a25      	cmp	r2, #37	@ 0x25
 80069b6:	d1f9      	bne.n	80069ac <_svfiprintf_r+0x54>
 80069b8:	ebba 0b04 	subs.w	fp, sl, r4
 80069bc:	d00b      	beq.n	80069d6 <_svfiprintf_r+0x7e>
 80069be:	465b      	mov	r3, fp
 80069c0:	4622      	mov	r2, r4
 80069c2:	4629      	mov	r1, r5
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff ff6b 	bl	80068a0 <__ssputs_r>
 80069ca:	3001      	adds	r0, #1
 80069cc:	f000 80a7 	beq.w	8006b1e <_svfiprintf_r+0x1c6>
 80069d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069d2:	445a      	add	r2, fp
 80069d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80069d6:	f89a 3000 	ldrb.w	r3, [sl]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 809f 	beq.w	8006b1e <_svfiprintf_r+0x1c6>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ea:	f10a 0a01 	add.w	sl, sl, #1
 80069ee:	9304      	str	r3, [sp, #16]
 80069f0:	9307      	str	r3, [sp, #28]
 80069f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80069f8:	4654      	mov	r4, sl
 80069fa:	2205      	movs	r2, #5
 80069fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a00:	484e      	ldr	r0, [pc, #312]	@ (8006b3c <_svfiprintf_r+0x1e4>)
 8006a02:	f7f9 fc05 	bl	8000210 <memchr>
 8006a06:	9a04      	ldr	r2, [sp, #16]
 8006a08:	b9d8      	cbnz	r0, 8006a42 <_svfiprintf_r+0xea>
 8006a0a:	06d0      	lsls	r0, r2, #27
 8006a0c:	bf44      	itt	mi
 8006a0e:	2320      	movmi	r3, #32
 8006a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a14:	0711      	lsls	r1, r2, #28
 8006a16:	bf44      	itt	mi
 8006a18:	232b      	movmi	r3, #43	@ 0x2b
 8006a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a24:	d015      	beq.n	8006a52 <_svfiprintf_r+0xfa>
 8006a26:	9a07      	ldr	r2, [sp, #28]
 8006a28:	4654      	mov	r4, sl
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f04f 0c0a 	mov.w	ip, #10
 8006a30:	4621      	mov	r1, r4
 8006a32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a36:	3b30      	subs	r3, #48	@ 0x30
 8006a38:	2b09      	cmp	r3, #9
 8006a3a:	d94b      	bls.n	8006ad4 <_svfiprintf_r+0x17c>
 8006a3c:	b1b0      	cbz	r0, 8006a6c <_svfiprintf_r+0x114>
 8006a3e:	9207      	str	r2, [sp, #28]
 8006a40:	e014      	b.n	8006a6c <_svfiprintf_r+0x114>
 8006a42:	eba0 0308 	sub.w	r3, r0, r8
 8006a46:	fa09 f303 	lsl.w	r3, r9, r3
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	46a2      	mov	sl, r4
 8006a50:	e7d2      	b.n	80069f8 <_svfiprintf_r+0xa0>
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	1d19      	adds	r1, r3, #4
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	9103      	str	r1, [sp, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bfbb      	ittet	lt
 8006a5e:	425b      	neglt	r3, r3
 8006a60:	f042 0202 	orrlt.w	r2, r2, #2
 8006a64:	9307      	strge	r3, [sp, #28]
 8006a66:	9307      	strlt	r3, [sp, #28]
 8006a68:	bfb8      	it	lt
 8006a6a:	9204      	strlt	r2, [sp, #16]
 8006a6c:	7823      	ldrb	r3, [r4, #0]
 8006a6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a70:	d10a      	bne.n	8006a88 <_svfiprintf_r+0x130>
 8006a72:	7863      	ldrb	r3, [r4, #1]
 8006a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a76:	d132      	bne.n	8006ade <_svfiprintf_r+0x186>
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	1d1a      	adds	r2, r3, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	9203      	str	r2, [sp, #12]
 8006a80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a84:	3402      	adds	r4, #2
 8006a86:	9305      	str	r3, [sp, #20]
 8006a88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b4c <_svfiprintf_r+0x1f4>
 8006a8c:	7821      	ldrb	r1, [r4, #0]
 8006a8e:	2203      	movs	r2, #3
 8006a90:	4650      	mov	r0, sl
 8006a92:	f7f9 fbbd 	bl	8000210 <memchr>
 8006a96:	b138      	cbz	r0, 8006aa8 <_svfiprintf_r+0x150>
 8006a98:	9b04      	ldr	r3, [sp, #16]
 8006a9a:	eba0 000a 	sub.w	r0, r0, sl
 8006a9e:	2240      	movs	r2, #64	@ 0x40
 8006aa0:	4082      	lsls	r2, r0
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	3401      	adds	r4, #1
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aac:	4824      	ldr	r0, [pc, #144]	@ (8006b40 <_svfiprintf_r+0x1e8>)
 8006aae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ab2:	2206      	movs	r2, #6
 8006ab4:	f7f9 fbac 	bl	8000210 <memchr>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d036      	beq.n	8006b2a <_svfiprintf_r+0x1d2>
 8006abc:	4b21      	ldr	r3, [pc, #132]	@ (8006b44 <_svfiprintf_r+0x1ec>)
 8006abe:	bb1b      	cbnz	r3, 8006b08 <_svfiprintf_r+0x1b0>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	3307      	adds	r3, #7
 8006ac4:	f023 0307 	bic.w	r3, r3, #7
 8006ac8:	3308      	adds	r3, #8
 8006aca:	9303      	str	r3, [sp, #12]
 8006acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ace:	4433      	add	r3, r6
 8006ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad2:	e76a      	b.n	80069aa <_svfiprintf_r+0x52>
 8006ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ad8:	460c      	mov	r4, r1
 8006ada:	2001      	movs	r0, #1
 8006adc:	e7a8      	b.n	8006a30 <_svfiprintf_r+0xd8>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	3401      	adds	r4, #1
 8006ae2:	9305      	str	r3, [sp, #20]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f04f 0c0a 	mov.w	ip, #10
 8006aea:	4620      	mov	r0, r4
 8006aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af0:	3a30      	subs	r2, #48	@ 0x30
 8006af2:	2a09      	cmp	r2, #9
 8006af4:	d903      	bls.n	8006afe <_svfiprintf_r+0x1a6>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0c6      	beq.n	8006a88 <_svfiprintf_r+0x130>
 8006afa:	9105      	str	r1, [sp, #20]
 8006afc:	e7c4      	b.n	8006a88 <_svfiprintf_r+0x130>
 8006afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b02:	4604      	mov	r4, r0
 8006b04:	2301      	movs	r3, #1
 8006b06:	e7f0      	b.n	8006aea <_svfiprintf_r+0x192>
 8006b08:	ab03      	add	r3, sp, #12
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b48 <_svfiprintf_r+0x1f0>)
 8006b10:	a904      	add	r1, sp, #16
 8006b12:	4638      	mov	r0, r7
 8006b14:	f3af 8000 	nop.w
 8006b18:	1c42      	adds	r2, r0, #1
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	d1d6      	bne.n	8006acc <_svfiprintf_r+0x174>
 8006b1e:	89ab      	ldrh	r3, [r5, #12]
 8006b20:	065b      	lsls	r3, r3, #25
 8006b22:	f53f af2d 	bmi.w	8006980 <_svfiprintf_r+0x28>
 8006b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b28:	e72c      	b.n	8006984 <_svfiprintf_r+0x2c>
 8006b2a:	ab03      	add	r3, sp, #12
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	462a      	mov	r2, r5
 8006b30:	4b05      	ldr	r3, [pc, #20]	@ (8006b48 <_svfiprintf_r+0x1f0>)
 8006b32:	a904      	add	r1, sp, #16
 8006b34:	4638      	mov	r0, r7
 8006b36:	f000 f879 	bl	8006c2c <_printf_i>
 8006b3a:	e7ed      	b.n	8006b18 <_svfiprintf_r+0x1c0>
 8006b3c:	080070b8 	.word	0x080070b8
 8006b40:	080070c2 	.word	0x080070c2
 8006b44:	00000000 	.word	0x00000000
 8006b48:	080068a1 	.word	0x080068a1
 8006b4c:	080070be 	.word	0x080070be

08006b50 <_printf_common>:
 8006b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b54:	4616      	mov	r6, r2
 8006b56:	4698      	mov	r8, r3
 8006b58:	688a      	ldr	r2, [r1, #8]
 8006b5a:	690b      	ldr	r3, [r1, #16]
 8006b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	bfb8      	it	lt
 8006b64:	4613      	movlt	r3, r2
 8006b66:	6033      	str	r3, [r6, #0]
 8006b68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	b10a      	cbz	r2, 8006b76 <_printf_common+0x26>
 8006b72:	3301      	adds	r3, #1
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	6823      	ldr	r3, [r4, #0]
 8006b78:	0699      	lsls	r1, r3, #26
 8006b7a:	bf42      	ittt	mi
 8006b7c:	6833      	ldrmi	r3, [r6, #0]
 8006b7e:	3302      	addmi	r3, #2
 8006b80:	6033      	strmi	r3, [r6, #0]
 8006b82:	6825      	ldr	r5, [r4, #0]
 8006b84:	f015 0506 	ands.w	r5, r5, #6
 8006b88:	d106      	bne.n	8006b98 <_printf_common+0x48>
 8006b8a:	f104 0a19 	add.w	sl, r4, #25
 8006b8e:	68e3      	ldr	r3, [r4, #12]
 8006b90:	6832      	ldr	r2, [r6, #0]
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	42ab      	cmp	r3, r5
 8006b96:	dc26      	bgt.n	8006be6 <_printf_common+0x96>
 8006b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b9c:	6822      	ldr	r2, [r4, #0]
 8006b9e:	3b00      	subs	r3, #0
 8006ba0:	bf18      	it	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	0692      	lsls	r2, r2, #26
 8006ba6:	d42b      	bmi.n	8006c00 <_printf_common+0xb0>
 8006ba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bac:	4641      	mov	r1, r8
 8006bae:	4638      	mov	r0, r7
 8006bb0:	47c8      	blx	r9
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d01e      	beq.n	8006bf4 <_printf_common+0xa4>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	f003 0306 	and.w	r3, r3, #6
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	bf02      	ittt	eq
 8006bc2:	68e5      	ldreq	r5, [r4, #12]
 8006bc4:	6833      	ldreq	r3, [r6, #0]
 8006bc6:	1aed      	subeq	r5, r5, r3
 8006bc8:	68a3      	ldr	r3, [r4, #8]
 8006bca:	bf0c      	ite	eq
 8006bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd0:	2500      	movne	r5, #0
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	bfc4      	itt	gt
 8006bd6:	1a9b      	subgt	r3, r3, r2
 8006bd8:	18ed      	addgt	r5, r5, r3
 8006bda:	2600      	movs	r6, #0
 8006bdc:	341a      	adds	r4, #26
 8006bde:	42b5      	cmp	r5, r6
 8006be0:	d11a      	bne.n	8006c18 <_printf_common+0xc8>
 8006be2:	2000      	movs	r0, #0
 8006be4:	e008      	b.n	8006bf8 <_printf_common+0xa8>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4652      	mov	r2, sl
 8006bea:	4641      	mov	r1, r8
 8006bec:	4638      	mov	r0, r7
 8006bee:	47c8      	blx	r9
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d103      	bne.n	8006bfc <_printf_common+0xac>
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfc:	3501      	adds	r5, #1
 8006bfe:	e7c6      	b.n	8006b8e <_printf_common+0x3e>
 8006c00:	18e1      	adds	r1, r4, r3
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	2030      	movs	r0, #48	@ 0x30
 8006c06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c0a:	4422      	add	r2, r4
 8006c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c14:	3302      	adds	r3, #2
 8006c16:	e7c7      	b.n	8006ba8 <_printf_common+0x58>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c8      	blx	r9
 8006c22:	3001      	adds	r0, #1
 8006c24:	d0e6      	beq.n	8006bf4 <_printf_common+0xa4>
 8006c26:	3601      	adds	r6, #1
 8006c28:	e7d9      	b.n	8006bde <_printf_common+0x8e>
	...

08006c2c <_printf_i>:
 8006c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c30:	7e0f      	ldrb	r7, [r1, #24]
 8006c32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c34:	2f78      	cmp	r7, #120	@ 0x78
 8006c36:	4691      	mov	r9, r2
 8006c38:	4680      	mov	r8, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	469a      	mov	sl, r3
 8006c3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c42:	d807      	bhi.n	8006c54 <_printf_i+0x28>
 8006c44:	2f62      	cmp	r7, #98	@ 0x62
 8006c46:	d80a      	bhi.n	8006c5e <_printf_i+0x32>
 8006c48:	2f00      	cmp	r7, #0
 8006c4a:	f000 80d1 	beq.w	8006df0 <_printf_i+0x1c4>
 8006c4e:	2f58      	cmp	r7, #88	@ 0x58
 8006c50:	f000 80b8 	beq.w	8006dc4 <_printf_i+0x198>
 8006c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c5c:	e03a      	b.n	8006cd4 <_printf_i+0xa8>
 8006c5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c62:	2b15      	cmp	r3, #21
 8006c64:	d8f6      	bhi.n	8006c54 <_printf_i+0x28>
 8006c66:	a101      	add	r1, pc, #4	@ (adr r1, 8006c6c <_printf_i+0x40>)
 8006c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c6c:	08006cc5 	.word	0x08006cc5
 8006c70:	08006cd9 	.word	0x08006cd9
 8006c74:	08006c55 	.word	0x08006c55
 8006c78:	08006c55 	.word	0x08006c55
 8006c7c:	08006c55 	.word	0x08006c55
 8006c80:	08006c55 	.word	0x08006c55
 8006c84:	08006cd9 	.word	0x08006cd9
 8006c88:	08006c55 	.word	0x08006c55
 8006c8c:	08006c55 	.word	0x08006c55
 8006c90:	08006c55 	.word	0x08006c55
 8006c94:	08006c55 	.word	0x08006c55
 8006c98:	08006dd7 	.word	0x08006dd7
 8006c9c:	08006d03 	.word	0x08006d03
 8006ca0:	08006d91 	.word	0x08006d91
 8006ca4:	08006c55 	.word	0x08006c55
 8006ca8:	08006c55 	.word	0x08006c55
 8006cac:	08006df9 	.word	0x08006df9
 8006cb0:	08006c55 	.word	0x08006c55
 8006cb4:	08006d03 	.word	0x08006d03
 8006cb8:	08006c55 	.word	0x08006c55
 8006cbc:	08006c55 	.word	0x08006c55
 8006cc0:	08006d99 	.word	0x08006d99
 8006cc4:	6833      	ldr	r3, [r6, #0]
 8006cc6:	1d1a      	adds	r2, r3, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6032      	str	r2, [r6, #0]
 8006ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e09c      	b.n	8006e12 <_printf_i+0x1e6>
 8006cd8:	6833      	ldr	r3, [r6, #0]
 8006cda:	6820      	ldr	r0, [r4, #0]
 8006cdc:	1d19      	adds	r1, r3, #4
 8006cde:	6031      	str	r1, [r6, #0]
 8006ce0:	0606      	lsls	r6, r0, #24
 8006ce2:	d501      	bpl.n	8006ce8 <_printf_i+0xbc>
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	e003      	b.n	8006cf0 <_printf_i+0xc4>
 8006ce8:	0645      	lsls	r5, r0, #25
 8006cea:	d5fb      	bpl.n	8006ce4 <_printf_i+0xb8>
 8006cec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	da03      	bge.n	8006cfc <_printf_i+0xd0>
 8006cf4:	232d      	movs	r3, #45	@ 0x2d
 8006cf6:	426d      	negs	r5, r5
 8006cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cfc:	4858      	ldr	r0, [pc, #352]	@ (8006e60 <_printf_i+0x234>)
 8006cfe:	230a      	movs	r3, #10
 8006d00:	e011      	b.n	8006d26 <_printf_i+0xfa>
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	0608      	lsls	r0, r1, #24
 8006d08:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d0c:	d402      	bmi.n	8006d14 <_printf_i+0xe8>
 8006d0e:	0649      	lsls	r1, r1, #25
 8006d10:	bf48      	it	mi
 8006d12:	b2ad      	uxthmi	r5, r5
 8006d14:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d16:	4852      	ldr	r0, [pc, #328]	@ (8006e60 <_printf_i+0x234>)
 8006d18:	6033      	str	r3, [r6, #0]
 8006d1a:	bf14      	ite	ne
 8006d1c:	230a      	movne	r3, #10
 8006d1e:	2308      	moveq	r3, #8
 8006d20:	2100      	movs	r1, #0
 8006d22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d26:	6866      	ldr	r6, [r4, #4]
 8006d28:	60a6      	str	r6, [r4, #8]
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	db05      	blt.n	8006d3a <_printf_i+0x10e>
 8006d2e:	6821      	ldr	r1, [r4, #0]
 8006d30:	432e      	orrs	r6, r5
 8006d32:	f021 0104 	bic.w	r1, r1, #4
 8006d36:	6021      	str	r1, [r4, #0]
 8006d38:	d04b      	beq.n	8006dd2 <_printf_i+0x1a6>
 8006d3a:	4616      	mov	r6, r2
 8006d3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d40:	fb03 5711 	mls	r7, r3, r1, r5
 8006d44:	5dc7      	ldrb	r7, [r0, r7]
 8006d46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d4a:	462f      	mov	r7, r5
 8006d4c:	42bb      	cmp	r3, r7
 8006d4e:	460d      	mov	r5, r1
 8006d50:	d9f4      	bls.n	8006d3c <_printf_i+0x110>
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d10b      	bne.n	8006d6e <_printf_i+0x142>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	07df      	lsls	r7, r3, #31
 8006d5a:	d508      	bpl.n	8006d6e <_printf_i+0x142>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	6861      	ldr	r1, [r4, #4]
 8006d60:	4299      	cmp	r1, r3
 8006d62:	bfde      	ittt	le
 8006d64:	2330      	movle	r3, #48	@ 0x30
 8006d66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d6e:	1b92      	subs	r2, r2, r6
 8006d70:	6122      	str	r2, [r4, #16]
 8006d72:	f8cd a000 	str.w	sl, [sp]
 8006d76:	464b      	mov	r3, r9
 8006d78:	aa03      	add	r2, sp, #12
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	f7ff fee7 	bl	8006b50 <_printf_common>
 8006d82:	3001      	adds	r0, #1
 8006d84:	d14a      	bne.n	8006e1c <_printf_i+0x1f0>
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	b004      	add	sp, #16
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	f043 0320 	orr.w	r3, r3, #32
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	4832      	ldr	r0, [pc, #200]	@ (8006e64 <_printf_i+0x238>)
 8006d9a:	2778      	movs	r7, #120	@ 0x78
 8006d9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	6831      	ldr	r1, [r6, #0]
 8006da4:	061f      	lsls	r7, r3, #24
 8006da6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006daa:	d402      	bmi.n	8006db2 <_printf_i+0x186>
 8006dac:	065f      	lsls	r7, r3, #25
 8006dae:	bf48      	it	mi
 8006db0:	b2ad      	uxthmi	r5, r5
 8006db2:	6031      	str	r1, [r6, #0]
 8006db4:	07d9      	lsls	r1, r3, #31
 8006db6:	bf44      	itt	mi
 8006db8:	f043 0320 	orrmi.w	r3, r3, #32
 8006dbc:	6023      	strmi	r3, [r4, #0]
 8006dbe:	b11d      	cbz	r5, 8006dc8 <_printf_i+0x19c>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	e7ad      	b.n	8006d20 <_printf_i+0xf4>
 8006dc4:	4826      	ldr	r0, [pc, #152]	@ (8006e60 <_printf_i+0x234>)
 8006dc6:	e7e9      	b.n	8006d9c <_printf_i+0x170>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	e7f6      	b.n	8006dc0 <_printf_i+0x194>
 8006dd2:	4616      	mov	r6, r2
 8006dd4:	e7bd      	b.n	8006d52 <_printf_i+0x126>
 8006dd6:	6833      	ldr	r3, [r6, #0]
 8006dd8:	6825      	ldr	r5, [r4, #0]
 8006dda:	6961      	ldr	r1, [r4, #20]
 8006ddc:	1d18      	adds	r0, r3, #4
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	062e      	lsls	r6, r5, #24
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	d501      	bpl.n	8006dea <_printf_i+0x1be>
 8006de6:	6019      	str	r1, [r3, #0]
 8006de8:	e002      	b.n	8006df0 <_printf_i+0x1c4>
 8006dea:	0668      	lsls	r0, r5, #25
 8006dec:	d5fb      	bpl.n	8006de6 <_printf_i+0x1ba>
 8006dee:	8019      	strh	r1, [r3, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	6123      	str	r3, [r4, #16]
 8006df4:	4616      	mov	r6, r2
 8006df6:	e7bc      	b.n	8006d72 <_printf_i+0x146>
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	1d1a      	adds	r2, r3, #4
 8006dfc:	6032      	str	r2, [r6, #0]
 8006dfe:	681e      	ldr	r6, [r3, #0]
 8006e00:	6862      	ldr	r2, [r4, #4]
 8006e02:	2100      	movs	r1, #0
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7f9 fa03 	bl	8000210 <memchr>
 8006e0a:	b108      	cbz	r0, 8006e10 <_printf_i+0x1e4>
 8006e0c:	1b80      	subs	r0, r0, r6
 8006e0e:	6060      	str	r0, [r4, #4]
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	2300      	movs	r3, #0
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e1a:	e7aa      	b.n	8006d72 <_printf_i+0x146>
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	4632      	mov	r2, r6
 8006e20:	4649      	mov	r1, r9
 8006e22:	4640      	mov	r0, r8
 8006e24:	47d0      	blx	sl
 8006e26:	3001      	adds	r0, #1
 8006e28:	d0ad      	beq.n	8006d86 <_printf_i+0x15a>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	079b      	lsls	r3, r3, #30
 8006e2e:	d413      	bmi.n	8006e58 <_printf_i+0x22c>
 8006e30:	68e0      	ldr	r0, [r4, #12]
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	4298      	cmp	r0, r3
 8006e36:	bfb8      	it	lt
 8006e38:	4618      	movlt	r0, r3
 8006e3a:	e7a6      	b.n	8006d8a <_printf_i+0x15e>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4632      	mov	r2, r6
 8006e40:	4649      	mov	r1, r9
 8006e42:	4640      	mov	r0, r8
 8006e44:	47d0      	blx	sl
 8006e46:	3001      	adds	r0, #1
 8006e48:	d09d      	beq.n	8006d86 <_printf_i+0x15a>
 8006e4a:	3501      	adds	r5, #1
 8006e4c:	68e3      	ldr	r3, [r4, #12]
 8006e4e:	9903      	ldr	r1, [sp, #12]
 8006e50:	1a5b      	subs	r3, r3, r1
 8006e52:	42ab      	cmp	r3, r5
 8006e54:	dcf2      	bgt.n	8006e3c <_printf_i+0x210>
 8006e56:	e7eb      	b.n	8006e30 <_printf_i+0x204>
 8006e58:	2500      	movs	r5, #0
 8006e5a:	f104 0619 	add.w	r6, r4, #25
 8006e5e:	e7f5      	b.n	8006e4c <_printf_i+0x220>
 8006e60:	080070c9 	.word	0x080070c9
 8006e64:	080070da 	.word	0x080070da

08006e68 <memmove>:
 8006e68:	4288      	cmp	r0, r1
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	eb01 0402 	add.w	r4, r1, r2
 8006e70:	d902      	bls.n	8006e78 <memmove+0x10>
 8006e72:	4284      	cmp	r4, r0
 8006e74:	4623      	mov	r3, r4
 8006e76:	d807      	bhi.n	8006e88 <memmove+0x20>
 8006e78:	1e43      	subs	r3, r0, #1
 8006e7a:	42a1      	cmp	r1, r4
 8006e7c:	d008      	beq.n	8006e90 <memmove+0x28>
 8006e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e86:	e7f8      	b.n	8006e7a <memmove+0x12>
 8006e88:	4402      	add	r2, r0
 8006e8a:	4601      	mov	r1, r0
 8006e8c:	428a      	cmp	r2, r1
 8006e8e:	d100      	bne.n	8006e92 <memmove+0x2a>
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e9a:	e7f7      	b.n	8006e8c <memmove+0x24>

08006e9c <_sbrk_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	@ (8006eb8 <_sbrk_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fa fcb8 	bl	800181c <_sbrk>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_sbrk_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_sbrk_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20000374 	.word	0x20000374

08006ebc <_realloc_r>:
 8006ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4614      	mov	r4, r2
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	b921      	cbnz	r1, 8006ed2 <_realloc_r+0x16>
 8006ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ecc:	4611      	mov	r1, r2
 8006ece:	f7ff bc5b 	b.w	8006788 <_malloc_r>
 8006ed2:	b92a      	cbnz	r2, 8006ee0 <_realloc_r+0x24>
 8006ed4:	f7ff fbec 	bl	80066b0 <_free_r>
 8006ed8:	4625      	mov	r5, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee0:	f000 f81a 	bl	8006f18 <_malloc_usable_size_r>
 8006ee4:	4284      	cmp	r4, r0
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	d802      	bhi.n	8006ef0 <_realloc_r+0x34>
 8006eea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006eee:	d8f4      	bhi.n	8006eda <_realloc_r+0x1e>
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f7ff fc48 	bl	8006788 <_malloc_r>
 8006ef8:	4680      	mov	r8, r0
 8006efa:	b908      	cbnz	r0, 8006f00 <_realloc_r+0x44>
 8006efc:	4645      	mov	r5, r8
 8006efe:	e7ec      	b.n	8006eda <_realloc_r+0x1e>
 8006f00:	42b4      	cmp	r4, r6
 8006f02:	4622      	mov	r2, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	bf28      	it	cs
 8006f08:	4632      	movcs	r2, r6
 8006f0a:	f7ff fbc3 	bl	8006694 <memcpy>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7ff fbcd 	bl	80066b0 <_free_r>
 8006f16:	e7f1      	b.n	8006efc <_realloc_r+0x40>

08006f18 <_malloc_usable_size_r>:
 8006f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f1c:	1f18      	subs	r0, r3, #4
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfbc      	itt	lt
 8006f22:	580b      	ldrlt	r3, [r1, r0]
 8006f24:	18c0      	addlt	r0, r0, r3
 8006f26:	4770      	bx	lr

08006f28 <_init>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr

08006f34 <_fini>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr
