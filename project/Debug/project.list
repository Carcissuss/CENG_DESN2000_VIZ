
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006f4c  08006f4c  00007f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007120  08007120  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007120  08007120  00008120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007128  08007128  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007128  08007128  00008128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800712c  0800712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007130  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00000318  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000384  20000384  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001292f  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000086  00000000  00000000  0001b9cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000effe  00000000  00000000  0001ba51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000269d  00000000  00000000  0002aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000e20  00000000  00000000  0002d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc168  00000000  00000000  0002df10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000aa0  00000000  00000000  000fa078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00022009  00000000  00000000  000fab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0011cb21  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003eb4  00000000  00000000  0011cb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f34 	.word	0x08006f34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006f34 	.word	0x08006f34

080001e0 <coast_asm_delay>:
		i++;
	}
}
*/
coast_asm_delay:
	PUSH {r4}	// 1 + 1 = 2
 80001e0:	b410      	push	{r4}
	PUSH {r5} 	// 2
 80001e2:	b420      	push	{r5}

	// uint32_t i = 0
	MOV r4, #0	// 1
 80001e4:	2400      	movs	r4, #0
	LDR r1, =11999	// 2
 80001e6:	f642 61df 	movw	r1, #11999	@ 0x2edf

080001ea <loop1_start>:
loop1_start:
	CMP r4, r0	// 1
 80001ea:	4284      	cmp	r4, r0
	BHS loop1_end // 1 + P
 80001ec:	d206      	bcs.n	80001fc <loop1_end>

	MOV r5, #0	// 1
 80001ee:	2500      	movs	r5, #0

080001f0 <loop2_start>:

loop2_start:
	// ldr slower but has 32-bits, mov faster only 8-bit
	CMP r5, r1		// 1
 80001f0:	428d      	cmp	r5, r1
	BHS loop2_end	// 1 + P
 80001f2:	d201      	bcs.n	80001f8 <loop2_end>

	// j++
	ADD r5, r5, #1 // 1
 80001f4:	3501      	adds	r5, #1
	b loop2_start  // 1 + P
 80001f6:	e7fb      	b.n	80001f0 <loop2_start>

080001f8 <loop2_end>:
loop2_end:
	// i++
	ADD r4, r4, #1	// 1
 80001f8:	3401      	adds	r4, #1
	b loop1_start  	// 1 + P
 80001fa:	e7f6      	b.n	80001ea <loop1_start>

080001fc <loop1_end>:

loop1_end:
	pop {r5}	// 2
 80001fc:	bc20      	pop	{r5}
	pop {r4}	// 2
 80001fe:	bc10      	pop	{r4}

	BX LR 		// 1 + P
 8000200:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <generate_sound>:
 *      Author: Zhaoji Gou
 */

#include "main.h"
extern void coast_asm_delay(uint32_t milliseconds);
void generate_sound(uint16_t frequency, uint8_t duty_cycle, TIM_HandleTypeDef htim1) {
 80002b0:	b082      	sub	sp, #8
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	f107 0c18 	add.w	ip, r7, #24
 80002bc:	e88c 000c 	stmia.w	ip, {r2, r3}
 80002c0:	4603      	mov	r3, r0
 80002c2:	80fb      	strh	r3, [r7, #6]
 80002c4:	460b      	mov	r3, r1
 80002c6:	717b      	strb	r3, [r7, #5]
	/* protect the function from invalid frequency input */
	if (frequency == 0) return;
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d012      	beq.n	80002f4 <generate_sound+0x44>
	/* millisecond trigger period */
	uint32_t period = 72000 / frequency;
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <generate_sound+0x54>)
 80002d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	/* setup PWM channel and tim1 autoloader */
	htim1.Instance->ARR = period - 1;
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	3a01      	subs	r2, #1
 80002de:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim1.Instance->CCR3 = period / 2;
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	0852      	lsrs	r2, r2, #1
 80002e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* start the timer1 and buzzer */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002e8:	2108      	movs	r1, #8
 80002ea:	f107 0018 	add.w	r0, r7, #24
 80002ee:	f004 fefb 	bl	80050e8 <HAL_TIM_PWM_Start>
 80002f2:	e000      	b.n	80002f6 <generate_sound+0x46>
	if (frequency == 0) return;
 80002f4:	bf00      	nop
}
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002fe:	b002      	add	sp, #8
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	00011940 	.word	0x00011940

08000308 <stop_sound>:

void stop_sound(TIM_HandleTypeDef htim1) {
 8000308:	b084      	sub	sp, #16
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
 800030e:	f107 0c08 	add.w	ip, r7, #8
 8000312:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* stop the timer1 and buzzer */
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000316:	2108      	movs	r1, #8
 8000318:	f107 0008 	add.w	r0, r7, #8
 800031c:	f004 fff0 	bl	8005300 <HAL_TIM_PWM_Stop>
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <play_note>:

void play_note(uint16_t note, uint32_t duration, uint8_t volume, TIM_HandleTypeDef htim1) {
 800032c:	b082      	sub	sp, #8
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b094      	sub	sp, #80	@ 0x50
 8000332:	af12      	add	r7, sp, #72	@ 0x48
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	61fb      	str	r3, [r7, #28]
 8000338:	4603      	mov	r3, r0
 800033a:	80fb      	strh	r3, [r7, #6]
 800033c:	4613      	mov	r3, r2
 800033e:	717b      	strb	r3, [r7, #5]
	generate_sound(note, volume, htim1);
 8000340:	797d      	ldrb	r5, [r7, #5]
 8000342:	88fc      	ldrh	r4, [r7, #6]
 8000344:	4668      	mov	r0, sp
 8000346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800034a:	2244      	movs	r2, #68	@ 0x44
 800034c:	4619      	mov	r1, r3
 800034e:	f006 f9a7 	bl	80066a0 <memcpy>
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	cb0c      	ldmia	r3, {r2, r3}
 8000358:	4629      	mov	r1, r5
 800035a:	4620      	mov	r0, r4
 800035c:	f7ff ffa8 	bl	80002b0 <generate_sound>
	coast_asm_delay(duration);
 8000360:	6838      	ldr	r0, [r7, #0]
 8000362:	f7ff ff3d 	bl	80001e0 <coast_asm_delay>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000370:	b002      	add	sp, #8
 8000372:	4770      	bx	lr

08000374 <homePage>:
#include "lcd.h"

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void homePage() {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800037a:	2001      	movs	r0, #1
 800037c:	f000 f8bc 	bl	80004f8 <LCD_SendCmd>
	LCD_SendStr("FITNESS ");
 8000380:	480d      	ldr	r0, [pc, #52]	@ (80003b8 <homePage+0x44>)
 8000382:	f000 f8f5 	bl	8000570 <LCD_SendStr>

	char buff[16];

	int temp = 21; // placeholder
 8000386:	2315      	movs	r3, #21
 8000388:	617b      	str	r3, [r7, #20]
	sprintf(buff, "%dC ", temp);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	697a      	ldr	r2, [r7, #20]
 800038e:	490b      	ldr	r1, [pc, #44]	@ (80003bc <homePage+0x48>)
 8000390:	4618      	mov	r0, r3
 8000392:	f006 f92f 	bl	80065f4 <siprintf>
	LCD_SendStr(buff);
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f000 f8e9 	bl	8000570 <LCD_SendStr>

	LCD_SendStr(" 57%");
 800039e:	4808      	ldr	r0, [pc, #32]	@ (80003c0 <homePage+0x4c>)
 80003a0:	f000 f8e6 	bl	8000570 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 80003a4:	20c0      	movs	r0, #192	@ 0xc0
 80003a6:	f000 f8a7 	bl	80004f8 <LCD_SendCmd>

	LCD_SendStr("OPT ");
 80003aa:	4806      	ldr	r0, [pc, #24]	@ (80003c4 <homePage+0x50>)
 80003ac:	f000 f8e0 	bl	8000570 <LCD_SendStr>
}
 80003b0:	bf00      	nop
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08006f4c 	.word	0x08006f4c
 80003bc:	08006f58 	.word	0x08006f58
 80003c0:	08006f60 	.word	0x08006f60
 80003c4:	08006f68 	.word	0x08006f68

080003c8 <coast_lcd_init>:

#include "main.h"
#include "coast.h"
#include "lcd.h"

void coast_lcd_init(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	// 1. wait for enough time to stabilise
	 HAL_Delay(50);
 80003cc:	2032      	movs	r0, #50	@ 0x32
 80003ce:	f002 f88d 	bl	80024ec <HAL_Delay>
	 // 2. send command 0011 (function set) and wait for >=4.1 ms (enough wait inside
	 // the pulse)
	 LCD_PutNibble(0b0011);
 80003d2:	2003      	movs	r0, #3
 80003d4:	f000 f83e 	bl	8000454 <LCD_PutNibble>
	 LCD_Pulse();
 80003d8:	f000 f826 	bl	8000428 <LCD_Pulse>
	 HAL_Delay(5);
 80003dc:	2005      	movs	r0, #5
 80003de:	f002 f885 	bl	80024ec <HAL_Delay>
	 // 3. send command 0011 (function set) again and wait for >=100 us
	 // fill this
	 LCD_PutNibble(0b0011);
 80003e2:	2003      	movs	r0, #3
 80003e4:	f000 f836 	bl	8000454 <LCD_PutNibble>
	 LCD_Pulse();
 80003e8:	f000 f81e 	bl	8000428 <LCD_Pulse>
	 HAL_Delay(1);
 80003ec:	2001      	movs	r0, #1
 80003ee:	f002 f87d 	bl	80024ec <HAL_Delay>
	 // 4. send command 0011 (function set) again
	 // fill this
	 LCD_PutNibble(0b0011);
 80003f2:	2003      	movs	r0, #3
 80003f4:	f000 f82e 	bl	8000454 <LCD_PutNibble>
	 LCD_Pulse();
 80003f8:	f000 f816 	bl	8000428 <LCD_Pulse>
	 // 5. send command 0010 to set to 4-bit bus mode
	 // fill this
	 LCD_PutNibble(0b0010);
 80003fc:	2002      	movs	r0, #2
 80003fe:	f000 f829 	bl	8000454 <LCD_PutNibble>
	 LCD_Pulse();
 8000402:	f000 f811 	bl	8000428 <LCD_Pulse>
	 // 6. send command 0010 1100 (function set: 4-bit mode, 2-lines, 5x8 font)
	 LCD_SendCmd(0b00101100);
 8000406:	202c      	movs	r0, #44	@ 0x2c
 8000408:	f000 f876 	bl	80004f8 <LCD_SendCmd>
	 // 7. Send command 0000 1000 to display ON/OFF
	 LCD_SendCmd(0b00001000);
 800040c:	2008      	movs	r0, #8
 800040e:	f000 f873 	bl	80004f8 <LCD_SendCmd>
	 // 8. Send command to clear the display
	 // fill this
	 LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000412:	2001      	movs	r0, #1
 8000414:	f000 f870 	bl	80004f8 <LCD_SendCmd>
	 // 9. Send command set entry mode (increment cursor, no display shift)
	 // fill this
	 LCD_SendCmd(0b00000110);
 8000418:	2006      	movs	r0, #6
 800041a:	f000 f86d 	bl	80004f8 <LCD_SendCmd>
	 // 10. send command 0000 1111 to display on, cursor on, blink on
	 // fill this
	 LCD_SendCmd(0b00001111);
 800041e:	200f      	movs	r0, #15
 8000420:	f000 f86a 	bl	80004f8 <LCD_SendCmd>
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}

08000428 <LCD_Pulse>:

void LCD_Pulse(){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 1);
 800042c:	2201      	movs	r2, #1
 800042e:	2104      	movs	r1, #4
 8000430:	4807      	ldr	r0, [pc, #28]	@ (8000450 <LCD_Pulse+0x28>)
 8000432:	f002 fb33 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000436:	2001      	movs	r0, #1
 8000438:	f002 f858 	bl	80024ec <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2104      	movs	r1, #4
 8000440:	4803      	ldr	r0, [pc, #12]	@ (8000450 <LCD_Pulse+0x28>)
 8000442:	f002 fb2b 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000446:	2001      	movs	r0, #1
 8000448:	f002 f850 	bl	80024ec <HAL_Delay>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	48000c00 	.word	0x48000c00

08000454 <LCD_PutNibble>:

void LCD_PutNibble(uint8_t nibble){
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	71fb      	strb	r3, [r7, #7]
	uint8_t D4 = nibble & 1;
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	f003 0301 	and.w	r3, r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
	uint8_t D5 = (nibble >> 1) & 1;
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	085b      	lsrs	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	73bb      	strb	r3, [r7, #14]
	uint8_t D6 = (nibble >> 2) & 1;
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	089b      	lsrs	r3, r3, #2
 8000476:	b2db      	uxtb	r3, r3
 8000478:	f003 0301 	and.w	r3, r3, #1
 800047c:	737b      	strb	r3, [r7, #13]
	uint8_t D7 = (nibble >> 3) & 1;
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	08db      	lsrs	r3, r3, #3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, D4? GPIO_PIN_SET : GPIO_PIN_RESET);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	2b00      	cmp	r3, #0
 800048e:	bf14      	ite	ne
 8000490:	2301      	movne	r3, #1
 8000492:	2300      	moveq	r3, #0
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800049c:	4815      	ldr	r0, [pc, #84]	@ (80004f4 <LCD_PutNibble+0xa0>)
 800049e:	f002 fafd 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, D5? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf14      	ite	ne
 80004a8:	2301      	movne	r3, #1
 80004aa:	2300      	moveq	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b4:	480f      	ldr	r0, [pc, #60]	@ (80004f4 <LCD_PutNibble+0xa0>)
 80004b6:	f002 faf1 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, D6? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004ba:	7b7b      	ldrb	r3, [r7, #13]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	bf14      	ite	ne
 80004c0:	2301      	movne	r3, #1
 80004c2:	2300      	moveq	r3, #0
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	461a      	mov	r2, r3
 80004c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004cc:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <LCD_PutNibble+0xa0>)
 80004ce:	f002 fae5 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, D7? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004d2:	7b3b      	ldrb	r3, [r7, #12]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	bf14      	ite	ne
 80004d8:	2301      	movne	r3, #1
 80004da:	2300      	moveq	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	461a      	mov	r2, r3
 80004e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004e4:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <LCD_PutNibble+0xa0>)
 80004e6:	f002 fad9 	bl	8002a9c <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	48000800 	.word	0x48000800

080004f8 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
	LCD_PutNibble(c >> 4);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	091b      	lsrs	r3, r3, #4
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ffa3 	bl	8000454 <LCD_PutNibble>
	LCD_Pulse();
 800050e:	f7ff ff8b 	bl	8000428 <LCD_Pulse>
	LCD_PutNibble(c);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff9d 	bl	8000454 <LCD_PutNibble>
	LCD_Pulse();
 800051a:	f7ff ff85 	bl	8000428 <LCD_Pulse>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <LCD_SendData>:


void LCD_SendData(uint8_t c){
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000536:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053a:	f002 faaf 	bl	8002a9c <HAL_GPIO_WritePin>
	LCD_PutNibble(c >> 4);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	091b      	lsrs	r3, r3, #4
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ff85 	bl	8000454 <LCD_PutNibble>
	LCD_Pulse();
 800054a:	f7ff ff6d 	bl	8000428 <LCD_Pulse>
	LCD_PutNibble(c);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff7f 	bl	8000454 <LCD_PutNibble>
	LCD_Pulse();
 8000556:	f7ff ff67 	bl	8000428 <LCD_Pulse>
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000564:	f002 fa9a 	bl	8002a9c <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <LCD_SendStr>:

// send string to LCD data
void LCD_SendStr(char *str){
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e00f      	b.n	800059e <LCD_SendStr+0x2e>
		if (i == 15) {
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	d102      	bne.n	800058a <LCD_SendStr+0x1a>
			LCD_SendCmd(LCD_SECOND_LINE);
 8000584:	20c0      	movs	r0, #192	@ 0xc0
 8000586:	f7ff ffb7 	bl	80004f8 <LCD_SendCmd>
		}
		LCD_SendData((uint8_t)str[i]);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff ffc7 	bl	8000526 <LCD_SendData>
	for (int i = 0; str[i]; i++) {
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1e9      	bne.n	800057e <LCD_SendStr+0xe>
	}
}
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	b093      	sub	sp, #76	@ 0x4c
 80005b8:	af10      	add	r7, sp, #64	@ 0x40
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005c4:	f040 80a4 	bne.w	8000710 <HAL_GPIO_EXTI_Callback+0x15c>
		/* B1 is pressed */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	48a3      	ldr	r0, [pc, #652]	@ (800085c <HAL_GPIO_EXTI_Callback+0x2a8>)
 80005ce:	f002 fa4d 	bl	8002a6c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d164      	bne.n	80006a2 <HAL_GPIO_EXTI_Callback+0xee>
			/* sound indication */
			if (enable_sound) {
 80005d8:	4ba1      	ldr	r3, [pc, #644]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <HAL_GPIO_EXTI_Callback+0x32>
				button_sound = true;
 80005e0:	4ba0      	ldr	r3, [pc, #640]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
			}
			if (enable_vibration) {
 80005e6:	4ba0      	ldr	r3, [pc, #640]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d002      	beq.n	80005f4 <HAL_GPIO_EXTI_Callback+0x40>
				button_vibration = true;
 80005ee:	4b9f      	ldr	r3, [pc, #636]	@ (800086c <HAL_GPIO_EXTI_Callback+0x2b8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
			}
//			check_double_press(0, is_single_press, is_double_press, is_holding,
//					decimal_second_count, double_press_interval,
//					button_double_press_time, button_holding_time);
			if (is_single_press[0] == true &&
 80005f4:	4b9e      	ldr	r3, [pc, #632]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d019      	beq.n	8000630 <HAL_GPIO_EXTI_Callback+0x7c>
				is_double_press[0] == false &&
 80005fc:	4b9d      	ldr	r3, [pc, #628]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
			if (is_single_press[0] == true &&
 8000606:	2b00      	cmp	r3, #0
 8000608:	d012      	beq.n	8000630 <HAL_GPIO_EXTI_Callback+0x7c>
				(decimal_second_count - button_double_press_time[0]) <= double_press_interval) {
 800060a:	4b9b      	ldr	r3, [pc, #620]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b9b      	ldr	r3, [pc, #620]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	4b9a      	ldr	r3, [pc, #616]	@ (8000880 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000616:	681b      	ldr	r3, [r3, #0]
				is_double_press[0] == false &&
 8000618:	429a      	cmp	r2, r3
 800061a:	d809      	bhi.n	8000630 <HAL_GPIO_EXTI_Callback+0x7c>
				is_double_press[0] = true;
 800061c:	4b95      	ldr	r3, [pc, #596]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 8000622:	4b93      	ldr	r3, [pc, #588]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 8000628:	4b96      	ldr	r3, [pc, #600]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
 800062e:	e008      	b.n	8000642 <HAL_GPIO_EXTI_Callback+0x8e>

			} else {
				is_single_press[0] = true;
 8000630:	4b8f      	ldr	r3, [pc, #572]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000632:	2201      	movs	r2, #1
 8000634:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 8000636:	4b8f      	ldr	r3, [pc, #572]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 800063c:	4b91      	ldr	r3, [pc, #580]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
			}

			button_holding_time[0] = decimal_second_count;
 8000642:	4b8d      	ldr	r3, [pc, #564]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a90      	ldr	r2, [pc, #576]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000648:	6013      	str	r3, [r2, #0]
			if (is_single_press[0]) {
 800064a:	4b89      	ldr	r3, [pc, #548]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	f000 829f 	beq.w	8000b92 <HAL_GPIO_EXTI_Callback+0x5de>
				switch (currentScreen) {
 8000654:	4b8d      	ldr	r3, [pc, #564]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	3b01      	subs	r3, #1
 800065c:	2b06      	cmp	r3, #6
 800065e:	f200 829b 	bhi.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000662:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000685 	.word	0x08000685
 800066c:	08000b99 	.word	0x08000b99
 8000670:	0800068d 	.word	0x0800068d
 8000674:	08000b99 	.word	0x08000b99
 8000678:	08000b99 	.word	0x08000b99
 800067c:	08000693 	.word	0x08000693
 8000680:	0800069b 	.word	0x0800069b
					case HOME:
						currentScreen = TIME;
 8000684:	4b81      	ldr	r3, [pc, #516]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
						break;
 800068a:	e285      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					case ALARM:
						changeAlarmMin();
 800068c:	f001 fb40 	bl	8001d10 <changeAlarmMin>
						break;
 8000690:	e282      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					case COUNTDOWN:
						toggleCountdown(&countdown);
 8000692:	487f      	ldr	r0, [pc, #508]	@ (8000890 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8000694:	f001 fbbc 	bl	8001e10 <toggleCountdown>
						break;
 8000698:	e27e      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					case STOPWATCH:
						toggleStopwatch(&stopwatch);
 800069a:	487e      	ldr	r0, [pc, #504]	@ (8000894 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800069c:	f001 fdad 	bl	80021fa <toggleStopwatch>
						break;
 80006a0:	e27a      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
				}
			}
		}
		/* B1 is released */
		else {
			stop_sound(htim1);
 80006a2:	4e7d      	ldr	r6, [pc, #500]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x2e4>)
 80006a4:	466d      	mov	r5, sp
 80006a6:	f106 0410 	add.w	r4, r6, #16
 80006aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006c2:	f7ff fe21 	bl	8000308 <stop_sound>

			if ((decimal_second_count - button_holding_time[0]) >= holding_bound) {
 80006c6:	4b6c      	ldr	r3, [pc, #432]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	4b6f      	ldr	r3, [pc, #444]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	4b72      	ldr	r3, [pc, #456]	@ (800089c <HAL_GPIO_EXTI_Callback+0x2e8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d309      	bcc.n	80006ec <HAL_GPIO_EXTI_Callback+0x138>
				is_holding[0] = true;
 80006d8:	4b6a      	ldr	r3, [pc, #424]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 80006de:	4b65      	ldr	r3, [pc, #404]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 80006e4:	4b62      	ldr	r3, [pc, #392]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e003      	b.n	80006f4 <HAL_GPIO_EXTI_Callback+0x140>
			} else {
				button_double_press_time[0] = decimal_second_count;
 80006ec:	4b62      	ldr	r3, [pc, #392]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a62      	ldr	r2, [pc, #392]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80006f2:	6013      	str	r3, [r2, #0]
			}
			if (is_holding[0]) {
 80006f4:	4b63      	ldr	r3, [pc, #396]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f000 824c 	beq.w	8000b96 <HAL_GPIO_EXTI_Callback+0x5e2>
				switch (currentScreen) {
 80006fe:	4b63      	ldr	r3, [pc, #396]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b02      	cmp	r3, #2
 8000706:	f040 8247 	bne.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					case TIME:
						switchTimeFormat();
 800070a:	f001 fa9d 	bl	8001c48 <switchTimeFormat>
						break;
 800070e:	e243      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					default:
					}
			}
		}
	} else if (GPIO_Pin == SW1_Pin) {
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	2b02      	cmp	r3, #2
 8000714:	f040 80cc 	bne.w	80008b0 <HAL_GPIO_EXTI_Callback+0x2fc>
		/* The sw1 pin is pressed */

		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1) {
 8000718:	2102      	movs	r1, #2
 800071a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071e:	f002 f9a5 	bl	8002a6c <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d139      	bne.n	800079c <HAL_GPIO_EXTI_Callback+0x1e8>
			/* sound indication */
			if (enable_sound) {
 8000728:	4b4d      	ldr	r3, [pc, #308]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <HAL_GPIO_EXTI_Callback+0x182>
				button_sound = true;
 8000730:	4b4c      	ldr	r3, [pc, #304]	@ (8000864 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
			}
			if (enable_vibration) {
 8000736:	4b4c      	ldr	r3, [pc, #304]	@ (8000868 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d002      	beq.n	8000744 <HAL_GPIO_EXTI_Callback+0x190>
				button_vibration = true;
 800073e:	4b4b      	ldr	r3, [pc, #300]	@ (800086c <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000740:	2201      	movs	r2, #1
 8000742:	701a      	strb	r2, [r3, #0]
			}
//			check_double_press(1, is_single_press, is_double_press, is_holding,
//					decimal_second_count, double_press_interval,
//					button_double_press_time, button_holding_time);

			if (is_single_press[1] == true &&
 8000744:	4b4a      	ldr	r3, [pc, #296]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d019      	beq.n	8000780 <HAL_GPIO_EXTI_Callback+0x1cc>
				is_double_press[1] == false &&
 800074c:	4b49      	ldr	r3, [pc, #292]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	f083 0301 	eor.w	r3, r3, #1
 8000754:	b2db      	uxtb	r3, r3
			if (is_single_press[1] == true &&
 8000756:	2b00      	cmp	r3, #0
 8000758:	d012      	beq.n	8000780 <HAL_GPIO_EXTI_Callback+0x1cc>
				(decimal_second_count - button_double_press_time[1]) <= double_press_interval) {
 800075a:	4b47      	ldr	r3, [pc, #284]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b47      	ldr	r3, [pc, #284]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	1ad2      	subs	r2, r2, r3
 8000764:	4b46      	ldr	r3, [pc, #280]	@ (8000880 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8000766:	681b      	ldr	r3, [r3, #0]
				is_double_press[1] == false &&
 8000768:	429a      	cmp	r2, r3
 800076a:	d809      	bhi.n	8000780 <HAL_GPIO_EXTI_Callback+0x1cc>
				is_double_press[1] = true;
 800076c:	4b41      	ldr	r3, [pc, #260]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800076e:	2201      	movs	r2, #1
 8000770:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 8000772:	4b3f      	ldr	r3, [pc, #252]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000774:	2200      	movs	r2, #0
 8000776:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 8000778:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800077a:	2200      	movs	r2, #0
 800077c:	705a      	strb	r2, [r3, #1]
 800077e:	e008      	b.n	8000792 <HAL_GPIO_EXTI_Callback+0x1de>

			} else {
				is_single_press[1] = true;
 8000780:	4b3b      	ldr	r3, [pc, #236]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000782:	2201      	movs	r2, #1
 8000784:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 8000786:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8000788:	2200      	movs	r2, #0
 800078a:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 800078c:	4b3d      	ldr	r3, [pc, #244]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800078e:	2200      	movs	r2, #0
 8000790:	705a      	strb	r2, [r3, #1]
			}

			button_holding_time[1] = decimal_second_count;
 8000792:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a3c      	ldr	r2, [pc, #240]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8000798:	6053      	str	r3, [r2, #4]
				}
			}

		}
	}
}
 800079a:	e1fd      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
			stop_sound(htim1);
 800079c:	4e3e      	ldr	r6, [pc, #248]	@ (8000898 <HAL_GPIO_EXTI_Callback+0x2e4>)
 800079e:	466d      	mov	r5, sp
 80007a0:	f106 0410 	add.w	r4, r6, #16
 80007a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007b8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007bc:	f7ff fda4 	bl	8000308 <stop_sound>
			if ((decimal_second_count - button_holding_time[1]) >= holding_bound) {
 80007c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1ad2      	subs	r2, r2, r3
 80007ca:	4b34      	ldr	r3, [pc, #208]	@ (800089c <HAL_GPIO_EXTI_Callback+0x2e8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d309      	bcc.n	80007e6 <HAL_GPIO_EXTI_Callback+0x232>
				is_holding[1] = true;
 80007d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 80007d8:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 80007de:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	705a      	strb	r2, [r3, #1]
 80007e4:	e003      	b.n	80007ee <HAL_GPIO_EXTI_Callback+0x23a>
				button_double_press_time[1] = decimal_second_count;
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a24      	ldr	r2, [pc, #144]	@ (800087c <HAL_GPIO_EXTI_Callback+0x2c8>)
 80007ec:	6053      	str	r3, [r2, #4]
			if (is_holding[1]) {
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <HAL_GPIO_EXTI_Callback+0x2d0>)
 80007f0:	785b      	ldrb	r3, [r3, #1]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d009      	beq.n	800080a <HAL_GPIO_EXTI_Callback+0x256>
				switch (currentScreen){
 80007f6:	4b25      	ldr	r3, [pc, #148]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	f040 81cb 	bne.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
				currentScreen = STOPWATCH;
 8000802:	4b22      	ldr	r3, [pc, #136]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000804:	2207      	movs	r2, #7
 8000806:	701a      	strb	r2, [r3, #0]
				break;
 8000808:	e1c6      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
			} else if (is_single_press[1]) {
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_GPIO_EXTI_Callback+0x2bc>)
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f000 81c2 	beq.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
				switch (currentScreen) {
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	3b02      	subs	r3, #2
 800081c:	2b06      	cmp	r3, #6
 800081e:	f200 81bb 	bhi.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000822:	a201      	add	r2, pc, #4	@ (adr r2, 8000828 <HAL_GPIO_EXTI_Callback+0x274>)
 8000824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000828:	08000845 	.word	0x08000845
 800082c:	0800084d 	.word	0x0800084d
 8000830:	08000b99 	.word	0x08000b99
 8000834:	08000b99 	.word	0x08000b99
 8000838:	080008a1 	.word	0x080008a1
 800083c:	080008a9 	.word	0x080008a9
 8000840:	08000855 	.word	0x08000855
					currentScreen = HOME;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
					break;
 800084a:	e1a5      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = TIME;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 800084e:	2202      	movs	r2, #2
 8000850:	701a      	strb	r2, [r3, #0]
					break;
 8000852:	e1a1      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = ALARM;
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <HAL_GPIO_EXTI_Callback+0x2d8>)
 8000856:	2203      	movs	r2, #3
 8000858:	701a      	strb	r2, [r3, #0]
					break;
 800085a:	e19d      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
 800085c:	48000800 	.word	0x48000800
 8000860:	20000008 	.word	0x20000008
 8000864:	200001e8 	.word	0x200001e8
 8000868:	20000009 	.word	0x20000009
 800086c:	200001e9 	.word	0x200001e9
 8000870:	200001dc 	.word	0x200001dc
 8000874:	200001e0 	.word	0x200001e0
 8000878:	200001b4 	.word	0x200001b4
 800087c:	200001b8 	.word	0x200001b8
 8000880:	20000000 	.word	0x20000000
 8000884:	200001e4 	.word	0x200001e4
 8000888:	200001c8 	.word	0x200001c8
 800088c:	2000000a 	.word	0x2000000a
 8000890:	200001ec 	.word	0x200001ec
 8000894:	200001f8 	.word	0x200001f8
 8000898:	200000c0 	.word	0x200000c0
 800089c:	20000004 	.word	0x20000004
					currentScreen = TIME;
 80008a0:	4b9c      	ldr	r3, [pc, #624]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 80008a2:	2202      	movs	r2, #2
 80008a4:	701a      	strb	r2, [r3, #0]
					break;
 80008a6:	e177      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = TIME;
 80008a8:	4b9a      	ldr	r3, [pc, #616]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
					break;
 80008ae:	e173      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
	} else if (GPIO_Pin == SW2_Pin) {
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	2b10      	cmp	r3, #16
 80008b4:	f040 80a0 	bne.w	80009f8 <HAL_GPIO_EXTI_Callback+0x444>
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1) {
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f002 f8d5 	bl	8002a6c <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d139      	bne.n	800093c <HAL_GPIO_EXTI_Callback+0x388>
			if (enable_sound) {
 80008c8:	4b93      	ldr	r3, [pc, #588]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x564>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <HAL_GPIO_EXTI_Callback+0x322>
				button_sound = true;
 80008d0:	4b92      	ldr	r3, [pc, #584]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x568>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 80008d6:	4b92      	ldr	r3, [pc, #584]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x56c>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_GPIO_EXTI_Callback+0x330>
				button_vibration = true;
 80008de:	4b91      	ldr	r3, [pc, #580]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x570>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
		    if (is_single_press[2] == true &&
 80008e4:	4b90      	ldr	r3, [pc, #576]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 80008e6:	789b      	ldrb	r3, [r3, #2]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d019      	beq.n	8000920 <HAL_GPIO_EXTI_Callback+0x36c>
		        is_double_press[2] == false &&
 80008ec:	4b8f      	ldr	r3, [pc, #572]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 80008ee:	789b      	ldrb	r3, [r3, #2]
 80008f0:	f083 0301 	eor.w	r3, r3, #1
 80008f4:	b2db      	uxtb	r3, r3
		    if (is_single_press[2] == true &&
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d012      	beq.n	8000920 <HAL_GPIO_EXTI_Callback+0x36c>
		        (decimal_second_count - button_double_press_time[2]) <= double_press_interval) {
 80008fa:	4b8d      	ldr	r3, [pc, #564]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4b8d      	ldr	r3, [pc, #564]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x580>)
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	1ad2      	subs	r2, r2, r3
 8000904:	4b8c      	ldr	r3, [pc, #560]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x584>)
 8000906:	681b      	ldr	r3, [r3, #0]
		        is_double_press[2] == false &&
 8000908:	429a      	cmp	r2, r3
 800090a:	d809      	bhi.n	8000920 <HAL_GPIO_EXTI_Callback+0x36c>
		        is_double_press[2] = true;
 800090c:	4b87      	ldr	r3, [pc, #540]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 800090e:	2201      	movs	r2, #1
 8000910:	709a      	strb	r2, [r3, #2]
		        is_single_press[2] = false;
 8000912:	4b85      	ldr	r3, [pc, #532]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000914:	2200      	movs	r2, #0
 8000916:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 8000918:	4b88      	ldr	r3, [pc, #544]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 800091a:	2200      	movs	r2, #0
 800091c:	709a      	strb	r2, [r3, #2]
 800091e:	e008      	b.n	8000932 <HAL_GPIO_EXTI_Callback+0x37e>
		        is_single_press[2] = true;
 8000920:	4b81      	ldr	r3, [pc, #516]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000922:	2201      	movs	r2, #1
 8000924:	709a      	strb	r2, [r3, #2]
		        is_double_press[2] = false;
 8000926:	4b81      	ldr	r3, [pc, #516]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 8000928:	2200      	movs	r2, #0
 800092a:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 800092c:	4b83      	ldr	r3, [pc, #524]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 800092e:	2200      	movs	r2, #0
 8000930:	709a      	strb	r2, [r3, #2]
		    button_holding_time[2] = decimal_second_count;
 8000932:	4b7f      	ldr	r3, [pc, #508]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a82      	ldr	r2, [pc, #520]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000938:	6093      	str	r3, [r2, #8]
}
 800093a:	e12d      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
			stop_sound(htim1);
 800093c:	4e81      	ldr	r6, [pc, #516]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0x590>)
 800093e:	466d      	mov	r5, sp
 8000940:	f106 0410 	add.w	r4, r6, #16
 8000944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800094c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000950:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000954:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000958:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800095c:	f7ff fcd4 	bl	8000308 <stop_sound>
			if ((decimal_second_count - button_holding_time[2]) >= holding_bound) {
 8000960:	4b73      	ldr	r3, [pc, #460]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b76      	ldr	r3, [pc, #472]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	1ad2      	subs	r2, r2, r3
 800096a:	4b77      	ldr	r3, [pc, #476]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0x594>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	429a      	cmp	r2, r3
 8000970:	d309      	bcc.n	8000986 <HAL_GPIO_EXTI_Callback+0x3d2>
				is_holding[2] = true;
 8000972:	4b72      	ldr	r3, [pc, #456]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 8000974:	2201      	movs	r2, #1
 8000976:	709a      	strb	r2, [r3, #2]
				is_double_press[2] = false;
 8000978:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 800097a:	2200      	movs	r2, #0
 800097c:	709a      	strb	r2, [r3, #2]
				is_single_press[2] = false;
 800097e:	4b6a      	ldr	r3, [pc, #424]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000980:	2200      	movs	r2, #0
 8000982:	709a      	strb	r2, [r3, #2]
 8000984:	e003      	b.n	800098e <HAL_GPIO_EXTI_Callback+0x3da>
				button_double_press_time[2] = decimal_second_count;
 8000986:	4b6a      	ldr	r3, [pc, #424]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a6a      	ldr	r2, [pc, #424]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x580>)
 800098c:	6093      	str	r3, [r2, #8]
			if (is_holding[2] == true) {
 800098e:	4b6b      	ldr	r3, [pc, #428]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <HAL_GPIO_EXTI_Callback+0x3ee>
				switch (currentScreen){
 8000996:	4b5f      	ldr	r3, [pc, #380]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 8000998:	781b      	ldrb	r3, [r3, #0]
					currentScreen = HOME;
 800099a:	4b5e      	ldr	r3, [pc, #376]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
					break;
 80009a0:	e0fa      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
			} else if (is_single_press[2]) {
 80009a2:	4b61      	ldr	r3, [pc, #388]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f000 80f6 	beq.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
				switch (currentScreen) {
 80009ac:	4b59      	ldr	r3, [pc, #356]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	3b02      	subs	r3, #2
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	f200 80ef 	bhi.w	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
 80009ba:	a201      	add	r2, pc, #4	@ (adr r2, 80009c0 <HAL_GPIO_EXTI_Callback+0x40c>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	080009e1 	.word	0x080009e1
 80009c4:	080009d9 	.word	0x080009d9
 80009c8:	08000b99 	.word	0x08000b99
 80009cc:	08000b99 	.word	0x08000b99
 80009d0:	080009e9 	.word	0x080009e9
 80009d4:	080009f1 	.word	0x080009f1
					currentScreen = ALARM_SET;  // request alarm set
 80009d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 80009da:	2208      	movs	r2, #8
 80009dc:	701a      	strb	r2, [r3, #0]
					break;
 80009de:	e0db      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					currentScreen = COUNTDOWN;
 80009e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	701a      	strb	r2, [r3, #0]
					break;
 80009e6:	e0d7      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					mintueCountdown(&countdown);
 80009e8:	4858      	ldr	r0, [pc, #352]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0x598>)
 80009ea:	f001 fa26 	bl	8001e3a <mintueCountdown>
					break;
 80009ee:	e0d3      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					lapStopwatchFlag = true;
 80009f0:	4b57      	ldr	r3, [pc, #348]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0x59c>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
					break;
 80009f6:	e0cf      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == 1) {
 80009f8:	2101      	movs	r1, #1
 80009fa:	4856      	ldr	r0, [pc, #344]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0x5a0>)
 80009fc:	f002 f836 	bl	8002a6c <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d139      	bne.n	8000a7a <HAL_GPIO_EXTI_Callback+0x4c6>
			if (enable_sound) {
 8000a06:	4b44      	ldr	r3, [pc, #272]	@ (8000b18 <HAL_GPIO_EXTI_Callback+0x564>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <HAL_GPIO_EXTI_Callback+0x460>
				button_sound = true;
 8000a0e:	4b43      	ldr	r3, [pc, #268]	@ (8000b1c <HAL_GPIO_EXTI_Callback+0x568>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 8000a14:	4b42      	ldr	r3, [pc, #264]	@ (8000b20 <HAL_GPIO_EXTI_Callback+0x56c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d002      	beq.n	8000a22 <HAL_GPIO_EXTI_Callback+0x46e>
				button_vibration = true;
 8000a1c:	4b41      	ldr	r3, [pc, #260]	@ (8000b24 <HAL_GPIO_EXTI_Callback+0x570>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
			if (is_single_press[3] == true &&
 8000a22:	4b41      	ldr	r3, [pc, #260]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000a24:	78db      	ldrb	r3, [r3, #3]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d019      	beq.n	8000a5e <HAL_GPIO_EXTI_Callback+0x4aa>
				is_double_press[3] == false &&
 8000a2a:	4b40      	ldr	r3, [pc, #256]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 8000a2c:	78db      	ldrb	r3, [r3, #3]
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
			if (is_single_press[3] == true &&
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d012      	beq.n	8000a5e <HAL_GPIO_EXTI_Callback+0x4aa>
				(decimal_second_count - button_double_press_time[3]) <= double_press_interval) {
 8000a38:	4b3d      	ldr	r3, [pc, #244]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x580>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	1ad2      	subs	r2, r2, r3
 8000a42:	4b3d      	ldr	r3, [pc, #244]	@ (8000b38 <HAL_GPIO_EXTI_Callback+0x584>)
 8000a44:	681b      	ldr	r3, [r3, #0]
				is_double_press[3] == false &&
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d809      	bhi.n	8000a5e <HAL_GPIO_EXTI_Callback+0x4aa>
				is_double_press[3] = true;
 8000a4a:	4b38      	ldr	r3, [pc, #224]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 8000a50:	4b35      	ldr	r3, [pc, #212]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 8000a56:	4b39      	ldr	r3, [pc, #228]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	70da      	strb	r2, [r3, #3]
 8000a5c:	e008      	b.n	8000a70 <HAL_GPIO_EXTI_Callback+0x4bc>
				is_single_press[3] = true;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8000a64:	4b31      	ldr	r3, [pc, #196]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 8000a6a:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	70da      	strb	r2, [r3, #3]
			button_holding_time[3] = decimal_second_count;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a32      	ldr	r2, [pc, #200]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	e08e      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
			stop_sound(htim1);
 8000a7a:	4e32      	ldr	r6, [pc, #200]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0x590>)
 8000a7c:	466d      	mov	r5, sp
 8000a7e:	f106 0410 	add.w	r4, r6, #16
 8000a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a92:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a96:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a9a:	f7ff fc35 	bl	8000308 <stop_sound>
			if ((decimal_second_count - button_holding_time[3]) >= holding_bound) {
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b27      	ldr	r3, [pc, #156]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0x58c>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	1ad2      	subs	r2, r2, r3
 8000aa8:	4b27      	ldr	r3, [pc, #156]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0x594>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d309      	bcc.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x510>
				is_holding[3] = true;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	70da      	strb	r2, [r3, #3]
 8000ac2:	e003      	b.n	8000acc <HAL_GPIO_EXTI_Callback+0x518>
				button_double_press_time[3] = decimal_second_count;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_GPIO_EXTI_Callback+0x57c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b34 <HAL_GPIO_EXTI_Callback+0x580>)
 8000aca:	60d3      	str	r3, [r2, #12]
			if (is_holding[3]) {
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <HAL_GPIO_EXTI_Callback+0x588>)
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00f      	beq.n	8000af4 <HAL_GPIO_EXTI_Callback+0x540>
				switch(currentScreen) {
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b06      	cmp	r3, #6
 8000adc:	d002      	beq.n	8000ae4 <HAL_GPIO_EXTI_Callback+0x530>
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d004      	beq.n	8000aec <HAL_GPIO_EXTI_Callback+0x538>
 8000ae2:	e007      	b.n	8000af4 <HAL_GPIO_EXTI_Callback+0x540>
					resetCountdown(&countdown);
 8000ae4:	4819      	ldr	r0, [pc, #100]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0x598>)
 8000ae6:	f001 f9f5 	bl	8001ed4 <resetCountdown>
					break;
 8000aea:	e003      	b.n	8000af4 <HAL_GPIO_EXTI_Callback+0x540>
					resetStopwatch(&stopwatch);
 8000aec:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0x5a4>)
 8000aee:	f001 fb71 	bl	80021d4 <resetStopwatch>
					break;
 8000af2:	bf00      	nop
			if (is_double_press[3]) {
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <HAL_GPIO_EXTI_Callback+0x578>)
 8000af6:	78db      	ldrb	r3, [r3, #3]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d02f      	beq.n	8000b5c <HAL_GPIO_EXTI_Callback+0x5a8>
				is_single_press[3] = false; // cancel single press
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <HAL_GPIO_EXTI_Callback+0x574>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	70da      	strb	r2, [r3, #3]
				switch (currentScreen){
 8000b02:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <HAL_GPIO_EXTI_Callback+0x560>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d145      	bne.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
						switchAMPM();
 8000b0c:	f001 f8ba 	bl	8001c84 <switchAMPM>
						break;
 8000b10:	e042      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000b12:	bf00      	nop
 8000b14:	2000000a 	.word	0x2000000a
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200001e8 	.word	0x200001e8
 8000b20:	20000009 	.word	0x20000009
 8000b24:	200001e9 	.word	0x200001e9
 8000b28:	200001dc 	.word	0x200001dc
 8000b2c:	200001e0 	.word	0x200001e0
 8000b30:	200001b4 	.word	0x200001b4
 8000b34:	200001b8 	.word	0x200001b8
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	200001e4 	.word	0x200001e4
 8000b40:	200001c8 	.word	0x200001c8
 8000b44:	200000c0 	.word	0x200000c0
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	200001ec 	.word	0x200001ec
 8000b50:	20000208 	.word	0x20000208
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200001f8 	.word	0x200001f8
			else if (is_single_press[3]) {
 8000b5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x5ec>)
 8000b5e:	78db      	ldrb	r3, [r3, #3]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d019      	beq.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
				switch (currentScreen) {
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d00d      	beq.n	8000b8a <HAL_GPIO_EXTI_Callback+0x5d6>
 8000b6e:	2b06      	cmp	r3, #6
 8000b70:	dc12      	bgt.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d002      	beq.n	8000b7c <HAL_GPIO_EXTI_Callback+0x5c8>
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d004      	beq.n	8000b84 <HAL_GPIO_EXTI_Callback+0x5d0>
}
 8000b7a:	e00d      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
						currentScreen = ALARM;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8000b7e:	2203      	movs	r2, #3
 8000b80:	701a      	strb	r2, [r3, #0]
						break;
 8000b82:	e009      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
						changeAlarmHour();
 8000b84:	f001 f8a2 	bl	8001ccc <changeAlarmHour>
						break;
 8000b88:	e006      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
						secondCountdown(&countdown);
 8000b8a:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8000b8c:	f001 f96c 	bl	8001e68 <secondCountdown>
						break;
 8000b90:	e002      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					default:
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x5e4>
					default:
 8000b96:	bf00      	nop
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba0:	200001dc 	.word	0x200001dc
 8000ba4:	2000000a 	.word	0x2000000a
 8000ba8:	200001ec 	.word	0x200001ec

08000bac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a12      	ldr	r2, [pc, #72]	@ (8000c00 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d105      	bne.n	8000bc8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		second++;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000bc4:	6013      	str	r3, [r2, #0]
		if (period_count >= 100) {
			period_count = 0;
			decimal_second_count++;
		}
	}
}
 8000bc6:	e014      	b.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x46>
	} else if (htim == &htim7) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a0f      	ldr	r2, [pc, #60]	@ (8000c08 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d110      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x46>
		period_count++;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bd8:	6013      	str	r3, [r2, #0]
		if (period_count >= 100) {
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b63      	cmp	r3, #99	@ 0x63
 8000be0:	d907      	bls.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x46>
			period_count = 0;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
			decimal_second_count++;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	2000010c 	.word	0x2000010c
 8000c04:	200001a8 	.word	0x200001a8
 8000c08:	20000158 	.word	0x20000158
 8000c0c:	200001b0 	.word	0x200001b0
 8000c10:	200001b4 	.word	0x200001b4

08000c14 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b095      	sub	sp, #84	@ 0x54
 8000c18:	af12      	add	r7, sp, #72	@ 0x48
 8000c1a:	6078      	str	r0, [r7, #4]
    // Trigger your sound and vibration here

	/* frequency ： duration ：volume : htim1 */
	play_note(460, 150, 50, htim1);
 8000c1c:	4c13      	ldr	r4, [pc, #76]	@ (8000c6c <HAL_RTC_AlarmAEventCallback+0x58>)
 8000c1e:	4668      	mov	r0, sp
 8000c20:	1d23      	adds	r3, r4, #4
 8000c22:	2248      	movs	r2, #72	@ 0x48
 8000c24:	4619      	mov	r1, r3
 8000c26:	f005 fd3b 	bl	80066a0 <memcpy>
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	2232      	movs	r2, #50	@ 0x32
 8000c2e:	2196      	movs	r1, #150	@ 0x96
 8000c30:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000c34:	f7ff fb7a 	bl	800032c <play_note>
	play_note(300, 50, 50, htim1);
 8000c38:	4c0c      	ldr	r4, [pc, #48]	@ (8000c6c <HAL_RTC_AlarmAEventCallback+0x58>)
 8000c3a:	4668      	mov	r0, sp
 8000c3c:	1d23      	adds	r3, r4, #4
 8000c3e:	2248      	movs	r2, #72	@ 0x48
 8000c40:	4619      	mov	r1, r3
 8000c42:	f005 fd2d 	bl	80066a0 <memcpy>
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	2232      	movs	r2, #50	@ 0x32
 8000c4a:	2132      	movs	r1, #50	@ 0x32
 8000c4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c50:	f7ff fb6c 	bl	800032c <play_note>

	if (enable_vibration) {
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_RTC_AlarmAEventCallback+0x5c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d002      	beq.n	8000c62 <HAL_RTC_AlarmAEventCallback+0x4e>
		button_vibration = true;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_RTC_AlarmAEventCallback+0x60>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
	}

}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd90      	pop	{r4, r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000c0 	.word	0x200000c0
 8000c70:	20000009 	.word	0x20000009
 8000c74:	200001e9 	.word	0x200001e9

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7a:	b095      	sub	sp, #84	@ 0x54
 8000c7c:	af14      	add	r7, sp, #80	@ 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c7e:	f001 fbcf 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c82:	f000 f93b 	bl	8000efc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  system_clock_setup();
 8000c86:	f000 fc5d 	bl	8001544 <system_clock_setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c8a:	f000 fb59 	bl	8001340 <MX_GPIO_Init>
  MX_RTC_Init();
 8000c8e:	f000 f99b 	bl	8000fc8 <MX_RTC_Init>
  MX_TIM1_Init();
 8000c92:	f000 fa2d 	bl	80010f0 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000c96:	f000 fae5 	bl	8001264 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c9a:	f000 fb1b 	bl	80012d4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //timeDateInit();
  coast_lcd_init();
 8000c9e:	f7ff fb93 	bl	80003c8 <coast_lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000ca2:	4886      	ldr	r0, [pc, #536]	@ (8000ebc <main+0x244>)
 8000ca4:	f004 f94e 	bl	8004f44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000ca8:	4885      	ldr	r0, [pc, #532]	@ (8000ec0 <main+0x248>)
 8000caa:	f004 f94b 	bl	8004f44 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  runCountdown(&countdown, &lastSecond, second, htim1, enable_sound);
 8000cae:	4b85      	ldr	r3, [pc, #532]	@ (8000ec4 <main+0x24c>)
 8000cb0:	681d      	ldr	r5, [r3, #0]
 8000cb2:	4b85      	ldr	r3, [pc, #532]	@ (8000ec8 <main+0x250>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4c85      	ldr	r4, [pc, #532]	@ (8000ecc <main+0x254>)
 8000cb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8000cba:	4668      	mov	r0, sp
 8000cbc:	1d23      	adds	r3, r4, #4
 8000cbe:	2248      	movs	r2, #72	@ 0x48
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f005 fced 	bl	80066a0 <memcpy>
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	462a      	mov	r2, r5
 8000cca:	4981      	ldr	r1, [pc, #516]	@ (8000ed0 <main+0x258>)
 8000ccc:	4881      	ldr	r0, [pc, #516]	@ (8000ed4 <main+0x25c>)
 8000cce:	f001 f915 	bl	8001efc <runCountdown>
	  runStopwatch(&stopwatch, &lastSecond, second);
 8000cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ec4 <main+0x24c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	497d      	ldr	r1, [pc, #500]	@ (8000ed0 <main+0x258>)
 8000cda:	487f      	ldr	r0, [pc, #508]	@ (8000ed8 <main+0x260>)
 8000cdc:	f001 fac2 	bl	8002264 <runStopwatch>
	  if (button_sound) {
 8000ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8000edc <main+0x264>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d01f      	beq.n	8000d28 <main+0xb0>
		  /* frequency ： duration ：volume : htim1 */
		  play_note(460, 150, 50, htim1);
 8000ce8:	4c78      	ldr	r4, [pc, #480]	@ (8000ecc <main+0x254>)
 8000cea:	4668      	mov	r0, sp
 8000cec:	1d23      	adds	r3, r4, #4
 8000cee:	2248      	movs	r2, #72	@ 0x48
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f005 fcd5 	bl	80066a0 <memcpy>
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	2232      	movs	r2, #50	@ 0x32
 8000cfa:	2196      	movs	r1, #150	@ 0x96
 8000cfc:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000d00:	f7ff fb14 	bl	800032c <play_note>
		  play_note(300, 50, 50, htim1);
 8000d04:	4c71      	ldr	r4, [pc, #452]	@ (8000ecc <main+0x254>)
 8000d06:	4668      	mov	r0, sp
 8000d08:	1d23      	adds	r3, r4, #4
 8000d0a:	2248      	movs	r2, #72	@ 0x48
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f005 fcc7 	bl	80066a0 <memcpy>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	2232      	movs	r2, #50	@ 0x32
 8000d16:	2132      	movs	r1, #50	@ 0x32
 8000d18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d1c:	f7ff fb06 	bl	800032c <play_note>
		  button_sound = false;
 8000d20:	4b6e      	ldr	r3, [pc, #440]	@ (8000edc <main+0x264>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e011      	b.n	8000d4c <main+0xd4>
	  } else {
		  stop_sound(htim1);
 8000d28:	4e68      	ldr	r6, [pc, #416]	@ (8000ecc <main+0x254>)
 8000d2a:	466d      	mov	r5, sp
 8000d2c:	f106 0410 	add.w	r4, r6, #16
 8000d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000d40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000d44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d48:	f7ff fade 	bl	8000308 <stop_sound>
	  }
	  if (button_vibration) {
 8000d4c:	4b64      	ldr	r3, [pc, #400]	@ (8000ee0 <main+0x268>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <main+0xe6>
		  generate_vibration();
 8000d54:	f001 face 	bl	80022f4 <generate_vibration>
		  button_vibration = false;
 8000d58:	4b61      	ldr	r3, [pc, #388]	@ (8000ee0 <main+0x268>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
	  }
	  if (currentScreen != previousScreen || timeFormatChanged) {
 8000d5e:	4b61      	ldr	r3, [pc, #388]	@ (8000ee4 <main+0x26c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b60      	ldr	r3, [pc, #384]	@ (8000ee8 <main+0x270>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d103      	bne.n	8000d76 <main+0xfe>
 8000d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000eec <main+0x274>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d04c      	beq.n	8000e10 <main+0x198>
			LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff fbbe 	bl	80004f8 <LCD_SendCmd>
//			coast_asm_delay(2);

			switch (currentScreen) {
 8000d7c:	4b59      	ldr	r3, [pc, #356]	@ (8000ee4 <main+0x26c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d836      	bhi.n	8000df6 <main+0x17e>
 8000d88:	a201      	add	r2, pc, #4	@ (adr r2, 8000d90 <main+0x118>)
 8000d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8e:	bf00      	nop
 8000d90:	08000db1 	.word	0x08000db1
 8000d94:	08000dbf 	.word	0x08000dbf
 8000d98:	08000dcd 	.word	0x08000dcd
 8000d9c:	08000df7 	.word	0x08000df7
 8000da0:	08000df7 	.word	0x08000df7
 8000da4:	08000de1 	.word	0x08000de1
 8000da8:	08000ded 	.word	0x08000ded
 8000dac:	08000ddb 	.word	0x08000ddb
				case HOME:
					homePage(); // draw layout only
 8000db0:	f7ff fae0 	bl	8000374 <homePage>
					updateTime(1, 4);
 8000db4:	2104      	movs	r1, #4
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 fe18 	bl	80019ec <updateTime>
					break;
 8000dbc:	e01b      	b.n	8000df6 <main+0x17e>
				case TIME:
					timePage();
 8000dbe:	f000 fdbf 	bl	8001940 <timePage>
					updateTime(0, 4);
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fe11 	bl	80019ec <updateTime>
					break;
 8000dca:	e014      	b.n	8000df6 <main+0x17e>
				case ALARM:
					alarmPage();
 8000dcc:	f000 fe78 	bl	8001ac0 <alarmPage>
					updateAlarm(1, 0);
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fed2 	bl	8001b7c <updateAlarm>
					break;
 8000dd8:	e00d      	b.n	8000df6 <main+0x17e>
				case ALARM_SET:
				    alarmConfirm();
 8000dda:	f000 ffbd 	bl	8001d58 <alarmConfirm>
				    break;
 8000dde:	e00a      	b.n	8000df6 <main+0x17e>
				case COUNTDOWN:
					countdownPage(countdown);
 8000de0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed4 <main+0x25c>)
 8000de2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000de6:	f000 ffed 	bl	8001dc4 <countdownPage>
					break;
 8000dea:	e004      	b.n	8000df6 <main+0x17e>
				case STOPWATCH:
					stopwatchPage(stopwatch);
 8000dec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed8 <main+0x260>)
 8000dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df0:	f001 f9a0 	bl	8002134 <stopwatchPage>
					break;
 8000df4:	bf00      	nop
			}
			previousScreen = currentScreen;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <main+0x26c>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee8 <main+0x270>)
 8000dfe:	701a      	strb	r2, [r3, #0]
			timeFormatChanged = false;  // ✅ clear the flag
 8000e00:	4b3a      	ldr	r3, [pc, #232]	@ (8000eec <main+0x274>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
			last_tick = HAL_GetTick();
 8000e06:	f001 fb65 	bl	80024d4 <HAL_GetTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a38      	ldr	r2, [pc, #224]	@ (8000ef0 <main+0x278>)
 8000e0e:	6013      	str	r3, [r2, #0]

	  }
	  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e16:	4837      	ldr	r0, [pc, #220]	@ (8000ef4 <main+0x27c>)
 8000e18:	f001 fe40 	bl	8002a9c <HAL_GPIO_WritePin>
	  /* UPDATE TIME EVERY SECOND ELAPSED */
	  if ((HAL_GetTick() - last_tick) >= 1000) {
 8000e1c:	f001 fb5a 	bl	80024d4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <main+0x278>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e2c:	f4ff af3f 	bcc.w	8000cae <main+0x36>
	  	switch (currentScreen) {
 8000e30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <main+0x26c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	3b01      	subs	r3, #1
 8000e38:	2b06      	cmp	r3, #6
 8000e3a:	d836      	bhi.n	8000eaa <main+0x232>
 8000e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e44 <main+0x1cc>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e61 	.word	0x08000e61
 8000e48:	08000e6b 	.word	0x08000e6b
 8000e4c:	08000e75 	.word	0x08000e75
 8000e50:	08000eab 	.word	0x08000eab
 8000e54:	08000eab 	.word	0x08000eab
 8000e58:	08000e7f 	.word	0x08000e7f
 8000e5c:	08000e8b 	.word	0x08000e8b
	  		case HOME:
	  			updateTime(1, 4);  // row 1 (second line), column 4
 8000e60:	2104      	movs	r1, #4
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 fdc2 	bl	80019ec <updateTime>
	  			break;
 8000e68:	e020      	b.n	8000eac <main+0x234>
	  		case TIME:
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 fdbd 	bl	80019ec <updateTime>
	  			break;
 8000e72:	e01b      	b.n	8000eac <main+0x234>
	  		case ALARM:
	  			updateAlarm(1, 0);
 8000e74:	2100      	movs	r1, #0
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fe80 	bl	8001b7c <updateAlarm>
	  			break;
 8000e7c:	e016      	b.n	8000eac <main+0x234>
	  		case COUNTDOWN:
	  			updateCountdown(countdown);
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <main+0x25c>)
 8000e80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e84:	f001 f808 	bl	8001e98 <updateCountdown>
	  			break;
 8000e88:	e010      	b.n	8000eac <main+0x234>
	  		case STOPWATCH:
	  			if (lapStopwatchFlag) {
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <main+0x280>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <main+0x228>
	  				lapStopwatch(stopwatch);
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <main+0x260>)
 8000e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e96:	f001 f973 	bl	8002180 <lapStopwatch>
	  				lapStopwatchFlag = false;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <main+0x280>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
	  			}
		  		updateStopwatch(stopwatch);
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <main+0x260>)
 8000ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ea4:	f001 f9be 	bl	8002224 <updateStopwatch>


				break;
 8000ea8:	e000      	b.n	8000eac <main+0x234>
	  		default:
	  			break;
 8000eaa:	bf00      	nop
	  	}
	  	last_tick += 1000;
 8000eac:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <main+0x278>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef0 <main+0x278>)
 8000eb6:	6013      	str	r3, [r2, #0]
	  runCountdown(&countdown, &lastSecond, second, htim1, enable_sound);
 8000eb8:	e6f9      	b.n	8000cae <main+0x36>
 8000eba:	bf00      	nop
 8000ebc:	2000010c 	.word	0x2000010c
 8000ec0:	20000158 	.word	0x20000158
 8000ec4:	200001a8 	.word	0x200001a8
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	200000c0 	.word	0x200000c0
 8000ed0:	200001ac 	.word	0x200001ac
 8000ed4:	200001ec 	.word	0x200001ec
 8000ed8:	200001f8 	.word	0x200001f8
 8000edc:	200001e8 	.word	0x200001e8
 8000ee0:	200001e9 	.word	0x200001e9
 8000ee4:	2000000a 	.word	0x2000000a
 8000ee8:	20000209 	.word	0x20000209
 8000eec:	200001d8 	.word	0x200001d8
 8000ef0:	200001a4 	.word	0x200001a4
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	20000208 	.word	0x20000208

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0a6      	sub	sp, #152	@ 0x98
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f06:	2228      	movs	r2, #40	@ 0x28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 fb94 	bl	8006638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2258      	movs	r2, #88	@ 0x58
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fb86 	bl	8006638 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2310      	movs	r3, #16
 8000f36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f4e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 fdcb 	bl	8002afc <HAL_RCC_OscConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f6c:	f000 fb51 	bl	8001612 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f70:	230f      	movs	r3, #15
 8000f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f74:	2302      	movs	r3, #2
 8000f76:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f80:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f86:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fdd9 	bl	8003b44 <HAL_RCC_ClockConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000f98:	f000 fb3b 	bl	8001612 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8000f9c:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8000fa0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 ff8a 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fba:	f000 fb2a 	bl	8001612 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3798      	adds	r7, #152	@ 0x98
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	@ 0x40
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000fce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2228      	movs	r2, #40	@ 0x28
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fb25 	bl	8006638 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fee:	4b3e      	ldr	r3, [pc, #248]	@ (80010e8 <MX_RTC_Init+0x120>)
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80010ec <MX_RTC_Init+0x124>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80010e8 <MX_RTC_Init+0x120>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80010e8 <MX_RTC_Init+0x120>)
 8000ffc:	227f      	movs	r2, #127	@ 0x7f
 8000ffe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001000:	4b39      	ldr	r3, [pc, #228]	@ (80010e8 <MX_RTC_Init+0x120>)
 8001002:	22ff      	movs	r2, #255	@ 0xff
 8001004:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001006:	4b38      	ldr	r3, [pc, #224]	@ (80010e8 <MX_RTC_Init+0x120>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <MX_RTC_Init+0x120>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001012:	4b35      	ldr	r3, [pc, #212]	@ (80010e8 <MX_RTC_Init+0x120>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001018:	4833      	ldr	r0, [pc, #204]	@ (80010e8 <MX_RTC_Init+0x120>)
 800101a:	f003 f971 	bl	8004300 <HAL_RTC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001024:	f000 faf5 	bl	8001612 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8001028:	2308      	movs	r3, #8
 800102a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x30;
 800102e:	2330      	movs	r3, #48	@ 0x30
 8001030:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001046:	2201      	movs	r2, #1
 8001048:	4619      	mov	r1, r3
 800104a:	4827      	ldr	r0, [pc, #156]	@ (80010e8 <MX_RTC_Init+0x120>)
 800104c:	f003 f9db 	bl	8004406 <HAL_RTC_SetTime>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001056:	f000 fadc 	bl	8001612 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800105a:	2307      	movs	r3, #7
 800105c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 8001060:	2308      	movs	r3, #8
 8001062:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x3;
 8001066:	2303      	movs	r3, #3
 8001068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 800106c:	2325      	movs	r3, #37	@ 0x25
 800106e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001072:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <MX_RTC_Init+0x120>)
 800107c:	f003 fabb 	bl	80045f6 <HAL_RTC_SetDate>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001086:	f000 fac4 	bl	8001612 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800108a:	2300      	movs	r3, #0
 800108c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800108e:	2300      	movs	r3, #0
 8001090:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001092:	2300      	movs	r3, #0
 8001094:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80010b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <MX_RTC_Init+0x120>)
 80010c2:	f003 fc95 	bl	80049f0 <HAL_RTC_SetAlarm_IT>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80010cc:	f000 faa1 	bl	8001612 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2100      	movs	r1, #0
 80010d4:	2029      	movs	r0, #41	@ 0x29
 80010d6:	f001 fb08 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80010da:	2029      	movs	r0, #41	@ 0x29
 80010dc:	f001 fb21 	bl	8002722 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3740      	adds	r7, #64	@ 0x40
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200000a0 	.word	0x200000a0
 80010ec:	40002800 	.word	0x40002800

080010f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b09a      	sub	sp, #104	@ 0x68
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001110:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	222c      	movs	r2, #44	@ 0x2c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fa84 	bl	8006638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001130:	4b4a      	ldr	r3, [pc, #296]	@ (800125c <MX_TIM1_Init+0x16c>)
 8001132:	4a4b      	ldr	r2, [pc, #300]	@ (8001260 <MX_TIM1_Init+0x170>)
 8001134:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000 -1;
 8001136:	4b49      	ldr	r3, [pc, #292]	@ (800125c <MX_TIM1_Init+0x16c>)
 8001138:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800113c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b47      	ldr	r3, [pc, #284]	@ (800125c <MX_TIM1_Init+0x16c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 296;
 8001144:	4b45      	ldr	r3, [pc, #276]	@ (800125c <MX_TIM1_Init+0x16c>)
 8001146:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800114a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b43      	ldr	r3, [pc, #268]	@ (800125c <MX_TIM1_Init+0x16c>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001152:	4b42      	ldr	r3, [pc, #264]	@ (800125c <MX_TIM1_Init+0x16c>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b40      	ldr	r3, [pc, #256]	@ (800125c <MX_TIM1_Init+0x16c>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800115e:	483f      	ldr	r0, [pc, #252]	@ (800125c <MX_TIM1_Init+0x16c>)
 8001160:	f003 fe98 	bl	8004e94 <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800116a:	f000 fa52 	bl	8001612 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001172:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001174:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001178:	4619      	mov	r1, r3
 800117a:	4838      	ldr	r0, [pc, #224]	@ (800125c <MX_TIM1_Init+0x16c>)
 800117c:	f004 fb72 	bl	8005864 <HAL_TIM_ConfigClockSource>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001186:	f000 fa44 	bl	8001612 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800118a:	4834      	ldr	r0, [pc, #208]	@ (800125c <MX_TIM1_Init+0x16c>)
 800118c:	f003 ff4a 	bl	8005024 <HAL_TIM_PWM_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001196:	f000 fa3c 	bl	8001612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011aa:	4619      	mov	r1, r3
 80011ac:	482b      	ldr	r0, [pc, #172]	@ (800125c <MX_TIM1_Init+0x16c>)
 80011ae:	f005 f8bb 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80011b8:	f000 fa2b 	bl	8001612 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	@ 0x60
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011c8:	2300      	movs	r3, #0
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011dc:	2200      	movs	r2, #0
 80011de:	4619      	mov	r1, r3
 80011e0:	481e      	ldr	r0, [pc, #120]	@ (800125c <MX_TIM1_Init+0x16c>)
 80011e2:	f004 fa2b 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80011ec:	f000 fa11 	bl	8001612 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f4:	2208      	movs	r2, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4818      	ldr	r0, [pc, #96]	@ (800125c <MX_TIM1_Init+0x16c>)
 80011fa:	f004 fa1f 	bl	800563c <HAL_TIM_PWM_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001204:	f000 fa05 	bl	8001612 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001220:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800122a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	@ (800125c <MX_TIM1_Init+0x16c>)
 800123e:	f005 f8ff 	bl	8006440 <HAL_TIMEx_ConfigBreakDeadTime>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001248:	f000 f9e3 	bl	8001612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <MX_TIM1_Init+0x16c>)
 800124e:	f000 fa8d 	bl	800176c <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3768      	adds	r7, #104	@ 0x68
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000c0 	.word	0x200000c0
 8001260:	40012c00 	.word	0x40012c00

08001264 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <MX_TIM6_Init+0x68>)
 8001276:	4a16      	ldr	r2, [pc, #88]	@ (80012d0 <MX_TIM6_Init+0x6c>)
 8001278:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_TIM6_Init+0x68>)
 800127c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001280:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_TIM6_Init+0x68>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8001288:	4b10      	ldr	r3, [pc, #64]	@ (80012cc <MX_TIM6_Init+0x68>)
 800128a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800128e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_TIM6_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001296:	480d      	ldr	r0, [pc, #52]	@ (80012cc <MX_TIM6_Init+0x68>)
 8001298:	f003 fdfc 	bl	8004e94 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80012a2:	f000 f9b6 	bl	8001612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	@ (80012cc <MX_TIM6_Init+0x68>)
 80012b4:	f005 f838 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80012be:	f000 f9a8 	bl	8001612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000010c 	.word	0x2000010c
 80012d0:	40001000 	.word	0x40001000

080012d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <MX_TIM7_Init+0x64>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	@ (800133c <MX_TIM7_Init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_TIM7_Init+0x64>)
 80012ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_TIM7_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 71;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_TIM7_Init+0x64>)
 80012fa:	2247      	movs	r2, #71	@ 0x47
 80012fc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <MX_TIM7_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <MX_TIM7_Init+0x64>)
 8001306:	f003 fdc5 	bl	8004e94 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001310:	f000 f97f 	bl	8001612 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_TIM7_Init+0x64>)
 8001322:	f005 f801 	bl	8006328 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800132c:	f000 f971 	bl	8001612 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000158 	.word	0x20000158
 800133c:	40001400 	.word	0x40001400

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b77      	ldr	r3, [pc, #476]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a76      	ldr	r2, [pc, #472]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 800135c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136e:	4b71      	ldr	r3, [pc, #452]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a70      	ldr	r2, [pc, #448]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 8001374:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b6b      	ldr	r3, [pc, #428]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a6a      	ldr	r2, [pc, #424]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 800138c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001390:	6153      	str	r3, [r2, #20]
 8001392:	4b68      	ldr	r3, [pc, #416]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	4b65      	ldr	r3, [pc, #404]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a64      	ldr	r2, [pc, #400]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a8:	6153      	str	r3, [r2, #20]
 80013aa:	4b62      	ldr	r3, [pc, #392]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 80013bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001534 <MX_GPIO_Init+0x1f4>)
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 80013ce:	2200      	movs	r2, #0
 80013d0:	f640 71e1 	movw	r1, #4065	@ 0xfe1
 80013d4:	4858      	ldr	r0, [pc, #352]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 80013d6:	f001 fb61 	bl	8002a9c <HAL_GPIO_WritePin>
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|COILB_Pin|Control_RS_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	f249 0120 	movw	r1, #36896	@ 0x9020
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e4:	f001 fb5a 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 80013e8:	2200      	movs	r2, #0
 80013ea:	f248 41bc 	movw	r1, #33980	@ 0x84bc
 80013ee:	4853      	ldr	r0, [pc, #332]	@ (800153c <MX_GPIO_Init+0x1fc>)
 80013f0:	f001 fb54 	bl	8002a9c <HAL_GPIO_WritePin>
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Control_E_GPIO_Port, Control_E_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2104      	movs	r1, #4
 80013f8:	4851      	ldr	r0, [pc, #324]	@ (8001540 <MX_GPIO_Init+0x200>)
 80013fa:	f001 fb4f 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001404:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4848      	ldr	r0, [pc, #288]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001416:	f001 f99f 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin COILA_Pin Control_RW_Pin COILC_Pin
                           Data_D4_Pin Data_D5_Pin Data_D6_Pin Data_D7_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 800141a:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 800141e:	617b      	str	r3, [r7, #20]
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4841      	ldr	r0, [pc, #260]	@ (8001538 <MX_GPIO_Init+0x1f8>)
 8001434:	f001 f990 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001438:	2312      	movs	r3, #18
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800143c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f001 f982 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001454:	230c      	movs	r3, #12
 8001456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001464:	2307      	movs	r3, #7
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001472:	f001 f971 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin COILB_Pin Control_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|COILB_Pin|Control_RS_Pin;
 8001476:	f249 0320 	movw	r3, #36896	@ 0x9020
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001492:	f001 f961 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8001496:	2301      	movs	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800149a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4824      	ldr	r0, [pc, #144]	@ (800153c <MX_GPIO_Init+0x1fc>)
 80014ac:	f001 f954 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : COILD_Pin LED_D1_Pin SER_Data_IN_Pin LED_D2_Pin
                           LED_D2B4_Pin LED_D3_Pin RCLK_Latch_Pin */
  GPIO_InitStruct.Pin = COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 80014b0:	f248 43bc 	movw	r3, #33980	@ 0x84bc
 80014b4:	617b      	str	r3, [r7, #20]
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	4619      	mov	r1, r3
 80014c8:	481c      	ldr	r0, [pc, #112]	@ (800153c <MX_GPIO_Init+0x1fc>)
 80014ca:	f001 f945 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_E_Pin */
  GPIO_InitStruct.Pin = Control_E_Pin;
 80014ce:	2304      	movs	r3, #4
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_E_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4816      	ldr	r0, [pc, #88]	@ (8001540 <MX_GPIO_Init+0x200>)
 80014e6:	f001 f937 	bl	8002758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2006      	movs	r0, #6
 80014f0:	f001 f8fb 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014f4:	2006      	movs	r0, #6
 80014f6:	f001 f914 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2007      	movs	r0, #7
 8001500:	f001 f8f3 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001504:	2007      	movs	r0, #7
 8001506:	f001 f90c 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200a      	movs	r0, #10
 8001510:	f001 f8eb 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001514:	200a      	movs	r0, #10
 8001516:	f001 f904 	bl	8002722 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2028      	movs	r0, #40	@ 0x28
 8001520:	f001 f8e3 	bl	80026ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001524:	2028      	movs	r0, #40	@ 0x28
 8001526:	f001 f8fc 	bl	8002722 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48000800 	.word	0x48000800
 800153c:	48000400 	.word	0x48000400
 8001540:	48000c00 	.word	0x48000c00

08001544 <system_clock_setup>:

/* USER CODE BEGIN 4 */
void system_clock_setup() {
 8001544:	b580      	push	{r7, lr}
 8001546:	b0a6      	sub	sp, #152	@ 0x98
 8001548:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800154e:	2228      	movs	r2, #40	@ 0x28
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f005 f870 	bl	8006638 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2258      	movs	r2, #88	@ 0x58
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f005 f862 	bl	8006638 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001574:	2306      	movs	r3, #6
 8001576:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001578:	2301      	movs	r3, #1
 800157a:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800157c:	2310      	movs	r3, #16
 800157e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001582:	2301      	movs	r3, #1
 8001584:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158c:	2302      	movs	r3, #2
 800158e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001596:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800159a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 faa5 	bl	8002afc <HAL_RCC_OscConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <system_clock_setup+0x78>
	{
	Error_Handler();
 80015b8:	f000 f82b 	bl	8001612 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015bc:	230f      	movs	r3, #15
 80015be:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c0:	2302      	movs	r3, #2
 80015c2:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015cc:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015d2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015d6:	2101      	movs	r1, #1
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fab3 	bl	8003b44 <HAL_RCC_ClockConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <system_clock_setup+0xa4>
	{
	Error_Handler();
 80015e4:	f000 f815 	bl	8001612 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 80015e8:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 80015ec:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f2:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fc64 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <system_clock_setup+0xc6>
	{
	Error_Handler();
 8001606:	f000 f804 	bl	8001612 <Error_Handler>
	}
}
 800160a:	bf00      	nop
 800160c:	3798      	adds	r7, #152	@ 0x98
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001616:	b672      	cpsid	i
}
 8001618:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161a:	bf00      	nop
 800161c:	e7fd      	b.n	800161a <Error_Handler+0x8>
	...

08001620 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_MspInit+0x44>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <HAL_MspInit+0x44>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6193      	str	r3, [r2, #24]
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <HAL_MspInit+0x44>)
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_MspInit+0x44>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_MspInit+0x44>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_MspInit+0x44>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001656:	2007      	movs	r0, #7
 8001658:	f001 f83c 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_RTC_MspInit+0x50>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d119      	bne.n	80016ae <HAL_RTC_MspInit+0x46>
 800167a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800167e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001688:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_RTC_MspInit+0x54>)
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	461a      	mov	r2, r3
 800169a:	2301      	movs	r3, #1
 800169c:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2029      	movs	r0, #41	@ 0x29
 80016a4:	f001 f821 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80016a8:	2029      	movs	r0, #41	@ 0x29
 80016aa:	f001 f83a 	bl	8002722 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40002800 	.word	0x40002800
 80016bc:	10908100 	.word	0x10908100

080016c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a23      	ldr	r2, [pc, #140]	@ (800175c <HAL_TIM_Base_MspInit+0x9c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10c      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d2:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 80016d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016ea:	e032      	b.n	8001752 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001764 <HAL_TIM_Base_MspInit+0xa4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d114      	bne.n	8001720 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 80016fc:	f043 0310 	orr.w	r3, r3, #16
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2036      	movs	r0, #54	@ 0x36
 8001714:	f000 ffe9 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001718:	2036      	movs	r0, #54	@ 0x36
 800171a:	f001 f802 	bl	8002722 <HAL_NVIC_EnableIRQ>
}
 800171e:	e018      	b.n	8001752 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a10      	ldr	r2, [pc, #64]	@ (8001768 <HAL_TIM_Base_MspInit+0xa8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d113      	bne.n	8001752 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <HAL_TIM_Base_MspInit+0xa0>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	2037      	movs	r0, #55	@ 0x37
 8001748:	f000 ffcf 	bl	80026ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800174c:	2037      	movs	r0, #55	@ 0x37
 800174e:	f000 ffe8 	bl	8002722 <HAL_NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40001000 	.word	0x40001000
 8001768:	40001400 	.word	0x40001400

0800176c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <HAL_TIM_MspPostInit+0x64>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11b      	bne.n	80017c6 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_TIM_MspPostInit+0x68>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <HAL_TIM_MspPostInit+0x68>)
 8001794:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_TIM_MspPostInit+0x68>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a6:	2304      	movs	r3, #4
 80017a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <HAL_TIM_MspPostInit+0x6c>)
 80017c2:	f000 ffc9 	bl	8002758 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	48000800 	.word	0x48000800

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 fe3b 	bl	80024ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}

0800183a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 800183e:	2001      	movs	r0, #1
 8001840:	f001 f944 	bl	8002acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800184c:	2002      	movs	r0, #2
 800184e:	f001 f93d 	bl	8002acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 800185a:	2010      	movs	r0, #16
 800185c:	f001 f936 	bl	8002acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}

08001864 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001868:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800186c:	f001 f92e 	bl	8002acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <RTC_Alarm_IRQHandler+0x10>)
 800187a:	f003 f9fd 	bl	8004c78 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200000a0 	.word	0x200000a0

08001888 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <TIM6_DAC_IRQHandler+0x10>)
 800188e:	f003 fdd3 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000010c 	.word	0x2000010c

0800189c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <TIM7_IRQHandler+0x10>)
 80018a2:	f003 fdc9 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000158 	.word	0x20000158

080018b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b8:	4a14      	ldr	r2, [pc, #80]	@ (800190c <_sbrk+0x5c>)
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <_sbrk+0x60>)
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <_sbrk+0x64>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <_sbrk+0x68>)
 80018d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d207      	bcs.n	80018f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e0:	f004 feb2 	bl	8006648 <__errno>
 80018e4:	4603      	mov	r3, r0
 80018e6:	220c      	movs	r2, #12
 80018e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e009      	b.n	8001904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <_sbrk+0x64>)
 8001900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20010000 	.word	0x20010000
 8001910:	00000400 	.word	0x00000400
 8001914:	2000020c 	.word	0x2000020c
 8001918:	20000388 	.word	0x20000388

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <timePage>:
RTC_AlarmTypeDef sAlarm;
bool is_24_hour_format = true;
extern bool timeFormatChanged;
extern void coast_asm_delay(uint32_t milliseconds);

void timePage() {
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8001946:	2001      	movs	r0, #1
 8001948:	f7fe fdd6 	bl	80004f8 <LCD_SendCmd>
	char buff[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800194c:	2200      	movs	r2, #0
 800194e:	491e      	ldr	r1, [pc, #120]	@ (80019c8 <timePage+0x88>)
 8001950:	481e      	ldr	r0, [pc, #120]	@ (80019cc <timePage+0x8c>)
 8001952:	f002 fdf2 	bl	800453a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001956:	2200      	movs	r2, #0
 8001958:	491d      	ldr	r1, [pc, #116]	@ (80019d0 <timePage+0x90>)
 800195a:	481c      	ldr	r0, [pc, #112]	@ (80019cc <timePage+0x8c>)
 800195c:	f002 fecf 	bl	80046fe <HAL_RTC_GetDate>

	char *weekDayMap[7] = {"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <timePage+0x94>)
 8001962:	463c      	mov	r4, r7
 8001964:	461d      	mov	r5, r3
 8001966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800196e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char *weekday = weekDayMap[sDate.WeekDay - 1];
 8001972:	4b17      	ldr	r3, [pc, #92]	@ (80019d0 <timePage+0x90>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	3330      	adds	r3, #48	@ 0x30
 800197c:	443b      	add	r3, r7
 800197e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c

	sprintf(buff, "%s ", weekday);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800198a:	4913      	ldr	r1, [pc, #76]	@ (80019d8 <timePage+0x98>)
 800198c:	4618      	mov	r0, r3
 800198e:	f004 fe31 	bl	80065f4 <siprintf>

	LCD_SendStr(buff);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdea 	bl	8000570 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 800199c:	20c0      	movs	r0, #192	@ 0xc0
 800199e:	f7fe fdab 	bl	80004f8 <LCD_SendCmd>

	LCD_SendStr("ALARM");
 80019a2:	480e      	ldr	r0, [pc, #56]	@ (80019dc <timePage+0x9c>)
 80019a4:	f7fe fde4 	bl	8000570 <LCD_SendStr>


	if (is_24_hour_format) {
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <timePage+0xa0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <timePage+0x78>
	    LCD_SendStr("   24H_TIME");
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <timePage+0xa4>)
 80019b2:	f7fe fddd 	bl	8000570 <LCD_SendStr>
	} else {
	    LCD_SendStr("   12H_TIME");
	}

}
 80019b6:	e002      	b.n	80019be <timePage+0x7e>
	    LCD_SendStr("   12H_TIME");
 80019b8:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <timePage+0xa8>)
 80019ba:	f7fe fdd9 	bl	8000570 <LCD_SendStr>
}
 80019be:	bf00      	nop
 80019c0:	3730      	adds	r7, #48	@ 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdb0      	pop	{r4, r5, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000088 	.word	0x20000088
 80019cc:	200000a0 	.word	0x200000a0
 80019d0:	2000009c 	.word	0x2000009c
 80019d4:	08006fd0 	.word	0x08006fd0
 80019d8:	08006f90 	.word	0x08006f90
 80019dc:	08006f94 	.word	0x08006f94
 80019e0:	20000010 	.word	0x20000010
 80019e4:	08006f9c 	.word	0x08006f9c
 80019e8:	08006fa8 	.word	0x08006fa8

080019ec <updateTime>:

void updateTime(uint8_t row, uint8_t col) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	71bb      	strb	r3, [r7, #6]
	char buff[8];
	char dateBuff[8];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019fc:	2200      	movs	r2, #0
 80019fe:	492a      	ldr	r1, [pc, #168]	@ (8001aa8 <updateTime+0xbc>)
 8001a00:	482a      	ldr	r0, [pc, #168]	@ (8001aac <updateTime+0xc0>)
 8001a02:	f002 fd9a 	bl	800453a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a06:	2200      	movs	r2, #0
 8001a08:	4929      	ldr	r1, [pc, #164]	@ (8001ab0 <updateTime+0xc4>)
 8001a0a:	4828      	ldr	r0, [pc, #160]	@ (8001aac <updateTime+0xc0>)
 8001a0c:	f002 fe77 	bl	80046fe <HAL_RTC_GetDate>

	uint8_t hours = sTime.Hours;
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <updateTime+0xbc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	77bb      	strb	r3, [r7, #30]
	uint8_t minutes = sTime.Minutes;
 8001a16:	4b24      	ldr	r3, [pc, #144]	@ (8001aa8 <updateTime+0xbc>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	777b      	strb	r3, [r7, #29]
	uint8_t day = sDate.Date;
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <updateTime+0xc4>)
 8001a1e:	789b      	ldrb	r3, [r3, #2]
 8001a20:	773b      	strb	r3, [r7, #28]
	uint8_t month = sDate.Month;
 8001a22:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <updateTime+0xc4>)
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	76fb      	strb	r3, [r7, #27]

	uint8_t displayHour = hours;
 8001a28:	7fbb      	ldrb	r3, [r7, #30]
 8001a2a:	77fb      	strb	r3, [r7, #31]
	 if (!is_24_hour_format) {
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <updateTime+0xc8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <updateTime+0x66>
	        if (hours == 0) {
 8001a3a:	7fbb      	ldrb	r3, [r7, #30]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <updateTime+0x5a>
	        	displayHour = 12;
 8001a40:	230c      	movs	r3, #12
 8001a42:	77fb      	strb	r3, [r7, #31]
 8001a44:	e005      	b.n	8001a52 <updateTime+0x66>
	        }
	        else if (hours > 12) {
 8001a46:	7fbb      	ldrb	r3, [r7, #30]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d902      	bls.n	8001a52 <updateTime+0x66>
	        	displayHour = hours - 12;
 8001a4c:	7fbb      	ldrb	r3, [r7, #30]
 8001a4e:	3b0c      	subs	r3, #12
 8001a50:	77fb      	strb	r3, [r7, #31]
	        }
	    }
	// Move cursor to desired position (row 0 or 1)
	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <updateTime+0x70>
 8001a58:	2380      	movs	r3, #128	@ 0x80
 8001a5a:	e000      	b.n	8001a5e <updateTime+0x72>
 8001a5c:	23c0      	movs	r3, #192	@ 0xc0
 8001a5e:	76bb      	strb	r3, [r7, #26]
	LCD_SendCmd(baseCmd + col);
 8001a60:	7eba      	ldrb	r2, [r7, #26]
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	4413      	add	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd45 	bl	80004f8 <LCD_SendCmd>

	sprintf(buff, "%02d:%02d ", displayHour, minutes);
 8001a6e:	7ffa      	ldrb	r2, [r7, #31]
 8001a70:	7f7b      	ldrb	r3, [r7, #29]
 8001a72:	f107 0010 	add.w	r0, r7, #16
 8001a76:	4910      	ldr	r1, [pc, #64]	@ (8001ab8 <updateTime+0xcc>)
 8001a78:	f004 fdbc 	bl	80065f4 <siprintf>
	LCD_SendStr(buff);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd75 	bl	8000570 <LCD_SendStr>

	sprintf(dateBuff, " %02d/%02d", day, month);
 8001a86:	7f3a      	ldrb	r2, [r7, #28]
 8001a88:	7efb      	ldrb	r3, [r7, #27]
 8001a8a:	f107 0008 	add.w	r0, r7, #8
 8001a8e:	490b      	ldr	r1, [pc, #44]	@ (8001abc <updateTime+0xd0>)
 8001a90:	f004 fdb0 	bl	80065f4 <siprintf>
	LCD_SendStr(dateBuff);
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd69 	bl	8000570 <LCD_SendStr>
}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000088 	.word	0x20000088
 8001aac:	200000a0 	.word	0x200000a0
 8001ab0:	2000009c 	.word	0x2000009c
 8001ab4:	20000010 	.word	0x20000010
 8001ab8:	08006fec 	.word	0x08006fec
 8001abc:	08006ff8 	.word	0x08006ff8

08001ac0 <alarmPage>:


void alarmPage() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af02      	add	r7, sp, #8
	char buff[20];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7fe fd16 	bl	80004f8 <LCD_SendCmd>
//	coast_asm_delay(2);

	LCD_SendCmd(0x80);
 8001acc:	2080      	movs	r0, #128	@ 0x80
 8001ace:	f7fe fd13 	bl	80004f8 <LCD_SendCmd>
	LCD_SendStr("Set Alarm for:");
 8001ad2:	4822      	ldr	r0, [pc, #136]	@ (8001b5c <alarmPage+0x9c>)
 8001ad4:	f7fe fd4c 	bl	8000570 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 8001ad8:	20c0      	movs	r0, #192	@ 0xc0
 8001ada:	f7fe fd0d 	bl	80004f8 <LCD_SendCmd>
	uint8_t h = sAlarm.AlarmTime.Hours;
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <alarmPage+0xa0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	77bb      	strb	r3, [r7, #30]
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <alarmPage+0xa0>)
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	777b      	strb	r3, [r7, #29]

	if (is_24_hour_format) {
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <alarmPage+0xa4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <alarmPage+0x46>
		snprintf(buff, sizeof(buff), "%02d:%02d", h, m);
 8001af2:	7fba      	ldrb	r2, [r7, #30]
 8001af4:	7f7b      	ldrb	r3, [r7, #29]
 8001af6:	1d38      	adds	r0, r7, #4
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <alarmPage+0xa8>)
 8001afe:	2114      	movs	r1, #20
 8001b00:	f004 fd42 	bl	8006588 <sniprintf>
 8001b04:	e021      	b.n	8001b4a <alarmPage+0x8a>
	} else {
		const char *ampm = (h >= 12) ? "P.M" : "A.M";
 8001b06:	7fbb      	ldrb	r3, [r7, #30]
 8001b08:	2b0b      	cmp	r3, #11
 8001b0a:	d901      	bls.n	8001b10 <alarmPage+0x50>
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <alarmPage+0xac>)
 8001b0e:	e000      	b.n	8001b12 <alarmPage+0x52>
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <alarmPage+0xb0>)
 8001b12:	61bb      	str	r3, [r7, #24]
		uint8_t dh = h % 12;
 8001b14:	7fba      	ldrb	r2, [r7, #30]
 8001b16:	4b17      	ldr	r3, [pc, #92]	@ (8001b74 <alarmPage+0xb4>)
 8001b18:	fba3 1302 	umull	r1, r3, r3, r2
 8001b1c:	08d9      	lsrs	r1, r3, #3
 8001b1e:	460b      	mov	r3, r1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	440b      	add	r3, r1
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	77fb      	strb	r3, [r7, #31]
		if (dh == 0) dh = 12;
 8001b2a:	7ffb      	ldrb	r3, [r7, #31]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <alarmPage+0x74>
 8001b30:	230c      	movs	r3, #12
 8001b32:	77fb      	strb	r3, [r7, #31]
		snprintf(buff, sizeof(buff), "%02d:%02d %s", dh, m, ampm);
 8001b34:	7ff9      	ldrb	r1, [r7, #31]
 8001b36:	7f7b      	ldrb	r3, [r7, #29]
 8001b38:	1d38      	adds	r0, r7, #4
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	9201      	str	r2, [sp, #4]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	460b      	mov	r3, r1
 8001b42:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <alarmPage+0xb8>)
 8001b44:	2114      	movs	r1, #20
 8001b46:	f004 fd1f 	bl	8006588 <sniprintf>
	}
	LCD_SendStr(buff);
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fd0f 	bl	8000570 <LCD_SendStr>
}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	08007004 	.word	0x08007004
 8001b60:	20000210 	.word	0x20000210
 8001b64:	20000010 	.word	0x20000010
 8001b68:	08007014 	.word	0x08007014
 8001b6c:	08007020 	.word	0x08007020
 8001b70:	08007024 	.word	0x08007024
 8001b74:	aaaaaaab 	.word	0xaaaaaaab
 8001b78:	08007028 	.word	0x08007028

08001b7c <updateAlarm>:

void updateAlarm(uint8_t row, uint8_t col) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]

	char buff[16];
	uint8_t h = sAlarm.AlarmTime.Hours;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <updateAlarm+0xb0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	77bb      	strb	r3, [r7, #30]
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <updateAlarm+0xb0>)
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	777b      	strb	r3, [r7, #29]

	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <updateAlarm+0x26>
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	e000      	b.n	8001ba4 <updateAlarm+0x28>
 8001ba2:	23c0      	movs	r3, #192	@ 0xc0
 8001ba4:	773b      	strb	r3, [r7, #28]
	LCD_SendCmd(baseCmd + col);
 8001ba6:	7f3a      	ldrb	r2, [r7, #28]
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	4413      	add	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fca2 	bl	80004f8 <LCD_SendCmd>

	if (is_24_hour_format) {
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <updateAlarm+0xb4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00a      	beq.n	8001bd2 <updateAlarm+0x56>
		snprintf(buff, sizeof(buff), "%02d:%02d", h, m);
 8001bbc:	7fba      	ldrb	r2, [r7, #30]
 8001bbe:	7f7b      	ldrb	r3, [r7, #29]
 8001bc0:	f107 0008 	add.w	r0, r7, #8
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c34 <updateAlarm+0xb8>)
 8001bca:	2110      	movs	r1, #16
 8001bcc:	f004 fcdc 	bl	8006588 <sniprintf>
 8001bd0:	e022      	b.n	8001c18 <updateAlarm+0x9c>
	} else {
		const char *ampm = (h >= 12) ? "P.M" : "A.M";
 8001bd2:	7fbb      	ldrb	r3, [r7, #30]
 8001bd4:	2b0b      	cmp	r3, #11
 8001bd6:	d901      	bls.n	8001bdc <updateAlarm+0x60>
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <updateAlarm+0xbc>)
 8001bda:	e000      	b.n	8001bde <updateAlarm+0x62>
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <updateAlarm+0xc0>)
 8001bde:	61bb      	str	r3, [r7, #24]
		uint8_t dh = h % 12; if (dh == 0) dh = 12;
 8001be0:	7fba      	ldrb	r2, [r7, #30]
 8001be2:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <updateAlarm+0xc4>)
 8001be4:	fba3 1302 	umull	r1, r3, r3, r2
 8001be8:	08d9      	lsrs	r1, r3, #3
 8001bea:	460b      	mov	r3, r1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	440b      	add	r3, r1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	77fb      	strb	r3, [r7, #31]
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <updateAlarm+0x84>
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	77fb      	strb	r3, [r7, #31]
		snprintf(buff, sizeof(buff), "%02d:%02d%s", dh, m, ampm);
 8001c00:	7ff9      	ldrb	r1, [r7, #31]
 8001c02:	7f7b      	ldrb	r3, [r7, #29]
 8001c04:	f107 0008 	add.w	r0, r7, #8
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	9201      	str	r2, [sp, #4]
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <updateAlarm+0xc8>)
 8001c12:	2110      	movs	r1, #16
 8001c14:	f004 fcb8 	bl	8006588 <sniprintf>
	}
	LCD_SendStr(buff);
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fca7 	bl	8000570 <LCD_SendStr>
}
 8001c22:	bf00      	nop
 8001c24:	3720      	adds	r7, #32
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000210 	.word	0x20000210
 8001c30:	20000010 	.word	0x20000010
 8001c34:	08007014 	.word	0x08007014
 8001c38:	08007020 	.word	0x08007020
 8001c3c:	08007024 	.word	0x08007024
 8001c40:	aaaaaaab 	.word	0xaaaaaaab
 8001c44:	08007038 	.word	0x08007038

08001c48 <switchTimeFormat>:

void switchTimeFormat() {
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    is_24_hour_format = !is_24_hour_format;
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <switchTimeFormat+0x34>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f083 0301 	eor.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <switchTimeFormat+0x34>)
 8001c68:	701a      	strb	r2, [r3, #0]
    timeFormatChanged = true;
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <switchTimeFormat+0x38>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000010 	.word	0x20000010
 8001c80:	200001d8 	.word	0x200001d8

08001c84 <switchAMPM>:

void switchAMPM(){
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0

	if (is_24_hour_format) return;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <switchAMPM+0x40>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d111      	bne.n	8001cb6 <switchAMPM+0x32>
	uint8_t h = sAlarm.AlarmTime.Hours; // 0..23
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <switchAMPM+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
	    if (h >= 12) {
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b0b      	cmp	r3, #11
 8001c9c:	d905      	bls.n	8001caa <switchAMPM+0x26>
	        sAlarm.AlarmTime.Hours = h - 12; // PM -> AM
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	3b0c      	subs	r3, #12
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <switchAMPM+0x44>)
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e006      	b.n	8001cb8 <switchAMPM+0x34>
	    } else {
	        sAlarm.AlarmTime.Hours = h + 12; // AM -> PM
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	330c      	adds	r3, #12
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <switchAMPM+0x44>)
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e000      	b.n	8001cb8 <switchAMPM+0x34>
	if (is_24_hour_format) return;
 8001cb6:	bf00      	nop
	    }
}
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000010 	.word	0x20000010
 8001cc8:	20000210 	.word	0x20000210

08001ccc <changeAlarmHour>:

void changeAlarmHour() {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
	uint8_t h = sAlarm.AlarmTime.Hours;
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <changeAlarmHour+0x3c>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
	h = (h + 1) % 24;
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <changeAlarmHour+0x40>)
 8001cde:	fb83 1302 	smull	r1, r3, r3, r2
 8001ce2:	1099      	asrs	r1, r3, #2
 8001ce4:	17d3      	asrs	r3, r2, #31
 8001ce6:	1ac9      	subs	r1, r1, r3
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	1ad1      	subs	r1, r2, r3
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	71fb      	strb	r3, [r7, #7]
	sAlarm.AlarmTime.Hours = h;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <changeAlarmHour+0x3c>)
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	7013      	strb	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000210 	.word	0x20000210
 8001d0c:	2aaaaaab 	.word	0x2aaaaaab

08001d10 <changeAlarmMin>:

void changeAlarmMin() {
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
	uint8_t m = sAlarm.AlarmTime.Minutes;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <changeAlarmMin+0x40>)
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	71fb      	strb	r3, [r7, #7]
	m = (m + 5) % 60;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	1d5a      	adds	r2, r3, #5
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <changeAlarmMin+0x44>)
 8001d22:	fb83 1302 	smull	r1, r3, r3, r2
 8001d26:	4413      	add	r3, r2
 8001d28:	1159      	asrs	r1, r3, #5
 8001d2a:	17d3      	asrs	r3, r2, #31
 8001d2c:	1ac9      	subs	r1, r1, r3
 8001d2e:	460b      	mov	r3, r1
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	1ad1      	subs	r1, r2, r3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
	sAlarm.AlarmTime.Minutes = m;
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <changeAlarmMin+0x40>)
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	7053      	strb	r3, [r2, #1]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000210 	.word	0x20000210
 8001d54:	88888889 	.word	0x88888889

08001d58 <alarmConfirm>:

void alarmConfirm(void) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8

	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4914      	ldr	r1, [pc, #80]	@ (8001db4 <alarmConfirm+0x5c>)
 8001d62:	4815      	ldr	r0, [pc, #84]	@ (8001db8 <alarmConfirm+0x60>)
 8001d64:	f002 fd1a 	bl	800479c <HAL_RTC_SetAlarm>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <alarmConfirm+0x1a>
		Error_Handler();
 8001d6e:	f7ff fc50 	bl	8001612 <Error_Handler>
	}

	LCD_SendCmd(LCD_CLEAR_DISPLAY);   // clear display for confirmation
 8001d72:	2001      	movs	r0, #1
 8001d74:	f7fe fbc0 	bl	80004f8 <LCD_SendCmd>
	coast_asm_delay(2);
 8001d78:	2002      	movs	r0, #2
 8001d7a:	f7fe fa31 	bl	80001e0 <coast_asm_delay>

	LCD_SendStr("ALARM SET FOR:");    // top line
 8001d7e:	480f      	ldr	r0, [pc, #60]	@ (8001dbc <alarmConfirm+0x64>)
 8001d80:	f7fe fbf6 	bl	8000570 <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 8001d84:	20c0      	movs	r0, #192	@ 0xc0
 8001d86:	f7fe fbb7 	bl	80004f8 <LCD_SendCmd>
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%02d:%02d", sAlarm.AlarmTime.Hours, sAlarm.AlarmTime.Minutes);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <alarmConfirm+0x5c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <alarmConfirm+0x5c>)
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	4638      	mov	r0, r7
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <alarmConfirm+0x68>)
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	f004 fbf3 	bl	8006588 <sniprintf>
	LCD_SendStr(buffer);
 8001da2:	463b      	mov	r3, r7
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbe3 	bl	8000570 <LCD_SendStr>


}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000210 	.word	0x20000210
 8001db8:	200000a0 	.word	0x200000a0
 8001dbc:	08007044 	.word	0x08007044
 8001dc0:	08007014 	.word	0x08007014

08001dc4 <countdownPage>:

void countdownPage(Countdown countdown) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[16];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7fe fb91 	bl	80004f8 <LCD_SendCmd>
	LCD_SendStr("Countdown:");
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <countdownPage+0x44>)
 8001dd8:	f7fe fbca 	bl	8000570 <LCD_SendStr>
	LCD_SendCmd(LCD_SECOND_LINE);
 8001ddc:	20c0      	movs	r0, #192	@ 0xc0
 8001dde:	f7fe fb8b 	bl	80004f8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", countdown.minute, countdown.second);
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f107 0010 	add.w	r0, r7, #16
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4613      	mov	r3, r2
 8001dee:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <countdownPage+0x48>)
 8001df0:	2110      	movs	r1, #16
 8001df2:	f004 fbc9 	bl	8006588 <sniprintf>
	LCD_SendStr(buffer);
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fbb8 	bl	8000570 <LCD_SendStr>
}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	08007054 	.word	0x08007054
 8001e0c:	08007060 	.word	0x08007060

08001e10 <toggleCountdown>:

void toggleCountdown(Countdown *countdown) {
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if (countdown->countdown_enable) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7a1b      	ldrb	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <toggleCountdown+0x18>
		countdown->countdown_enable = false;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	721a      	strb	r2, [r3, #8]
	} else {
		countdown->countdown_enable = true;
	}
}
 8001e26:	e002      	b.n	8001e2e <toggleCountdown+0x1e>
		countdown->countdown_enable = true;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	721a      	strb	r2, [r3, #8]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <mintueCountdown>:
void mintueCountdown(Countdown *countdown) {
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	if (countdown->minute >= 60) {
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e48:	d903      	bls.n	8001e52 <mintueCountdown+0x18>
		countdown->minute = 60;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	223c      	movs	r2, #60	@ 0x3c
 8001e4e:	601a      	str	r2, [r3, #0]
	} else {
		(countdown->minute)++;
	}
}
 8001e50:	e004      	b.n	8001e5c <mintueCountdown+0x22>
		(countdown->minute)++;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	601a      	str	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <secondCountdown>:

void secondCountdown(Countdown *countdown) {
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	if (countdown->second >= 60) {
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e76:	d903      	bls.n	8001e80 <secondCountdown+0x18>
		countdown->second = 60;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223c      	movs	r2, #60	@ 0x3c
 8001e7c:	605a      	str	r2, [r3, #4]
	} else {
		(countdown->second)++;
	}
}
 8001e7e:	e004      	b.n	8001e8a <secondCountdown+0x22>
		(countdown->second)++;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	605a      	str	r2, [r3, #4]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <updateCountdown>:
void updateCountdown(Countdown countdown) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[16];
	LCD_SendCmd(LCD_SECOND_LINE);
 8001ea4:	20c0      	movs	r0, #192	@ 0xc0
 8001ea6:	f7fe fb27 	bl	80004f8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", countdown.minute, countdown.second);
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f107 0010 	add.w	r0, r7, #16
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <updateCountdown+0x38>)
 8001eb8:	2110      	movs	r1, #16
 8001eba:	f004 fb65 	bl	8006588 <sniprintf>
	LCD_SendStr(buffer);
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb54 	bl	8000570 <LCD_SendStr>
}
 8001ec8:	bf00      	nop
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	08007060 	.word	0x08007060

08001ed4 <resetCountdown>:
void resetCountdown(Countdown *countdown) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	countdown->minute = 0;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
	countdown->second = 0;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
	countdown->countdown_enable = false;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	721a      	strb	r2, [r3, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <runCountdown>:

void runCountdown(Countdown *countdown, uint32_t *lastSecond, uint32_t second, TIM_HandleTypeDef htim1, bool enable_sound) {
 8001efc:	b082      	sub	sp, #8
 8001efe:	b5b0      	push	{r4, r5, r7, lr}
 8001f00:	b096      	sub	sp, #88	@ 0x58
 8001f02:	af12      	add	r7, sp, #72	@ 0x48
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (*lastSecond >= second) {
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	f240 8101 	bls.w	800211a <runCountdown+0x21e>
		return;
	}
	if (countdown->countdown_enable == false) {
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	7a1b      	ldrb	r3, [r3, #8]
 8001f1c:	f083 0301 	eor.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 80fb 	bne.w	800211e <runCountdown+0x222>
		return;
	}
	if (countdown->second > 0) {
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <runCountdown+0x40>
		countdown->second--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	e012      	b.n	8001f62 <runCountdown+0x66>
	} else if (countdown->minute > 0) {
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <runCountdown+0x5a>
		countdown->second = 59;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	223b      	movs	r2, #59	@ 0x3b
 8001f48:	605a      	str	r2, [r3, #4]
		countdown->minute--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1e5a      	subs	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e005      	b.n	8001f62 <runCountdown+0x66>
	} else {
		countdown->second = 0;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]
		countdown->minute = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
	}
	if (countdown->second == 0 && countdown->minute == 0) {
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80d3 	bne.w	8002112 <runCountdown+0x216>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f040 80ce 	bne.w	8002112 <runCountdown+0x216>
		countdown->countdown_enable = false;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	721a      	strb	r2, [r3, #8]
		if (enable_sound) {
 8001f7c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a4 	beq.w	80020ce <runCountdown+0x1d2>
			play_note(460, 300, 50, htim1);
 8001f86:	4668      	mov	r0, sp
 8001f88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f8c:	2248      	movs	r2, #72	@ 0x48
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f004 fb86 	bl	80066a0 <memcpy>
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	2232      	movs	r2, #50	@ 0x32
 8001f98:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f9c:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8001fa0:	f7fe f9c4 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001fa4:	4668      	mov	r0, sp
 8001fa6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001faa:	2248      	movs	r2, #72	@ 0x48
 8001fac:	4619      	mov	r1, r3
 8001fae:	f004 fb77 	bl	80066a0 <memcpy>
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	2232      	movs	r2, #50	@ 0x32
 8001fb6:	2132      	movs	r1, #50	@ 0x32
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7fe f9b7 	bl	800032c <play_note>
			play_note(300, 150, 50, htim1);
 8001fbe:	4668      	mov	r0, sp
 8001fc0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fc4:	2248      	movs	r2, #72	@ 0x48
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f004 fb6a 	bl	80066a0 <memcpy>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	2232      	movs	r2, #50	@ 0x32
 8001fd0:	2196      	movs	r1, #150	@ 0x96
 8001fd2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001fd6:	f7fe f9a9 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8001fda:	4668      	mov	r0, sp
 8001fdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fe0:	2248      	movs	r2, #72	@ 0x48
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f004 fb5c 	bl	80066a0 <memcpy>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	2232      	movs	r2, #50	@ 0x32
 8001fec:	2132      	movs	r1, #50	@ 0x32
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe f99c 	bl	800032c <play_note>
			play_note(220, 300, 50, htim1);
 8001ff4:	4668      	mov	r0, sp
 8001ff6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffa:	2248      	movs	r2, #72	@ 0x48
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f004 fb4f 	bl	80066a0 <memcpy>
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	2232      	movs	r2, #50	@ 0x32
 8002006:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800200a:	20dc      	movs	r0, #220	@ 0xdc
 800200c:	f7fe f98e 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8002010:	4668      	mov	r0, sp
 8002012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002016:	2248      	movs	r2, #72	@ 0x48
 8002018:	4619      	mov	r1, r3
 800201a:	f004 fb41 	bl	80066a0 <memcpy>
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	2232      	movs	r2, #50	@ 0x32
 8002022:	2132      	movs	r1, #50	@ 0x32
 8002024:	2000      	movs	r0, #0
 8002026:	f7fe f981 	bl	800032c <play_note>
			play_note(460, 300, 50, htim1);
 800202a:	4668      	mov	r0, sp
 800202c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002030:	2248      	movs	r2, #72	@ 0x48
 8002032:	4619      	mov	r1, r3
 8002034:	f004 fb34 	bl	80066a0 <memcpy>
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	2232      	movs	r2, #50	@ 0x32
 800203c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002040:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8002044:	f7fe f972 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 8002048:	4668      	mov	r0, sp
 800204a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800204e:	2248      	movs	r2, #72	@ 0x48
 8002050:	4619      	mov	r1, r3
 8002052:	f004 fb25 	bl	80066a0 <memcpy>
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	2232      	movs	r2, #50	@ 0x32
 800205a:	2132      	movs	r1, #50	@ 0x32
 800205c:	2000      	movs	r0, #0
 800205e:	f7fe f965 	bl	800032c <play_note>
			play_note(300, 150, 50, htim1);
 8002062:	4668      	mov	r0, sp
 8002064:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002068:	2248      	movs	r2, #72	@ 0x48
 800206a:	4619      	mov	r1, r3
 800206c:	f004 fb18 	bl	80066a0 <memcpy>
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	2232      	movs	r2, #50	@ 0x32
 8002074:	2196      	movs	r1, #150	@ 0x96
 8002076:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800207a:	f7fe f957 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 800207e:	4668      	mov	r0, sp
 8002080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002084:	2248      	movs	r2, #72	@ 0x48
 8002086:	4619      	mov	r1, r3
 8002088:	f004 fb0a 	bl	80066a0 <memcpy>
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	2232      	movs	r2, #50	@ 0x32
 8002090:	2132      	movs	r1, #50	@ 0x32
 8002092:	2000      	movs	r0, #0
 8002094:	f7fe f94a 	bl	800032c <play_note>
			play_note(220, 300, 50, htim1);
 8002098:	4668      	mov	r0, sp
 800209a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800209e:	2248      	movs	r2, #72	@ 0x48
 80020a0:	4619      	mov	r1, r3
 80020a2:	f004 fafd 	bl	80066a0 <memcpy>
 80020a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a8:	2232      	movs	r2, #50	@ 0x32
 80020aa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80020ae:	20dc      	movs	r0, #220	@ 0xdc
 80020b0:	f7fe f93c 	bl	800032c <play_note>
			play_note(0, 50, 50, htim1);
 80020b4:	4668      	mov	r0, sp
 80020b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020ba:	2248      	movs	r2, #72	@ 0x48
 80020bc:	4619      	mov	r1, r3
 80020be:	f004 faef 	bl	80066a0 <memcpy>
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	2232      	movs	r2, #50	@ 0x32
 80020c6:	2132      	movs	r1, #50	@ 0x32
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7fe f92f 	bl	800032c <play_note>
		}
		LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7fe fa12 	bl	80004f8 <LCD_SendCmd>
		LCD_SendStr("Countdown Done");
 80020d4:	4815      	ldr	r0, [pc, #84]	@ (800212c <runCountdown+0x230>)
 80020d6:	f7fe fa4b 	bl	8000570 <LCD_SendStr>
		stop_sound(htim1);
 80020da:	466d      	mov	r5, sp
 80020dc:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80020f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020fa:	f7fe f905 	bl	8000308 <stop_sound>
		coast_asm_delay(1500);
 80020fe:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002102:	f7fe f86d 	bl	80001e0 <coast_asm_delay>
		LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe f9f6 	bl	80004f8 <LCD_SendCmd>
		LCD_SendStr("Countdown:");
 800210c:	4808      	ldr	r0, [pc, #32]	@ (8002130 <runCountdown+0x234>)
 800210e:	f7fe fa2f 	bl	8000570 <LCD_SendStr>
	}
	*lastSecond = second;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	e002      	b.n	8002120 <runCountdown+0x224>
		return;
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <runCountdown+0x224>
		return;
 800211e:	bf00      	nop
}
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002128:	b002      	add	sp, #8
 800212a:	4770      	bx	lr
 800212c:	0800706c 	.word	0x0800706c
 8002130:	08007054 	.word	0x08007054

08002134 <stopwatchPage>:

void stopwatchPage(Stopwatch stopwatch) {
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b08b      	sub	sp, #44	@ 0x2c
 8002138:	af02      	add	r7, sp, #8
 800213a:	463c      	mov	r4, r7
 800213c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe f9d9 	bl	80004f8 <LCD_SendCmd>
	LCD_SendStr("Stopwatch:  lap:");
 8002146:	480c      	ldr	r0, [pc, #48]	@ (8002178 <stopwatchPage+0x44>)
 8002148:	f7fe fa12 	bl	8000570 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 800214c:	20c0      	movs	r0, #192	@ 0xc0
 800214e:	f7fe f9d3 	bl	80004f8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld", stopwatch.minute, stopwatch.second);
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f107 0010 	add.w	r0, r7, #16
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	4a07      	ldr	r2, [pc, #28]	@ (800217c <stopwatchPage+0x48>)
 8002160:	2110      	movs	r1, #16
 8002162:	f004 fa11 	bl	8006588 <sniprintf>
	LCD_SendStr(buffer);
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa00 	bl	8000570 <LCD_SendStr>
}
 8002170:	bf00      	nop
 8002172:	3724      	adds	r7, #36	@ 0x24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}
 8002178:	0800707c 	.word	0x0800707c
 800217c:	08007060 	.word	0x08007060

08002180 <lapStopwatch>:


void lapStopwatch(Stopwatch stopwatch) {
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b08b      	sub	sp, #44	@ 0x2c
 8002184:	af02      	add	r7, sp, #8
 8002186:	463c      	mov	r4, r7
 8002188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	coast_asm_delay(11);
 800218c:	200b      	movs	r0, #11
 800218e:	f7fe f827 	bl	80001e0 <coast_asm_delay>
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8002192:	2001      	movs	r0, #1
 8002194:	f7fe f9b0 	bl	80004f8 <LCD_SendCmd>
	coast_asm_delay(11);
 8002198:	200b      	movs	r0, #11
 800219a:	f7fe f821 	bl	80001e0 <coast_asm_delay>
	LCD_SendCmd(LCD_RETURN_HOME);
 800219e:	2002      	movs	r0, #2
 80021a0:	f7fe f9aa 	bl	80004f8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "lap:%02ld:%02ld:%02ld", stopwatch.hour, stopwatch.minute, stopwatch.second);
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	f107 0010 	add.w	r0, r7, #16
 80021ae:	9201      	str	r2, [sp, #4]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	4a06      	ldr	r2, [pc, #24]	@ (80021d0 <lapStopwatch+0x50>)
 80021b6:	2110      	movs	r1, #16
 80021b8:	f004 f9e6 	bl	8006588 <sniprintf>
	LCD_SendStr(buffer);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9d5 	bl	8000570 <LCD_SendStr>
}
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	08007090 	.word	0x08007090

080021d4 <resetStopwatch>:

void resetStopwatch(Stopwatch *stopwatch) {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	stopwatch->minute = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	605a      	str	r2, [r3, #4]
	stopwatch->second = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
	stopwatch->stopwatch_enable = false;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	731a      	strb	r2, [r3, #12]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <toggleStopwatch>:
void toggleStopwatch(Stopwatch *stopwatch) {
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
	if (stopwatch->stopwatch_enable) {
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7b1b      	ldrb	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <toggleStopwatch+0x18>
		stopwatch->stopwatch_enable = false;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	731a      	strb	r2, [r3, #12]
	} else {
		stopwatch->stopwatch_enable = true;
	}
}
 8002210:	e002      	b.n	8002218 <toggleStopwatch+0x1e>
		stopwatch->stopwatch_enable = true;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	731a      	strb	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <updateStopwatch>:

void updateStopwatch(Stopwatch stopwatch) {
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08b      	sub	sp, #44	@ 0x2c
 8002228:	af02      	add	r7, sp, #8
 800222a:	463c      	mov	r4, r7
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[16];
	LCD_SendCmd(LCD_SECOND_LINE);
 8002230:	20c0      	movs	r0, #192	@ 0xc0
 8002232:	f7fe f961 	bl	80004f8 <LCD_SendCmd>
	snprintf(buffer, sizeof(buffer), "%02ld:%02ld:%02ld", stopwatch.hour, stopwatch.minute, stopwatch.second);
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f107 0010 	add.w	r0, r7, #16
 8002240:	9201      	str	r2, [sp, #4]
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	460b      	mov	r3, r1
 8002246:	4a06      	ldr	r2, [pc, #24]	@ (8002260 <updateStopwatch+0x3c>)
 8002248:	2110      	movs	r1, #16
 800224a:	f004 f99d 	bl	8006588 <sniprintf>
	LCD_SendStr(buffer);
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f98c 	bl	8000570 <LCD_SendStr>
}
 8002258:	bf00      	nop
 800225a:	3724      	adds	r7, #36	@ 0x24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	080070a8 	.word	0x080070a8

08002264 <runStopwatch>:
void runStopwatch(Stopwatch *stopwatch, uint32_t *lastSecond, uint32_t second) {
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
	if (*lastSecond >= second) {
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d934      	bls.n	80022e4 <runStopwatch+0x80>
		return;
	}
	if (stopwatch->stopwatch_enable == false) {
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	7b1b      	ldrb	r3, [r3, #12]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12f      	bne.n	80022e8 <runStopwatch+0x84>
		return;
	}
	if (stopwatch->hour == 99) {
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b63      	cmp	r3, #99	@ 0x63
 800228e:	d103      	bne.n	8002298 <runStopwatch+0x34>
		stopwatch->hour = 0;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	e021      	b.n	80022dc <runStopwatch+0x78>
	} else if (stopwatch->minute == 60) {
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b3c      	cmp	r3, #60	@ 0x3c
 800229e:	d10b      	bne.n	80022b8 <runStopwatch+0x54>
		stopwatch->hour++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]
		stopwatch->second = 0;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
		stopwatch->minute = 0;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	e011      	b.n	80022dc <runStopwatch+0x78>
	} else if (stopwatch->second == 60) {
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b3c      	cmp	r3, #60	@ 0x3c
 80022be:	d108      	bne.n	80022d2 <runStopwatch+0x6e>
		stopwatch->second = 0;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
		stopwatch->minute++;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	e004      	b.n	80022dc <runStopwatch+0x78>
	} else {
		stopwatch->second++;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	609a      	str	r2, [r3, #8]
	}
	*lastSecond = second;
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	e002      	b.n	80022ea <runStopwatch+0x86>
		return;
 80022e4:	bf00      	nop
 80022e6:	e000      	b.n	80022ea <runStopwatch+0x86>
		return;
 80022e8:	bf00      	nop
}
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <generate_vibration>:
#include "vibration.h"
//uint16_t coil_port[4] = {COILA_GPIO_Port, COILB_GPIO_Port, COILC_GPIO_Port, COILD_GPIO_Port};
//uint16_t coil_pin[4] = {COILA_Pin, COILB_Pin, COILC_Pin, COILD_Pin};
extern void coast_asm_delay(uint32_t milliseconds);

void generate_vibration(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
//	for (int i = 0; i < 4; i++) {
//		HAL_GPIO_WritePin(coil_port[i], coil_pin[i], GPIO_PIN_RESET);
//	}
	// 1
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2120      	movs	r1, #32
 80022fc:	4831      	ldr	r0, [pc, #196]	@ (80023c4 <generate_vibration+0xd0>)
 80022fe:	f000 fbcd 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800230c:	f000 fbc6 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 8002310:	2201      	movs	r2, #1
 8002312:	2180      	movs	r1, #128	@ 0x80
 8002314:	482b      	ldr	r0, [pc, #172]	@ (80023c4 <generate_vibration+0xd0>)
 8002316:	f000 fbc1 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 800231a:	2200      	movs	r2, #0
 800231c:	2104      	movs	r1, #4
 800231e:	482a      	ldr	r0, [pc, #168]	@ (80023c8 <generate_vibration+0xd4>)
 8002320:	f000 fbbc 	bl	8002a9c <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 8002324:	2001      	movs	r0, #1
 8002326:	f7fd ff5b 	bl	80001e0 <coast_asm_delay>

	// 2
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 800232a:	2201      	movs	r2, #1
 800232c:	2120      	movs	r1, #32
 800232e:	4825      	ldr	r0, [pc, #148]	@ (80023c4 <generate_vibration+0xd0>)
 8002330:	f000 fbb4 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800233a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800233e:	f000 fbad 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2180      	movs	r1, #128	@ 0x80
 8002346:	481f      	ldr	r0, [pc, #124]	@ (80023c4 <generate_vibration+0xd0>)
 8002348:	f000 fba8 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2104      	movs	r1, #4
 8002350:	481d      	ldr	r0, [pc, #116]	@ (80023c8 <generate_vibration+0xd4>)
 8002352:	f000 fba3 	bl	8002a9c <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f7fd ff42 	bl	80001e0 <coast_asm_delay>

	// 3
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 800235c:	2201      	movs	r2, #1
 800235e:	2120      	movs	r1, #32
 8002360:	4818      	ldr	r0, [pc, #96]	@ (80023c4 <generate_vibration+0xd0>)
 8002362:	f000 fb9b 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800236c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002370:	f000 fb94 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2180      	movs	r1, #128	@ 0x80
 8002378:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <generate_vibration+0xd0>)
 800237a:	f000 fb8f 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 800237e:	2201      	movs	r2, #1
 8002380:	2104      	movs	r1, #4
 8002382:	4811      	ldr	r0, [pc, #68]	@ (80023c8 <generate_vibration+0xd4>)
 8002384:	f000 fb8a 	bl	8002a9c <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 8002388:	2001      	movs	r0, #1
 800238a:	f7fd ff29 	bl	80001e0 <coast_asm_delay>
	// 4
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2120      	movs	r1, #32
 8002392:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <generate_vibration+0xd0>)
 8002394:	f000 fb82 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800239e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a2:	f000 fb7b 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2180      	movs	r1, #128	@ 0x80
 80023aa:	4806      	ldr	r0, [pc, #24]	@ (80023c4 <generate_vibration+0xd0>)
 80023ac:	f000 fb76 	bl	8002a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2104      	movs	r1, #4
 80023b4:	4804      	ldr	r0, [pc, #16]	@ (80023c8 <generate_vibration+0xd4>)
 80023b6:	f000 fb71 	bl	8002a9c <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fd ff10 	bl	80001e0 <coast_asm_delay>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	48000800 	.word	0x48000800
 80023c8:	48000400 	.word	0x48000400

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002404 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d0:	f7ff faa4 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d4:	480c      	ldr	r0, [pc, #48]	@ (8002408 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d6:	490d      	ldr	r1, [pc, #52]	@ (800240c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002410 <LoopForever+0xe>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023dc:	e002      	b.n	80023e4 <LoopCopyDataInit>

080023de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e2:	3304      	adds	r3, #4

080023e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e8:	d3f9      	bcc.n	80023de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002418 <LoopForever+0x16>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f0:	e001      	b.n	80023f6 <LoopFillZerobss>

080023f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f4:	3204      	adds	r2, #4

080023f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f8:	d3fb      	bcc.n	80023f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023fa:	f004 f92b 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7fe fc3b 	bl	8000c78 <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002404:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002410:	08007130 	.word	0x08007130
  ldr r2, =_sbss
 8002414:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002418:	20000384 	.word	0x20000384

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>
	...

08002420 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <HAL_Init+0x28>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	@ (8002448 <HAL_Init+0x28>)
 800242a:	f043 0310 	orr.w	r3, r3, #16
 800242e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f94f 	bl	80026d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f808 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243c:	f7ff f8f0 	bl	8001620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40022000 	.word	0x40022000

0800244c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_InitTick+0x54>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <HAL_InitTick+0x58>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002462:	fbb3 f3f1 	udiv	r3, r3, r1
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f967 	bl	800273e <HAL_SYSTICK_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e00e      	b.n	8002498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d80a      	bhi.n	8002496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f92f 	bl	80026ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800248c:	4a06      	ldr	r2, [pc, #24]	@ (80024a8 <HAL_InitTick+0x5c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	2000000c 	.word	0x2000000c
 80024a4:	20000018 	.word	0x20000018
 80024a8:	20000014 	.word	0x20000014

080024ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_IncTick+0x20>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_IncTick+0x24>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_IncTick+0x24>)
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000018 	.word	0x20000018
 80024d0:	20000238 	.word	0x20000238

080024d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_GetTick+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000238 	.word	0x20000238

080024ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f4:	f7ff ffee 	bl	80024d4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d005      	beq.n	8002512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002506:	4b0a      	ldr	r3, [pc, #40]	@ (8002530 <HAL_Delay+0x44>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002512:	bf00      	nop
 8002514:	f7ff ffde 	bl	80024d4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d8f7      	bhi.n	8002514 <HAL_Delay+0x28>
  {
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000018 	.word	0x20000018

08002534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	@ (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	@ (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	db0b      	blt.n	80025c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4907      	ldr	r1, [pc, #28]	@ (80025d0 <__NVIC_EnableIRQ+0x38>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	2001      	movs	r0, #1
 80025ba:	fa00 f202 	lsl.w	r2, r0, r2
 80025be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	6039      	str	r1, [r7, #0]
 80025de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db0a      	blt.n	80025fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	490c      	ldr	r1, [pc, #48]	@ (8002620 <__NVIC_SetPriority+0x4c>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	440b      	add	r3, r1
 80025f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025fc:	e00a      	b.n	8002614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4908      	ldr	r1, [pc, #32]	@ (8002624 <__NVIC_SetPriority+0x50>)
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	3b04      	subs	r3, #4
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	440b      	add	r3, r1
 8002612:	761a      	strb	r2, [r3, #24]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	@ 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f1c3 0307 	rsb	r3, r3, #7
 8002642:	2b04      	cmp	r3, #4
 8002644:	bf28      	it	cs
 8002646:	2304      	movcs	r3, #4
 8002648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3304      	adds	r3, #4
 800264e:	2b06      	cmp	r3, #6
 8002650:	d902      	bls.n	8002658 <NVIC_EncodePriority+0x30>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3b03      	subs	r3, #3
 8002656:	e000      	b.n	800265a <NVIC_EncodePriority+0x32>
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	f04f 32ff 	mov.w	r2, #4294967295
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43da      	mvns	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	401a      	ands	r2, r3
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002670:	f04f 31ff 	mov.w	r1, #4294967295
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	43d9      	mvns	r1, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	4313      	orrs	r3, r2
         );
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3b01      	subs	r3, #1
 800269c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a0:	d301      	bcc.n	80026a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a2:	2301      	movs	r3, #1
 80026a4:	e00f      	b.n	80026c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a6:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <SysTick_Config+0x40>)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ae:	210f      	movs	r1, #15
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	f7ff ff8e 	bl	80025d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b8:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <SysTick_Config+0x40>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <SysTick_Config+0x40>)
 80026c0:	2207      	movs	r2, #7
 80026c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff ff29 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b086      	sub	sp, #24
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff3e 	bl	800257c <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff8e 	bl	8002628 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff5d 	bl	80025d4 <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff31 	bl	8002598 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa2 	bl	8002690 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e160      	b.n	8002a2a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8152 	beq.w	8002a24 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d005      	beq.n	8002798 <HAL_GPIO_Init+0x40>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d130      	bne.n	80027fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ce:	2201      	movs	r2, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0201 	and.w	r2, r3, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d017      	beq.n	8002836 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d123      	bne.n	800288a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	6939      	ldr	r1, [r7, #16]
 8002886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80ac 	beq.w	8002a24 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a48 <HAL_GPIO_Init+0x2f0>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a48 <HAL_GPIO_Init+0x2f0>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a48 <HAL_GPIO_Init+0x2f0>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028e4:	4a59      	ldr	r2, [pc, #356]	@ (8002a4c <HAL_GPIO_Init+0x2f4>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800290e:	d025      	beq.n	800295c <HAL_GPIO_Init+0x204>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a4f      	ldr	r2, [pc, #316]	@ (8002a50 <HAL_GPIO_Init+0x2f8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d01f      	beq.n	8002958 <HAL_GPIO_Init+0x200>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a4e      	ldr	r2, [pc, #312]	@ (8002a54 <HAL_GPIO_Init+0x2fc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d019      	beq.n	8002954 <HAL_GPIO_Init+0x1fc>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a4d      	ldr	r2, [pc, #308]	@ (8002a58 <HAL_GPIO_Init+0x300>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_GPIO_Init+0x1f8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a5c <HAL_GPIO_Init+0x304>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00d      	beq.n	800294c <HAL_GPIO_Init+0x1f4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a4b      	ldr	r2, [pc, #300]	@ (8002a60 <HAL_GPIO_Init+0x308>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d007      	beq.n	8002948 <HAL_GPIO_Init+0x1f0>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a64 <HAL_GPIO_Init+0x30c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_GPIO_Init+0x1ec>
 8002940:	2306      	movs	r3, #6
 8002942:	e00c      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002944:	2307      	movs	r3, #7
 8002946:	e00a      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002948:	2305      	movs	r3, #5
 800294a:	e008      	b.n	800295e <HAL_GPIO_Init+0x206>
 800294c:	2304      	movs	r3, #4
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002950:	2303      	movs	r3, #3
 8002952:	e004      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x206>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_Init+0x206>
 800295c:	2300      	movs	r3, #0
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800296e:	4937      	ldr	r1, [pc, #220]	@ (8002a4c <HAL_GPIO_Init+0x2f4>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a0:	4a31      	ldr	r2, [pc, #196]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a6:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029ca:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d0:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a1e:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <HAL_GPIO_Init+0x310>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f ae97 	bne.w	8002768 <HAL_GPIO_Init+0x10>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000c00 	.word	0x48000c00
 8002a5c:	48001000 	.word	0x48001000
 8002a60:	48001400 	.word	0x48001400
 8002a64:	48001800 	.word	0x48001800
 8002a68:	40010400 	.word	0x40010400

08002a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e001      	b.n	8002a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d006      	beq.n	8002af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ae2:	4a05      	ldr	r2, [pc, #20]	@ (8002af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd62 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40010400 	.word	0x40010400

08002afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b08:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b12:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f001 b80a 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8161 	beq.w	8002dfa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b38:	4bae      	ldr	r3, [pc, #696]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b44:	4bab      	ldr	r3, [pc, #684]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x104>
 8002b50:	4ba8      	ldr	r3, [pc, #672]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5c:	d150      	bne.n	8002c00 <HAL_RCC_OscConfig+0x104>
 8002b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b62:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002b6a:	fa93 f3a3 	rbit	r3, r3
 8002b6e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8002b72:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b7e:	d802      	bhi.n	8002b86 <HAL_RCC_OscConfig+0x8a>
 8002b80:	4b9c      	ldr	r3, [pc, #624]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0xb6>
 8002b86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b8a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8002b9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b9e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002ba2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002bae:	4b91      	ldr	r3, [pc, #580]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8002bba:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8002bbe:	fa92 f2a2 	rbit	r2, r2
 8002bc2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002bc6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002bca:	fab2 f282 	clz	r2, r2
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	f042 0220 	orr.w	r2, r2, #32
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	f002 021f 	and.w	r2, r2, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8108 	beq.w	8002df8 <HAL_RCC_OscConfig+0x2fc>
 8002be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f040 80ff 	bne.w	8002df8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f000 bf9b 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c04:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x124>
 8002c12:	4b78      	ldr	r3, [pc, #480]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a77      	ldr	r2, [pc, #476]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e036      	b.n	8002c8e <HAL_RCC_OscConfig+0x192>
 8002c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10c      	bne.n	8002c4a <HAL_RCC_OscConfig+0x14e>
 8002c30:	4b70      	ldr	r3, [pc, #448]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6f      	ldr	r2, [pc, #444]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6c      	ldr	r2, [pc, #432]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e021      	b.n	8002c8e <HAL_RCC_OscConfig+0x192>
 8002c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5a:	d10c      	bne.n	8002c76 <HAL_RCC_OscConfig+0x17a>
 8002c5c:	4b65      	ldr	r3, [pc, #404]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a64      	ldr	r2, [pc, #400]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b62      	ldr	r3, [pc, #392]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a61      	ldr	r2, [pc, #388]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e00b      	b.n	8002c8e <HAL_RCC_OscConfig+0x192>
 8002c76:	4b5f      	ldr	r3, [pc, #380]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b5c      	ldr	r3, [pc, #368]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5b      	ldr	r2, [pc, #364]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c92:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d054      	beq.n	8002d48 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9e:	f7ff fc19 	bl	80024d4 <HAL_GetTick>
 8002ca2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca8:	f7ff fc14 	bl	80024d4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	@ 0x64
 8002cb6:	d902      	bls.n	8002cbe <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f000 bf3c 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
 8002cbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002cd2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cde:	d802      	bhi.n	8002ce6 <HAL_RCC_OscConfig+0x1ea>
 8002ce0:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	e015      	b.n	8002d12 <HAL_RCC_OscConfig+0x216>
 8002ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8002cfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cfe:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d02:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d16:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8002d1a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002d26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0b0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1ac>
 8002d46:	e058      	b.n	8002dfa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7ff fbc4 	bl	80024d4 <HAL_GetTick>
 8002d4c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d52:	f7ff fbbf 	bl	80024d4 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d902      	bls.n	8002d68 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	f000 bee7 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
 8002d68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d6c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002d7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d88:	d802      	bhi.n	8002d90 <HAL_RCC_OscConfig+0x294>
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e015      	b.n	8002dbc <HAL_RCC_OscConfig+0x2c0>
 8002d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d94:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002dac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <HAL_RCC_OscConfig+0x2f8>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dc0:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002dc4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002dc8:	fa92 f2a2 	rbit	r2, r2
 8002dcc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002dd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1b0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x256>
 8002df0:	e003      	b.n	8002dfa <HAL_RCC_OscConfig+0x2fe>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 816d 	beq.w	80030ea <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e10:	4bcd      	ldr	r3, [pc, #820]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e1c:	4bca      	ldr	r3, [pc, #808]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d16e      	bne.n	8002f06 <HAL_RCC_OscConfig+0x40a>
 8002e28:	4bc7      	ldr	r3, [pc, #796]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e34:	d167      	bne.n	8002f06 <HAL_RCC_OscConfig+0x40a>
 8002e36:	2302      	movs	r3, #2
 8002e38:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002e48:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e54:	d802      	bhi.n	8002e5c <HAL_RCC_OscConfig+0x360>
 8002e56:	4bbc      	ldr	r3, [pc, #752]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	e013      	b.n	8002e84 <HAL_RCC_OscConfig+0x388>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002e74:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002e80:	4bb1      	ldr	r3, [pc, #708]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8002e8a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002e8e:	fa92 f2a2 	rbit	r2, r2
 8002e92:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002e96:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f002 021f 	and.w	r2, r2, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3d0>
 8002eb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d002      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f000 be35 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b9e      	ldr	r3, [pc, #632]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	21f8      	movs	r1, #248	@ 0xf8
 8002ee2:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8002eea:	fa91 f1a1 	rbit	r1, r1
 8002eee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002ef2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ef6:	fab1 f181 	clz	r1, r1
 8002efa:	b2c9      	uxtb	r1, r1
 8002efc:	408b      	lsls	r3, r1
 8002efe:	4992      	ldr	r1, [pc, #584]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f04:	e0f1      	b.n	80030ea <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8083 	beq.w	800301e <HAL_RCC_OscConfig+0x522>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8002f2a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2301      	movs	r3, #1
 8002f42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff fac6 	bl	80024d4 <HAL_GetTick>
 8002f48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7ff fac1 	bl	80024d4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d902      	bls.n	8002f64 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	f000 bde9 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
 8002f64:	2302      	movs	r3, #2
 8002f66:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002f6e:	fa93 f3a3 	rbit	r3, r3
 8002f72:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002f76:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f82:	d802      	bhi.n	8002f8a <HAL_RCC_OscConfig+0x48e>
 8002f84:	4b70      	ldr	r3, [pc, #448]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e013      	b.n	8002fb2 <HAL_RCC_OscConfig+0x4b6>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002fa2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002fae:	4b66      	ldr	r3, [pc, #408]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002fb8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002fbc:	fa92 f2a2 	rbit	r2, r2
 8002fc0:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002fc4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0b4      	beq.n	8002f4e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b58      	ldr	r3, [pc, #352]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ff0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	21f8      	movs	r1, #248	@ 0xf8
 8002ffa:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003002:	fa91 f1a1 	rbit	r1, r1
 8003006:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800300a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800300e:	fab1 f181 	clz	r1, r1
 8003012:	b2c9      	uxtb	r1, r1
 8003014:	408b      	lsls	r3, r1
 8003016:	494c      	ldr	r1, [pc, #304]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]
 800301c:	e065      	b.n	80030ea <HAL_RCC_OscConfig+0x5ee>
 800301e:	2301      	movs	r3, #1
 8003020:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003030:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800303e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	461a      	mov	r2, r3
 8003046:	2300      	movs	r3, #0
 8003048:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7ff fa43 	bl	80024d4 <HAL_GetTick>
 800304e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003054:	f7ff fa3e 	bl	80024d4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d902      	bls.n	800306a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	f000 bd66 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
 800306a:	2302      	movs	r3, #2
 800306c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800307c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b3f      	cmp	r3, #63	@ 0x3f
 8003088:	d802      	bhi.n	8003090 <HAL_RCC_OscConfig+0x594>
 800308a:	4b2f      	ldr	r3, [pc, #188]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	e013      	b.n	80030b8 <HAL_RCC_OscConfig+0x5bc>
 8003090:	2302      	movs	r3, #2
 8003092:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80030a2:	2302      	movs	r3, #2
 80030a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80030a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80030b4:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <HAL_RCC_OscConfig+0x64c>)
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	2202      	movs	r2, #2
 80030ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80030be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80030c2:	fa92 f2a2 	rbit	r2, r2
 80030c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80030ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f042 0220 	orr.w	r2, r2, #32
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f002 021f 	and.w	r2, r2, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1b4      	bne.n	8003054 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8119 	beq.w	8003332 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003100:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003104:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8082 	beq.w	8003216 <HAL_RCC_OscConfig+0x71a>
 8003112:	2301      	movs	r3, #1
 8003114:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003124:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <HAL_RCC_OscConfig+0x650>)
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	461a      	mov	r2, r3
 8003138:	2301      	movs	r3, #1
 800313a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7ff f9ca 	bl	80024d4 <HAL_GetTick>
 8003140:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003144:	e00f      	b.n	8003166 <HAL_RCC_OscConfig+0x66a>
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7ff f9c0 	bl	80024d4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d902      	bls.n	8003166 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	f000 bce8 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
 8003166:	2302      	movs	r3, #2
 8003168:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003170:	fa93 f2a3 	rbit	r2, r3
 8003174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003178:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003186:	2202      	movs	r2, #2
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800318e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	fa93 f2a3 	rbit	r2, r3
 8003198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031aa:	2202      	movs	r2, #2
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	fa93 f2a3 	rbit	r2, r3
 80031bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80031c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c6:	4bb0      	ldr	r3, [pc, #704]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 80031c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80031d2:	2102      	movs	r1, #2
 80031d4:	6019      	str	r1, [r3, #0]
 80031d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	fa93 f1a3 	rbit	r1, r3
 80031e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031ec:	6019      	str	r1, [r3, #0]
  return result;
 80031ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f303 	lsl.w	r3, r1, r3
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d09d      	beq.n	8003150 <HAL_RCC_OscConfig+0x654>
 8003214:	e08d      	b.n	8003332 <HAL_RCC_OscConfig+0x836>
 8003216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800321a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800321e:	2201      	movs	r2, #1
 8003220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003226:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	fa93 f2a3 	rbit	r2, r3
 8003230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003234:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003238:	601a      	str	r2, [r3, #0]
  return result;
 800323a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003242:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	4b8f      	ldr	r3, [pc, #572]	@ (800348c <HAL_RCC_OscConfig+0x990>)
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	2300      	movs	r3, #0
 8003256:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003258:	f7ff f93c 	bl	80024d4 <HAL_GetTick>
 800325c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003262:	f7ff f937 	bl	80024d4 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d902      	bls.n	8003278 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	f000 bc5f 	b.w	8003b36 <HAL_RCC_OscConfig+0x103a>
 8003278:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003280:	2202      	movs	r2, #2
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003288:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003296:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032a4:	2202      	movs	r2, #2
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80032c8:	2202      	movs	r2, #2
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f2a3 	rbit	r2, r3
 80032da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80032e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b68      	ldr	r3, [pc, #416]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 80032e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032f0:	2102      	movs	r1, #2
 80032f2:	6019      	str	r1, [r3, #0]
 80032f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f1a3 	rbit	r1, r3
 8003302:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003306:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800330a:	6019      	str	r1, [r3, #0]
  return result;
 800330c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003310:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d197      	bne.n	8003262 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003332:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003336:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 819c 	beq.w	8003680 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334e:	4b4e      	ldr	r3, [pc, #312]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d116      	bne.n	8003388 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4b4b      	ldr	r3, [pc, #300]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	4a4a      	ldr	r2, [pc, #296]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003364:	61d3      	str	r3, [r2, #28]
 8003366:	4b48      	ldr	r3, [pc, #288]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800336e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003372:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003380:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003388:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <HAL_RCC_OscConfig+0x994>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11a      	bne.n	80033ca <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003394:	4b3e      	ldr	r3, [pc, #248]	@ (8003490 <HAL_RCC_OscConfig+0x994>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a3d      	ldr	r2, [pc, #244]	@ (8003490 <HAL_RCC_OscConfig+0x994>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a0:	f7ff f898 	bl	80024d4 <HAL_GetTick>
 80033a4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e009      	b.n	80033be <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7ff f893 	bl	80024d4 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	@ 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e3bb      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033be:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_OscConfig+0x994>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ef      	beq.n	80033aa <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x8ec>
 80033da:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	4a2a      	ldr	r2, [pc, #168]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6213      	str	r3, [r2, #32]
 80033e6:	e035      	b.n	8003454 <HAL_RCC_OscConfig+0x958>
 80033e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10c      	bne.n	8003412 <HAL_RCC_OscConfig+0x916>
 80033f8:	4b23      	ldr	r3, [pc, #140]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4a22      	ldr	r2, [pc, #136]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6213      	str	r3, [r2, #32]
 8003404:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4a1f      	ldr	r2, [pc, #124]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6213      	str	r3, [r2, #32]
 8003410:	e020      	b.n	8003454 <HAL_RCC_OscConfig+0x958>
 8003412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003416:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b05      	cmp	r3, #5
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0x940>
 8003422:	4b19      	ldr	r3, [pc, #100]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a18      	ldr	r2, [pc, #96]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003428:	f043 0304 	orr.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	4b16      	ldr	r3, [pc, #88]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a15      	ldr	r2, [pc, #84]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0x958>
 800343c:	4b12      	ldr	r3, [pc, #72]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	4a11      	ldr	r2, [pc, #68]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6213      	str	r3, [r2, #32]
 8003448:	4b0f      	ldr	r3, [pc, #60]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a0e      	ldr	r2, [pc, #56]	@ (8003488 <HAL_RCC_OscConfig+0x98c>)
 800344e:	f023 0304 	bic.w	r3, r3, #4
 8003452:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003454:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003458:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 8085 	beq.w	8003570 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003466:	f7ff f835 	bl	80024d4 <HAL_GetTick>
 800346a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346e:	e011      	b.n	8003494 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7ff f830 	bl	80024d4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d907      	bls.n	8003494 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e356      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
 8003488:	40021000 	.word	0x40021000
 800348c:	10908120 	.word	0x10908120
 8003490:	40007000 	.word	0x40007000
 8003494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003498:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800349c:	2202      	movs	r2, #2
 800349e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	fa93 f2a3 	rbit	r2, r3
 80034ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034bc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80034c0:	2202      	movs	r2, #2
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fa93 f2a3 	rbit	r2, r3
 80034d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80034da:	601a      	str	r2, [r3, #0]
  return result;
 80034dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80034e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_RCC_OscConfig+0xa00>
 80034f6:	4b98      	ldr	r3, [pc, #608]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	e013      	b.n	8003524 <HAL_RCC_OscConfig+0xa28>
 80034fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003500:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003504:	2202      	movs	r2, #2
 8003506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800351a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4b8d      	ldr	r3, [pc, #564]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003528:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800352c:	2102      	movs	r1, #2
 800352e:	6011      	str	r1, [r2, #0]
 8003530:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003534:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	fa92 f1a2 	rbit	r1, r2
 800353e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003542:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003546:	6011      	str	r1, [r2, #0]
  return result;
 8003548:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800354c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d080      	beq.n	8003470 <HAL_RCC_OscConfig+0x974>
 800356e:	e07d      	b.n	800366c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fe ffb0 	bl	80024d4 <HAL_GetTick>
 8003574:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7fe ffab 	bl	80024d4 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e2d1      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
 8003592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003596:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800359a:	2202      	movs	r2, #2
 800359c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80035be:	2202      	movs	r2, #2
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035c6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035d4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80035d8:	601a      	str	r2, [r3, #0]
  return result;
 80035da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80035e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_OscConfig+0xafe>
 80035f4:	4b58      	ldr	r3, [pc, #352]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	e013      	b.n	8003622 <HAL_RCC_OscConfig+0xb26>
 80035fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003602:	2202      	movs	r2, #2
 8003604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800360a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	fa93 f2a3 	rbit	r2, r3
 8003614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003618:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	4b4e      	ldr	r3, [pc, #312]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003626:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800362a:	2102      	movs	r1, #2
 800362c:	6011      	str	r1, [r2, #0]
 800362e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003632:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	fa92 f1a2 	rbit	r1, r2
 800363c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003640:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003644:	6011      	str	r1, [r2, #0]
  return result;
 8003646:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800364a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f002 021f 	and.w	r2, r2, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d186      	bne.n	800357a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800366c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003674:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a37      	ldr	r2, [pc, #220]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800367e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003684:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8251 	beq.w	8003b34 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003692:	4b31      	ldr	r3, [pc, #196]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	f000 820f 	beq.w	8003abe <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	f040 8165 	bne.w	800397c <HAL_RCC_OscConfig+0xe80>
 80036b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80036ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	fa93 f2a3 	rbit	r2, r3
 80036ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80036d6:	601a      	str	r2, [r3, #0]
  return result;
 80036d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80036e0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e2:	fab3 f383 	clz	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	461a      	mov	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe feec 	bl	80024d4 <HAL_GetTick>
 80036fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003700:	e009      	b.n	8003716 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003702:	f7fe fee7 	bl	80024d4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e20f      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
 8003716:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800371a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800371e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003728:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	fa93 f2a3 	rbit	r2, r3
 8003732:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003736:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800373a:	601a      	str	r2, [r3, #0]
  return result;
 800373c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003740:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003744:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b3f      	cmp	r3, #63	@ 0x3f
 800374e:	d805      	bhi.n	800375c <HAL_RCC_OscConfig+0xc60>
 8003750:	4b01      	ldr	r3, [pc, #4]	@ (8003758 <HAL_RCC_OscConfig+0xc5c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	e02a      	b.n	80037ac <HAL_RCC_OscConfig+0xcb0>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003764:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003768:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800376e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	fa93 f2a3 	rbit	r2, r3
 8003778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003786:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800378a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003794:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a2:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	4bca      	ldr	r3, [pc, #808]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037b0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80037b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037b8:	6011      	str	r1, [r2, #0]
 80037ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037be:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	fa92 f1a2 	rbit	r1, r2
 80037c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037cc:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80037d0:	6011      	str	r1, [r2, #0]
  return result;
 80037d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80037d6:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	fab2 f282 	clz	r2, r2
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	f042 0220 	orr.w	r2, r2, #32
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	f002 021f 	and.w	r2, r2, #31
 80037ec:	2101      	movs	r1, #1
 80037ee:	fa01 f202 	lsl.w	r2, r1, r2
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d184      	bne.n	8003702 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f8:	4bb6      	ldr	r3, [pc, #728]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	f023 020f 	bic.w	r2, r3, #15
 8003800:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003804:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	49b1      	ldr	r1, [pc, #708]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003812:	4bb0      	ldr	r3, [pc, #704]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800381a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a19      	ldr	r1, [r3, #32]
 8003826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800382a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	430b      	orrs	r3, r1
 8003834:	49a7      	ldr	r1, [pc, #668]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
 800383a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800383e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003842:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800385e:	601a      	str	r2, [r3, #0]
  return result;
 8003860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003864:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003868:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003874:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	461a      	mov	r2, r3
 800387c:	2301      	movs	r3, #1
 800387e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fe28 	bl	80024d4 <HAL_GetTick>
 8003884:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003888:	e009      	b.n	800389e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe fe23 	bl	80024d4 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e14b      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
 800389e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038a2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80038a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038b0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038be:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80038c2:	601a      	str	r2, [r3, #0]
  return result;
 80038c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80038cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80038d6:	d802      	bhi.n	80038de <HAL_RCC_OscConfig+0xde2>
 80038d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	e027      	b.n	800392e <HAL_RCC_OscConfig+0xe32>
 80038de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80038e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038f0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038fe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003908:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800390c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003916:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003924:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003932:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003936:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800393a:	6011      	str	r1, [r2, #0]
 800393c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003940:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	fa92 f1a2 	rbit	r1, r2
 800394a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800394e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003952:	6011      	str	r1, [r2, #0]
  return result;
 8003954:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003958:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800395c:	6812      	ldr	r2, [r2, #0]
 800395e:	fab2 f282 	clz	r2, r2
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	f042 0220 	orr.w	r2, r2, #32
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	f002 021f 	and.w	r2, r2, #31
 800396e:	2101      	movs	r1, #1
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d087      	beq.n	800388a <HAL_RCC_OscConfig+0xd8e>
 800397a:	e0db      	b.n	8003b34 <HAL_RCC_OscConfig+0x1038>
 800397c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003980:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003984:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80039a0:	601a      	str	r2, [r3, #0]
  return result;
 80039a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80039aa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80039b6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	2300      	movs	r3, #0
 80039c0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fd87 	bl	80024d4 <HAL_GetTick>
 80039c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ca:	e009      	b.n	80039e0 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe fd82 	bl	80024d4 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0aa      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
 80039e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80039e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039f2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a00:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a04:	601a      	str	r2, [r3, #0]
  return result;
 8003a06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a0a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003a0e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a10:	fab3 f383 	clz	r3, r3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a18:	d802      	bhi.n	8003a20 <HAL_RCC_OscConfig+0xf24>
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	e027      	b.n	8003a70 <HAL_RCC_OscConfig+0xf74>
 8003a20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a24:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003a28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a32:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	fa93 f2a3 	rbit	r2, r3
 8003a3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a40:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a58:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	fa93 f2a3 	rbit	r2, r3
 8003a62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a66:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	4b19      	ldr	r3, [pc, #100]	@ (8003ad4 <HAL_RCC_OscConfig+0xfd8>)
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a74:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	fa92 f1a2 	rbit	r1, r2
 8003a8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a90:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003a94:	6011      	str	r1, [r2, #0]
  return result;
 8003a96:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a9a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	fab2 f282 	clz	r2, r2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	f042 0220 	orr.w	r2, r2, #32
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	f002 021f 	and.w	r2, r2, #31
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d187      	bne.n	80039cc <HAL_RCC_OscConfig+0xed0>
 8003abc:	e03a      	b.n	8003b34 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d104      	bne.n	8003ad8 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e031      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_OscConfig+0x1044>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ae0:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <HAL_RCC_OscConfig+0x1044>)
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ae8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003aec:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d117      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b00:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003b04:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b0c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003b18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000

08003b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b09e      	sub	sp, #120	@ 0x78
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e154      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b89      	ldr	r3, [pc, #548]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b86      	ldr	r3, [pc, #536]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4984      	ldr	r1, [pc, #528]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b82      	ldr	r3, [pc, #520]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e13c      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b98:	4b7b      	ldr	r3, [pc, #492]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4978      	ldr	r1, [pc, #480]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 80cd 	beq.w	8003d52 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d137      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xec>
 8003bc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bd8:	d802      	bhi.n	8003be0 <HAL_RCC_ClockConfig+0x9c>
 8003bda:	4b6b      	ldr	r3, [pc, #428]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	e00f      	b.n	8003c00 <HAL_RCC_ClockConfig+0xbc>
 8003be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003be4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003bf2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bf4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bfc:	4b62      	ldr	r3, [pc, #392]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c08:	fa92 f2a2 	rbit	r2, r2
 8003c0c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c10:	fab2 f282 	clz	r2, r2
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f042 0220 	orr.w	r2, r2, #32
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	f002 021f 	and.w	r2, r2, #31
 8003c20:	2101      	movs	r1, #1
 8003c22:	fa01 f202 	lsl.w	r2, r1, r2
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d171      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0ea      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d137      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0x164>
 8003c38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c40:	fa93 f3a3 	rbit	r3, r3
 8003c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c50:	d802      	bhi.n	8003c58 <HAL_RCC_ClockConfig+0x114>
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e00f      	b.n	8003c78 <HAL_RCC_ClockConfig+0x134>
 8003c58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c74:	4b44      	ldr	r3, [pc, #272]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c7c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003c7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c80:	fa92 f2a2 	rbit	r2, r2
 8003c84:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003c86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c88:	fab2 f282 	clz	r2, r2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	f042 0220 	orr.w	r2, r2, #32
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f002 021f 	and.w	r2, r2, #31
 8003c98:	2101      	movs	r1, #1
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d135      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0ae      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cbe:	d802      	bhi.n	8003cc6 <HAL_RCC_ClockConfig+0x182>
 8003cc0:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e00d      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x19e>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	623b      	str	r3, [r7, #32]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	4b2a      	ldr	r3, [pc, #168]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	61ba      	str	r2, [r7, #24]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	fa92 f2a2 	rbit	r2, r2
 8003cec:	617a      	str	r2, [r7, #20]
  return result;
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	fab2 f282 	clz	r2, r2
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	f042 0220 	orr.w	r2, r2, #32
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	f002 021f 	and.w	r2, r2, #31
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f202 	lsl.w	r2, r1, r2
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e07a      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d10:	4b1d      	ldr	r3, [pc, #116]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	491a      	ldr	r1, [pc, #104]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d22:	f7fe fbd7 	bl	80024d4 <HAL_GetTick>
 8003d26:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2a:	f7fe fbd3 	bl	80024d4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e062      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d40:	4b11      	ldr	r3, [pc, #68]	@ (8003d88 <HAL_RCC_ClockConfig+0x244>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 020c 	and.w	r2, r3, #12
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d1eb      	bne.n	8003d2a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d52:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d215      	bcs.n	8003d8c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d60:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 0207 	bic.w	r2, r3, #7
 8003d68:	4906      	ldr	r1, [pc, #24]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d70:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <HAL_RCC_ClockConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0307 	and.w	r3, r3, #7
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d006      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e041      	b.n	8003e06 <HAL_RCC_ClockConfig+0x2c2>
 8003d82:	bf00      	nop
 8003d84:	40022000 	.word	0x40022000
 8003d88:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d98:	4b1d      	ldr	r3, [pc, #116]	@ (8003e10 <HAL_RCC_ClockConfig+0x2cc>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	491a      	ldr	r1, [pc, #104]	@ (8003e10 <HAL_RCC_ClockConfig+0x2cc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db6:	4b16      	ldr	r3, [pc, #88]	@ (8003e10 <HAL_RCC_ClockConfig+0x2cc>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4912      	ldr	r1, [pc, #72]	@ (8003e10 <HAL_RCC_ClockConfig+0x2cc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003dca:	f000 f829 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003dce:	4601      	mov	r1, r0
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e10 <HAL_RCC_ClockConfig+0x2cc>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dd8:	22f0      	movs	r2, #240	@ 0xf0
 8003dda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	fa92 f2a2 	rbit	r2, r2
 8003de2:	60fa      	str	r2, [r7, #12]
  return result;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	fab2 f282 	clz	r2, r2
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	40d3      	lsrs	r3, r2
 8003dee:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <HAL_RCC_ClockConfig+0x2d0>)
 8003df0:	5cd3      	ldrb	r3, [r2, r3]
 8003df2:	fa21 f303 	lsr.w	r3, r1, r3
 8003df6:	4a08      	ldr	r2, [pc, #32]	@ (8003e18 <HAL_RCC_ClockConfig+0x2d4>)
 8003df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003dfa:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <HAL_RCC_ClockConfig+0x2d8>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fb24 	bl	800244c <HAL_InitTick>
  
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3778      	adds	r7, #120	@ 0x78
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	080070bc 	.word	0x080070bc
 8003e18:	2000000c 	.word	0x2000000c
 8003e1c:	20000014 	.word	0x20000014

08003e20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	2300      	movs	r3, #0
 8003e34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x30>
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x36>
 8003e4e:	e029      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e50:	4b1a      	ldr	r3, [pc, #104]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e52:	613b      	str	r3, [r7, #16]
      break;
 8003e54:	e029      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0c9b      	lsrs	r3, r3, #18
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e60:	5cd3      	ldrb	r3, [r2, r3]
 8003e62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003e64:	4b14      	ldr	r3, [pc, #80]	@ (8003eb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	4a15      	ldr	r2, [pc, #84]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	fb02 f303 	mul.w	r3, r2, r3
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	e007      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	613b      	str	r3, [r7, #16]
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ea6:	613b      	str	r3, [r7, #16]
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	693b      	ldr	r3, [r7, #16]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	080070cc 	.word	0x080070cc
 8003ec4:	080070dc 	.word	0x080070dc

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	@ 0x48
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80d2 	beq.w	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eec:	4b4d      	ldr	r3, [pc, #308]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10e      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	4a49      	ldr	r2, [pc, #292]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f02:	61d3      	str	r3, [r2, #28]
 8003f04:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f16:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d118      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f22:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a40      	ldr	r2, [pc, #256]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fad1 	bl	80024d4 <HAL_GetTick>
 8003f32:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f34:	e008      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f36:	f7fe facd 	bl	80024d4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b64      	cmp	r3, #100	@ 0x64
 8003f42:	d901      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1d4      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	4b37      	ldr	r3, [pc, #220]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f54:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8082 	beq.w	800406a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d07a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f74:	4b2b      	ldr	r3, [pc, #172]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f86:	fa93 f3a3 	rbit	r3, r3
 8003f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b25      	ldr	r3, [pc, #148]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003faa:	fa93 f3a3 	rbit	r3, r3
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b1c      	ldr	r3, [pc, #112]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fc6:	4a17      	ldr	r2, [pc, #92]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d049      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fa7d 	bl	80024d4 <HAL_GetTick>
 8003fda:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fa79 	bl	80024d4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e17e      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004000:	2302      	movs	r3, #2
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	61fb      	str	r3, [r7, #28]
  return result;
 800400c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800401e:	4b01      	ldr	r3, [pc, #4]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	e00d      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004024:	40021000 	.word	0x40021000
 8004028:	40007000 	.word	0x40007000
 800402c:	10908100 	.word	0x10908100
 8004030:	2302      	movs	r3, #2
 8004032:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	4b9a      	ldr	r3, [pc, #616]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	2202      	movs	r2, #2
 8004042:	613a      	str	r2, [r7, #16]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	fa92 f2a2 	rbit	r2, r2
 800404a:	60fa      	str	r2, [r7, #12]
  return result;
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	fab2 f282 	clz	r2, r2
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	f002 021f 	and.w	r2, r2, #31
 800405e:	2101      	movs	r1, #1
 8004060:	fa01 f202 	lsl.w	r2, r1, r2
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0b9      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800406a:	4b8f      	ldr	r3, [pc, #572]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	498c      	ldr	r1, [pc, #560]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800407c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004084:	4b88      	ldr	r3, [pc, #544]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4a87      	ldr	r2, [pc, #540]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800408e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800409c:	4b82      	ldr	r3, [pc, #520]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a0:	f023 0203 	bic.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	497f      	ldr	r1, [pc, #508]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d008      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040ba:	4b7b      	ldr	r3, [pc, #492]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	4978      	ldr	r1, [pc, #480]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040d8:	4b73      	ldr	r3, [pc, #460]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4970      	ldr	r1, [pc, #448]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f6:	4b6c      	ldr	r3, [pc, #432]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	f023 0210 	bic.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	4969      	ldr	r1, [pc, #420]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004114:	4b64      	ldr	r3, [pc, #400]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	4961      	ldr	r1, [pc, #388]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004132:	4b5d      	ldr	r3, [pc, #372]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	f023 0220 	bic.w	r2, r3, #32
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	495a      	ldr	r1, [pc, #360]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004150:	4b55      	ldr	r3, [pc, #340]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415c:	4952      	ldr	r1, [pc, #328]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415e:	4313      	orrs	r3, r2
 8004160:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800416e:	4b4e      	ldr	r3, [pc, #312]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	494b      	ldr	r1, [pc, #300]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417c:	4313      	orrs	r3, r2
 800417e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800418c:	4b46      	ldr	r3, [pc, #280]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4943      	ldr	r1, [pc, #268]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419a:	4313      	orrs	r3, r2
 800419c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041aa:	4b3f      	ldr	r3, [pc, #252]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	493c      	ldr	r1, [pc, #240]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d008      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041c8:	4b37      	ldr	r3, [pc, #220]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	4934      	ldr	r1, [pc, #208]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041e6:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	492d      	ldr	r1, [pc, #180]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004204:	4b28      	ldr	r3, [pc, #160]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004210:	4925      	ldr	r1, [pc, #148]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	4313      	orrs	r3, r2
 8004214:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004222:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	491e      	ldr	r1, [pc, #120]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004230:	4313      	orrs	r3, r2
 8004232:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004240:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424c:	4916      	ldr	r1, [pc, #88]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	4313      	orrs	r3, r2
 8004250:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800425e:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426a:	490f      	ldr	r1, [pc, #60]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	4313      	orrs	r3, r2
 800426e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004288:	4907      	ldr	r1, [pc, #28]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428a:	4313      	orrs	r3, r2
 800428c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00c      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800429a:	4b03      	ldr	r3, [pc, #12]	@ (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	e002      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ae:	4913      	ldr	r1, [pc, #76]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80042c0:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042cc:	490b      	ldr	r1, [pc, #44]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80042de:	4b07      	ldr	r3, [pc, #28]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ea:	4904      	ldr	r1, [pc, #16]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3748      	adds	r7, #72	@ 0x48
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000

08004300 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e073      	b.n	80043fe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7f5b      	ldrb	r3, [r3, #29]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd f99e 	bl	8001668 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d055      	beq.n	80043ec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	22ca      	movs	r2, #202	@ 0xca
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2253      	movs	r2, #83	@ 0x53
 800434e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fcfd 	bl	8004d50 <RTC_EnterInitMode>
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d12c      	bne.n	80043ba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800436e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004372:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68d2      	ldr	r2, [r2, #12]
 800439a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6919      	ldr	r1, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	041a      	lsls	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fd04 	bl	8004dbe <RTC_ExitInitMode>
 80043b6:	4603      	mov	r3, r0
 80043b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d110      	bne.n	80043e2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043ce:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	22ff      	movs	r2, #255	@ 0xff
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80043ea:	e001      	b.n	80043f0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004406:	b590      	push	{r4, r7, lr}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	7f1b      	ldrb	r3, [r3, #28]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_RTC_SetTime+0x1c>
 800441e:	2302      	movs	r3, #2
 8004420:	e087      	b.n	8004532 <HAL_RTC_SetTime+0x12c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2202      	movs	r2, #2
 800442c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d126      	bne.n	8004482 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d102      	bne.n	8004448 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2200      	movs	r2, #0
 8004446:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fcdb 	bl	8004e08 <RTC_ByteToBcd2>
 8004452:	4603      	mov	r3, r0
 8004454:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	785b      	ldrb	r3, [r3, #1]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fcd4 	bl	8004e08 <RTC_ByteToBcd2>
 8004460:	4603      	mov	r3, r0
 8004462:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004464:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	789b      	ldrb	r3, [r3, #2]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fccc 	bl	8004e08 <RTC_ByteToBcd2>
 8004470:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004472:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	78db      	ldrb	r3, [r3, #3]
 800447a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e018      	b.n	80044b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	785b      	ldrb	r3, [r3, #1]
 80044a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044a2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	78db      	ldrb	r3, [r3, #3]
 80044ae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	22ca      	movs	r2, #202	@ 0xca
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2253      	movs	r2, #83	@ 0x53
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fc43 	bl	8004d50 <RTC_EnterInitMode>
 80044ca:	4603      	mov	r3, r0
 80044cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d120      	bne.n	8004516 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80044de:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80044e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80044f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fc56 	bl	8004dbe <RTC_ExitInitMode>
 8004512:	4603      	mov	r3, r0
 8004514:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004516:	7cfb      	ldrb	r3, [r7, #19]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	22ff      	movs	r2, #255	@ 0xff
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]

  return status;
 8004530:	7cfb      	ldrb	r3, [r7, #19]
}
 8004532:	4618      	mov	r0, r3
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd90      	pop	{r4, r7, pc}

0800453a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800456c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004570:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	0c1b      	lsrs	r3, r3, #16
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800457c:	b2da      	uxtb	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b2db      	uxtb	r3, r3
 8004588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800458c:	b2da      	uxtb	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	0d9b      	lsrs	r3, r3, #22
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d11a      	bne.n	80045ec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fc42 	bl	8004e44 <RTC_Bcd2ToByte>
 80045c0:	4603      	mov	r3, r0
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fc39 	bl	8004e44 <RTC_Bcd2ToByte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	789b      	ldrb	r3, [r3, #2]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fc30 	bl	8004e44 <RTC_Bcd2ToByte>
 80045e4:	4603      	mov	r3, r0
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045f6:	b590      	push	{r4, r7, lr}
 80045f8:	b087      	sub	sp, #28
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	60b9      	str	r1, [r7, #8]
 8004600:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	7f1b      	ldrb	r3, [r3, #28]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_RTC_SetDate+0x1c>
 800460e:	2302      	movs	r3, #2
 8004610:	e071      	b.n	80046f6 <HAL_RTC_SetDate+0x100>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2202      	movs	r2, #2
 800461c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10e      	bne.n	8004642 <HAL_RTC_SetDate+0x4c>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	785b      	ldrb	r3, [r3, #1]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	f023 0310 	bic.w	r3, r3, #16
 8004638:	b2db      	uxtb	r3, r3
 800463a:	330a      	adds	r3, #10
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11c      	bne.n	8004682 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	78db      	ldrb	r3, [r3, #3]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fbdb 	bl	8004e08 <RTC_ByteToBcd2>
 8004652:	4603      	mov	r3, r0
 8004654:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fbd4 	bl	8004e08 <RTC_ByteToBcd2>
 8004660:	4603      	mov	r3, r0
 8004662:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004664:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	789b      	ldrb	r3, [r3, #2]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fbcc 	bl	8004e08 <RTC_ByteToBcd2>
 8004670:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004672:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e00e      	b.n	80046a0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	78db      	ldrb	r3, [r3, #3]
 8004686:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	785b      	ldrb	r3, [r3, #1]
 800468c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800468e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004694:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	22ca      	movs	r2, #202	@ 0xca
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2253      	movs	r2, #83	@ 0x53
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fb4d 	bl	8004d50 <RTC_EnterInitMode>
 80046b6:	4603      	mov	r3, r0
 80046b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046ba:	7cfb      	ldrb	r3, [r7, #19]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10c      	bne.n	80046da <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80046ce:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fb74 	bl	8004dbe <RTC_ExitInitMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	22ff      	movs	r2, #255	@ 0xff
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]

  return status;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}

080046fe <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004718:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800471c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	0b5b      	lsrs	r3, r3, #13
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11a      	bne.n	8004792 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	78db      	ldrb	r3, [r3, #3]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fb6f 	bl	8004e44 <RTC_Bcd2ToByte>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb66 	bl	8004e44 <RTC_Bcd2ToByte>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	789b      	ldrb	r3, [r3, #2]
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fb5d 	bl	8004e44 <RTC_Bcd2ToByte>
 800478a:	4603      	mov	r3, r0
 800478c:	461a      	mov	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b089      	sub	sp, #36	@ 0x24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	7f1b      	ldrb	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_RTC_SetAlarm+0x24>
 80047bc:	2302      	movs	r3, #2
 80047be:	e113      	b.n	80049e8 <HAL_RTC_SetAlarm+0x24c>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2202      	movs	r2, #2
 80047ca:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d137      	bne.n	8004842 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fb0c 	bl	8004e08 <RTC_ByteToBcd2>
 80047f0:	4603      	mov	r3, r0
 80047f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fb05 	bl	8004e08 <RTC_ByteToBcd2>
 80047fe:	4603      	mov	r3, r0
 8004800:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004802:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	789b      	ldrb	r3, [r3, #2]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fafd 	bl	8004e08 <RTC_ByteToBcd2>
 800480e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004810:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	78db      	ldrb	r3, [r3, #3]
 8004818:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800481a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 faef 	bl	8004e08 <RTC_ByteToBcd2>
 800482a:	4603      	mov	r3, r0
 800482c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800482e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004836:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800483c:	4313      	orrs	r3, r2
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	e023      	b.n	800488a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2200      	movs	r2, #0
 8004854:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	785b      	ldrb	r3, [r3, #1]
 8004860:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004862:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004868:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004870:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004878:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800487a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004880:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004886:	4313      	orrs	r3, r2
 8004888:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	22ca      	movs	r2, #202	@ 0xca
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2253      	movs	r2, #83	@ 0x53
 80048a4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ae:	d148      	bne.n	8004942 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048be:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80048ce:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80048e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048e2:	f7fd fdf7 	bl	80024d4 <HAL_GetTick>
 80048e6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048e8:	e013      	b.n	8004912 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048ea:	f7fd fdf3 	bl	80024d4 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048f8:	d90b      	bls.n	8004912 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	22ff      	movs	r2, #255	@ 0xff
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2203      	movs	r2, #3
 8004906:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e06a      	b.n	80049e8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0e4      	beq.n	80048ea <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	e047      	b.n	80049d2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004950:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004960:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004972:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004974:	f7fd fdae 	bl	80024d4 <HAL_GetTick>
 8004978:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800497a:	e013      	b.n	80049a4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800497c:	f7fd fdaa 	bl	80024d4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800498a:	d90b      	bls.n	80049a4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	22ff      	movs	r2, #255	@ 0xff
 8004992:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2203      	movs	r2, #3
 8004998:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e021      	b.n	80049e8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0e4      	beq.n	800497c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	22ff      	movs	r2, #255	@ 0xff
 80049d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3724      	adds	r7, #36	@ 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd90      	pop	{r4, r7, pc}

080049f0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b089      	sub	sp, #36	@ 0x24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80049fc:	4b9b      	ldr	r3, [pc, #620]	@ (8004c6c <HAL_RTC_SetAlarm_IT+0x27c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a9b      	ldr	r2, [pc, #620]	@ (8004c70 <HAL_RTC_SetAlarm_IT+0x280>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0adb      	lsrs	r3, r3, #11
 8004a08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	7f1b      	ldrb	r3, [r3, #28]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_RTC_SetAlarm_IT+0x36>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e11e      	b.n	8004c64 <HAL_RTC_SetAlarm_IT+0x274>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d137      	bne.n	8004aa8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f9d9 	bl	8004e08 <RTC_ByteToBcd2>
 8004a56:	4603      	mov	r3, r0
 8004a58:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f9d2 	bl	8004e08 <RTC_ByteToBcd2>
 8004a64:	4603      	mov	r3, r0
 8004a66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004a68:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	789b      	ldrb	r3, [r3, #2]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f9ca 	bl	8004e08 <RTC_ByteToBcd2>
 8004a74:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	78db      	ldrb	r3, [r3, #3]
 8004a7e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8004a80:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 f9bc 	bl	8004e08 <RTC_ByteToBcd2>
 8004a90:	4603      	mov	r3, r0
 8004a92:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8004a94:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004a9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61fb      	str	r3, [r7, #28]
 8004aa6:	e023      	b.n	8004af0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004ac8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004ace:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	78db      	ldrb	r3, [r3, #3]
 8004ad4:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004ad6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ade:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8004ae0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004ae6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	22ca      	movs	r2, #202	@ 0xca
 8004b02:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2253      	movs	r2, #83	@ 0x53
 8004b0a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b14:	d142      	bne.n	8004b9c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b24:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004b36:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	22ff      	movs	r2, #255	@ 0xff
 8004b4a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2203      	movs	r2, #3
 8004b50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e083      	b.n	8004c64 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0e6      	beq.n	8004b38 <HAL_RTC_SetAlarm_IT+0x148>

  /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b88:	609a      	str	r2, [r3, #8]
    /* Enable Alarm A interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b98:	609a      	str	r2, [r3, #8]
 8004b9a:	e04c      	b.n	8004c36 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004baa:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004bbc:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8004c6c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c70 <HAL_RTC_SetAlarm_IT+0x280>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	0adb      	lsrs	r3, r3, #11
 8004bca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10b      	bne.n	8004bf8 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	22ff      	movs	r2, #255	@ 0xff
 8004be6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2203      	movs	r2, #3
 8004bec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e035      	b.n	8004c64 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0e6      	beq.n	8004bd4 <HAL_RTC_SetAlarm_IT+0x1e4>

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c24:	609a      	str	r2, [r3, #8]
    /* Enable Alarm B interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c34:	609a      	str	r2, [r3, #8]
  }

  /* Enable and configure the EXTI line associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c36:	4b0f      	ldr	r3, [pc, #60]	@ (8004c74 <HAL_RTC_SetAlarm_IT+0x284>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c74 <HAL_RTC_SetAlarm_IT+0x284>)
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c40:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004c42:	4b0c      	ldr	r3, [pc, #48]	@ (8004c74 <HAL_RTC_SetAlarm_IT+0x284>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a0b      	ldr	r2, [pc, #44]	@ (8004c74 <HAL_RTC_SetAlarm_IT+0x284>)
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	22ff      	movs	r2, #255	@ 0xff
 8004c54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3724      	adds	r7, #36	@ 0x24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd90      	pop	{r4, r7, pc}
 8004c6c:	2000000c 	.word	0x2000000c
 8004c70:	10624dd3 	.word	0x10624dd3
 8004c74:	40010400 	.word	0x40010400

08004c78 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Alarm interrupt */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c80:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004c82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004c86:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d012      	beq.n	8004cbc <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004cb4:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fb ffac 	bl	8000c14 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d012      	beq.n	8004cf0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004ce8:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8c8 	bl	8004e80 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	775a      	strb	r2, [r3, #29]
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40010400 	.word	0x40010400

08004d04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a0d      	ldr	r2, [pc, #52]	@ (8004d4c <HAL_RTC_WaitForSynchro+0x48>)
 8004d16:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d18:	f7fd fbdc 	bl	80024d4 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d1e:	e009      	b.n	8004d34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d20:	f7fd fbd8 	bl	80024d4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d2e:	d901      	bls.n	8004d34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e007      	b.n	8004d44 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0ee      	beq.n	8004d20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	0001ff5f 	.word	0x0001ff5f

08004d50 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d122      	bne.n	8004db4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7e:	f7fd fba9 	bl	80024d4 <HAL_GetTick>
 8004d82:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d84:	e00c      	b.n	8004da0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d86:	f7fd fba5 	bl	80024d4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d94:	d904      	bls.n	8004da0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <RTC_EnterInitMode+0x64>
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d1e8      	bne.n	8004d86 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dd8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff8b 	bl	8004d04 <HAL_RTC_WaitForSynchro>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d004      	beq.n	8004dfe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2204      	movs	r2, #4
 8004df8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e16:	e005      	b.n	8004e24 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	3b0a      	subs	r3, #10
 8004e22:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	2b09      	cmp	r3, #9
 8004e28:	d8f6      	bhi.n	8004e18 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b2db      	uxtb	r3, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4413      	add	r3, r2
 8004e72:	b2db      	uxtb	r3, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e049      	b.n	8004f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc fc00 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fdb8 	bl	8005a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d001      	beq.n	8004f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e04f      	b.n	8004ffc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a23      	ldr	r2, [pc, #140]	@ (8005008 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f86:	d018      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800500c <HAL_TIM_Base_Start_IT+0xc8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_TIM_Base_Start_IT+0x76>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <HAL_TIM_Base_Start_IT+0xd8>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d115      	bne.n	8004fe6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	4b17      	ldr	r3, [pc, #92]	@ (8005020 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d015      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0xb4>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd2:	d011      	beq.n	8004ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe4:	e008      	b.n	8004ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e000      	b.n	8004ffa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40013400 	.word	0x40013400
 8005018:	40014000 	.word	0x40014000
 800501c:	40015000 	.word	0x40015000
 8005020:	00010007 	.word	0x00010007

08005024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e049      	b.n	80050ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f841 	bl	80050d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f000 fcf0 	bl	8005a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <HAL_TIM_PWM_Start+0x24>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b01      	cmp	r3, #1
 8005102:	bf14      	ite	ne
 8005104:	2301      	movne	r3, #1
 8005106:	2300      	moveq	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e03c      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b04      	cmp	r3, #4
 8005110:	d109      	bne.n	8005126 <HAL_TIM_PWM_Start+0x3e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	e02f      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d109      	bne.n	8005140 <HAL_TIM_PWM_Start+0x58>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	bf14      	ite	ne
 8005138:	2301      	movne	r3, #1
 800513a:	2300      	moveq	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	e022      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d109      	bne.n	800515a <HAL_TIM_PWM_Start+0x72>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b01      	cmp	r3, #1
 8005150:	bf14      	ite	ne
 8005152:	2301      	movne	r3, #1
 8005154:	2300      	moveq	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	e015      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b10      	cmp	r3, #16
 800515e:	d109      	bne.n	8005174 <HAL_TIM_PWM_Start+0x8c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	e008      	b.n	8005186 <HAL_TIM_PWM_Start+0x9e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e0a1      	b.n	80052d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_TIM_PWM_Start+0xb6>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800519c:	e023      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_PWM_Start+0xc6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ac:	e01b      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0xd6>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051bc:	e013      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b0c      	cmp	r3, #12
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0xe6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051cc:	e00b      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b10      	cmp	r3, #16
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0xf6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051dc:	e003      	b.n	80051e6 <HAL_TIM_PWM_Start+0xfe>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2201      	movs	r2, #1
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f001 f874 	bl	80062dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a38      	ldr	r2, [pc, #224]	@ (80052dc <HAL_TIM_PWM_Start+0x1f4>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d018      	beq.n	8005230 <HAL_TIM_PWM_Start+0x148>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a37      	ldr	r2, [pc, #220]	@ (80052e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <HAL_TIM_PWM_Start+0x148>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <HAL_TIM_PWM_Start+0x1fc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00e      	beq.n	8005230 <HAL_TIM_PWM_Start+0x148>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a34      	ldr	r2, [pc, #208]	@ (80052e8 <HAL_TIM_PWM_Start+0x200>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d009      	beq.n	8005230 <HAL_TIM_PWM_Start+0x148>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a32      	ldr	r2, [pc, #200]	@ (80052ec <HAL_TIM_PWM_Start+0x204>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIM_PWM_Start+0x148>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a31      	ldr	r2, [pc, #196]	@ (80052f0 <HAL_TIM_PWM_Start+0x208>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_TIM_PWM_Start+0x14c>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_TIM_PWM_Start+0x14e>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a23      	ldr	r2, [pc, #140]	@ (80052dc <HAL_TIM_PWM_Start+0x1f4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d01d      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1a8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800525c:	d018      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1a8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a24      	ldr	r2, [pc, #144]	@ (80052f4 <HAL_TIM_PWM_Start+0x20c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1a8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a22      	ldr	r2, [pc, #136]	@ (80052f8 <HAL_TIM_PWM_Start+0x210>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1a8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1a      	ldr	r2, [pc, #104]	@ (80052e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1a8>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIM_PWM_Start+0x1a8>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a19      	ldr	r2, [pc, #100]	@ (80052f0 <HAL_TIM_PWM_Start+0x208>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d115      	bne.n	80052bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b19      	ldr	r3, [pc, #100]	@ (80052fc <HAL_TIM_PWM_Start+0x214>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d015      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1e6>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a8:	d011      	beq.n	80052ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e008      	b.n	80052ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e000      	b.n	80052d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	40015000 	.word	0x40015000
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	00010007 	.word	0x00010007

08005300 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 ffe2 	bl	80062dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a40      	ldr	r2, [pc, #256]	@ (8005420 <HAL_TIM_PWM_Stop+0x120>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d018      	beq.n	8005354 <HAL_TIM_PWM_Stop+0x54>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a3f      	ldr	r2, [pc, #252]	@ (8005424 <HAL_TIM_PWM_Stop+0x124>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <HAL_TIM_PWM_Stop+0x54>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a3d      	ldr	r2, [pc, #244]	@ (8005428 <HAL_TIM_PWM_Stop+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00e      	beq.n	8005354 <HAL_TIM_PWM_Stop+0x54>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a3c      	ldr	r2, [pc, #240]	@ (800542c <HAL_TIM_PWM_Stop+0x12c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d009      	beq.n	8005354 <HAL_TIM_PWM_Stop+0x54>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a3a      	ldr	r2, [pc, #232]	@ (8005430 <HAL_TIM_PWM_Stop+0x130>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_PWM_Stop+0x54>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a39      	ldr	r2, [pc, #228]	@ (8005434 <HAL_TIM_PWM_Stop+0x134>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <HAL_TIM_PWM_Stop+0x58>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_TIM_PWM_Stop+0x5a>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d017      	beq.n	800538e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a1a      	ldr	r2, [r3, #32]
 8005364:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <HAL_TIM_PWM_Stop+0x8e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	f240 4344 	movw	r3, #1092	@ 0x444
 8005378:	4013      	ands	r3, r2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d107      	bne.n	800538e <HAL_TIM_PWM_Stop+0x8e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800538c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10f      	bne.n	80053be <HAL_TIM_PWM_Stop+0xbe>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	f240 4344 	movw	r3, #1092	@ 0x444
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d107      	bne.n	80053be <HAL_TIM_PWM_Stop+0xbe>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0201 	bic.w	r2, r2, #1
 80053bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Stop+0xce>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053cc:	e023      	b.n	8005416 <HAL_TIM_PWM_Stop+0x116>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d104      	bne.n	80053de <HAL_TIM_PWM_Stop+0xde>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053dc:	e01b      	b.n	8005416 <HAL_TIM_PWM_Stop+0x116>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Stop+0xee>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ec:	e013      	b.n	8005416 <HAL_TIM_PWM_Stop+0x116>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Stop+0xfe>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053fc:	e00b      	b.n	8005416 <HAL_TIM_PWM_Stop+0x116>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b10      	cmp	r3, #16
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Stop+0x10e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800540c:	e003      	b.n	8005416 <HAL_TIM_PWM_Stop+0x116>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40015000 	.word	0x40015000

08005438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d020      	beq.n	800549c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01b      	beq.n	800549c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0202 	mvn.w	r2, #2
 800546c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fac1 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fab3 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fac4 	bl	8005a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d020      	beq.n	80054e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01b      	beq.n	80054e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0204 	mvn.w	r2, #4
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa9b 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa8d 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa9e 	bl	8005a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d020      	beq.n	8005534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d01b      	beq.n	8005534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0208 	mvn.w	r2, #8
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa75 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa67 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fa78 	bl	8005a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b00      	cmp	r3, #0
 800553c:	d020      	beq.n	8005580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01b      	beq.n	8005580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f06f 0210 	mvn.w	r2, #16
 8005550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2208      	movs	r2, #8
 8005556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fa4f 	bl	8005a0a <HAL_TIM_IC_CaptureCallback>
 800556c:	e005      	b.n	800557a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa41 	bl	80059f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa52 	bl	8005a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0201 	mvn.w	r2, #1
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fb fb04 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 ffcc 	bl	8006560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 ffc4 	bl	8006574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fa11 	bl	8005a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0220 	mvn.w	r2, #32
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 ff8c 	bl	800654c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005656:	2302      	movs	r3, #2
 8005658:	e0ff      	b.n	800585a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b14      	cmp	r3, #20
 8005666:	f200 80f0 	bhi.w	800584a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800566a:	a201      	add	r2, pc, #4	@ (adr r2, 8005670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056c5 	.word	0x080056c5
 8005674:	0800584b 	.word	0x0800584b
 8005678:	0800584b 	.word	0x0800584b
 800567c:	0800584b 	.word	0x0800584b
 8005680:	08005705 	.word	0x08005705
 8005684:	0800584b 	.word	0x0800584b
 8005688:	0800584b 	.word	0x0800584b
 800568c:	0800584b 	.word	0x0800584b
 8005690:	08005747 	.word	0x08005747
 8005694:	0800584b 	.word	0x0800584b
 8005698:	0800584b 	.word	0x0800584b
 800569c:	0800584b 	.word	0x0800584b
 80056a0:	08005787 	.word	0x08005787
 80056a4:	0800584b 	.word	0x0800584b
 80056a8:	0800584b 	.word	0x0800584b
 80056ac:	0800584b 	.word	0x0800584b
 80056b0:	080057c9 	.word	0x080057c9
 80056b4:	0800584b 	.word	0x0800584b
 80056b8:	0800584b 	.word	0x0800584b
 80056bc:	0800584b 	.word	0x0800584b
 80056c0:	08005809 	.word	0x08005809
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fa66 	bl	8005b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0208 	orr.w	r2, r2, #8
 80056de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0204 	bic.w	r2, r2, #4
 80056ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6999      	ldr	r1, [r3, #24]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	619a      	str	r2, [r3, #24]
      break;
 8005702:	e0a5      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fae0 	bl	8005cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	021a      	lsls	r2, r3, #8
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	619a      	str	r2, [r3, #24]
      break;
 8005744:	e084      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68b9      	ldr	r1, [r7, #8]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 fb53 	bl	8005df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0208 	orr.w	r2, r2, #8
 8005760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69da      	ldr	r2, [r3, #28]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 0204 	bic.w	r2, r2, #4
 8005770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69d9      	ldr	r1, [r3, #28]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	61da      	str	r2, [r3, #28]
      break;
 8005784:	e064      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fbc5 	bl	8005f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	61da      	str	r2, [r3, #28]
      break;
 80057c6:	e043      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 fc14 	bl	8005ffc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0208 	orr.w	r2, r2, #8
 80057e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0204 	bic.w	r2, r2, #4
 80057f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005806:	e023      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fc5e 	bl	80060d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005822:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005832:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	021a      	lsls	r2, r3, #8
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005848:	e002      	b.n	8005850 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
      break;
 800584e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005858:	7dfb      	ldrb	r3, [r7, #23]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop

08005864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIM_ConfigClockSource+0x1c>
 800587c:	2302      	movs	r3, #2
 800587e:	e0b6      	b.n	80059ee <HAL_TIM_ConfigClockSource+0x18a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058bc:	d03e      	beq.n	800593c <HAL_TIM_ConfigClockSource+0xd8>
 80058be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c2:	f200 8087 	bhi.w	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ca:	f000 8086 	beq.w	80059da <HAL_TIM_ConfigClockSource+0x176>
 80058ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058d2:	d87f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058d4:	2b70      	cmp	r3, #112	@ 0x70
 80058d6:	d01a      	beq.n	800590e <HAL_TIM_ConfigClockSource+0xaa>
 80058d8:	2b70      	cmp	r3, #112	@ 0x70
 80058da:	d87b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058dc:	2b60      	cmp	r3, #96	@ 0x60
 80058de:	d050      	beq.n	8005982 <HAL_TIM_ConfigClockSource+0x11e>
 80058e0:	2b60      	cmp	r3, #96	@ 0x60
 80058e2:	d877      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058e4:	2b50      	cmp	r3, #80	@ 0x50
 80058e6:	d03c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0xfe>
 80058e8:	2b50      	cmp	r3, #80	@ 0x50
 80058ea:	d873      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058ec:	2b40      	cmp	r3, #64	@ 0x40
 80058ee:	d058      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0x13e>
 80058f0:	2b40      	cmp	r3, #64	@ 0x40
 80058f2:	d86f      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058f4:	2b30      	cmp	r3, #48	@ 0x30
 80058f6:	d064      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 80058f8:	2b30      	cmp	r3, #48	@ 0x30
 80058fa:	d86b      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 80058fc:	2b20      	cmp	r3, #32
 80058fe:	d060      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d867      	bhi.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d05c      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 8005908:	2b10      	cmp	r3, #16
 800590a:	d05a      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x15e>
 800590c:	e062      	b.n	80059d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800591e:	f000 fcbd 	bl	800629c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	609a      	str	r2, [r3, #8]
      break;
 800593a:	e04f      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800594c:	f000 fca6 	bl	800629c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800595e:	609a      	str	r2, [r3, #8]
      break;
 8005960:	e03c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	461a      	mov	r2, r3
 8005970:	f000 fc1a 	bl	80061a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2150      	movs	r1, #80	@ 0x50
 800597a:	4618      	mov	r0, r3
 800597c:	f000 fc73 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 8005980:	e02c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	461a      	mov	r2, r3
 8005990:	f000 fc39 	bl	8006206 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2160      	movs	r1, #96	@ 0x60
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fc63 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 80059a0:	e01c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 fbfa 	bl	80061a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2140      	movs	r1, #64	@ 0x40
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fc53 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e00c      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f000 fc4a 	bl	8006266 <TIM_ITRx_SetConfig>
      break;
 80059d2:	e003      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	e000      	b.n	80059dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a48      	ldr	r2, [pc, #288]	@ (8005b7c <TIM_Base_SetConfig+0x134>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a66:	d00f      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a45      	ldr	r2, [pc, #276]	@ (8005b80 <TIM_Base_SetConfig+0x138>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a44      	ldr	r2, [pc, #272]	@ (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a43      	ldr	r2, [pc, #268]	@ (8005b88 <TIM_Base_SetConfig+0x140>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a42      	ldr	r2, [pc, #264]	@ (8005b8c <TIM_Base_SetConfig+0x144>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d108      	bne.n	8005a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a37      	ldr	r2, [pc, #220]	@ (8005b7c <TIM_Base_SetConfig+0x134>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d01f      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa8:	d01b      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a34      	ldr	r2, [pc, #208]	@ (8005b80 <TIM_Base_SetConfig+0x138>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d017      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a33      	ldr	r2, [pc, #204]	@ (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d013      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a32      	ldr	r2, [pc, #200]	@ (8005b88 <TIM_Base_SetConfig+0x140>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00f      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a32      	ldr	r2, [pc, #200]	@ (8005b90 <TIM_Base_SetConfig+0x148>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00b      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a31      	ldr	r2, [pc, #196]	@ (8005b94 <TIM_Base_SetConfig+0x14c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d007      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a30      	ldr	r2, [pc, #192]	@ (8005b98 <TIM_Base_SetConfig+0x150>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_Base_SetConfig+0x9a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2b      	ldr	r2, [pc, #172]	@ (8005b8c <TIM_Base_SetConfig+0x144>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d108      	bne.n	8005af4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a18      	ldr	r2, [pc, #96]	@ (8005b7c <TIM_Base_SetConfig+0x134>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <TIM_Base_SetConfig+0x100>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a19      	ldr	r2, [pc, #100]	@ (8005b88 <TIM_Base_SetConfig+0x140>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00f      	beq.n	8005b48 <TIM_Base_SetConfig+0x100>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a19      	ldr	r2, [pc, #100]	@ (8005b90 <TIM_Base_SetConfig+0x148>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00b      	beq.n	8005b48 <TIM_Base_SetConfig+0x100>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a18      	ldr	r2, [pc, #96]	@ (8005b94 <TIM_Base_SetConfig+0x14c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d007      	beq.n	8005b48 <TIM_Base_SetConfig+0x100>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a17      	ldr	r2, [pc, #92]	@ (8005b98 <TIM_Base_SetConfig+0x150>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_Base_SetConfig+0x100>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a12      	ldr	r2, [pc, #72]	@ (8005b8c <TIM_Base_SetConfig+0x144>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d103      	bne.n	8005b50 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f023 0201 	bic.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	611a      	str	r2, [r3, #16]
  }
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40013400 	.word	0x40013400
 8005b8c:	40015000 	.word	0x40015000
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40014400 	.word	0x40014400
 8005b98:	40014800 	.word	0x40014800

08005b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f023 0201 	bic.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 0302 	bic.w	r3, r3, #2
 8005be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a30      	ldr	r2, [pc, #192]	@ (8005cb8 <TIM_OC1_SetConfig+0x11c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <TIM_OC1_SetConfig+0x88>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8005cbc <TIM_OC1_SetConfig+0x120>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00f      	beq.n	8005c24 <TIM_OC1_SetConfig+0x88>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a2e      	ldr	r2, [pc, #184]	@ (8005cc0 <TIM_OC1_SetConfig+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_OC1_SetConfig+0x88>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc4 <TIM_OC1_SetConfig+0x128>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_OC1_SetConfig+0x88>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2c      	ldr	r2, [pc, #176]	@ (8005cc8 <TIM_OC1_SetConfig+0x12c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC1_SetConfig+0x88>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005ccc <TIM_OC1_SetConfig+0x130>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10c      	bne.n	8005c3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0308 	bic.w	r3, r3, #8
 8005c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f023 0304 	bic.w	r3, r3, #4
 8005c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb8 <TIM_OC1_SetConfig+0x11c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <TIM_OC1_SetConfig+0xd2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	@ (8005cbc <TIM_OC1_SetConfig+0x120>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00f      	beq.n	8005c6e <TIM_OC1_SetConfig+0xd2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a1b      	ldr	r2, [pc, #108]	@ (8005cc0 <TIM_OC1_SetConfig+0x124>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00b      	beq.n	8005c6e <TIM_OC1_SetConfig+0xd2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc4 <TIM_OC1_SetConfig+0x128>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d007      	beq.n	8005c6e <TIM_OC1_SetConfig+0xd2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a19      	ldr	r2, [pc, #100]	@ (8005cc8 <TIM_OC1_SetConfig+0x12c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC1_SetConfig+0xd2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a18      	ldr	r2, [pc, #96]	@ (8005ccc <TIM_OC1_SetConfig+0x130>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d111      	bne.n	8005c92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	621a      	str	r2, [r3, #32]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40012c00 	.word	0x40012c00
 8005cbc:	40013400 	.word	0x40013400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40014400 	.word	0x40014400
 8005cc8:	40014800 	.word	0x40014800
 8005ccc:	40015000 	.word	0x40015000

08005cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f023 0210 	bic.w	r2, r3, #16
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0320 	bic.w	r3, r3, #32
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8005de0 <TIM_OC2_SetConfig+0x110>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d007      	beq.n	8005d44 <TIM_OC2_SetConfig+0x74>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a2b      	ldr	r2, [pc, #172]	@ (8005de4 <TIM_OC2_SetConfig+0x114>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_OC2_SetConfig+0x74>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a2a      	ldr	r2, [pc, #168]	@ (8005de8 <TIM_OC2_SetConfig+0x118>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10d      	bne.n	8005d60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a1f      	ldr	r2, [pc, #124]	@ (8005de0 <TIM_OC2_SetConfig+0x110>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <TIM_OC2_SetConfig+0xc0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005de4 <TIM_OC2_SetConfig+0x114>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d00f      	beq.n	8005d90 <TIM_OC2_SetConfig+0xc0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a1e      	ldr	r2, [pc, #120]	@ (8005dec <TIM_OC2_SetConfig+0x11c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00b      	beq.n	8005d90 <TIM_OC2_SetConfig+0xc0>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005df0 <TIM_OC2_SetConfig+0x120>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d007      	beq.n	8005d90 <TIM_OC2_SetConfig+0xc0>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <TIM_OC2_SetConfig+0x124>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0xc0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	@ (8005de8 <TIM_OC2_SetConfig+0x118>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d113      	bne.n	8005db8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	621a      	str	r2, [r3, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40015000 	.word	0x40015000
 8005dec:	40014000 	.word	0x40014000
 8005df0:	40014400 	.word	0x40014400
 8005df4:	40014800 	.word	0x40014800

08005df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	@ (8005f04 <TIM_OC3_SetConfig+0x10c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_OC3_SetConfig+0x72>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8005f08 <TIM_OC3_SetConfig+0x110>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_OC3_SetConfig+0x72>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a29      	ldr	r2, [pc, #164]	@ (8005f0c <TIM_OC3_SetConfig+0x114>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d10d      	bne.n	8005e86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e84:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1e      	ldr	r2, [pc, #120]	@ (8005f04 <TIM_OC3_SetConfig+0x10c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <TIM_OC3_SetConfig+0xbe>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1d      	ldr	r2, [pc, #116]	@ (8005f08 <TIM_OC3_SetConfig+0x110>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00f      	beq.n	8005eb6 <TIM_OC3_SetConfig+0xbe>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	@ (8005f10 <TIM_OC3_SetConfig+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00b      	beq.n	8005eb6 <TIM_OC3_SetConfig+0xbe>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <TIM_OC3_SetConfig+0x11c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d007      	beq.n	8005eb6 <TIM_OC3_SetConfig+0xbe>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <TIM_OC3_SetConfig+0x120>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC3_SetConfig+0xbe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	@ (8005f0c <TIM_OC3_SetConfig+0x114>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d113      	bne.n	8005ede <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	621a      	str	r2, [r3, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	371c      	adds	r7, #28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40013400 	.word	0x40013400
 8005f0c:	40015000 	.word	0x40015000
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	031b      	lsls	r3, r3, #12
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe4 <TIM_OC4_SetConfig+0xc8>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <TIM_OC4_SetConfig+0x8c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <TIM_OC4_SetConfig+0xcc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d00f      	beq.n	8005fa8 <TIM_OC4_SetConfig+0x8c>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a18      	ldr	r2, [pc, #96]	@ (8005fec <TIM_OC4_SetConfig+0xd0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00b      	beq.n	8005fa8 <TIM_OC4_SetConfig+0x8c>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a17      	ldr	r2, [pc, #92]	@ (8005ff0 <TIM_OC4_SetConfig+0xd4>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <TIM_OC4_SetConfig+0x8c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a16      	ldr	r2, [pc, #88]	@ (8005ff4 <TIM_OC4_SetConfig+0xd8>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d003      	beq.n	8005fa8 <TIM_OC4_SetConfig+0x8c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	@ (8005ff8 <TIM_OC4_SetConfig+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d109      	bne.n	8005fbc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	019b      	lsls	r3, r3, #6
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40013400 	.word	0x40013400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	40015000 	.word	0x40015000

08005ffc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800602a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4313      	orrs	r3, r2
 800604c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <TIM_OC5_SetConfig+0xbc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <TIM_OC5_SetConfig+0x82>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <TIM_OC5_SetConfig+0xc0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00f      	beq.n	800607e <TIM_OC5_SetConfig+0x82>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a17      	ldr	r2, [pc, #92]	@ (80060c0 <TIM_OC5_SetConfig+0xc4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <TIM_OC5_SetConfig+0x82>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a16      	ldr	r2, [pc, #88]	@ (80060c4 <TIM_OC5_SetConfig+0xc8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <TIM_OC5_SetConfig+0x82>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a15      	ldr	r2, [pc, #84]	@ (80060c8 <TIM_OC5_SetConfig+0xcc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <TIM_OC5_SetConfig+0x82>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a14      	ldr	r2, [pc, #80]	@ (80060cc <TIM_OC5_SetConfig+0xd0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d109      	bne.n	8006092 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	621a      	str	r2, [r3, #32]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40013400 	.word	0x40013400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40014400 	.word	0x40014400
 80060c8:	40014800 	.word	0x40014800
 80060cc:	40015000 	.word	0x40015000

080060d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	021b      	lsls	r3, r3, #8
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	051b      	lsls	r3, r3, #20
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a1a      	ldr	r2, [pc, #104]	@ (8006190 <TIM_OC6_SetConfig+0xc0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d013      	beq.n	8006154 <TIM_OC6_SetConfig+0x84>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a19      	ldr	r2, [pc, #100]	@ (8006194 <TIM_OC6_SetConfig+0xc4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00f      	beq.n	8006154 <TIM_OC6_SetConfig+0x84>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a18      	ldr	r2, [pc, #96]	@ (8006198 <TIM_OC6_SetConfig+0xc8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00b      	beq.n	8006154 <TIM_OC6_SetConfig+0x84>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a17      	ldr	r2, [pc, #92]	@ (800619c <TIM_OC6_SetConfig+0xcc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d007      	beq.n	8006154 <TIM_OC6_SetConfig+0x84>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a16      	ldr	r2, [pc, #88]	@ (80061a0 <TIM_OC6_SetConfig+0xd0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d003      	beq.n	8006154 <TIM_OC6_SetConfig+0x84>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a15      	ldr	r2, [pc, #84]	@ (80061a4 <TIM_OC6_SetConfig+0xd4>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d109      	bne.n	8006168 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800615a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	029b      	lsls	r3, r3, #10
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00
 8006194:	40013400 	.word	0x40013400
 8006198:	40014000 	.word	0x40014000
 800619c:	40014400 	.word	0x40014400
 80061a0:	40014800 	.word	0x40014800
 80061a4:	40015000 	.word	0x40015000

080061a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0201 	bic.w	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f023 030a 	bic.w	r3, r3, #10
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	621a      	str	r2, [r3, #32]
}
 80061fa:	bf00      	nop
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f023 0210 	bic.w	r2, r3, #16
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	031b      	lsls	r3, r3, #12
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006242:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	f043 0307 	orr.w	r3, r3, #7
 8006288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	609a      	str	r2, [r3, #8]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	021a      	lsls	r2, r3, #8
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	431a      	orrs	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	609a      	str	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2201      	movs	r2, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1a      	ldr	r2, [r3, #32]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	43db      	mvns	r3, r3
 80062fe:	401a      	ands	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a1a      	ldr	r2, [r3, #32]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800633c:	2302      	movs	r3, #2
 800633e:	e06d      	b.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a30      	ldr	r2, [pc, #192]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a2f      	ldr	r2, [pc, #188]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a2d      	ldr	r2, [pc, #180]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d108      	bne.n	8006390 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d01d      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063bc:	d018      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a15      	ldr	r2, [pc, #84]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d009      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a16      	ldr	r2, [pc, #88]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a11      	ldr	r2, [pc, #68]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10c      	bne.n	800640a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40012c00 	.word	0x40012c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40015000 	.word	0x40015000
 8006434:	40000400 	.word	0x40000400
 8006438:	40000800 	.word	0x40000800
 800643c:	40014000 	.word	0x40014000

08006440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006458:	2302      	movs	r3, #2
 800645a:	e06a      	b.n	8006532 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	041b      	lsls	r3, r3, #16
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a19      	ldr	r2, [pc, #100]	@ (8006540 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a17      	ldr	r2, [pc, #92]	@ (8006544 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a16      	ldr	r2, [pc, #88]	@ (8006548 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d115      	bne.n	8006520 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	051b      	lsls	r3, r3, #20
 8006500:	4313      	orrs	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	4313      	orrs	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40013400 	.word	0x40013400
 8006548:	40015000 	.word	0x40015000

0800654c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <sniprintf>:
 8006588:	b40c      	push	{r2, r3}
 800658a:	b530      	push	{r4, r5, lr}
 800658c:	4b18      	ldr	r3, [pc, #96]	@ (80065f0 <sniprintf+0x68>)
 800658e:	1e0c      	subs	r4, r1, #0
 8006590:	681d      	ldr	r5, [r3, #0]
 8006592:	b09d      	sub	sp, #116	@ 0x74
 8006594:	da08      	bge.n	80065a8 <sniprintf+0x20>
 8006596:	238b      	movs	r3, #139	@ 0x8b
 8006598:	602b      	str	r3, [r5, #0]
 800659a:	f04f 30ff 	mov.w	r0, #4294967295
 800659e:	b01d      	add	sp, #116	@ 0x74
 80065a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a4:	b002      	add	sp, #8
 80065a6:	4770      	bx	lr
 80065a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80065ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80065b6:	bf14      	ite	ne
 80065b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80065bc:	4623      	moveq	r3, r4
 80065be:	9304      	str	r3, [sp, #16]
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80065c6:	9002      	str	r0, [sp, #8]
 80065c8:	9006      	str	r0, [sp, #24]
 80065ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80065ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80065d0:	ab21      	add	r3, sp, #132	@ 0x84
 80065d2:	a902      	add	r1, sp, #8
 80065d4:	4628      	mov	r0, r5
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	f000 f9c4 	bl	8006964 <_svfiprintf_r>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	bfbc      	itt	lt
 80065e0:	238b      	movlt	r3, #139	@ 0x8b
 80065e2:	602b      	strlt	r3, [r5, #0]
 80065e4:	2c00      	cmp	r4, #0
 80065e6:	d0da      	beq.n	800659e <sniprintf+0x16>
 80065e8:	9b02      	ldr	r3, [sp, #8]
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e7d6      	b.n	800659e <sniprintf+0x16>
 80065f0:	2000001c 	.word	0x2000001c

080065f4 <siprintf>:
 80065f4:	b40e      	push	{r1, r2, r3}
 80065f6:	b510      	push	{r4, lr}
 80065f8:	b09d      	sub	sp, #116	@ 0x74
 80065fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80065fc:	9002      	str	r0, [sp, #8]
 80065fe:	9006      	str	r0, [sp, #24]
 8006600:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006604:	480a      	ldr	r0, [pc, #40]	@ (8006630 <siprintf+0x3c>)
 8006606:	9107      	str	r1, [sp, #28]
 8006608:	9104      	str	r1, [sp, #16]
 800660a:	490a      	ldr	r1, [pc, #40]	@ (8006634 <siprintf+0x40>)
 800660c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006610:	9105      	str	r1, [sp, #20]
 8006612:	2400      	movs	r4, #0
 8006614:	a902      	add	r1, sp, #8
 8006616:	6800      	ldr	r0, [r0, #0]
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800661c:	f000 f9a2 	bl	8006964 <_svfiprintf_r>
 8006620:	9b02      	ldr	r3, [sp, #8]
 8006622:	701c      	strb	r4, [r3, #0]
 8006624:	b01d      	add	sp, #116	@ 0x74
 8006626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662a:	b003      	add	sp, #12
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	2000001c 	.word	0x2000001c
 8006634:	ffff0208 	.word	0xffff0208

08006638 <memset>:
 8006638:	4402      	add	r2, r0
 800663a:	4603      	mov	r3, r0
 800663c:	4293      	cmp	r3, r2
 800663e:	d100      	bne.n	8006642 <memset+0xa>
 8006640:	4770      	bx	lr
 8006642:	f803 1b01 	strb.w	r1, [r3], #1
 8006646:	e7f9      	b.n	800663c <memset+0x4>

08006648 <__errno>:
 8006648:	4b01      	ldr	r3, [pc, #4]	@ (8006650 <__errno+0x8>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	2000001c 	.word	0x2000001c

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4d0d      	ldr	r5, [pc, #52]	@ (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	@ (8006690 <__libc_init_array+0x3c>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2600      	movs	r6, #0
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4d0b      	ldr	r5, [pc, #44]	@ (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	@ (8006698 <__libc_init_array+0x44>)
 8006668:	f000 fc64 	bl	8006f34 <_init>
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2600      	movs	r6, #0
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08007128 	.word	0x08007128
 8006690:	08007128 	.word	0x08007128
 8006694:	08007128 	.word	0x08007128
 8006698:	0800712c 	.word	0x0800712c

0800669c <__retarget_lock_acquire_recursive>:
 800669c:	4770      	bx	lr

0800669e <__retarget_lock_release_recursive>:
 800669e:	4770      	bx	lr

080066a0 <memcpy>:
 80066a0:	440a      	add	r2, r1
 80066a2:	4291      	cmp	r1, r2
 80066a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066a8:	d100      	bne.n	80066ac <memcpy+0xc>
 80066aa:	4770      	bx	lr
 80066ac:	b510      	push	{r4, lr}
 80066ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b6:	4291      	cmp	r1, r2
 80066b8:	d1f9      	bne.n	80066ae <memcpy+0xe>
 80066ba:	bd10      	pop	{r4, pc}

080066bc <_free_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	4605      	mov	r5, r0
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d041      	beq.n	8006748 <_free_r+0x8c>
 80066c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066c8:	1f0c      	subs	r4, r1, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfb8      	it	lt
 80066ce:	18e4      	addlt	r4, r4, r3
 80066d0:	f000 f8e0 	bl	8006894 <__malloc_lock>
 80066d4:	4a1d      	ldr	r2, [pc, #116]	@ (800674c <_free_r+0x90>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	b933      	cbnz	r3, 80066e8 <_free_r+0x2c>
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	6014      	str	r4, [r2, #0]
 80066de:	4628      	mov	r0, r5
 80066e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066e4:	f000 b8dc 	b.w	80068a0 <__malloc_unlock>
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d908      	bls.n	80066fe <_free_r+0x42>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	1821      	adds	r1, r4, r0
 80066f0:	428b      	cmp	r3, r1
 80066f2:	bf01      	itttt	eq
 80066f4:	6819      	ldreq	r1, [r3, #0]
 80066f6:	685b      	ldreq	r3, [r3, #4]
 80066f8:	1809      	addeq	r1, r1, r0
 80066fa:	6021      	streq	r1, [r4, #0]
 80066fc:	e7ed      	b.n	80066da <_free_r+0x1e>
 80066fe:	461a      	mov	r2, r3
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	b10b      	cbz	r3, 8006708 <_free_r+0x4c>
 8006704:	42a3      	cmp	r3, r4
 8006706:	d9fa      	bls.n	80066fe <_free_r+0x42>
 8006708:	6811      	ldr	r1, [r2, #0]
 800670a:	1850      	adds	r0, r2, r1
 800670c:	42a0      	cmp	r0, r4
 800670e:	d10b      	bne.n	8006728 <_free_r+0x6c>
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	4401      	add	r1, r0
 8006714:	1850      	adds	r0, r2, r1
 8006716:	4283      	cmp	r3, r0
 8006718:	6011      	str	r1, [r2, #0]
 800671a:	d1e0      	bne.n	80066de <_free_r+0x22>
 800671c:	6818      	ldr	r0, [r3, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	6053      	str	r3, [r2, #4]
 8006722:	4408      	add	r0, r1
 8006724:	6010      	str	r0, [r2, #0]
 8006726:	e7da      	b.n	80066de <_free_r+0x22>
 8006728:	d902      	bls.n	8006730 <_free_r+0x74>
 800672a:	230c      	movs	r3, #12
 800672c:	602b      	str	r3, [r5, #0]
 800672e:	e7d6      	b.n	80066de <_free_r+0x22>
 8006730:	6820      	ldr	r0, [r4, #0]
 8006732:	1821      	adds	r1, r4, r0
 8006734:	428b      	cmp	r3, r1
 8006736:	bf04      	itt	eq
 8006738:	6819      	ldreq	r1, [r3, #0]
 800673a:	685b      	ldreq	r3, [r3, #4]
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	bf04      	itt	eq
 8006740:	1809      	addeq	r1, r1, r0
 8006742:	6021      	streq	r1, [r4, #0]
 8006744:	6054      	str	r4, [r2, #4]
 8006746:	e7ca      	b.n	80066de <_free_r+0x22>
 8006748:	bd38      	pop	{r3, r4, r5, pc}
 800674a:	bf00      	nop
 800674c:	20000380 	.word	0x20000380

08006750 <sbrk_aligned>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	4e0f      	ldr	r6, [pc, #60]	@ (8006790 <sbrk_aligned+0x40>)
 8006754:	460c      	mov	r4, r1
 8006756:	6831      	ldr	r1, [r6, #0]
 8006758:	4605      	mov	r5, r0
 800675a:	b911      	cbnz	r1, 8006762 <sbrk_aligned+0x12>
 800675c:	f000 fba4 	bl	8006ea8 <_sbrk_r>
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	4621      	mov	r1, r4
 8006764:	4628      	mov	r0, r5
 8006766:	f000 fb9f 	bl	8006ea8 <_sbrk_r>
 800676a:	1c43      	adds	r3, r0, #1
 800676c:	d103      	bne.n	8006776 <sbrk_aligned+0x26>
 800676e:	f04f 34ff 	mov.w	r4, #4294967295
 8006772:	4620      	mov	r0, r4
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	1cc4      	adds	r4, r0, #3
 8006778:	f024 0403 	bic.w	r4, r4, #3
 800677c:	42a0      	cmp	r0, r4
 800677e:	d0f8      	beq.n	8006772 <sbrk_aligned+0x22>
 8006780:	1a21      	subs	r1, r4, r0
 8006782:	4628      	mov	r0, r5
 8006784:	f000 fb90 	bl	8006ea8 <_sbrk_r>
 8006788:	3001      	adds	r0, #1
 800678a:	d1f2      	bne.n	8006772 <sbrk_aligned+0x22>
 800678c:	e7ef      	b.n	800676e <sbrk_aligned+0x1e>
 800678e:	bf00      	nop
 8006790:	2000037c 	.word	0x2000037c

08006794 <_malloc_r>:
 8006794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006798:	1ccd      	adds	r5, r1, #3
 800679a:	f025 0503 	bic.w	r5, r5, #3
 800679e:	3508      	adds	r5, #8
 80067a0:	2d0c      	cmp	r5, #12
 80067a2:	bf38      	it	cc
 80067a4:	250c      	movcc	r5, #12
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	4606      	mov	r6, r0
 80067aa:	db01      	blt.n	80067b0 <_malloc_r+0x1c>
 80067ac:	42a9      	cmp	r1, r5
 80067ae:	d904      	bls.n	80067ba <_malloc_r+0x26>
 80067b0:	230c      	movs	r3, #12
 80067b2:	6033      	str	r3, [r6, #0]
 80067b4:	2000      	movs	r0, #0
 80067b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006890 <_malloc_r+0xfc>
 80067be:	f000 f869 	bl	8006894 <__malloc_lock>
 80067c2:	f8d8 3000 	ldr.w	r3, [r8]
 80067c6:	461c      	mov	r4, r3
 80067c8:	bb44      	cbnz	r4, 800681c <_malloc_r+0x88>
 80067ca:	4629      	mov	r1, r5
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff ffbf 	bl	8006750 <sbrk_aligned>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	4604      	mov	r4, r0
 80067d6:	d158      	bne.n	800688a <_malloc_r+0xf6>
 80067d8:	f8d8 4000 	ldr.w	r4, [r8]
 80067dc:	4627      	mov	r7, r4
 80067de:	2f00      	cmp	r7, #0
 80067e0:	d143      	bne.n	800686a <_malloc_r+0xd6>
 80067e2:	2c00      	cmp	r4, #0
 80067e4:	d04b      	beq.n	800687e <_malloc_r+0xea>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	4639      	mov	r1, r7
 80067ea:	4630      	mov	r0, r6
 80067ec:	eb04 0903 	add.w	r9, r4, r3
 80067f0:	f000 fb5a 	bl	8006ea8 <_sbrk_r>
 80067f4:	4581      	cmp	r9, r0
 80067f6:	d142      	bne.n	800687e <_malloc_r+0xea>
 80067f8:	6821      	ldr	r1, [r4, #0]
 80067fa:	1a6d      	subs	r5, r5, r1
 80067fc:	4629      	mov	r1, r5
 80067fe:	4630      	mov	r0, r6
 8006800:	f7ff ffa6 	bl	8006750 <sbrk_aligned>
 8006804:	3001      	adds	r0, #1
 8006806:	d03a      	beq.n	800687e <_malloc_r+0xea>
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	442b      	add	r3, r5
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	f8d8 3000 	ldr.w	r3, [r8]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	bb62      	cbnz	r2, 8006870 <_malloc_r+0xdc>
 8006816:	f8c8 7000 	str.w	r7, [r8]
 800681a:	e00f      	b.n	800683c <_malloc_r+0xa8>
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	1b52      	subs	r2, r2, r5
 8006820:	d420      	bmi.n	8006864 <_malloc_r+0xd0>
 8006822:	2a0b      	cmp	r2, #11
 8006824:	d917      	bls.n	8006856 <_malloc_r+0xc2>
 8006826:	1961      	adds	r1, r4, r5
 8006828:	42a3      	cmp	r3, r4
 800682a:	6025      	str	r5, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	6059      	strne	r1, [r3, #4]
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	bf08      	it	eq
 8006834:	f8c8 1000 	streq.w	r1, [r8]
 8006838:	5162      	str	r2, [r4, r5]
 800683a:	604b      	str	r3, [r1, #4]
 800683c:	4630      	mov	r0, r6
 800683e:	f000 f82f 	bl	80068a0 <__malloc_unlock>
 8006842:	f104 000b 	add.w	r0, r4, #11
 8006846:	1d23      	adds	r3, r4, #4
 8006848:	f020 0007 	bic.w	r0, r0, #7
 800684c:	1ac2      	subs	r2, r0, r3
 800684e:	bf1c      	itt	ne
 8006850:	1a1b      	subne	r3, r3, r0
 8006852:	50a3      	strne	r3, [r4, r2]
 8006854:	e7af      	b.n	80067b6 <_malloc_r+0x22>
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	42a3      	cmp	r3, r4
 800685a:	bf0c      	ite	eq
 800685c:	f8c8 2000 	streq.w	r2, [r8]
 8006860:	605a      	strne	r2, [r3, #4]
 8006862:	e7eb      	b.n	800683c <_malloc_r+0xa8>
 8006864:	4623      	mov	r3, r4
 8006866:	6864      	ldr	r4, [r4, #4]
 8006868:	e7ae      	b.n	80067c8 <_malloc_r+0x34>
 800686a:	463c      	mov	r4, r7
 800686c:	687f      	ldr	r7, [r7, #4]
 800686e:	e7b6      	b.n	80067de <_malloc_r+0x4a>
 8006870:	461a      	mov	r2, r3
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	42a3      	cmp	r3, r4
 8006876:	d1fb      	bne.n	8006870 <_malloc_r+0xdc>
 8006878:	2300      	movs	r3, #0
 800687a:	6053      	str	r3, [r2, #4]
 800687c:	e7de      	b.n	800683c <_malloc_r+0xa8>
 800687e:	230c      	movs	r3, #12
 8006880:	6033      	str	r3, [r6, #0]
 8006882:	4630      	mov	r0, r6
 8006884:	f000 f80c 	bl	80068a0 <__malloc_unlock>
 8006888:	e794      	b.n	80067b4 <_malloc_r+0x20>
 800688a:	6005      	str	r5, [r0, #0]
 800688c:	e7d6      	b.n	800683c <_malloc_r+0xa8>
 800688e:	bf00      	nop
 8006890:	20000380 	.word	0x20000380

08006894 <__malloc_lock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_lock+0x8>)
 8006896:	f7ff bf01 	b.w	800669c <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	20000378 	.word	0x20000378

080068a0 <__malloc_unlock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__malloc_unlock+0x8>)
 80068a2:	f7ff befc 	b.w	800669e <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	20000378 	.word	0x20000378

080068ac <__ssputs_r>:
 80068ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	688e      	ldr	r6, [r1, #8]
 80068b2:	461f      	mov	r7, r3
 80068b4:	42be      	cmp	r6, r7
 80068b6:	680b      	ldr	r3, [r1, #0]
 80068b8:	4682      	mov	sl, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	4690      	mov	r8, r2
 80068be:	d82d      	bhi.n	800691c <__ssputs_r+0x70>
 80068c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068c8:	d026      	beq.n	8006918 <__ssputs_r+0x6c>
 80068ca:	6965      	ldr	r5, [r4, #20]
 80068cc:	6909      	ldr	r1, [r1, #16]
 80068ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068d2:	eba3 0901 	sub.w	r9, r3, r1
 80068d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068da:	1c7b      	adds	r3, r7, #1
 80068dc:	444b      	add	r3, r9
 80068de:	106d      	asrs	r5, r5, #1
 80068e0:	429d      	cmp	r5, r3
 80068e2:	bf38      	it	cc
 80068e4:	461d      	movcc	r5, r3
 80068e6:	0553      	lsls	r3, r2, #21
 80068e8:	d527      	bpl.n	800693a <__ssputs_r+0x8e>
 80068ea:	4629      	mov	r1, r5
 80068ec:	f7ff ff52 	bl	8006794 <_malloc_r>
 80068f0:	4606      	mov	r6, r0
 80068f2:	b360      	cbz	r0, 800694e <__ssputs_r+0xa2>
 80068f4:	6921      	ldr	r1, [r4, #16]
 80068f6:	464a      	mov	r2, r9
 80068f8:	f7ff fed2 	bl	80066a0 <memcpy>
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006906:	81a3      	strh	r3, [r4, #12]
 8006908:	6126      	str	r6, [r4, #16]
 800690a:	6165      	str	r5, [r4, #20]
 800690c:	444e      	add	r6, r9
 800690e:	eba5 0509 	sub.w	r5, r5, r9
 8006912:	6026      	str	r6, [r4, #0]
 8006914:	60a5      	str	r5, [r4, #8]
 8006916:	463e      	mov	r6, r7
 8006918:	42be      	cmp	r6, r7
 800691a:	d900      	bls.n	800691e <__ssputs_r+0x72>
 800691c:	463e      	mov	r6, r7
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	4632      	mov	r2, r6
 8006922:	4641      	mov	r1, r8
 8006924:	f000 faa6 	bl	8006e74 <memmove>
 8006928:	68a3      	ldr	r3, [r4, #8]
 800692a:	1b9b      	subs	r3, r3, r6
 800692c:	60a3      	str	r3, [r4, #8]
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	4433      	add	r3, r6
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	2000      	movs	r0, #0
 8006936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693a:	462a      	mov	r2, r5
 800693c:	f000 fac4 	bl	8006ec8 <_realloc_r>
 8006940:	4606      	mov	r6, r0
 8006942:	2800      	cmp	r0, #0
 8006944:	d1e0      	bne.n	8006908 <__ssputs_r+0x5c>
 8006946:	6921      	ldr	r1, [r4, #16]
 8006948:	4650      	mov	r0, sl
 800694a:	f7ff feb7 	bl	80066bc <_free_r>
 800694e:	230c      	movs	r3, #12
 8006950:	f8ca 3000 	str.w	r3, [sl]
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	e7e9      	b.n	8006936 <__ssputs_r+0x8a>
	...

08006964 <_svfiprintf_r>:
 8006964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006968:	4698      	mov	r8, r3
 800696a:	898b      	ldrh	r3, [r1, #12]
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	b09d      	sub	sp, #116	@ 0x74
 8006970:	4607      	mov	r7, r0
 8006972:	460d      	mov	r5, r1
 8006974:	4614      	mov	r4, r2
 8006976:	d510      	bpl.n	800699a <_svfiprintf_r+0x36>
 8006978:	690b      	ldr	r3, [r1, #16]
 800697a:	b973      	cbnz	r3, 800699a <_svfiprintf_r+0x36>
 800697c:	2140      	movs	r1, #64	@ 0x40
 800697e:	f7ff ff09 	bl	8006794 <_malloc_r>
 8006982:	6028      	str	r0, [r5, #0]
 8006984:	6128      	str	r0, [r5, #16]
 8006986:	b930      	cbnz	r0, 8006996 <_svfiprintf_r+0x32>
 8006988:	230c      	movs	r3, #12
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	b01d      	add	sp, #116	@ 0x74
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	2340      	movs	r3, #64	@ 0x40
 8006998:	616b      	str	r3, [r5, #20]
 800699a:	2300      	movs	r3, #0
 800699c:	9309      	str	r3, [sp, #36]	@ 0x24
 800699e:	2320      	movs	r3, #32
 80069a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80069a8:	2330      	movs	r3, #48	@ 0x30
 80069aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b48 <_svfiprintf_r+0x1e4>
 80069ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069b2:	f04f 0901 	mov.w	r9, #1
 80069b6:	4623      	mov	r3, r4
 80069b8:	469a      	mov	sl, r3
 80069ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069be:	b10a      	cbz	r2, 80069c4 <_svfiprintf_r+0x60>
 80069c0:	2a25      	cmp	r2, #37	@ 0x25
 80069c2:	d1f9      	bne.n	80069b8 <_svfiprintf_r+0x54>
 80069c4:	ebba 0b04 	subs.w	fp, sl, r4
 80069c8:	d00b      	beq.n	80069e2 <_svfiprintf_r+0x7e>
 80069ca:	465b      	mov	r3, fp
 80069cc:	4622      	mov	r2, r4
 80069ce:	4629      	mov	r1, r5
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7ff ff6b 	bl	80068ac <__ssputs_r>
 80069d6:	3001      	adds	r0, #1
 80069d8:	f000 80a7 	beq.w	8006b2a <_svfiprintf_r+0x1c6>
 80069dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069de:	445a      	add	r2, fp
 80069e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80069e2:	f89a 3000 	ldrb.w	r3, [sl]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 809f 	beq.w	8006b2a <_svfiprintf_r+0x1c6>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069f6:	f10a 0a01 	add.w	sl, sl, #1
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a02:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a04:	4654      	mov	r4, sl
 8006a06:	2205      	movs	r2, #5
 8006a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0c:	484e      	ldr	r0, [pc, #312]	@ (8006b48 <_svfiprintf_r+0x1e4>)
 8006a0e:	f7f9 fbff 	bl	8000210 <memchr>
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	b9d8      	cbnz	r0, 8006a4e <_svfiprintf_r+0xea>
 8006a16:	06d0      	lsls	r0, r2, #27
 8006a18:	bf44      	itt	mi
 8006a1a:	2320      	movmi	r3, #32
 8006a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a20:	0711      	lsls	r1, r2, #28
 8006a22:	bf44      	itt	mi
 8006a24:	232b      	movmi	r3, #43	@ 0x2b
 8006a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a30:	d015      	beq.n	8006a5e <_svfiprintf_r+0xfa>
 8006a32:	9a07      	ldr	r2, [sp, #28]
 8006a34:	4654      	mov	r4, sl
 8006a36:	2000      	movs	r0, #0
 8006a38:	f04f 0c0a 	mov.w	ip, #10
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a42:	3b30      	subs	r3, #48	@ 0x30
 8006a44:	2b09      	cmp	r3, #9
 8006a46:	d94b      	bls.n	8006ae0 <_svfiprintf_r+0x17c>
 8006a48:	b1b0      	cbz	r0, 8006a78 <_svfiprintf_r+0x114>
 8006a4a:	9207      	str	r2, [sp, #28]
 8006a4c:	e014      	b.n	8006a78 <_svfiprintf_r+0x114>
 8006a4e:	eba0 0308 	sub.w	r3, r0, r8
 8006a52:	fa09 f303 	lsl.w	r3, r9, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	46a2      	mov	sl, r4
 8006a5c:	e7d2      	b.n	8006a04 <_svfiprintf_r+0xa0>
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	1d19      	adds	r1, r3, #4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	9103      	str	r1, [sp, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bfbb      	ittet	lt
 8006a6a:	425b      	neglt	r3, r3
 8006a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a70:	9307      	strge	r3, [sp, #28]
 8006a72:	9307      	strlt	r3, [sp, #28]
 8006a74:	bfb8      	it	lt
 8006a76:	9204      	strlt	r2, [sp, #16]
 8006a78:	7823      	ldrb	r3, [r4, #0]
 8006a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a7c:	d10a      	bne.n	8006a94 <_svfiprintf_r+0x130>
 8006a7e:	7863      	ldrb	r3, [r4, #1]
 8006a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a82:	d132      	bne.n	8006aea <_svfiprintf_r+0x186>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	1d1a      	adds	r2, r3, #4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	9203      	str	r2, [sp, #12]
 8006a8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a90:	3402      	adds	r4, #2
 8006a92:	9305      	str	r3, [sp, #20]
 8006a94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006b58 <_svfiprintf_r+0x1f4>
 8006a98:	7821      	ldrb	r1, [r4, #0]
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	4650      	mov	r0, sl
 8006a9e:	f7f9 fbb7 	bl	8000210 <memchr>
 8006aa2:	b138      	cbz	r0, 8006ab4 <_svfiprintf_r+0x150>
 8006aa4:	9b04      	ldr	r3, [sp, #16]
 8006aa6:	eba0 000a 	sub.w	r0, r0, sl
 8006aaa:	2240      	movs	r2, #64	@ 0x40
 8006aac:	4082      	lsls	r2, r0
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	3401      	adds	r4, #1
 8006ab2:	9304      	str	r3, [sp, #16]
 8006ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ab8:	4824      	ldr	r0, [pc, #144]	@ (8006b4c <_svfiprintf_r+0x1e8>)
 8006aba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006abe:	2206      	movs	r2, #6
 8006ac0:	f7f9 fba6 	bl	8000210 <memchr>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d036      	beq.n	8006b36 <_svfiprintf_r+0x1d2>
 8006ac8:	4b21      	ldr	r3, [pc, #132]	@ (8006b50 <_svfiprintf_r+0x1ec>)
 8006aca:	bb1b      	cbnz	r3, 8006b14 <_svfiprintf_r+0x1b0>
 8006acc:	9b03      	ldr	r3, [sp, #12]
 8006ace:	3307      	adds	r3, #7
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	9303      	str	r3, [sp, #12]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ada:	4433      	add	r3, r6
 8006adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ade:	e76a      	b.n	80069b6 <_svfiprintf_r+0x52>
 8006ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	e7a8      	b.n	8006a3c <_svfiprintf_r+0xd8>
 8006aea:	2300      	movs	r3, #0
 8006aec:	3401      	adds	r4, #1
 8006aee:	9305      	str	r3, [sp, #20]
 8006af0:	4619      	mov	r1, r3
 8006af2:	f04f 0c0a 	mov.w	ip, #10
 8006af6:	4620      	mov	r0, r4
 8006af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006afc:	3a30      	subs	r2, #48	@ 0x30
 8006afe:	2a09      	cmp	r2, #9
 8006b00:	d903      	bls.n	8006b0a <_svfiprintf_r+0x1a6>
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0c6      	beq.n	8006a94 <_svfiprintf_r+0x130>
 8006b06:	9105      	str	r1, [sp, #20]
 8006b08:	e7c4      	b.n	8006a94 <_svfiprintf_r+0x130>
 8006b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b0e:	4604      	mov	r4, r0
 8006b10:	2301      	movs	r3, #1
 8006b12:	e7f0      	b.n	8006af6 <_svfiprintf_r+0x192>
 8006b14:	ab03      	add	r3, sp, #12
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	462a      	mov	r2, r5
 8006b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b54 <_svfiprintf_r+0x1f0>)
 8006b1c:	a904      	add	r1, sp, #16
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f3af 8000 	nop.w
 8006b24:	1c42      	adds	r2, r0, #1
 8006b26:	4606      	mov	r6, r0
 8006b28:	d1d6      	bne.n	8006ad8 <_svfiprintf_r+0x174>
 8006b2a:	89ab      	ldrh	r3, [r5, #12]
 8006b2c:	065b      	lsls	r3, r3, #25
 8006b2e:	f53f af2d 	bmi.w	800698c <_svfiprintf_r+0x28>
 8006b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b34:	e72c      	b.n	8006990 <_svfiprintf_r+0x2c>
 8006b36:	ab03      	add	r3, sp, #12
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	462a      	mov	r2, r5
 8006b3c:	4b05      	ldr	r3, [pc, #20]	@ (8006b54 <_svfiprintf_r+0x1f0>)
 8006b3e:	a904      	add	r1, sp, #16
 8006b40:	4638      	mov	r0, r7
 8006b42:	f000 f879 	bl	8006c38 <_printf_i>
 8006b46:	e7ed      	b.n	8006b24 <_svfiprintf_r+0x1c0>
 8006b48:	080070ec 	.word	0x080070ec
 8006b4c:	080070f6 	.word	0x080070f6
 8006b50:	00000000 	.word	0x00000000
 8006b54:	080068ad 	.word	0x080068ad
 8006b58:	080070f2 	.word	0x080070f2

08006b5c <_printf_common>:
 8006b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b60:	4616      	mov	r6, r2
 8006b62:	4698      	mov	r8, r3
 8006b64:	688a      	ldr	r2, [r1, #8]
 8006b66:	690b      	ldr	r3, [r1, #16]
 8006b68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	bfb8      	it	lt
 8006b70:	4613      	movlt	r3, r2
 8006b72:	6033      	str	r3, [r6, #0]
 8006b74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b78:	4607      	mov	r7, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	b10a      	cbz	r2, 8006b82 <_printf_common+0x26>
 8006b7e:	3301      	adds	r3, #1
 8006b80:	6033      	str	r3, [r6, #0]
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	0699      	lsls	r1, r3, #26
 8006b86:	bf42      	ittt	mi
 8006b88:	6833      	ldrmi	r3, [r6, #0]
 8006b8a:	3302      	addmi	r3, #2
 8006b8c:	6033      	strmi	r3, [r6, #0]
 8006b8e:	6825      	ldr	r5, [r4, #0]
 8006b90:	f015 0506 	ands.w	r5, r5, #6
 8006b94:	d106      	bne.n	8006ba4 <_printf_common+0x48>
 8006b96:	f104 0a19 	add.w	sl, r4, #25
 8006b9a:	68e3      	ldr	r3, [r4, #12]
 8006b9c:	6832      	ldr	r2, [r6, #0]
 8006b9e:	1a9b      	subs	r3, r3, r2
 8006ba0:	42ab      	cmp	r3, r5
 8006ba2:	dc26      	bgt.n	8006bf2 <_printf_common+0x96>
 8006ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	3b00      	subs	r3, #0
 8006bac:	bf18      	it	ne
 8006bae:	2301      	movne	r3, #1
 8006bb0:	0692      	lsls	r2, r2, #26
 8006bb2:	d42b      	bmi.n	8006c0c <_printf_common+0xb0>
 8006bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bb8:	4641      	mov	r1, r8
 8006bba:	4638      	mov	r0, r7
 8006bbc:	47c8      	blx	r9
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d01e      	beq.n	8006c00 <_printf_common+0xa4>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	6922      	ldr	r2, [r4, #16]
 8006bc6:	f003 0306 	and.w	r3, r3, #6
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	bf02      	ittt	eq
 8006bce:	68e5      	ldreq	r5, [r4, #12]
 8006bd0:	6833      	ldreq	r3, [r6, #0]
 8006bd2:	1aed      	subeq	r5, r5, r3
 8006bd4:	68a3      	ldr	r3, [r4, #8]
 8006bd6:	bf0c      	ite	eq
 8006bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bdc:	2500      	movne	r5, #0
 8006bde:	4293      	cmp	r3, r2
 8006be0:	bfc4      	itt	gt
 8006be2:	1a9b      	subgt	r3, r3, r2
 8006be4:	18ed      	addgt	r5, r5, r3
 8006be6:	2600      	movs	r6, #0
 8006be8:	341a      	adds	r4, #26
 8006bea:	42b5      	cmp	r5, r6
 8006bec:	d11a      	bne.n	8006c24 <_printf_common+0xc8>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e008      	b.n	8006c04 <_printf_common+0xa8>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4652      	mov	r2, sl
 8006bf6:	4641      	mov	r1, r8
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	47c8      	blx	r9
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d103      	bne.n	8006c08 <_printf_common+0xac>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c08:	3501      	adds	r5, #1
 8006c0a:	e7c6      	b.n	8006b9a <_printf_common+0x3e>
 8006c0c:	18e1      	adds	r1, r4, r3
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	2030      	movs	r0, #48	@ 0x30
 8006c12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c16:	4422      	add	r2, r4
 8006c18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c20:	3302      	adds	r3, #2
 8006c22:	e7c7      	b.n	8006bb4 <_printf_common+0x58>
 8006c24:	2301      	movs	r3, #1
 8006c26:	4622      	mov	r2, r4
 8006c28:	4641      	mov	r1, r8
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	47c8      	blx	r9
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d0e6      	beq.n	8006c00 <_printf_common+0xa4>
 8006c32:	3601      	adds	r6, #1
 8006c34:	e7d9      	b.n	8006bea <_printf_common+0x8e>
	...

08006c38 <_printf_i>:
 8006c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c3c:	7e0f      	ldrb	r7, [r1, #24]
 8006c3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c40:	2f78      	cmp	r7, #120	@ 0x78
 8006c42:	4691      	mov	r9, r2
 8006c44:	4680      	mov	r8, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	469a      	mov	sl, r3
 8006c4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c4e:	d807      	bhi.n	8006c60 <_printf_i+0x28>
 8006c50:	2f62      	cmp	r7, #98	@ 0x62
 8006c52:	d80a      	bhi.n	8006c6a <_printf_i+0x32>
 8006c54:	2f00      	cmp	r7, #0
 8006c56:	f000 80d1 	beq.w	8006dfc <_printf_i+0x1c4>
 8006c5a:	2f58      	cmp	r7, #88	@ 0x58
 8006c5c:	f000 80b8 	beq.w	8006dd0 <_printf_i+0x198>
 8006c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c68:	e03a      	b.n	8006ce0 <_printf_i+0xa8>
 8006c6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c6e:	2b15      	cmp	r3, #21
 8006c70:	d8f6      	bhi.n	8006c60 <_printf_i+0x28>
 8006c72:	a101      	add	r1, pc, #4	@ (adr r1, 8006c78 <_printf_i+0x40>)
 8006c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c78:	08006cd1 	.word	0x08006cd1
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006c61 	.word	0x08006c61
 8006c84:	08006c61 	.word	0x08006c61
 8006c88:	08006c61 	.word	0x08006c61
 8006c8c:	08006c61 	.word	0x08006c61
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006c61 	.word	0x08006c61
 8006c98:	08006c61 	.word	0x08006c61
 8006c9c:	08006c61 	.word	0x08006c61
 8006ca0:	08006c61 	.word	0x08006c61
 8006ca4:	08006de3 	.word	0x08006de3
 8006ca8:	08006d0f 	.word	0x08006d0f
 8006cac:	08006d9d 	.word	0x08006d9d
 8006cb0:	08006c61 	.word	0x08006c61
 8006cb4:	08006c61 	.word	0x08006c61
 8006cb8:	08006e05 	.word	0x08006e05
 8006cbc:	08006c61 	.word	0x08006c61
 8006cc0:	08006d0f 	.word	0x08006d0f
 8006cc4:	08006c61 	.word	0x08006c61
 8006cc8:	08006c61 	.word	0x08006c61
 8006ccc:	08006da5 	.word	0x08006da5
 8006cd0:	6833      	ldr	r3, [r6, #0]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6032      	str	r2, [r6, #0]
 8006cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e09c      	b.n	8006e1e <_printf_i+0x1e6>
 8006ce4:	6833      	ldr	r3, [r6, #0]
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	1d19      	adds	r1, r3, #4
 8006cea:	6031      	str	r1, [r6, #0]
 8006cec:	0606      	lsls	r6, r0, #24
 8006cee:	d501      	bpl.n	8006cf4 <_printf_i+0xbc>
 8006cf0:	681d      	ldr	r5, [r3, #0]
 8006cf2:	e003      	b.n	8006cfc <_printf_i+0xc4>
 8006cf4:	0645      	lsls	r5, r0, #25
 8006cf6:	d5fb      	bpl.n	8006cf0 <_printf_i+0xb8>
 8006cf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cfc:	2d00      	cmp	r5, #0
 8006cfe:	da03      	bge.n	8006d08 <_printf_i+0xd0>
 8006d00:	232d      	movs	r3, #45	@ 0x2d
 8006d02:	426d      	negs	r5, r5
 8006d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d08:	4858      	ldr	r0, [pc, #352]	@ (8006e6c <_printf_i+0x234>)
 8006d0a:	230a      	movs	r3, #10
 8006d0c:	e011      	b.n	8006d32 <_printf_i+0xfa>
 8006d0e:	6821      	ldr	r1, [r4, #0]
 8006d10:	6833      	ldr	r3, [r6, #0]
 8006d12:	0608      	lsls	r0, r1, #24
 8006d14:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d18:	d402      	bmi.n	8006d20 <_printf_i+0xe8>
 8006d1a:	0649      	lsls	r1, r1, #25
 8006d1c:	bf48      	it	mi
 8006d1e:	b2ad      	uxthmi	r5, r5
 8006d20:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d22:	4852      	ldr	r0, [pc, #328]	@ (8006e6c <_printf_i+0x234>)
 8006d24:	6033      	str	r3, [r6, #0]
 8006d26:	bf14      	ite	ne
 8006d28:	230a      	movne	r3, #10
 8006d2a:	2308      	moveq	r3, #8
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d32:	6866      	ldr	r6, [r4, #4]
 8006d34:	60a6      	str	r6, [r4, #8]
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	db05      	blt.n	8006d46 <_printf_i+0x10e>
 8006d3a:	6821      	ldr	r1, [r4, #0]
 8006d3c:	432e      	orrs	r6, r5
 8006d3e:	f021 0104 	bic.w	r1, r1, #4
 8006d42:	6021      	str	r1, [r4, #0]
 8006d44:	d04b      	beq.n	8006dde <_printf_i+0x1a6>
 8006d46:	4616      	mov	r6, r2
 8006d48:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d4c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d50:	5dc7      	ldrb	r7, [r0, r7]
 8006d52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d56:	462f      	mov	r7, r5
 8006d58:	42bb      	cmp	r3, r7
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	d9f4      	bls.n	8006d48 <_printf_i+0x110>
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d10b      	bne.n	8006d7a <_printf_i+0x142>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	07df      	lsls	r7, r3, #31
 8006d66:	d508      	bpl.n	8006d7a <_printf_i+0x142>
 8006d68:	6923      	ldr	r3, [r4, #16]
 8006d6a:	6861      	ldr	r1, [r4, #4]
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	bfde      	ittt	le
 8006d70:	2330      	movle	r3, #48	@ 0x30
 8006d72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d7a:	1b92      	subs	r2, r2, r6
 8006d7c:	6122      	str	r2, [r4, #16]
 8006d7e:	f8cd a000 	str.w	sl, [sp]
 8006d82:	464b      	mov	r3, r9
 8006d84:	aa03      	add	r2, sp, #12
 8006d86:	4621      	mov	r1, r4
 8006d88:	4640      	mov	r0, r8
 8006d8a:	f7ff fee7 	bl	8006b5c <_printf_common>
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d14a      	bne.n	8006e28 <_printf_i+0x1f0>
 8006d92:	f04f 30ff 	mov.w	r0, #4294967295
 8006d96:	b004      	add	sp, #16
 8006d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	f043 0320 	orr.w	r3, r3, #32
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	4832      	ldr	r0, [pc, #200]	@ (8006e70 <_printf_i+0x238>)
 8006da6:	2778      	movs	r7, #120	@ 0x78
 8006da8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	6831      	ldr	r1, [r6, #0]
 8006db0:	061f      	lsls	r7, r3, #24
 8006db2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006db6:	d402      	bmi.n	8006dbe <_printf_i+0x186>
 8006db8:	065f      	lsls	r7, r3, #25
 8006dba:	bf48      	it	mi
 8006dbc:	b2ad      	uxthmi	r5, r5
 8006dbe:	6031      	str	r1, [r6, #0]
 8006dc0:	07d9      	lsls	r1, r3, #31
 8006dc2:	bf44      	itt	mi
 8006dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006dc8:	6023      	strmi	r3, [r4, #0]
 8006dca:	b11d      	cbz	r5, 8006dd4 <_printf_i+0x19c>
 8006dcc:	2310      	movs	r3, #16
 8006dce:	e7ad      	b.n	8006d2c <_printf_i+0xf4>
 8006dd0:	4826      	ldr	r0, [pc, #152]	@ (8006e6c <_printf_i+0x234>)
 8006dd2:	e7e9      	b.n	8006da8 <_printf_i+0x170>
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	f023 0320 	bic.w	r3, r3, #32
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	e7f6      	b.n	8006dcc <_printf_i+0x194>
 8006dde:	4616      	mov	r6, r2
 8006de0:	e7bd      	b.n	8006d5e <_printf_i+0x126>
 8006de2:	6833      	ldr	r3, [r6, #0]
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	6961      	ldr	r1, [r4, #20]
 8006de8:	1d18      	adds	r0, r3, #4
 8006dea:	6030      	str	r0, [r6, #0]
 8006dec:	062e      	lsls	r6, r5, #24
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	d501      	bpl.n	8006df6 <_printf_i+0x1be>
 8006df2:	6019      	str	r1, [r3, #0]
 8006df4:	e002      	b.n	8006dfc <_printf_i+0x1c4>
 8006df6:	0668      	lsls	r0, r5, #25
 8006df8:	d5fb      	bpl.n	8006df2 <_printf_i+0x1ba>
 8006dfa:	8019      	strh	r1, [r3, #0]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6123      	str	r3, [r4, #16]
 8006e00:	4616      	mov	r6, r2
 8006e02:	e7bc      	b.n	8006d7e <_printf_i+0x146>
 8006e04:	6833      	ldr	r3, [r6, #0]
 8006e06:	1d1a      	adds	r2, r3, #4
 8006e08:	6032      	str	r2, [r6, #0]
 8006e0a:	681e      	ldr	r6, [r3, #0]
 8006e0c:	6862      	ldr	r2, [r4, #4]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4630      	mov	r0, r6
 8006e12:	f7f9 f9fd 	bl	8000210 <memchr>
 8006e16:	b108      	cbz	r0, 8006e1c <_printf_i+0x1e4>
 8006e18:	1b80      	subs	r0, r0, r6
 8006e1a:	6060      	str	r0, [r4, #4]
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	6123      	str	r3, [r4, #16]
 8006e20:	2300      	movs	r3, #0
 8006e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e26:	e7aa      	b.n	8006d7e <_printf_i+0x146>
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	4640      	mov	r0, r8
 8006e30:	47d0      	blx	sl
 8006e32:	3001      	adds	r0, #1
 8006e34:	d0ad      	beq.n	8006d92 <_printf_i+0x15a>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	079b      	lsls	r3, r3, #30
 8006e3a:	d413      	bmi.n	8006e64 <_printf_i+0x22c>
 8006e3c:	68e0      	ldr	r0, [r4, #12]
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	4298      	cmp	r0, r3
 8006e42:	bfb8      	it	lt
 8006e44:	4618      	movlt	r0, r3
 8006e46:	e7a6      	b.n	8006d96 <_printf_i+0x15e>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4632      	mov	r2, r6
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	4640      	mov	r0, r8
 8006e50:	47d0      	blx	sl
 8006e52:	3001      	adds	r0, #1
 8006e54:	d09d      	beq.n	8006d92 <_printf_i+0x15a>
 8006e56:	3501      	adds	r5, #1
 8006e58:	68e3      	ldr	r3, [r4, #12]
 8006e5a:	9903      	ldr	r1, [sp, #12]
 8006e5c:	1a5b      	subs	r3, r3, r1
 8006e5e:	42ab      	cmp	r3, r5
 8006e60:	dcf2      	bgt.n	8006e48 <_printf_i+0x210>
 8006e62:	e7eb      	b.n	8006e3c <_printf_i+0x204>
 8006e64:	2500      	movs	r5, #0
 8006e66:	f104 0619 	add.w	r6, r4, #25
 8006e6a:	e7f5      	b.n	8006e58 <_printf_i+0x220>
 8006e6c:	080070fd 	.word	0x080070fd
 8006e70:	0800710e 	.word	0x0800710e

08006e74 <memmove>:
 8006e74:	4288      	cmp	r0, r1
 8006e76:	b510      	push	{r4, lr}
 8006e78:	eb01 0402 	add.w	r4, r1, r2
 8006e7c:	d902      	bls.n	8006e84 <memmove+0x10>
 8006e7e:	4284      	cmp	r4, r0
 8006e80:	4623      	mov	r3, r4
 8006e82:	d807      	bhi.n	8006e94 <memmove+0x20>
 8006e84:	1e43      	subs	r3, r0, #1
 8006e86:	42a1      	cmp	r1, r4
 8006e88:	d008      	beq.n	8006e9c <memmove+0x28>
 8006e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e92:	e7f8      	b.n	8006e86 <memmove+0x12>
 8006e94:	4402      	add	r2, r0
 8006e96:	4601      	mov	r1, r0
 8006e98:	428a      	cmp	r2, r1
 8006e9a:	d100      	bne.n	8006e9e <memmove+0x2a>
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ea6:	e7f7      	b.n	8006e98 <memmove+0x24>

08006ea8 <_sbrk_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4d06      	ldr	r5, [pc, #24]	@ (8006ec4 <_sbrk_r+0x1c>)
 8006eac:	2300      	movs	r3, #0
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4608      	mov	r0, r1
 8006eb2:	602b      	str	r3, [r5, #0]
 8006eb4:	f7fa fcfc 	bl	80018b0 <_sbrk>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d102      	bne.n	8006ec2 <_sbrk_r+0x1a>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	b103      	cbz	r3, 8006ec2 <_sbrk_r+0x1a>
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	20000374 	.word	0x20000374

08006ec8 <_realloc_r>:
 8006ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ecc:	4607      	mov	r7, r0
 8006ece:	4614      	mov	r4, r2
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	b921      	cbnz	r1, 8006ede <_realloc_r+0x16>
 8006ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed8:	4611      	mov	r1, r2
 8006eda:	f7ff bc5b 	b.w	8006794 <_malloc_r>
 8006ede:	b92a      	cbnz	r2, 8006eec <_realloc_r+0x24>
 8006ee0:	f7ff fbec 	bl	80066bc <_free_r>
 8006ee4:	4625      	mov	r5, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	f000 f81a 	bl	8006f24 <_malloc_usable_size_r>
 8006ef0:	4284      	cmp	r4, r0
 8006ef2:	4606      	mov	r6, r0
 8006ef4:	d802      	bhi.n	8006efc <_realloc_r+0x34>
 8006ef6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006efa:	d8f4      	bhi.n	8006ee6 <_realloc_r+0x1e>
 8006efc:	4621      	mov	r1, r4
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7ff fc48 	bl	8006794 <_malloc_r>
 8006f04:	4680      	mov	r8, r0
 8006f06:	b908      	cbnz	r0, 8006f0c <_realloc_r+0x44>
 8006f08:	4645      	mov	r5, r8
 8006f0a:	e7ec      	b.n	8006ee6 <_realloc_r+0x1e>
 8006f0c:	42b4      	cmp	r4, r6
 8006f0e:	4622      	mov	r2, r4
 8006f10:	4629      	mov	r1, r5
 8006f12:	bf28      	it	cs
 8006f14:	4632      	movcs	r2, r6
 8006f16:	f7ff fbc3 	bl	80066a0 <memcpy>
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	f7ff fbcd 	bl	80066bc <_free_r>
 8006f22:	e7f1      	b.n	8006f08 <_realloc_r+0x40>

08006f24 <_malloc_usable_size_r>:
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f18      	subs	r0, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfbc      	itt	lt
 8006f2e:	580b      	ldrlt	r3, [r1, r0]
 8006f30:	18c0      	addlt	r0, r0, r3
 8006f32:	4770      	bx	lr

08006f34 <_init>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	bf00      	nop
 8006f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	469e      	mov	lr, r3
 8006f3e:	4770      	bx	lr

08006f40 <_fini>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr
