
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dcc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005f6c  08005f6c  00006f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006048  08006048  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006048  08006048  00007048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006050  08006050  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006050  08006050  00007050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006054  08006054  00007054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006058  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          000002c4  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001153e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000084  00000000  00000000  000195d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000d278  00000000  00000000  0001965a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000023ae  00000000  00000000  000268d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000c60  00000000  00000000  00028c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbab7  00000000  00000000  000298e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000940  00000000  00000000  000f5397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00021e89  00000000  00000000  000f5cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00117b60  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000035d4  00000000  00000000  00117ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f54 	.word	0x08005f54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005f54 	.word	0x08005f54

080001e0 <coast_asm_delay>:
		i++;
	}
}
*/
coast_asm_delay:
	PUSH {r4}	// 1 + 1 = 2
 80001e0:	b410      	push	{r4}
	PUSH {r5} 	// 2
 80001e2:	b420      	push	{r5}

	// uint32_t i = 0
	MOV r4, #0	// 1
 80001e4:	2400      	movs	r4, #0
	LDR r1, =11999	// 2
 80001e6:	f642 61df 	movw	r1, #11999	@ 0x2edf

080001ea <loop1_start>:
loop1_start:
	CMP r4, r0	// 1
 80001ea:	4284      	cmp	r4, r0
	BHS loop1_end // 1 + P
 80001ec:	d206      	bcs.n	80001fc <loop1_end>

	MOV r5, #0	// 1
 80001ee:	2500      	movs	r5, #0

080001f0 <loop2_start>:

loop2_start:
	// ldr slower but has 32-bits, mov faster only 8-bit
	CMP r5, r1		// 1
 80001f0:	428d      	cmp	r5, r1
	BHS loop2_end	// 1 + P
 80001f2:	d201      	bcs.n	80001f8 <loop2_end>

	// j++
	ADD r5, r5, #1 // 1
 80001f4:	3501      	adds	r5, #1
	b loop2_start  // 1 + P
 80001f6:	e7fb      	b.n	80001f0 <loop2_start>

080001f8 <loop2_end>:
loop2_end:
	// i++
	ADD r4, r4, #1	// 1
 80001f8:	3401      	adds	r4, #1
	b loop1_start  	// 1 + P
 80001fa:	e7f6      	b.n	80001ea <loop1_start>

080001fc <loop1_end>:

loop1_end:
	pop {r5}	// 2
 80001fc:	bc20      	pop	{r5}
	pop {r4}	// 2
 80001fe:	bc10      	pop	{r4}

	BX LR 		// 1 + P
 8000200:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <generate_sound>:
 *      Author: Zhaoji Gou
 */

#include "main.h"
extern void coast_asm_delay(uint32_t milliseconds);
void generate_sound(uint16_t frequency, uint8_t duty_cycle, TIM_HandleTypeDef htim1) {
 80002b0:	b082      	sub	sp, #8
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	f107 0c18 	add.w	ip, r7, #24
 80002bc:	e88c 000c 	stmia.w	ip, {r2, r3}
 80002c0:	4603      	mov	r3, r0
 80002c2:	80fb      	strh	r3, [r7, #6]
 80002c4:	460b      	mov	r3, r1
 80002c6:	717b      	strb	r3, [r7, #5]
	/* protect the function from invalid frequency input */
	if (frequency == 0) return;
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d012      	beq.n	80002f4 <generate_sound+0x44>
	/* millisecond trigger period */
	uint32_t period = 72000 / frequency;
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000304 <generate_sound+0x54>)
 80002d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	/* setup PWM channel and tim1 autoloader */
	htim1.Instance->ARR = period - 1;
 80002d8:	69bb      	ldr	r3, [r7, #24]
 80002da:	68fa      	ldr	r2, [r7, #12]
 80002dc:	3a01      	subs	r2, #1
 80002de:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim1.Instance->CCR3 = period / 2;
 80002e0:	69bb      	ldr	r3, [r7, #24]
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	0852      	lsrs	r2, r2, #1
 80002e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* start the timer1 and buzzer */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80002e8:	2108      	movs	r1, #8
 80002ea:	f107 0018 	add.w	r0, r7, #24
 80002ee:	f003 ff41 	bl	8004174 <HAL_TIM_PWM_Start>
 80002f2:	e000      	b.n	80002f6 <generate_sound+0x46>
	if (frequency == 0) return;
 80002f4:	bf00      	nop
}
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002fe:	b002      	add	sp, #8
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	00011940 	.word	0x00011940

08000308 <stop_sound>:

void stop_sound(TIM_HandleTypeDef htim1) {
 8000308:	b084      	sub	sp, #16
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
 800030e:	f107 0c08 	add.w	ip, r7, #8
 8000312:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* stop the timer1 and buzzer */
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000316:	2108      	movs	r1, #8
 8000318:	f107 0008 	add.w	r0, r7, #8
 800031c:	f004 f836 	bl	800438c <HAL_TIM_PWM_Stop>
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <play_note>:

void play_note(uint16_t note, uint32_t duration, uint8_t volume, TIM_HandleTypeDef htim1) {
 800032c:	b082      	sub	sp, #8
 800032e:	b5b0      	push	{r4, r5, r7, lr}
 8000330:	b094      	sub	sp, #80	@ 0x50
 8000332:	af12      	add	r7, sp, #72	@ 0x48
 8000334:	6039      	str	r1, [r7, #0]
 8000336:	61fb      	str	r3, [r7, #28]
 8000338:	4603      	mov	r3, r0
 800033a:	80fb      	strh	r3, [r7, #6]
 800033c:	4613      	mov	r3, r2
 800033e:	717b      	strb	r3, [r7, #5]
	generate_sound(note, volume, htim1);
 8000340:	797d      	ldrb	r5, [r7, #5]
 8000342:	88fc      	ldrh	r4, [r7, #6]
 8000344:	4668      	mov	r0, sp
 8000346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800034a:	2244      	movs	r2, #68	@ 0x44
 800034c:	4619      	mov	r1, r3
 800034e:	f005 f9b7 	bl	80056c0 <memcpy>
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	cb0c      	ldmia	r3, {r2, r3}
 8000358:	4629      	mov	r1, r5
 800035a:	4620      	mov	r0, r4
 800035c:	f7ff ffa8 	bl	80002b0 <generate_sound>
	coast_asm_delay(duration);
 8000360:	6838      	ldr	r0, [r7, #0]
 8000362:	f7ff ff3d 	bl	80001e0 <coast_asm_delay>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000370:	b002      	add	sp, #8
 8000372:	4770      	bx	lr

08000374 <homePage>:
#include "lcd.h"

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void homePage() {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0

	LCD_SendStr("FITNESS ");
 800037a:	480c      	ldr	r0, [pc, #48]	@ (80003ac <homePage+0x38>)
 800037c:	f000 f968 	bl	8000650 <LCD_SendStr>

	char buff[16];

	int temp = 21; // placeholder
 8000380:	2315      	movs	r3, #21
 8000382:	617b      	str	r3, [r7, #20]
	sprintf(buff, "%dC ", temp);
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	697a      	ldr	r2, [r7, #20]
 8000388:	4909      	ldr	r1, [pc, #36]	@ (80003b0 <homePage+0x3c>)
 800038a:	4618      	mov	r0, r3
 800038c:	f005 f942 	bl	8005614 <siprintf>
	LCD_SendStr(buff);
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	4618      	mov	r0, r3
 8000394:	f000 f95c 	bl	8000650 <LCD_SendStr>

	LCD_SendStr(" 57%");
 8000398:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <homePage+0x40>)
 800039a:	f000 f959 	bl	8000650 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 800039e:	20c0      	movs	r0, #192	@ 0xc0
 80003a0:	f000 f91a 	bl	80005d8 <LCD_SendCmd>

//	LCD_SendStr("OPT ");

}
 80003a4:	bf00      	nop
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	08005f6c 	.word	0x08005f6c
 80003b0:	08005f78 	.word	0x08005f78
 80003b4:	08005f80 	.word	0x08005f80

080003b8 <check_double_press>:
                         bool is_holding[],
						 uint32_t decimal_second_count,
						 uint32_t double_press_interval,
						 uint32_t button_double_press_time[],
						 uint32_t button_holding_time[])
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
 80003c4:	603b      	str	r3, [r7, #0]
    if (is_single_press[button_index] == true &&
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	4413      	add	r3, r2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d022      	beq.n	8000418 <check_double_press+0x60>
        is_double_press[button_index] == false &&
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	f083 0301 	eor.w	r3, r3, #1
 80003de:	b2db      	uxtb	r3, r3
    if (is_single_press[button_index] == true &&
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d019      	beq.n	8000418 <check_double_press+0x60>
        (decimal_second_count - button_double_press_time[button_index]) <= double_press_interval) {
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	6a3a      	ldr	r2, [r7, #32]
 80003ea:	4413      	add	r3, r2
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	69ba      	ldr	r2, [r7, #24]
 80003f0:	1ad3      	subs	r3, r2, r3
        is_double_press[button_index] == false &&
 80003f2:	69fa      	ldr	r2, [r7, #28]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d30f      	bcc.n	8000418 <check_double_press+0x60>
        is_double_press[button_index] = true;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
        is_single_press[button_index] = false;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	4413      	add	r3, r2
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
        is_holding[button_index] = false;
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	4413      	add	r3, r2
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	e00e      	b.n	8000436 <check_double_press+0x7e>

    } else {
        is_single_press[button_index] = true;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	4413      	add	r3, r2
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
        is_double_press[button_index] = false;
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4413      	add	r3, r2
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
        is_holding[button_index] = false;
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	4413      	add	r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
    }

    button_holding_time[button_index] = decimal_second_count;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800043c:	4413      	add	r3, r2
 800043e:	69ba      	ldr	r2, [r7, #24]
 8000440:	601a      	str	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <check_holding>:
                   bool is_holding[],
                   uint32_t decimal_second_count,
                   uint32_t holding_bound,
                   uint32_t button_double_press_time[],
                   uint32_t button_holding_time[])
{
 800044e:	b480      	push	{r7}
 8000450:	b085      	sub	sp, #20
 8000452:	af00      	add	r7, sp, #0
 8000454:	60f8      	str	r0, [r7, #12]
 8000456:	60b9      	str	r1, [r7, #8]
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	603b      	str	r3, [r7, #0]
    if ((decimal_second_count - button_holding_time[button_index]) >= holding_bound) {
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000462:	4413      	add	r3, r2
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	69ba      	ldr	r2, [r7, #24]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	69fa      	ldr	r2, [r7, #28]
 800046c:	429a      	cmp	r2, r3
 800046e:	d80f      	bhi.n	8000490 <check_holding+0x42>
        is_holding[button_index] = true;
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	4413      	add	r3, r2
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
        is_double_press[button_index] = false;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4413      	add	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
        is_single_press[button_index] = false;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	4413      	add	r3, r2
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
    } else {
        button_double_press_time[button_index] = decimal_second_count;
    }
}
 800048e:	e005      	b.n	800049c <check_holding+0x4e>
        button_double_press_time[button_index] = decimal_second_count;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	6a3a      	ldr	r2, [r7, #32]
 8000496:	4413      	add	r3, r2
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <coast_lcd_init>:

#include "main.h"
#include "coast.h"
#include "lcd.h"

void coast_lcd_init(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	// 1. wait for enough time to stabilise
	 HAL_Delay(50);
 80004ac:	2032      	movs	r0, #50	@ 0x32
 80004ae:	f001 f9f7 	bl	80018a0 <HAL_Delay>
	 // 2. send command 0011 (function set) and wait for >=4.1 ms (enough wait inside
	 // the pulse)
	 LCD_PutNibble(0b0011);
 80004b2:	2003      	movs	r0, #3
 80004b4:	f000 f83e 	bl	8000534 <LCD_PutNibble>
	 LCD_Pulse();
 80004b8:	f000 f826 	bl	8000508 <LCD_Pulse>
	 HAL_Delay(5);
 80004bc:	2005      	movs	r0, #5
 80004be:	f001 f9ef 	bl	80018a0 <HAL_Delay>
	 // 3. send command 0011 (function set) again and wait for >=100 us
	 // fill this
	 LCD_PutNibble(0b0011);
 80004c2:	2003      	movs	r0, #3
 80004c4:	f000 f836 	bl	8000534 <LCD_PutNibble>
	 LCD_Pulse();
 80004c8:	f000 f81e 	bl	8000508 <LCD_Pulse>
	 HAL_Delay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f001 f9e7 	bl	80018a0 <HAL_Delay>
	 // 4. send command 0011 (function set) again
	 // fill this
	 LCD_PutNibble(0b0011);
 80004d2:	2003      	movs	r0, #3
 80004d4:	f000 f82e 	bl	8000534 <LCD_PutNibble>
	 LCD_Pulse();
 80004d8:	f000 f816 	bl	8000508 <LCD_Pulse>
	 // 5. send command 0010 to set to 4-bit bus mode
	 // fill this
	 LCD_PutNibble(0b0010);
 80004dc:	2002      	movs	r0, #2
 80004de:	f000 f829 	bl	8000534 <LCD_PutNibble>
	 LCD_Pulse();
 80004e2:	f000 f811 	bl	8000508 <LCD_Pulse>
	 // 6. send command 0010 1100 (function set: 4-bit mode, 2-lines, 5x8 font)
	 LCD_SendCmd(0b00101100);
 80004e6:	202c      	movs	r0, #44	@ 0x2c
 80004e8:	f000 f876 	bl	80005d8 <LCD_SendCmd>
	 // 7. Send command 0000 1000 to display ON/OFF
	 LCD_SendCmd(0b00001000);
 80004ec:	2008      	movs	r0, #8
 80004ee:	f000 f873 	bl	80005d8 <LCD_SendCmd>
	 // 8. Send command to clear the display
	 // fill this
	 LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f000 f870 	bl	80005d8 <LCD_SendCmd>
	 // 9. Send command set entry mode (increment cursor, no display shift)
	 // fill this
	 LCD_SendCmd(0b00000110);
 80004f8:	2006      	movs	r0, #6
 80004fa:	f000 f86d 	bl	80005d8 <LCD_SendCmd>
	 // 10. send command 0000 1111 to display on, cursor on, blink on
	 // fill this
	 LCD_SendCmd(0b00001111);
 80004fe:	200f      	movs	r0, #15
 8000500:	f000 f86a 	bl	80005d8 <LCD_SendCmd>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <LCD_Pulse>:

void LCD_Pulse(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	2104      	movs	r1, #4
 8000510:	4807      	ldr	r0, [pc, #28]	@ (8000530 <LCD_Pulse+0x28>)
 8000512:	f001 fc9d 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f001 f9c2 	bl	80018a0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2104      	movs	r1, #4
 8000520:	4803      	ldr	r0, [pc, #12]	@ (8000530 <LCD_Pulse+0x28>)
 8000522:	f001 fc95 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f001 f9ba 	bl	80018a0 <HAL_Delay>
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48000c00 	.word	0x48000c00

08000534 <LCD_PutNibble>:

void LCD_PutNibble(uint8_t nibble){
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	uint8_t D4 = nibble & 1;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	73fb      	strb	r3, [r7, #15]
	uint8_t D5 = (nibble >> 1) & 1;
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	73bb      	strb	r3, [r7, #14]
	uint8_t D6 = (nibble >> 2) & 1;
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	089b      	lsrs	r3, r3, #2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	737b      	strb	r3, [r7, #13]
	uint8_t D7 = (nibble >> 3) & 1;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	08db      	lsrs	r3, r3, #3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, D4? GPIO_PIN_SET : GPIO_PIN_RESET);
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800057c:	4815      	ldr	r0, [pc, #84]	@ (80005d4 <LCD_PutNibble+0xa0>)
 800057e:	f001 fc67 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, D5? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	2b00      	cmp	r3, #0
 8000586:	bf14      	ite	ne
 8000588:	2301      	movne	r3, #1
 800058a:	2300      	moveq	r3, #0
 800058c:	b2db      	uxtb	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000594:	480f      	ldr	r0, [pc, #60]	@ (80005d4 <LCD_PutNibble+0xa0>)
 8000596:	f001 fc5b 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, D6? GPIO_PIN_SET : GPIO_PIN_RESET);
 800059a:	7b7b      	ldrb	r3, [r7, #13]
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005ac:	4809      	ldr	r0, [pc, #36]	@ (80005d4 <LCD_PutNibble+0xa0>)
 80005ae:	f001 fc4f 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, D7? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005b2:	7b3b      	ldrb	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <LCD_PutNibble+0xa0>)
 80005c6:	f001 fc43 	bl	8001e50 <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	48000800 	.word	0x48000800

080005d8 <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	LCD_PutNibble(c >> 4);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffa3 	bl	8000534 <LCD_PutNibble>
	LCD_Pulse();
 80005ee:	f7ff ff8b 	bl	8000508 <LCD_Pulse>
	LCD_PutNibble(c);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff9d 	bl	8000534 <LCD_PutNibble>
	LCD_Pulse();
 80005fa:	f7ff ff85 	bl	8000508 <LCD_Pulse>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <LCD_SendData>:


void LCD_SendData(uint8_t c){
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061a:	f001 fc19 	bl	8001e50 <HAL_GPIO_WritePin>
	LCD_PutNibble(c >> 4);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff85 	bl	8000534 <LCD_PutNibble>
	LCD_Pulse();
 800062a:	f7ff ff6d 	bl	8000508 <LCD_Pulse>
	LCD_PutNibble(c);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff7f 	bl	8000534 <LCD_PutNibble>
	LCD_Pulse();
 8000636:	f7ff ff67 	bl	8000508 <LCD_Pulse>
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f001 fc04 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <LCD_SendStr>:

// send string to LCD data
void LCD_SendStr(char *str){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	e00f      	b.n	800067e <LCD_SendStr+0x2e>
		if (i == 15) {
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d102      	bne.n	800066a <LCD_SendStr+0x1a>
			LCD_SendCmd(LCD_SECOND_LINE);
 8000664:	20c0      	movs	r0, #192	@ 0xc0
 8000666:	f7ff ffb7 	bl	80005d8 <LCD_SendCmd>
		}
		LCD_SendData((uint8_t)str[i]);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ffc7 	bl	8000606 <LCD_SendData>
	for (int i = 0; str[i]; i++) {
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e9      	bne.n	800065e <LCD_SendStr+0xe>
	}
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b093      	sub	sp, #76	@ 0x4c
 8000698:	af10      	add	r7, sp, #64	@ 0x40
 800069a:	4603      	mov	r3, r0
 800069c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006a4:	d152      	bne.n	800074c <HAL_GPIO_EXTI_Callback+0xb8>
		/* B1 is pressed */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 80006a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006aa:	4893      	ldr	r0, [pc, #588]	@ (80008f8 <HAL_GPIO_EXTI_Callback+0x264>)
 80006ac:	f001 fbb8 	bl	8001e20 <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d127      	bne.n	8000706 <HAL_GPIO_EXTI_Callback+0x72>
			/* sound indication */
			if (enable_sound) {
 80006b6:	4b91      	ldr	r3, [pc, #580]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x268>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <HAL_GPIO_EXTI_Callback+0x30>
				button_sound = true;
 80006be:	4b90      	ldr	r3, [pc, #576]	@ (8000900 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
			}
			if (enable_vibration) {
 80006c4:	4b8f      	ldr	r3, [pc, #572]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x270>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <HAL_GPIO_EXTI_Callback+0x3e>
				button_vibration = true;
 80006cc:	4b8e      	ldr	r3, [pc, #568]	@ (8000908 <HAL_GPIO_EXTI_Callback+0x274>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
			}
			switch (currentScreen) {
 80006d2:	4b8e      	ldr	r3, [pc, #568]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d103      	bne.n	80006e4 <HAL_GPIO_EXTI_Callback+0x50>
			case HOME:
				currentScreen = TIME;
 80006dc:	4b8b      	ldr	r3, [pc, #556]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 80006de:	2202      	movs	r2, #2
 80006e0:	701a      	strb	r2, [r3, #0]
				break;
 80006e2:	bf00      	nop
			}
			check_double_press(0, is_single_press, is_double_press, is_holding,
 80006e4:	4b8a      	ldr	r3, [pc, #552]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a8a      	ldr	r2, [pc, #552]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x280>)
 80006ea:	6812      	ldr	r2, [r2, #0]
 80006ec:	498a      	ldr	r1, [pc, #552]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 80006ee:	9103      	str	r1, [sp, #12]
 80006f0:	498a      	ldr	r1, [pc, #552]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 80006f2:	9102      	str	r1, [sp, #8]
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	4b89      	ldr	r3, [pc, #548]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 80006fa:	4a8a      	ldr	r2, [pc, #552]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 80006fc:	498a      	ldr	r1, [pc, #552]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff fe5a 	bl	80003b8 <check_double_press>
						  holding_bound,
						  button_double_press_time,
						  button_holding_time);
		}
	}
}
 8000704:	e13a      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
			stop_sound(htim1);
 8000706:	4e89      	ldr	r6, [pc, #548]	@ (800092c <HAL_GPIO_EXTI_Callback+0x298>)
 8000708:	466d      	mov	r5, sp
 800070a:	f106 0410 	add.w	r4, r6, #16
 800070e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800071a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800071e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000722:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000726:	f7ff fdef 	bl	8000308 <stop_sound>
			check_holding(0,
 800072a:	4b79      	ldr	r3, [pc, #484]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a80      	ldr	r2, [pc, #512]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	4979      	ldr	r1, [pc, #484]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 8000734:	9103      	str	r1, [sp, #12]
 8000736:	4979      	ldr	r1, [pc, #484]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 8000738:	9102      	str	r1, [sp, #8]
 800073a:	9201      	str	r2, [sp, #4]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	4b78      	ldr	r3, [pc, #480]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000740:	4a78      	ldr	r2, [pc, #480]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 8000742:	4979      	ldr	r1, [pc, #484]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fe82 	bl	800044e <check_holding>
}
 800074a:	e117      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
	} else if (GPIO_Pin == SW1_Pin) {
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d152      	bne.n	80007f8 <HAL_GPIO_EXTI_Callback+0x164>
		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1) {
 8000752:	2102      	movs	r1, #2
 8000754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000758:	f001 fb62 	bl	8001e20 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d127      	bne.n	80007b2 <HAL_GPIO_EXTI_Callback+0x11e>
			if (enable_sound) {
 8000762:	4b66      	ldr	r3, [pc, #408]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x268>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d002      	beq.n	8000770 <HAL_GPIO_EXTI_Callback+0xdc>
				button_sound = true;
 800076a:	4b65      	ldr	r3, [pc, #404]	@ (8000900 <HAL_GPIO_EXTI_Callback+0x26c>)
 800076c:	2201      	movs	r2, #1
 800076e:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 8000770:	4b64      	ldr	r3, [pc, #400]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x270>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d002      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0xea>
				button_vibration = true;
 8000778:	4b63      	ldr	r3, [pc, #396]	@ (8000908 <HAL_GPIO_EXTI_Callback+0x274>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
			switch (currentScreen){
 800077e:	4b63      	ldr	r3, [pc, #396]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b03      	cmp	r3, #3
 8000786:	d103      	bne.n	8000790 <HAL_GPIO_EXTI_Callback+0xfc>
					currentScreen = TIME;
 8000788:	4b60      	ldr	r3, [pc, #384]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 800078a:	2202      	movs	r2, #2
 800078c:	701a      	strb	r2, [r3, #0]
					break;
 800078e:	bf00      	nop
			check_double_press(1, is_single_press, is_double_press, is_holding,
 8000790:	4b5f      	ldr	r3, [pc, #380]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a5f      	ldr	r2, [pc, #380]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x280>)
 8000796:	6812      	ldr	r2, [r2, #0]
 8000798:	495f      	ldr	r1, [pc, #380]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 800079a:	9103      	str	r1, [sp, #12]
 800079c:	495f      	ldr	r1, [pc, #380]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 800079e:	9102      	str	r1, [sp, #8]
 80007a0:	9201      	str	r2, [sp, #4]
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	4b5e      	ldr	r3, [pc, #376]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 80007a6:	4a5f      	ldr	r2, [pc, #380]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 80007a8:	495f      	ldr	r1, [pc, #380]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff fe04 	bl	80003b8 <check_double_press>
}
 80007b0:	e0e4      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
			stop_sound(htim1);
 80007b2:	4e5e      	ldr	r6, [pc, #376]	@ (800092c <HAL_GPIO_EXTI_Callback+0x298>)
 80007b4:	466d      	mov	r5, sp
 80007b6:	f106 0410 	add.w	r4, r6, #16
 80007ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007c6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80007ca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80007ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007d2:	f7ff fd99 	bl	8000308 <stop_sound>
			check_holding(1,
 80007d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a55      	ldr	r2, [pc, #340]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	494e      	ldr	r1, [pc, #312]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 80007e0:	9103      	str	r1, [sp, #12]
 80007e2:	494e      	ldr	r1, [pc, #312]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 80007e4:	9102      	str	r1, [sp, #8]
 80007e6:	9201      	str	r2, [sp, #4]
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 80007ec:	4a4d      	ldr	r2, [pc, #308]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 80007ee:	494e      	ldr	r1, [pc, #312]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff fe2c 	bl	800044e <check_holding>
}
 80007f6:	e0c1      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
	} else if (GPIO_Pin == SW2_Pin) {
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	2b10      	cmp	r3, #16
 80007fc:	d14c      	bne.n	8000898 <HAL_GPIO_EXTI_Callback+0x204>
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1) {
 80007fe:	2110      	movs	r1, #16
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f001 fb0c 	bl	8001e20 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d121      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x1be>
			if (enable_sound) {
 800080e:	4b3b      	ldr	r3, [pc, #236]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x268>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <HAL_GPIO_EXTI_Callback+0x188>
				button_sound = true;
 8000816:	4b3a      	ldr	r3, [pc, #232]	@ (8000900 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 800081c:	4b39      	ldr	r3, [pc, #228]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x270>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <HAL_GPIO_EXTI_Callback+0x196>
				button_vibration = true;
 8000824:	4b38      	ldr	r3, [pc, #224]	@ (8000908 <HAL_GPIO_EXTI_Callback+0x274>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
			currentScreen = HOME;
 800082a:	4b38      	ldr	r3, [pc, #224]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
			check_double_press(2, is_single_press, is_double_press, is_holding,
 8000830:	4b37      	ldr	r3, [pc, #220]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a37      	ldr	r2, [pc, #220]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x280>)
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	4937      	ldr	r1, [pc, #220]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 800083a:	9103      	str	r1, [sp, #12]
 800083c:	4937      	ldr	r1, [pc, #220]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 800083e:	9102      	str	r1, [sp, #8]
 8000840:	9201      	str	r2, [sp, #4]
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	4b36      	ldr	r3, [pc, #216]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000846:	4a37      	ldr	r2, [pc, #220]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 8000848:	4937      	ldr	r1, [pc, #220]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff fdb4 	bl	80003b8 <check_double_press>
}
 8000850:	e094      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
			stop_sound(htim1);
 8000852:	4e36      	ldr	r6, [pc, #216]	@ (800092c <HAL_GPIO_EXTI_Callback+0x298>)
 8000854:	466d      	mov	r5, sp
 8000856:	f106 0410 	add.w	r4, r6, #16
 800085a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800085c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000866:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800086a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800086e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000872:	f7ff fd49 	bl	8000308 <stop_sound>
			check_holding(2,
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a2d      	ldr	r2, [pc, #180]	@ (8000930 <HAL_GPIO_EXTI_Callback+0x29c>)
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	4926      	ldr	r1, [pc, #152]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 8000880:	9103      	str	r1, [sp, #12]
 8000882:	4926      	ldr	r1, [pc, #152]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 8000884:	9102      	str	r1, [sp, #8]
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 800088c:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 800088e:	4926      	ldr	r1, [pc, #152]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 8000890:	2002      	movs	r0, #2
 8000892:	f7ff fddc 	bl	800044e <check_holding>
}
 8000896:	e071      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == 1) {
 8000898:	2101      	movs	r1, #1
 800089a:	4826      	ldr	r0, [pc, #152]	@ (8000934 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800089c:	f001 fac0 	bl	8001e20 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d148      	bne.n	8000938 <HAL_GPIO_EXTI_Callback+0x2a4>
			if (enable_sound) {
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <HAL_GPIO_EXTI_Callback+0x268>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <HAL_GPIO_EXTI_Callback+0x220>
				button_sound = true;
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <HAL_GPIO_EXTI_Callback+0x26c>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
			if (enable_vibration) {
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_GPIO_EXTI_Callback+0x270>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <HAL_GPIO_EXTI_Callback+0x22e>
				button_vibration = true;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_GPIO_EXTI_Callback+0x274>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
			switch (currentScreen) {
 80008c2:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d103      	bne.n	80008d4 <HAL_GPIO_EXTI_Callback+0x240>
				currentScreen = ALARM;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_GPIO_EXTI_Callback+0x278>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	701a      	strb	r2, [r3, #0]
				break;
 80008d2:	bf00      	nop
			check_double_press(3, is_single_press, is_double_press, is_holding,
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x27c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x280>)
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	490e      	ldr	r1, [pc, #56]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x284>)
 80008de:	9103      	str	r1, [sp, #12]
 80008e0:	490e      	ldr	r1, [pc, #56]	@ (800091c <HAL_GPIO_EXTI_Callback+0x288>)
 80008e2:	9102      	str	r1, [sp, #8]
 80008e4:	9201      	str	r2, [sp, #4]
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <HAL_GPIO_EXTI_Callback+0x28c>)
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_GPIO_EXTI_Callback+0x290>)
 80008ec:	490e      	ldr	r1, [pc, #56]	@ (8000928 <HAL_GPIO_EXTI_Callback+0x294>)
 80008ee:	2003      	movs	r0, #3
 80008f0:	f7ff fd62 	bl	80003b8 <check_double_press>
}
 80008f4:	e042      	b.n	800097c <HAL_GPIO_EXTI_Callback+0x2e8>
 80008f6:	bf00      	nop
 80008f8:	48000800 	.word	0x48000800
 80008fc:	20000008 	.word	0x20000008
 8000900:	200001d8 	.word	0x200001d8
 8000904:	20000009 	.word	0x20000009
 8000908:	200001d9 	.word	0x200001d9
 800090c:	2000000a 	.word	0x2000000a
 8000910:	200001a8 	.word	0x200001a8
 8000914:	20000000 	.word	0x20000000
 8000918:	200001bc 	.word	0x200001bc
 800091c:	200001ac 	.word	0x200001ac
 8000920:	200001d4 	.word	0x200001d4
 8000924:	200001d0 	.word	0x200001d0
 8000928:	200001cc 	.word	0x200001cc
 800092c:	200000bc 	.word	0x200000bc
 8000930:	20000004 	.word	0x20000004
 8000934:	48000400 	.word	0x48000400
			stop_sound(htim1);
 8000938:	4e12      	ldr	r6, [pc, #72]	@ (8000984 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800093a:	466d      	mov	r5, sp
 800093c:	f106 0410 	add.w	r4, r6, #16
 8000940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800094c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000950:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000954:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000958:	f7ff fcd6 	bl	8000308 <stop_sound>
			check_holding(2,
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_GPIO_EXTI_Callback+0x2f8>)
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	490a      	ldr	r1, [pc, #40]	@ (8000990 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8000966:	9103      	str	r1, [sp, #12]
 8000968:	490a      	ldr	r1, [pc, #40]	@ (8000994 <HAL_GPIO_EXTI_Callback+0x300>)
 800096a:	9102      	str	r1, [sp, #8]
 800096c:	9201      	str	r2, [sp, #4]
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <HAL_GPIO_EXTI_Callback+0x304>)
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_GPIO_EXTI_Callback+0x308>)
 8000974:	490a      	ldr	r1, [pc, #40]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x30c>)
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fd69 	bl	800044e <check_holding>
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000984:	200000bc 	.word	0x200000bc
 8000988:	200001a8 	.word	0x200001a8
 800098c:	20000004 	.word	0x20000004
 8000990:	200001bc 	.word	0x200001bc
 8000994:	200001ac 	.word	0x200001ac
 8000998:	200001d4 	.word	0x200001d4
 800099c:	200001d0 	.word	0x200001d0
 80009a0:	200001cc 	.word	0x200001cc

080009a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d104      	bne.n	80009be <HAL_TIM_PeriodElapsedCallback+0x1a>
		seconds++;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80009bc:	6013      	str	r3, [r2, #0]
	}
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000108 	.word	0x20000108
 80009d0:	200001a4 	.word	0x200001a4

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d6:	b093      	sub	sp, #76	@ 0x4c
 80009d8:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fefb 	bl	80017d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f8bb 	bl	8000b58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  system_clock_setup();
 80009e2:	f000 fbd5 	bl	8001190 <system_clock_setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f000 fad1 	bl	8000f8c <MX_GPIO_Init>
  MX_RTC_Init();
 80009ea:	f000 f91b 	bl	8000c24 <MX_RTC_Init>
  MX_TIM1_Init();
 80009ee:	f000 f9a5 	bl	8000d3c <MX_TIM1_Init>
  MX_TIM6_Init();
 80009f2:	f000 fa5d 	bl	8000eb0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80009f6:	f000 fa93 	bl	8000f20 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //timeDateInit();
  coast_lcd_init();
 80009fa:	f7ff fd55 	bl	80004a8 <coast_lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 80009fe:	484d      	ldr	r0, [pc, #308]	@ (8000b34 <main+0x160>)
 8000a00:	f003 fae6 	bl	8003fd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000a04:	484c      	ldr	r0, [pc, #304]	@ (8000b38 <main+0x164>)
 8000a06:	f003 fae3 	bl	8003fd0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (button_sound) {
 8000a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b3c <main+0x168>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d01f      	beq.n	8000a52 <main+0x7e>
		  /* frequency ： duration ：volume : htim1 */
		  play_note(460, 150, 50, htim1);
 8000a12:	4c4b      	ldr	r4, [pc, #300]	@ (8000b40 <main+0x16c>)
 8000a14:	4668      	mov	r0, sp
 8000a16:	1d23      	adds	r3, r4, #4
 8000a18:	2248      	movs	r2, #72	@ 0x48
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f004 fe50 	bl	80056c0 <memcpy>
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	2232      	movs	r2, #50	@ 0x32
 8000a24:	2196      	movs	r1, #150	@ 0x96
 8000a26:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000a2a:	f7ff fc7f 	bl	800032c <play_note>
		  play_note(300, 50, 50, htim1);
 8000a2e:	4c44      	ldr	r4, [pc, #272]	@ (8000b40 <main+0x16c>)
 8000a30:	4668      	mov	r0, sp
 8000a32:	1d23      	adds	r3, r4, #4
 8000a34:	2248      	movs	r2, #72	@ 0x48
 8000a36:	4619      	mov	r1, r3
 8000a38:	f004 fe42 	bl	80056c0 <memcpy>
 8000a3c:	6823      	ldr	r3, [r4, #0]
 8000a3e:	2232      	movs	r2, #50	@ 0x32
 8000a40:	2132      	movs	r1, #50	@ 0x32
 8000a42:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a46:	f7ff fc71 	bl	800032c <play_note>
		  button_sound = false;
 8000a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b3c <main+0x168>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	e011      	b.n	8000a76 <main+0xa2>
	  } else {
		  stop_sound(htim1);
 8000a52:	4e3b      	ldr	r6, [pc, #236]	@ (8000b40 <main+0x16c>)
 8000a54:	466d      	mov	r5, sp
 8000a56:	f106 0410 	add.w	r4, r6, #16
 8000a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000a6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a72:	f7ff fc49 	bl	8000308 <stop_sound>
	  }
	  if (button_vibration) {
 8000a76:	4b33      	ldr	r3, [pc, #204]	@ (8000b44 <main+0x170>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d004      	beq.n	8000a88 <main+0xb4>
		  generate_vibration();
 8000a7e:	f000 fe13 	bl	80016a8 <generate_vibration>
		  button_vibration = false;
 8000a82:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <main+0x170>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	  }
	  if (currentScreen != previousScreen) {
 8000a88:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <main+0x174>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b4c <main+0x178>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d025      	beq.n	8000ae4 <main+0x110>
	  	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fd9d 	bl	80005d8 <LCD_SendCmd>
	  	coast_asm_delay(2);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f7ff fb9e 	bl	80001e0 <coast_asm_delay>

	  	switch (currentScreen) {
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <main+0x174>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d002      	beq.n	8000ab4 <main+0xe0>
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d007      	beq.n	8000ac2 <main+0xee>
 8000ab2:	e00d      	b.n	8000ad0 <main+0xfc>
	  		case HOME:
	  			homePage(); // draw layout only
 8000ab4:	f7ff fc5e 	bl	8000374 <homePage>
	  			updateTime(1, 4);
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 fd96 	bl	80015ec <updateTime>
	  			break;
 8000ac0:	e006      	b.n	8000ad0 <main+0xfc>
	  		case TIME:
	  			timePage();
 8000ac2:	f000 fd53 	bl	800156c <timePage>
	  			updateTime(0, 4);
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 fd8f 	bl	80015ec <updateTime>
	  			break;
 8000ace:	bf00      	nop
	  	}
	  	previousScreen = currentScreen;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <main+0x174>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <main+0x178>)
 8000ad8:	701a      	strb	r2, [r3, #0]
	  	last_tick = HAL_GetTick();
 8000ada:	f000 fed5 	bl	8001888 <HAL_GetTick>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <main+0x17c>)
 8000ae2:	6013      	str	r3, [r2, #0]
	  }
	    HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, 1);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aea:	481a      	ldr	r0, [pc, #104]	@ (8000b54 <main+0x180>)
 8000aec:	f001 f9b0 	bl	8001e50 <HAL_GPIO_WritePin>
	  /* UPDATE TIME EVERY SECOND ELAPSED */
	  if ((HAL_GetTick() - last_tick) >= 1000) {
 8000af0:	f000 feca 	bl	8001888 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <main+0x17c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b00:	d383      	bcc.n	8000a0a <main+0x36>
	  	switch (currentScreen) {
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <main+0x174>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d002      	beq.n	8000b12 <main+0x13e>
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d005      	beq.n	8000b1c <main+0x148>
 8000b10:	e009      	b.n	8000b26 <main+0x152>
	  		case HOME:
	  			updateTime(1, 4);  // row 1 (second line), column 4
 8000b12:	2104      	movs	r1, #4
 8000b14:	2001      	movs	r0, #1
 8000b16:	f000 fd69 	bl	80015ec <updateTime>
	  			break;
 8000b1a:	e004      	b.n	8000b26 <main+0x152>
	  		case TIME:
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 fd64 	bl	80015ec <updateTime>
	  			break;
 8000b24:	bf00      	nop
	  	}
	  	last_tick += 1000;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <main+0x17c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000b2e:	4a08      	ldr	r2, [pc, #32]	@ (8000b50 <main+0x17c>)
 8000b30:	6013      	str	r3, [r2, #0]
	  if (button_sound) {
 8000b32:	e76a      	b.n	8000a0a <main+0x36>
 8000b34:	20000108 	.word	0x20000108
 8000b38:	20000154 	.word	0x20000154
 8000b3c:	200001d8 	.word	0x200001d8
 8000b40:	200000bc 	.word	0x200000bc
 8000b44:	200001d9 	.word	0x200001d9
 8000b48:	2000000a 	.word	0x2000000a
 8000b4c:	200001da 	.word	0x200001da
 8000b50:	200001a0 	.word	0x200001a0
 8000b54:	48000400 	.word	0x48000400

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0a6      	sub	sp, #152	@ 0x98
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b62:	2228      	movs	r2, #40	@ 0x28
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f004 fd76 	bl	8005658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2258      	movs	r2, #88	@ 0x58
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f004 fd68 	bl	8005658 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b90:	2310      	movs	r3, #16
 8000b92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000baa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 f977 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000bc8:	f000 fb49 	bl	800125e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000be2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000be6:	2101      	movs	r1, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	f002 f985 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000bf4:	f000 fb33 	bl	800125e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8000bf8:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8000bfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c02:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 fb36 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c16:	f000 fb22 	bl	800125e <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3798      	adds	r7, #152	@ 0x98
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b090      	sub	sp, #64	@ 0x40
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2228      	movs	r2, #40	@ 0x28
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 fd07 	bl	8005658 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d38 <MX_RTC_Init+0x114>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c50:	4b38      	ldr	r3, [pc, #224]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c56:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c58:	227f      	movs	r2, #127	@ 0x7f
 8000c5a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c5c:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c5e:	22ff      	movs	r2, #255	@ 0xff
 8000c60:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c62:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c68:	4b32      	ldr	r3, [pc, #200]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c74:	482f      	ldr	r0, [pc, #188]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000c76:	f002 fd1d 	bl	80036b4 <HAL_RTC_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000c80:	f000 faed 	bl	800125e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8000c84:	2308      	movs	r3, #8
 8000c86:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x30;
 8000c8a:	2330      	movs	r3, #48	@ 0x30
 8000c8c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4823      	ldr	r0, [pc, #140]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000ca8:	f002 fd87 	bl	80037ba <HAL_RTC_SetTime>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000cb2:	f000 fad4 	bl	800125e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x3;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8000cc8:	2325      	movs	r3, #37	@ 0x25
 8000cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000cd8:	f002 fe67 	bl	80039aa <HAL_RTC_SetDate>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000ce2:	f000 fabc 	bl	800125e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_RTC_Init+0x110>)
 8000d1e:	f002 ff17 	bl	8003b50 <HAL_RTC_SetAlarm>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000d28:	f000 fa99 	bl	800125e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3740      	adds	r7, #64	@ 0x40
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000009c 	.word	0x2000009c
 8000d38:	40002800 	.word	0x40002800

08000d3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09a      	sub	sp, #104	@ 0x68
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	222c      	movs	r2, #44	@ 0x2c
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 fc6e 	bl	8005658 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000d7e:	4a4b      	ldr	r2, [pc, #300]	@ (8000eac <MX_TIM1_Init+0x170>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000 -1;
 8000d82:	4b49      	ldr	r3, [pc, #292]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000d84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b47      	ldr	r3, [pc, #284]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 296;
 8000d90:	4b45      	ldr	r3, [pc, #276]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000d92:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000d96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b43      	ldr	r3, [pc, #268]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d9e:	4b42      	ldr	r3, [pc, #264]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b40      	ldr	r3, [pc, #256]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000daa:	483f      	ldr	r0, [pc, #252]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000dac:	f003 f8b8 	bl	8003f20 <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000db6:	f000 fa52 	bl	800125e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dc0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4838      	ldr	r0, [pc, #224]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000dc8:	f003 fd92 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000dd2:	f000 fa44 	bl	800125e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dd6:	4834      	ldr	r0, [pc, #208]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000dd8:	f003 f96a 	bl	80040b0 <HAL_TIM_PWM_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000de2:	f000 fa3c 	bl	800125e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000df6:	4619      	mov	r1, r3
 8000df8:	482b      	ldr	r0, [pc, #172]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000dfa:	f004 fadb 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000e04:	f000 fa2b 	bl	800125e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	@ 0x60
 8000e0a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481e      	ldr	r0, [pc, #120]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000e2e:	f003 fc4b 	bl	80046c8 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000e38:	f000 fa11 	bl	800125e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e40:	2208      	movs	r2, #8
 8000e42:	4619      	mov	r1, r3
 8000e44:	4818      	ldr	r0, [pc, #96]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000e46:	f003 fc3f 	bl	80046c8 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000e50:	f000 fa05 	bl	800125e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4807      	ldr	r0, [pc, #28]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000e8a:	f004 fb1f 	bl	80054cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000e94:	f000 f9e3 	bl	800125e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e98:	4803      	ldr	r0, [pc, #12]	@ (8000ea8 <MX_TIM1_Init+0x16c>)
 8000e9a:	f000 fa87 	bl	80013ac <HAL_TIM_MspPostInit>

}
 8000e9e:	bf00      	nop
 8000ea0:	3768      	adds	r7, #104	@ 0x68
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000bc 	.word	0x200000bc
 8000eac:	40012c00 	.word	0x40012c00

08000eb0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <MX_TIM6_Init+0x6c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000ec8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ecc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000ed6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000eda:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ee2:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000ee4:	f003 f81c 	bl	8003f20 <HAL_TIM_Base_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000eee:	f000 f9b6 	bl	800125e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <MX_TIM6_Init+0x68>)
 8000f00:	f004 fa58 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000f0a:	f000 f9a8 	bl	800125e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000108 	.word	0x20000108
 8000f1c:	40001000 	.word	0x40001000

08000f20 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f30:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f32:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <MX_TIM7_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f38:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 71;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f46:	2247      	movs	r2, #71	@ 0x47
 8000f48:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f52:	f002 ffe5 	bl	8003f20 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f5c:	f000 f97f 	bl	800125e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <MX_TIM7_Init+0x64>)
 8000f6e:	f004 fa21 	bl	80053b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f78:	f000 f971 	bl	800125e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000154 	.word	0x20000154
 8000f88:	40001400 	.word	0x40001400

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b77      	ldr	r3, [pc, #476]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a76      	ldr	r2, [pc, #472]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b74      	ldr	r3, [pc, #464]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fba:	4b71      	ldr	r3, [pc, #452]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	4a70      	ldr	r2, [pc, #448]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fc0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc4:	6153      	str	r3, [r2, #20]
 8000fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	4a6a      	ldr	r2, [pc, #424]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	6153      	str	r3, [r2, #20]
 8000fde:	4b68      	ldr	r3, [pc, #416]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b65      	ldr	r3, [pc, #404]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a64      	ldr	r2, [pc, #400]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b62      	ldr	r3, [pc, #392]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001002:	4b5f      	ldr	r3, [pc, #380]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a5e      	ldr	r2, [pc, #376]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b5c      	ldr	r3, [pc, #368]	@ (8001180 <MX_GPIO_Init+0x1f4>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 800101a:	2200      	movs	r2, #0
 800101c:	f640 71e1 	movw	r1, #4065	@ 0xfe1
 8001020:	4858      	ldr	r0, [pc, #352]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001022:	f000 ff15 	bl	8001e50 <HAL_GPIO_WritePin>
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|COILB_Pin|Control_RS_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f249 0120 	movw	r1, #36896	@ 0x9020
 800102c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001030:	f000 ff0e 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 8001034:	2200      	movs	r2, #0
 8001036:	f248 41bc 	movw	r1, #33980	@ 0x84bc
 800103a:	4853      	ldr	r0, [pc, #332]	@ (8001188 <MX_GPIO_Init+0x1fc>)
 800103c:	f000 ff08 	bl	8001e50 <HAL_GPIO_WritePin>
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Control_E_GPIO_Port, Control_E_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2104      	movs	r1, #4
 8001044:	4851      	ldr	r0, [pc, #324]	@ (800118c <MX_GPIO_Init+0x200>)
 8001046:	f000 ff03 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001050:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4848      	ldr	r0, [pc, #288]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001062:	f000 fd53 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin COILA_Pin Control_RW_Pin COILC_Pin
                           Data_D4_Pin Data_D5_Pin Data_D6_Pin Data_D7_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 8001066:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 800106a:	617b      	str	r3, [r7, #20]
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4841      	ldr	r0, [pc, #260]	@ (8001184 <MX_GPIO_Init+0x1f8>)
 8001080:	f000 fd44 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8001084:	2312      	movs	r3, #18
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001088:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109c:	f000 fd36 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010a0:	230c      	movs	r3, #12
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b0:	2307      	movs	r3, #7
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f000 fd25 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin COILB_Pin Control_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|COILB_Pin|Control_RS_Pin;
 80010c2:	f249 0320 	movw	r3, #36896	@ 0x9020
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010de:	f000 fd15 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 80010e2:	2301      	movs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010e6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4824      	ldr	r0, [pc, #144]	@ (8001188 <MX_GPIO_Init+0x1fc>)
 80010f8:	f000 fd08 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : COILD_Pin LED_D1_Pin SER_Data_IN_Pin LED_D2_Pin
                           LED_D2B4_Pin LED_D3_Pin RCLK_Latch_Pin */
  GPIO_InitStruct.Pin = COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 80010fc:	f248 43bc 	movw	r3, #33980	@ 0x84bc
 8001100:	617b      	str	r3, [r7, #20]
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001102:	2301      	movs	r3, #1
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	481c      	ldr	r0, [pc, #112]	@ (8001188 <MX_GPIO_Init+0x1fc>)
 8001116:	f000 fcf9 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_E_Pin */
  GPIO_InitStruct.Pin = Control_E_Pin;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_E_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4816      	ldr	r0, [pc, #88]	@ (800118c <MX_GPIO_Init+0x200>)
 8001132:	f000 fceb 	bl	8001b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2006      	movs	r0, #6
 800113c:	f000 fcaf 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001140:	2006      	movs	r0, #6
 8001142:	f000 fcc8 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2007      	movs	r0, #7
 800114c:	f000 fca7 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001150:	2007      	movs	r0, #7
 8001152:	f000 fcc0 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	200a      	movs	r0, #10
 800115c:	f000 fc9f 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001160:	200a      	movs	r0, #10
 8001162:	f000 fcb8 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2028      	movs	r0, #40	@ 0x28
 800116c:	f000 fc97 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001170:	2028      	movs	r0, #40	@ 0x28
 8001172:	f000 fcb0 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	48000800 	.word	0x48000800
 8001188:	48000400 	.word	0x48000400
 800118c:	48000c00 	.word	0x48000c00

08001190 <system_clock_setup>:

/* USER CODE BEGIN 4 */
void system_clock_setup() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b0a6      	sub	sp, #152	@ 0x98
 8001194:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800119a:	2228      	movs	r2, #40	@ 0x28
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fa5a 	bl	8005658 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2258      	movs	r2, #88	@ 0x58
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fa4c 	bl	8005658 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011c0:	2306      	movs	r3, #6
 80011c2:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ce:	2301      	movs	r3, #1
 80011d0:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe59 	bl	8001eb0 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <system_clock_setup+0x78>
	{
	Error_Handler();
 8001204:	f000 f82b 	bl	800125e <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001218:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fe67 	bl	8002ef8 <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <system_clock_setup+0xa4>
	{
	Error_Handler();
 8001230:	f000 f815 	bl	800125e <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8001234:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8001238:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800123a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800123e:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001240:	2300      	movs	r3, #0
 8001242:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f002 f818 	bl	800327c <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <system_clock_setup+0xc6>
	{
	Error_Handler();
 8001252:	f000 f804 	bl	800125e <Error_Handler>
	}
}
 8001256:	bf00      	nop
 8001258:	3798      	adds	r7, #152	@ 0x98
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001262:	b672      	cpsid	i
}
 8001264:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001266:	bf00      	nop
 8001268:	e7fd      	b.n	8001266 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <HAL_MspInit+0x44>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	4a0e      	ldr	r2, [pc, #56]	@ (80012b0 <HAL_MspInit+0x44>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6193      	str	r3, [r2, #24]
 800127e:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_MspInit+0x44>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_MspInit+0x44>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x44>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x44>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f000 fbf0 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <HAL_RTC_MspInit+0x44>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d111      	bne.n	80012ea <HAL_RTC_MspInit+0x36>
 80012c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012ca:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012d4:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012d6:	fab3 f383 	clz	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <HAL_RTC_MspInit+0x48>)
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	461a      	mov	r2, r3
 80012e6:	2301      	movs	r3, #1
 80012e8:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40002800 	.word	0x40002800
 80012fc:	10908100 	.word	0x10908100

08001300 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a23      	ldr	r2, [pc, #140]	@ (800139c <HAL_TIM_Base_MspInit+0x9c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10c      	bne.n	800132c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001312:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a22      	ldr	r2, [pc, #136]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 800132a:	e032      	b.n	8001392 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <HAL_TIM_Base_MspInit+0xa4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d114      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2036      	movs	r0, #54	@ 0x36
 8001354:	f000 fba3 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001358:	2036      	movs	r0, #54	@ 0x36
 800135a:	f000 fbbc 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 800135e:	e018      	b.n	8001392 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a10      	ldr	r2, [pc, #64]	@ (80013a8 <HAL_TIM_Base_MspInit+0xa8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d113      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	61d3      	str	r3, [r2, #28]
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2037      	movs	r0, #55	@ 0x37
 8001388:	f000 fb89 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800138c:	2037      	movs	r0, #55	@ 0x37
 800138e:	f000 fba2 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40001000 	.word	0x40001000
 80013a8:	40001400 	.word	0x40001400

080013ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a11      	ldr	r2, [pc, #68]	@ (8001410 <HAL_TIM_MspPostInit+0x64>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d11b      	bne.n	8001406 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <HAL_TIM_MspPostInit+0x68>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a10      	ldr	r2, [pc, #64]	@ (8001414 <HAL_TIM_MspPostInit+0x68>)
 80013d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b0e      	ldr	r3, [pc, #56]	@ (8001414 <HAL_TIM_MspPostInit+0x68>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013e6:	2304      	movs	r3, #4
 80013e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <HAL_TIM_MspPostInit+0x6c>)
 8001402:	f000 fb83 	bl	8001b0c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40012c00 	.word	0x40012c00
 8001414:	40021000 	.word	0x40021000
 8001418:	48000800 	.word	0x48000800

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <NMI_Handler+0x4>

08001424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <HardFault_Handler+0x4>

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <MemManage_Handler+0x4>

08001434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <UsageFault_Handler+0x4>

08001444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f000 f9f5 	bl	8001860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}

0800147a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 800147e:	2001      	movs	r0, #1
 8001480:	f000 fcfe 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800148c:	2002      	movs	r0, #2
 800148e:	f000 fcf7 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}

08001496 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 800149a:	2010      	movs	r0, #16
 800149c:	f000 fcf0 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014ac:	f000 fce8 	bl	8001e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <TIM6_DAC_IRQHandler+0x10>)
 80014ba:	f003 f803 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000108 	.word	0x20000108

080014c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <TIM7_IRQHandler+0x10>)
 80014ce:	f002 fff9 	bl	80044c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000154 	.word	0x20000154

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f004 f8ac 	bl	8005668 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20010000 	.word	0x20010000
 800153c:	00000400 	.word	0x00000400
 8001540:	200001dc 	.word	0x200001dc
 8001544:	20000330 	.word	0x20000330

08001548 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <SystemInit+0x20>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001552:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <SystemInit+0x20>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <timePage>:
#include <stdio.h>
#include "main.h"
#include "coast.h"
#include "lcd.h"

void timePage() {
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b08c      	sub	sp, #48	@ 0x30
 8001570:	af00      	add	r7, sp, #0

	char buff[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001572:	2200      	movs	r2, #0
 8001574:	4917      	ldr	r1, [pc, #92]	@ (80015d4 <timePage+0x68>)
 8001576:	4818      	ldr	r0, [pc, #96]	@ (80015d8 <timePage+0x6c>)
 8001578:	f002 f9b9 	bl	80038ee <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800157c:	2200      	movs	r2, #0
 800157e:	4917      	ldr	r1, [pc, #92]	@ (80015dc <timePage+0x70>)
 8001580:	4815      	ldr	r0, [pc, #84]	@ (80015d8 <timePage+0x6c>)
 8001582:	f002 fa96 	bl	8003ab2 <HAL_RTC_GetDate>

	char *weekDayMap [7] = {"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <timePage+0x74>)
 8001588:	463c      	mov	r4, r7
 800158a:	461d      	mov	r5, r3
 800158c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char *weekday = weekDayMap[sDate.WeekDay];
 8001598:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <timePage+0x70>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	3330      	adds	r3, #48	@ 0x30
 80015a0:	443b      	add	r3, r7
 80015a2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//uint8_t year = sDate.Year;
	sprintf(buff, "%s ", weekday);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ae:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <timePage+0x78>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f82f 	bl	8005614 <siprintf>

	LCD_SendStr(buff);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff f848 	bl	8000650 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 80015c0:	20c0      	movs	r0, #192	@ 0xc0
 80015c2:	f7ff f809 	bl	80005d8 <LCD_SendCmd>

	LCD_SendStr("ALARM   ");
 80015c6:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <timePage+0x7c>)
 80015c8:	f7ff f842 	bl	8000650 <LCD_SendStr>

}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	@ 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bdb0      	pop	{r4, r5, r7, pc}
 80015d4:	20000084 	.word	0x20000084
 80015d8:	2000009c 	.word	0x2000009c
 80015dc:	20000098 	.word	0x20000098
 80015e0:	08005fb4 	.word	0x08005fb4
 80015e4:	08005f88 	.word	0x08005f88
 80015e8:	08005f8c 	.word	0x08005f8c

080015ec <updateTime>:

void updateTime(uint8_t row, uint8_t col) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	4603      	mov	r3, r0
 80015f4:	460a      	mov	r2, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	71bb      	strb	r3, [r7, #6]
	char buff[8];  // Enough for HH:MM + null
	char dateBuff[8];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80015fc:	2200      	movs	r2, #0
 80015fe:	4925      	ldr	r1, [pc, #148]	@ (8001694 <updateTime+0xa8>)
 8001600:	4825      	ldr	r0, [pc, #148]	@ (8001698 <updateTime+0xac>)
 8001602:	f002 f974 	bl	80038ee <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001606:	2200      	movs	r2, #0
 8001608:	4924      	ldr	r1, [pc, #144]	@ (800169c <updateTime+0xb0>)
 800160a:	4823      	ldr	r0, [pc, #140]	@ (8001698 <updateTime+0xac>)
 800160c:	f002 fa51 	bl	8003ab2 <HAL_RTC_GetDate>

	uint8_t hours = sTime.Hours;
 8001610:	4b20      	ldr	r3, [pc, #128]	@ (8001694 <updateTime+0xa8>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = sTime.Minutes;
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <updateTime+0xa8>)
 8001618:	785b      	ldrb	r3, [r3, #1]
 800161a:	77bb      	strb	r3, [r7, #30]
	uint8_t seconds = sTime.Seconds;
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <updateTime+0xa8>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	777b      	strb	r3, [r7, #29]
	uint8_t day = sDate.Date;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <updateTime+0xb0>)
 8001624:	789b      	ldrb	r3, [r3, #2]
 8001626:	773b      	strb	r3, [r7, #28]
	uint8_t month = sDate.Month;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <updateTime+0xb0>)
 800162a:	785b      	ldrb	r3, [r3, #1]
 800162c:	76fb      	strb	r3, [r7, #27]
	uint8_t year = sDate.Year;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <updateTime+0xb0>)
 8001630:	78db      	ldrb	r3, [r3, #3]
 8001632:	76bb      	strb	r3, [r7, #26]

	// Move cursor to desired position (row 0 or 1)
	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <updateTime+0x52>
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	e000      	b.n	8001640 <updateTime+0x54>
 800163e:	23c0      	movs	r3, #192	@ 0xc0
 8001640:	767b      	strb	r3, [r7, #25]
	LCD_SendCmd(baseCmd + col);
 8001642:	7e7a      	ldrb	r2, [r7, #25]
 8001644:	79bb      	ldrb	r3, [r7, #6]
 8001646:	4413      	add	r3, r2
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ffc4 	bl	80005d8 <LCD_SendCmd>

	sprintf(buff, "%02d:%02d:%02d", hours, minutes, seconds);
 8001650:	7ffa      	ldrb	r2, [r7, #31]
 8001652:	7fb9      	ldrb	r1, [r7, #30]
 8001654:	7f7b      	ldrb	r3, [r7, #29]
 8001656:	f107 0010 	add.w	r0, r7, #16
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	460b      	mov	r3, r1
 800165e:	4910      	ldr	r1, [pc, #64]	@ (80016a0 <updateTime+0xb4>)
 8001660:	f003 ffd8 	bl	8005614 <siprintf>
	LCD_SendStr(buff);
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fff1 	bl	8000650 <LCD_SendStr>

	sprintf(dateBuff, "", day, month, year);
 800166e:	7f3a      	ldrb	r2, [r7, #28]
 8001670:	7ef9      	ldrb	r1, [r7, #27]
 8001672:	7ebb      	ldrb	r3, [r7, #26]
 8001674:	f107 0008 	add.w	r0, r7, #8
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	460b      	mov	r3, r1
 800167c:	4909      	ldr	r1, [pc, #36]	@ (80016a4 <updateTime+0xb8>)
 800167e:	f003 ffc9 	bl	8005614 <siprintf>
	LCD_SendStr(dateBuff);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ffe2 	bl	8000650 <LCD_SendStr>
}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000084 	.word	0x20000084
 8001698:	2000009c 	.word	0x2000009c
 800169c:	20000098 	.word	0x20000098
 80016a0:	08005fd0 	.word	0x08005fd0
 80016a4:	08005fe0 	.word	0x08005fe0

080016a8 <generate_vibration>:
#include "vibration.h"
//uint16_t coil_port[4] = {COILA_GPIO_Port, COILB_GPIO_Port, COILC_GPIO_Port, COILD_GPIO_Port};
//uint16_t coil_pin[4] = {COILA_Pin, COILB_Pin, COILC_Pin, COILD_Pin};
extern void coast_asm_delay(uint32_t milliseconds);

void generate_vibration(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
//	for (int i = 0; i < 4; i++) {
//		HAL_GPIO_WritePin(coil_port[i], coil_pin[i], GPIO_PIN_RESET);
//	}
	// 1
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	4831      	ldr	r0, [pc, #196]	@ (8001778 <generate_vibration+0xd0>)
 80016b2:	f000 fbcd 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f000 fbc6 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	482b      	ldr	r0, [pc, #172]	@ (8001778 <generate_vibration+0xd0>)
 80016ca:	f000 fbc1 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2104      	movs	r1, #4
 80016d2:	482a      	ldr	r0, [pc, #168]	@ (800177c <generate_vibration+0xd4>)
 80016d4:	f000 fbbc 	bl	8001e50 <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 80016d8:	2001      	movs	r0, #1
 80016da:	f7fe fd81 	bl	80001e0 <coast_asm_delay>

	// 2
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 80016de:	2201      	movs	r2, #1
 80016e0:	2120      	movs	r1, #32
 80016e2:	4825      	ldr	r0, [pc, #148]	@ (8001778 <generate_vibration+0xd0>)
 80016e4:	f000 fbb4 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f2:	f000 fbad 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	481f      	ldr	r0, [pc, #124]	@ (8001778 <generate_vibration+0xd0>)
 80016fc:	f000 fba8 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2104      	movs	r1, #4
 8001704:	481d      	ldr	r0, [pc, #116]	@ (800177c <generate_vibration+0xd4>)
 8001706:	f000 fba3 	bl	8001e50 <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f7fe fd68 	bl	80001e0 <coast_asm_delay>

	// 3
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 1);
 8001710:	2201      	movs	r2, #1
 8001712:	2120      	movs	r1, #32
 8001714:	4818      	ldr	r0, [pc, #96]	@ (8001778 <generate_vibration+0xd0>)
 8001716:	f000 fb9b 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001720:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001724:	f000 fb94 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2180      	movs	r1, #128	@ 0x80
 800172c:	4812      	ldr	r0, [pc, #72]	@ (8001778 <generate_vibration+0xd0>)
 800172e:	f000 fb8f 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	2104      	movs	r1, #4
 8001736:	4811      	ldr	r0, [pc, #68]	@ (800177c <generate_vibration+0xd4>)
 8001738:	f000 fb8a 	bl	8001e50 <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f7fe fd4f 	bl	80001e0 <coast_asm_delay>
	// 4
	HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	480c      	ldr	r0, [pc, #48]	@ (8001778 <generate_vibration+0xd0>)
 8001748:	f000 fb82 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001752:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001756:	f000 fb7b 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, 1);
 800175a:	2201      	movs	r2, #1
 800175c:	2180      	movs	r1, #128	@ 0x80
 800175e:	4806      	ldr	r0, [pc, #24]	@ (8001778 <generate_vibration+0xd0>)
 8001760:	f000 fb76 	bl	8001e50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	2104      	movs	r1, #4
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <generate_vibration+0xd4>)
 800176a:	f000 fb71 	bl	8001e50 <HAL_GPIO_WritePin>
	coast_asm_delay(1);
 800176e:	2001      	movs	r0, #1
 8001770:	f7fe fd36 	bl	80001e0 <coast_asm_delay>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	48000800 	.word	0x48000800
 800177c:	48000400 	.word	0x48000400

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff fee0 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <LoopForever+0x6>)
  ldr r1, =_edata
 800178a:	490d      	ldr	r1, [pc, #52]	@ (80017c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <LoopForever+0xe>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a0:	4c0a      	ldr	r4, [pc, #40]	@ (80017cc <LoopForever+0x16>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f003 ff61 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7ff f90f 	bl	80009d4 <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017c4:	08006058 	.word	0x08006058
  ldr r2, =_sbss
 80017c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017cc:	2000032c 	.word	0x2000032c

080017d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_2_IRQHandler>
	...

080017d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_Init+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <HAL_Init+0x28>)
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 f94f 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f808 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f0:	f7ff fd3c 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40022000 	.word	0x40022000

08001800 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_InitTick+0x54>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x58>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001816:	fbb3 f3f1 	udiv	r3, r3, r1
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f967 	bl	8001af2 <HAL_SYSTICK_Config>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e00e      	b.n	800184c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b0f      	cmp	r3, #15
 8001832:	d80a      	bhi.n	800184a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	2200      	movs	r2, #0
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f000 f92f 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001840:	4a06      	ldr	r2, [pc, #24]	@ (800185c <HAL_InitTick+0x5c>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	e000      	b.n	800184c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000000c 	.word	0x2000000c
 8001858:	20000014 	.word	0x20000014
 800185c:	20000010 	.word	0x20000010

08001860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_IncTick+0x20>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x24>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4413      	add	r3, r2
 8001870:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <HAL_IncTick+0x24>)
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000014 	.word	0x20000014
 8001884:	200001e0 	.word	0x200001e0

08001888 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;  
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <HAL_GetTick+0x14>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200001e0 	.word	0x200001e0

080018a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff ffee 	bl	8001888 <HAL_GetTick>
 80018ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d005      	beq.n	80018c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ba:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_Delay+0x44>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018c6:	bf00      	nop
 80018c8:	f7ff ffde 	bl	8001888 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d8f7      	bhi.n	80018c8 <HAL_Delay+0x28>
  {
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000014 	.word	0x20000014

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	@ (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	@ (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	@ (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e160      	b.n	8001dde <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8152 	beq.w	8001dd8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x40>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 0201 	and.w	r2, r3, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d017      	beq.n	8001bea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d123      	bne.n	8001c3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	6939      	ldr	r1, [r7, #16]
 8001c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4013      	ands	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0203 	and.w	r2, r3, #3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80ac 	beq.w	8001dd8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c80:	4b5e      	ldr	r3, [pc, #376]	@ (8001dfc <HAL_GPIO_Init+0x2f0>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a5d      	ldr	r2, [pc, #372]	@ (8001dfc <HAL_GPIO_Init+0x2f0>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dfc <HAL_GPIO_Init+0x2f0>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <HAL_GPIO_Init+0x2f4>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cc2:	d025      	beq.n	8001d10 <HAL_GPIO_Init+0x204>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e04 <HAL_GPIO_Init+0x2f8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d01f      	beq.n	8001d0c <HAL_GPIO_Init+0x200>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a4e      	ldr	r2, [pc, #312]	@ (8001e08 <HAL_GPIO_Init+0x2fc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d019      	beq.n	8001d08 <HAL_GPIO_Init+0x1fc>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8001e0c <HAL_GPIO_Init+0x300>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <HAL_GPIO_Init+0x1f8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a4c      	ldr	r2, [pc, #304]	@ (8001e10 <HAL_GPIO_Init+0x304>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00d      	beq.n	8001d00 <HAL_GPIO_Init+0x1f4>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a4b      	ldr	r2, [pc, #300]	@ (8001e14 <HAL_GPIO_Init+0x308>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_GPIO_Init+0x1f0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4a      	ldr	r2, [pc, #296]	@ (8001e18 <HAL_GPIO_Init+0x30c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_GPIO_Init+0x1ec>
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	e00c      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	e00a      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	e008      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001d04:	2303      	movs	r3, #3
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x206>
 8001d10:	2300      	movs	r3, #0
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d22:	4937      	ldr	r1, [pc, #220]	@ (8001e00 <HAL_GPIO_Init+0x2f4>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d30:	4b3a      	ldr	r3, [pc, #232]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d54:	4a31      	ldr	r2, [pc, #196]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5a:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7e:	4a27      	ldr	r2, [pc, #156]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d84:	4b25      	ldr	r3, [pc, #148]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <HAL_GPIO_Init+0x310>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f ae97 	bne.w	8001b1c <HAL_GPIO_Init+0x10>
  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	48000c00 	.word	0x48000c00
 8001e10:	48001000 	.word	0x48001000
 8001e14:	48001400 	.word	0x48001400
 8001e18:	48001800 	.word	0x48001800
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
 8001e3c:	e001      	b.n	8001e42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e96:	4a05      	ldr	r2, [pc, #20]	@ (8001eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fbf8 	bl	8000694 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f001 b80a 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8161 	beq.w	80021ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eec:	4bae      	ldr	r3, [pc, #696]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d00c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef8:	4bab      	ldr	r3, [pc, #684]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d157      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x104>
 8001f04:	4ba8      	ldr	r3, [pc, #672]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f10:	d150      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x104>
 8001f12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f16:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8001f26:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f32:	d802      	bhi.n	8001f3a <HAL_RCC_OscConfig+0x8a>
 8001f34:	4b9c      	ldr	r3, [pc, #624]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0xb6>
 8001f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f52:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001f56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001f62:	4b91      	ldr	r3, [pc, #580]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f6a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001f6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001f7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8108 	beq.w	80021ac <HAL_RCC_OscConfig+0x2fc>
 8001f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fa0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 80ff 	bne.w	80021ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f000 bf9b 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x124>
 8001fc6:	4b78      	ldr	r3, [pc, #480]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a77      	ldr	r2, [pc, #476]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e036      	b.n	8002042 <HAL_RCC_OscConfig+0x192>
 8001fd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10c      	bne.n	8001ffe <HAL_RCC_OscConfig+0x14e>
 8001fe4:	4b70      	ldr	r3, [pc, #448]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6f      	ldr	r2, [pc, #444]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b6d      	ldr	r3, [pc, #436]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6c      	ldr	r2, [pc, #432]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e021      	b.n	8002042 <HAL_RCC_OscConfig+0x192>
 8001ffe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002002:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800200e:	d10c      	bne.n	800202a <HAL_RCC_OscConfig+0x17a>
 8002010:	4b65      	ldr	r3, [pc, #404]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a64      	ldr	r2, [pc, #400]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002016:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b62      	ldr	r3, [pc, #392]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a61      	ldr	r2, [pc, #388]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	e00b      	b.n	8002042 <HAL_RCC_OscConfig+0x192>
 800202a:	4b5f      	ldr	r3, [pc, #380]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5e      	ldr	r2, [pc, #376]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b5c      	ldr	r3, [pc, #368]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a5b      	ldr	r2, [pc, #364]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800203c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002040:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002042:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002046:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d054      	beq.n	80020fc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fc19 	bl	8001888 <HAL_GetTick>
 8002056:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fc14 	bl	8001888 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b64      	cmp	r3, #100	@ 0x64
 800206a:	d902      	bls.n	8002072 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	f000 bf3c 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
 8002072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002076:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002086:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b3f      	cmp	r3, #63	@ 0x3f
 8002092:	d802      	bhi.n	800209a <HAL_RCC_OscConfig+0x1ea>
 8002094:	4b44      	ldr	r3, [pc, #272]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e015      	b.n	80020c6 <HAL_RCC_OscConfig+0x216>
 800209a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800209e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80020ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80020b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80020c2:	4b39      	ldr	r3, [pc, #228]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020ca:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80020ce:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80020d2:	fa92 f2a2 	rbit	r2, r2
 80020d6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80020da:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80020de:	fab2 f282 	clz	r2, r2
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	f042 0220 	orr.w	r2, r2, #32
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	f002 021f 	and.w	r2, r2, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f202 	lsl.w	r2, r1, r2
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0b0      	beq.n	800205c <HAL_RCC_OscConfig+0x1ac>
 80020fa:	e058      	b.n	80021ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff fbc4 	bl	8001888 <HAL_GetTick>
 8002100:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002104:	e00a      	b.n	800211c <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002106:	f7ff fbbf 	bl	8001888 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d902      	bls.n	800211c <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	f000 bee7 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
 800211c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002120:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8002130:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b3f      	cmp	r3, #63	@ 0x3f
 800213c:	d802      	bhi.n	8002144 <HAL_RCC_OscConfig+0x294>
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	e015      	b.n	8002170 <HAL_RCC_OscConfig+0x2c0>
 8002144:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002148:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800215c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002160:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800216c:	4b0e      	ldr	r3, [pc, #56]	@ (80021a8 <HAL_RCC_OscConfig+0x2f8>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002174:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002178:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002184:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002188:	fab2 f282 	clz	r2, r2
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	f042 0220 	orr.w	r2, r2, #32
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	f002 021f 	and.w	r2, r2, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f202 	lsl.w	r2, r1, r2
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1b0      	bne.n	8002106 <HAL_RCC_OscConfig+0x256>
 80021a4:	e003      	b.n	80021ae <HAL_RCC_OscConfig+0x2fe>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 816d 	beq.w	800249e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021c4:	4bcd      	ldr	r3, [pc, #820]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00c      	beq.n	80021ea <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021d0:	4bca      	ldr	r3, [pc, #808]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d16e      	bne.n	80022ba <HAL_RCC_OscConfig+0x40a>
 80021dc:	4bc7      	ldr	r3, [pc, #796]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80021e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021e8:	d167      	bne.n	80022ba <HAL_RCC_OscConfig+0x40a>
 80021ea:	2302      	movs	r3, #2
 80021ec:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80021fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b3f      	cmp	r3, #63	@ 0x3f
 8002208:	d802      	bhi.n	8002210 <HAL_RCC_OscConfig+0x360>
 800220a:	4bbc      	ldr	r3, [pc, #752]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	e013      	b.n	8002238 <HAL_RCC_OscConfig+0x388>
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002222:	2302      	movs	r3, #2
 8002224:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002228:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002234:	4bb1      	ldr	r3, [pc, #708]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002238:	2202      	movs	r2, #2
 800223a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800223e:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002242:	fa92 f2a2 	rbit	r2, r2
 8002246:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800224a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800224e:	fab2 f282 	clz	r2, r2
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	f042 0220 	orr.w	r2, r2, #32
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	f002 021f 	and.w	r2, r2, #31
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	4013      	ands	r3, r2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCC_OscConfig+0x3d0>
 800226a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800226e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 be35 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b9e      	ldr	r3, [pc, #632]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002288:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800228c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	21f8      	movs	r1, #248	@ 0xf8
 8002296:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800229e:	fa91 f1a1 	rbit	r1, r1
 80022a2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80022a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80022aa:	fab1 f181 	clz	r1, r1
 80022ae:	b2c9      	uxtb	r1, r1
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4992      	ldr	r1, [pc, #584]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b8:	e0f1      	b.n	800249e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8083 	beq.w	80023d2 <HAL_RCC_OscConfig+0x522>
 80022cc:	2301      	movs	r3, #1
 80022ce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80022de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff fac6 	bl	8001888 <HAL_GetTick>
 80022fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7ff fac1 	bl	8001888 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d902      	bls.n	8002318 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	f000 bde9 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
 8002318:	2302      	movs	r3, #2
 800231a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800232a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b3f      	cmp	r3, #63	@ 0x3f
 8002336:	d802      	bhi.n	800233e <HAL_RCC_OscConfig+0x48e>
 8002338:	4b70      	ldr	r3, [pc, #448]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e013      	b.n	8002366 <HAL_RCC_OscConfig+0x4b6>
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002350:	2302      	movs	r3, #2
 8002352:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002356:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002362:	4b66      	ldr	r3, [pc, #408]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	2202      	movs	r2, #2
 8002368:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800236c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002370:	fa92 f2a2 	rbit	r2, r2
 8002374:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002378:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f042 0220 	orr.w	r2, r2, #32
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f002 021f 	and.w	r2, r2, #31
 800238c:	2101      	movs	r1, #1
 800238e:	fa01 f202 	lsl.w	r2, r1, r2
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0b4      	beq.n	8002302 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b58      	ldr	r3, [pc, #352]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	21f8      	movs	r1, #248	@ 0xf8
 80023ae:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80023b6:	fa91 f1a1 	rbit	r1, r1
 80023ba:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80023be:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80023c2:	fab1 f181 	clz	r1, r1
 80023c6:	b2c9      	uxtb	r1, r1
 80023c8:	408b      	lsls	r3, r1
 80023ca:	494c      	ldr	r1, [pc, #304]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e065      	b.n	800249e <HAL_RCC_OscConfig+0x5ee>
 80023d2:	2301      	movs	r3, #1
 80023d4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80023e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	fab3 f383 	clz	r3, r3
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023f2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	2300      	movs	r3, #0
 80023fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fa43 	bl	8001888 <HAL_GetTick>
 8002402:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7ff fa3e 	bl	8001888 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d902      	bls.n	800241e <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	f000 bd66 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
 800241e:	2302      	movs	r3, #2
 8002420:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002430:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b3f      	cmp	r3, #63	@ 0x3f
 800243c:	d802      	bhi.n	8002444 <HAL_RCC_OscConfig+0x594>
 800243e:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e013      	b.n	800246c <HAL_RCC_OscConfig+0x5bc>
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800245c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002468:	4b24      	ldr	r3, [pc, #144]	@ (80024fc <HAL_RCC_OscConfig+0x64c>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	2202      	movs	r2, #2
 800246e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002472:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002476:	fa92 f2a2 	rbit	r2, r2
 800247a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800247e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	f002 021f 	and.w	r2, r2, #31
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	4013      	ands	r3, r2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1b4      	bne.n	8002408 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8119 	beq.w	80026e6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8082 	beq.w	80025ca <HAL_RCC_OscConfig+0x71a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80024d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_RCC_OscConfig+0x650>)
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	461a      	mov	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f0:	f7ff f9ca 	bl	8001888 <HAL_GetTick>
 80024f4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f8:	e00f      	b.n	800251a <HAL_RCC_OscConfig+0x66a>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002504:	f7ff f9c0 	bl	8001888 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d902      	bls.n	800251a <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	f000 bce8 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
 800251a:	2302      	movs	r3, #2
 800251c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002524:	fa93 f2a3 	rbit	r2, r3
 8002528:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800253a:	2202      	movs	r2, #2
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800255e:	2202      	movs	r2, #2
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002566:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002574:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002578:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4bb0      	ldr	r3, [pc, #704]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 800257c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002586:	2102      	movs	r1, #2
 8002588:	6019      	str	r1, [r3, #0]
 800258a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800258e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f1a3 	rbit	r1, r3
 8002598:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025a0:	6019      	str	r1, [r3, #0]
  return result;
 80025a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	2101      	movs	r1, #1
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d09d      	beq.n	8002504 <HAL_RCC_OscConfig+0x654>
 80025c8:	e08d      	b.n	80026e6 <HAL_RCC_OscConfig+0x836>
 80025ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025da:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	fa93 f2a3 	rbit	r2, r3
 80025e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025ec:	601a      	str	r2, [r3, #0]
  return result;
 80025ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025f6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	4b8f      	ldr	r3, [pc, #572]	@ (8002840 <HAL_RCC_OscConfig+0x990>)
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	461a      	mov	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7ff f93c 	bl	8001888 <HAL_GetTick>
 8002610:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002616:	f7ff f937 	bl	8001888 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d902      	bls.n	800262c <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	f000 bc5f 	b.w	8002eea <HAL_RCC_OscConfig+0x103a>
 800262c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002630:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800263c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800264a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002654:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002658:	2202      	movs	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002678:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002684:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002692:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002696:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002698:	4b68      	ldr	r3, [pc, #416]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 800269a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800269c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026a4:	2102      	movs	r1, #2
 80026a6:	6019      	str	r1, [r3, #0]
 80026a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f1a3 	rbit	r1, r3
 80026b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ba:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026be:	6019      	str	r1, [r3, #0]
  return result;
 80026c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fab3 f383 	clz	r3, r3
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d197      	bne.n	8002616 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 819c 	beq.w	8002a34 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b4e      	ldr	r3, [pc, #312]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d116      	bne.n	800273c <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a4a      	ldr	r2, [pc, #296]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b48      	ldr	r3, [pc, #288]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b41      	ldr	r3, [pc, #260]	@ (8002844 <HAL_RCC_OscConfig+0x994>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d11a      	bne.n	800277e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002748:	4b3e      	ldr	r3, [pc, #248]	@ (8002844 <HAL_RCC_OscConfig+0x994>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3d      	ldr	r2, [pc, #244]	@ (8002844 <HAL_RCC_OscConfig+0x994>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002752:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002754:	f7ff f898 	bl	8001888 <HAL_GetTick>
 8002758:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275c:	e009      	b.n	8002772 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7ff f893 	bl	8001888 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e3bb      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <HAL_RCC_OscConfig+0x994>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ef      	beq.n	800275e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002782:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d106      	bne.n	800279c <HAL_RCC_OscConfig+0x8ec>
 800278e:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4a2a      	ldr	r2, [pc, #168]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	e035      	b.n	8002808 <HAL_RCC_OscConfig+0x958>
 800279c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x916>
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a22      	ldr	r2, [pc, #136]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	4b20      	ldr	r3, [pc, #128]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a1f      	ldr	r2, [pc, #124]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	e020      	b.n	8002808 <HAL_RCC_OscConfig+0x958>
 80027c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x940>
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a18      	ldr	r2, [pc, #96]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	6213      	str	r3, [r2, #32]
 80027e2:	4b16      	ldr	r3, [pc, #88]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a15      	ldr	r2, [pc, #84]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0x958>
 80027f0:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a11      	ldr	r2, [pc, #68]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <HAL_RCC_OscConfig+0x98c>)
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002808:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800280c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8085 	beq.w	8002924 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7ff f835 	bl	8001888 <HAL_GetTick>
 800281e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002822:	e011      	b.n	8002848 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002824:	f7ff f830 	bl	8001888 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d907      	bls.n	8002848 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e356      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
 800283c:	40021000 	.word	0x40021000
 8002840:	10908120 	.word	0x10908120
 8002844:	40007000 	.word	0x40007000
 8002848:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800284c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002850:	2202      	movs	r2, #2
 8002852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002858:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002870:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002874:	2202      	movs	r2, #2
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800287c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800288a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800288e:	601a      	str	r2, [r3, #0]
  return result;
 8002890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002894:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002898:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_OscConfig+0xa00>
 80028aa:	4b98      	ldr	r3, [pc, #608]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	e013      	b.n	80028d8 <HAL_RCC_OscConfig+0xa28>
 80028b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028b8:	2202      	movs	r2, #2
 80028ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	fa93 f2a3 	rbit	r2, r3
 80028ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ce:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	4b8d      	ldr	r3, [pc, #564]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028e0:	2102      	movs	r1, #2
 80028e2:	6011      	str	r1, [r2, #0]
 80028e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028e8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	fa92 f1a2 	rbit	r1, r2
 80028f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80028f6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80028fa:	6011      	str	r1, [r2, #0]
  return result;
 80028fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002900:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	fab2 f282 	clz	r2, r2
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	f002 021f 	and.w	r2, r2, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f202 	lsl.w	r2, r1, r2
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d080      	beq.n	8002824 <HAL_RCC_OscConfig+0x974>
 8002922:	e07d      	b.n	8002a20 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fe ffb0 	bl	8001888 <HAL_GetTick>
 8002928:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	e00b      	b.n	8002946 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe ffab 	bl	8001888 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e2d1      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
 8002946:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800294a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002956:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002964:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800296e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f2a3 	rbit	r2, r3
 8002984:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002988:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800298c:	601a      	str	r2, [r3, #0]
  return result;
 800298e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002992:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002996:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002998:	fab3 f383 	clz	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_OscConfig+0xafe>
 80029a8:	4b58      	ldr	r3, [pc, #352]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	e013      	b.n	80029d6 <HAL_RCC_OscConfig+0xb26>
 80029ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029b6:	2202      	movs	r2, #2
 80029b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029cc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029da:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029de:	2102      	movs	r1, #2
 80029e0:	6011      	str	r1, [r2, #0]
 80029e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	fa92 f1a2 	rbit	r1, r2
 80029f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029f4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80029f8:	6011      	str	r1, [r2, #0]
  return result;
 80029fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80029fe:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	fab2 f282 	clz	r2, r2
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	f002 021f 	and.w	r2, r2, #31
 8002a14:	2101      	movs	r1, #1
 8002a16:	fa01 f202 	lsl.w	r2, r1, r2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d186      	bne.n	800292e <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a20:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a28:	4b38      	ldr	r3, [pc, #224]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4a37      	ldr	r2, [pc, #220]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8251 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a46:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	f000 820f 	beq.w	8002e72 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f040 8165 	bne.w	8002d30 <HAL_RCC_OscConfig+0xe80>
 8002a66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a6a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a78:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a86:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a8a:	601a      	str	r2, [r3, #0]
  return result;
 8002a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002aa0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe feec 	bl	8001888 <HAL_GetTick>
 8002ab0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	e009      	b.n	8002aca <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab6:	f7fe fee7 	bl	8001888 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e20f      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
 8002aca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ace:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ad2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002adc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fa93 f2a3 	rbit	r2, r3
 8002ae6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002aee:	601a      	str	r2, [r3, #0]
  return result;
 8002af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002af8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b02:	d805      	bhi.n	8002b10 <HAL_RCC_OscConfig+0xc60>
 8002b04:	4b01      	ldr	r3, [pc, #4]	@ (8002b0c <HAL_RCC_OscConfig+0xc5c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e02a      	b.n	8002b60 <HAL_RCC_OscConfig+0xcb0>
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b14:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b22:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	fa93 f2a3 	rbit	r2, r3
 8002b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b30:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b48:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	fa93 f2a3 	rbit	r2, r3
 8002b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b56:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4bca      	ldr	r3, [pc, #808]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b64:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b68:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b6c:	6011      	str	r1, [r2, #0]
 8002b6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b72:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	fa92 f1a2 	rbit	r1, r2
 8002b7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b80:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b84:	6011      	str	r1, [r2, #0]
  return result;
 8002b86:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b8a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	fab2 f282 	clz	r2, r2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	f042 0220 	orr.w	r2, r2, #32
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f002 021f 	and.w	r2, r2, #31
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d184      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bac:	4bb6      	ldr	r3, [pc, #728]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	f023 020f 	bic.w	r2, r3, #15
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	49b1      	ldr	r1, [pc, #708]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002bc6:	4bb0      	ldr	r3, [pc, #704]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002bce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6a19      	ldr	r1, [r3, #32]
 8002bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	430b      	orrs	r3, r1
 8002be8:	49a7      	ldr	r1, [pc, #668]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
 8002bee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bf6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c12:	601a      	str	r2, [r3, #0]
  return result;
 8002c14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c18:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c1c:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c28:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	461a      	mov	r2, r3
 8002c30:	2301      	movs	r3, #1
 8002c32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fe fe28 	bl	8001888 <HAL_GetTick>
 8002c38:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe fe23 	bl	8001888 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e14b      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
 8002c52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c56:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c64:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	fa93 f2a3 	rbit	r2, r3
 8002c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c72:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c76:	601a      	str	r2, [r3, #0]
  return result;
 8002c78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c7c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c8a:	d802      	bhi.n	8002c92 <HAL_RCC_OscConfig+0xde2>
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	e027      	b.n	8002ce2 <HAL_RCC_OscConfig+0xe32>
 8002c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c96:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cbc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002cc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cca:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	fa93 f2a3 	rbit	r2, r3
 8002cd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cd8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	4b6a      	ldr	r3, [pc, #424]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ce6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cee:	6011      	str	r1, [r2, #0]
 8002cf0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cf4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	fa92 f1a2 	rbit	r1, r2
 8002cfe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d02:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002d06:	6011      	str	r1, [r2, #0]
  return result;
 8002d08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d0c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f042 0220 	orr.w	r2, r2, #32
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	f002 021f 	and.w	r2, r2, #31
 8002d22:	2101      	movs	r1, #1
 8002d24:	fa01 f202 	lsl.w	r2, r1, r2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d087      	beq.n	8002c3e <HAL_RCC_OscConfig+0xd8e>
 8002d2e:	e0db      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1038>
 8002d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d34:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d42:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fa93 f2a3 	rbit	r2, r3
 8002d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d50:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d54:	601a      	str	r2, [r3, #0]
  return result;
 8002d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d5e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d6a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	461a      	mov	r2, r3
 8002d72:	2300      	movs	r3, #0
 8002d74:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe fd87 	bl	8001888 <HAL_GetTick>
 8002d7a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7e:	e009      	b.n	8002d94 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fd82 	bl	8001888 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0aa      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002db8:	601a      	str	r2, [r3, #0]
  return result;
 8002dba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dbe:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002dc2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b3f      	cmp	r3, #63	@ 0x3f
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_RCC_OscConfig+0xf24>
 8002dce:	4b2e      	ldr	r3, [pc, #184]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e027      	b.n	8002e24 <HAL_RCC_OscConfig+0xf74>
 8002dd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dfe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	fa93 f2a3 	rbit	r2, r3
 8002e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e1a:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_RCC_OscConfig+0xfd8>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e28:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e30:	6011      	str	r1, [r2, #0]
 8002e32:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e36:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	fa92 f1a2 	rbit	r1, r2
 8002e40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e44:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e48:	6011      	str	r1, [r2, #0]
  return result;
 8002e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e4e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	fab2 f282 	clz	r2, r2
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	f042 0220 	orr.w	r2, r2, #32
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	f002 021f 	and.w	r2, r2, #31
 8002e64:	2101      	movs	r1, #1
 8002e66:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d187      	bne.n	8002d80 <HAL_RCC_OscConfig+0xed0>
 8002e70:	e03a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e76:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d104      	bne.n	8002e8c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e031      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <HAL_RCC_OscConfig+0x1044>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <HAL_RCC_OscConfig+0x1044>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002ea0:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002ea4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ea8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d117      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002eb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002eb8:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ebc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ec0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002ecc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b09e      	sub	sp, #120	@ 0x78
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e154      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f10:	4b89      	ldr	r3, [pc, #548]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d910      	bls.n	8002f40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b86      	ldr	r3, [pc, #536]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 0207 	bic.w	r2, r3, #7
 8002f26:	4984      	ldr	r1, [pc, #528]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b82      	ldr	r3, [pc, #520]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e13c      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4978      	ldr	r1, [pc, #480]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 80cd 	beq.w	8003106 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d137      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xec>
 8002f74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f84:	fab3 f383 	clz	r3, r3
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f8c:	d802      	bhi.n	8002f94 <HAL_RCC_ClockConfig+0x9c>
 8002f8e:	4b6b      	ldr	r3, [pc, #428]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	e00f      	b.n	8002fb4 <HAL_RCC_ClockConfig+0xbc>
 8002f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8002fa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fb0:	4b62      	ldr	r3, [pc, #392]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002fb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fbc:	fa92 f2a2 	rbit	r2, r2
 8002fc0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002fc2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fc4:	fab2 f282 	clz	r2, r2
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f042 0220 	orr.w	r2, r2, #32
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f002 021f 	and.w	r2, r2, #31
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d171      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ea      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d137      	bne.n	800305c <HAL_RCC_ClockConfig+0x164>
 8002fec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ff0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b3f      	cmp	r3, #63	@ 0x3f
 8003004:	d802      	bhi.n	800300c <HAL_RCC_ClockConfig+0x114>
 8003006:	4b4d      	ldr	r3, [pc, #308]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e00f      	b.n	800302c <HAL_RCC_ClockConfig+0x134>
 800300c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003010:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	647b      	str	r3, [r7, #68]	@ 0x44
 800301a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800301e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003028:	4b44      	ldr	r3, [pc, #272]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003030:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003032:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003034:	fa92 f2a2 	rbit	r2, r2
 8003038:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800303a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800303c:	fab2 f282 	clz	r2, r2
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	f042 0220 	orr.w	r2, r2, #32
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	f002 021f 	and.w	r2, r2, #31
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f202 	lsl.w	r2, r1, r2
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d135      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0ae      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
 800305c:	2302      	movs	r3, #2
 800305e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003062:	fa93 f3a3 	rbit	r3, r3
 8003066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b3f      	cmp	r3, #63	@ 0x3f
 8003072:	d802      	bhi.n	800307a <HAL_RCC_ClockConfig+0x182>
 8003074:	4b31      	ldr	r3, [pc, #196]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	e00d      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
 800307a:	2302      	movs	r3, #2
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	627b      	str	r3, [r7, #36]	@ 0x24
 8003086:	2302      	movs	r3, #2
 8003088:	623b      	str	r3, [r7, #32]
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	2202      	movs	r2, #2
 8003098:	61ba      	str	r2, [r7, #24]
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	fa92 f2a2 	rbit	r2, r2
 80030a0:	617a      	str	r2, [r7, #20]
  return result;
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0220 	orr.w	r2, r2, #32
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e07a      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c4:	4b1d      	ldr	r3, [pc, #116]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 0203 	bic.w	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	491a      	ldr	r1, [pc, #104]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d6:	f7fe fbd7 	bl	8001888 <HAL_GetTick>
 80030da:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030de:	f7fe fbd3 	bl	8001888 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e062      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <HAL_RCC_ClockConfig+0x244>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 020c 	and.w	r2, r3, #12
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	429a      	cmp	r2, r3
 8003104:	d1eb      	bne.n	80030de <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003106:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d215      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f023 0207 	bic.w	r2, r3, #7
 800311c:	4906      	ldr	r1, [pc, #24]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	4313      	orrs	r3, r2
 8003122:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003124:	4b04      	ldr	r3, [pc, #16]	@ (8003138 <HAL_RCC_ClockConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d006      	beq.n	8003140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e041      	b.n	80031ba <HAL_RCC_ClockConfig+0x2c2>
 8003136:	bf00      	nop
 8003138:	40022000 	.word	0x40022000
 800313c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800314c:	4b1d      	ldr	r3, [pc, #116]	@ (80031c4 <HAL_RCC_ClockConfig+0x2cc>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	491a      	ldr	r1, [pc, #104]	@ (80031c4 <HAL_RCC_ClockConfig+0x2cc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316a:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <HAL_RCC_ClockConfig+0x2cc>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4912      	ldr	r1, [pc, #72]	@ (80031c4 <HAL_RCC_ClockConfig+0x2cc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800317e:	f000 f829 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 8003182:	4601      	mov	r1, r0
 8003184:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <HAL_RCC_ClockConfig+0x2cc>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800318c:	22f0      	movs	r2, #240	@ 0xf0
 800318e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	fa92 f2a2 	rbit	r2, r2
 8003196:	60fa      	str	r2, [r7, #12]
  return result;
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	40d3      	lsrs	r3, r2
 80031a2:	4a09      	ldr	r2, [pc, #36]	@ (80031c8 <HAL_RCC_ClockConfig+0x2d0>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	fa21 f303 	lsr.w	r3, r1, r3
 80031aa:	4a08      	ldr	r2, [pc, #32]	@ (80031cc <HAL_RCC_ClockConfig+0x2d4>)
 80031ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80031ae:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_RCC_ClockConfig+0x2d8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fb24 	bl	8001800 <HAL_InitTick>
  
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3778      	adds	r7, #120	@ 0x78
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08005fe4 	.word	0x08005fe4
 80031cc:	2000000c 	.word	0x2000000c
 80031d0:	20000010 	.word	0x20000010

080031d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031ee:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <HAL_RCC_GetSysClockFreq+0x98>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d002      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x30>
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d003      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x36>
 8003202:	e029      	b.n	8003258 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003204:	4b1a      	ldr	r3, [pc, #104]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003206:	613b      	str	r3, [r7, #16]
      break;
 8003208:	e029      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	0c9b      	lsrs	r3, r3, #18
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003218:	4b14      	ldr	r3, [pc, #80]	@ (800326c <HAL_RCC_GetSysClockFreq+0x98>)
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003230:	4a0f      	ldr	r2, [pc, #60]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	fbb2 f2f3 	udiv	r2, r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e007      	b.n	8003252 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003242:	4a0b      	ldr	r2, [pc, #44]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	fbb2 f2f3 	udiv	r2, r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	fb02 f303 	mul.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	613b      	str	r3, [r7, #16]
      break;
 8003256:	e002      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x9c>)
 800325a:	613b      	str	r3, [r7, #16]
      break;
 800325c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325e:	693b      	ldr	r3, [r7, #16]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40021000 	.word	0x40021000
 8003270:	007a1200 	.word	0x007a1200
 8003274:	08005ff4 	.word	0x08005ff4
 8003278:	08006004 	.word	0x08006004

0800327c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b092      	sub	sp, #72	@ 0x48
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800328c:	2300      	movs	r3, #0
 800328e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 80d2 	beq.w	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a0:	4b4d      	ldr	r3, [pc, #308]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10e      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b4a      	ldr	r3, [pc, #296]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	4a49      	ldr	r2, [pc, #292]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	61d3      	str	r3, [r2, #28]
 80032b8:	4b47      	ldr	r3, [pc, #284]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ca:	4b44      	ldr	r3, [pc, #272]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d6:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a40      	ldr	r2, [pc, #256]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fe fad1 	bl	8001888 <HAL_GetTick>
 80032e6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fe facd 	bl	8001888 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	@ 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e1d4      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b37      	ldr	r3, [pc, #220]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003308:	4b33      	ldr	r3, [pc, #204]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003310:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 8082 	beq.w	800341e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003322:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003324:	429a      	cmp	r2, r3
 8003326:	d07a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003328:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003332:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003336:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	461a      	mov	r2, r3
 8003352:	2301      	movs	r3, #1
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800335a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4b1c      	ldr	r3, [pc, #112]	@ (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	461a      	mov	r2, r3
 8003376:	2300      	movs	r3, #0
 8003378:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800337a:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d049      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe fa7d 	bl	8001888 <HAL_GetTick>
 800338e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe fa79 	bl	8001888 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e17e      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80033a8:	2302      	movs	r3, #2
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	2302      	movs	r3, #2
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	61fb      	str	r3, [r7, #28]
  return result;
 80033c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80033d2:	4b01      	ldr	r3, [pc, #4]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	e00d      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	10908100 	.word	0x10908100
 80033e4:	2302      	movs	r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa93 f3a3 	rbit	r3, r3
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	4b9a      	ldr	r3, [pc, #616]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	2202      	movs	r2, #2
 80033f6:	613a      	str	r2, [r7, #16]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	fa92 f2a2 	rbit	r2, r2
 80033fe:	60fa      	str	r2, [r7, #12]
  return result;
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0b9      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800341e:	4b8f      	ldr	r3, [pc, #572]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	498c      	ldr	r1, [pc, #560]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003430:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b88      	ldr	r3, [pc, #544]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a87      	ldr	r2, [pc, #540]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003442:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003450:	4b82      	ldr	r3, [pc, #520]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	f023 0203 	bic.w	r2, r3, #3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	497f      	ldr	r1, [pc, #508]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345e:	4313      	orrs	r3, r2
 8003460:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800346e:	4b7b      	ldr	r3, [pc, #492]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003472:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	4978      	ldr	r1, [pc, #480]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347c:	4313      	orrs	r3, r2
 800347e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800348c:	4b73      	ldr	r3, [pc, #460]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4970      	ldr	r1, [pc, #448]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349a:	4313      	orrs	r3, r2
 800349c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034aa:	4b6c      	ldr	r3, [pc, #432]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	f023 0210 	bic.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4969      	ldr	r1, [pc, #420]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d008      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80034c8:	4b64      	ldr	r3, [pc, #400]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d4:	4961      	ldr	r1, [pc, #388]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d008      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e6:	4b5d      	ldr	r3, [pc, #372]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f023 0220 	bic.w	r2, r3, #32
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	495a      	ldr	r1, [pc, #360]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003504:	4b55      	ldr	r3, [pc, #340]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	4952      	ldr	r1, [pc, #328]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003522:	4b4e      	ldr	r3, [pc, #312]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	494b      	ldr	r1, [pc, #300]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003540:	4b46      	ldr	r3, [pc, #280]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	4943      	ldr	r1, [pc, #268]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354e:	4313      	orrs	r3, r2
 8003550:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800355e:	4b3f      	ldr	r3, [pc, #252]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	493c      	ldr	r1, [pc, #240]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800357c:	4b37      	ldr	r3, [pc, #220]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	4934      	ldr	r1, [pc, #208]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358a:	4313      	orrs	r3, r2
 800358c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800359a:	4b30      	ldr	r3, [pc, #192]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	492d      	ldr	r1, [pc, #180]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c4:	4925      	ldr	r1, [pc, #148]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80035d6:	4b21      	ldr	r3, [pc, #132]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	491e      	ldr	r1, [pc, #120]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003600:	4916      	ldr	r1, [pc, #88]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	490f      	ldr	r1, [pc, #60]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003630:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003634:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	4907      	ldr	r1, [pc, #28]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363e:	4313      	orrs	r3, r2
 8003640:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00c      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800364e:	4b03      	ldr	r3, [pc, #12]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003662:	4913      	ldr	r1, [pc, #76]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003664:	4313      	orrs	r3, r2
 8003666:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003674:	4b0e      	ldr	r3, [pc, #56]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003680:	490b      	ldr	r1, [pc, #44]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003682:	4313      	orrs	r3, r2
 8003684:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003692:	4b07      	ldr	r3, [pc, #28]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369e:	4904      	ldr	r1, [pc, #16]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3748      	adds	r7, #72	@ 0x48
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000

080036b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e073      	b.n	80037b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7f5b      	ldrb	r3, [r3, #29]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fdea 	bl	80012b4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d055      	beq.n	80037a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	22ca      	movs	r2, #202	@ 0xca
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2253      	movs	r2, #83	@ 0x53
 8003702:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fb73 	bl	8003df0 <RTC_EnterInitMode>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d12c      	bne.n	800376e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003726:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68d2      	ldr	r2, [r2, #12]
 800374e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6919      	ldr	r1, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	041a      	lsls	r2, r3, #16
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fb7a 	bl	8003e5e <RTC_ExitInitMode>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d110      	bne.n	8003796 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003782:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	22ff      	movs	r2, #255	@ 0xff
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24
 800379e:	e001      	b.n	80037a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037ba:	b590      	push	{r4, r7, lr}
 80037bc:	b087      	sub	sp, #28
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	7f1b      	ldrb	r3, [r3, #28]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_RTC_SetTime+0x1c>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e087      	b.n	80038e6 <HAL_RTC_SetTime+0x12c>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2202      	movs	r2, #2
 80037e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d126      	bne.n	8003836 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2200      	movs	r2, #0
 80037fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fb51 	bl	8003ea8 <RTC_ByteToBcd2>
 8003806:	4603      	mov	r3, r0
 8003808:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fb4a 	bl	8003ea8 <RTC_ByteToBcd2>
 8003814:	4603      	mov	r3, r0
 8003816:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003818:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	789b      	ldrb	r3, [r3, #2]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fb42 	bl	8003ea8 <RTC_ByteToBcd2>
 8003824:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003826:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	78db      	ldrb	r3, [r3, #3]
 800382e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	e018      	b.n	8003868 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003856:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800385c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	22ca      	movs	r2, #202	@ 0xca
 800386e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2253      	movs	r2, #83	@ 0x53
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fab9 	bl	8003df0 <RTC_EnterInitMode>
 800387e:	4603      	mov	r3, r0
 8003880:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003882:	7cfb      	ldrb	r3, [r7, #19]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d120      	bne.n	80038ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003892:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 facc 	bl	8003e5e <RTC_ExitInitMode>
 80038c6:	4603      	mov	r3, r0
 80038c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	22ff      	movs	r2, #255	@ 0xff
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	771a      	strb	r2, [r3, #28]

  return status;
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003920:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003924:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	0a1b      	lsrs	r3, r3, #8
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800394e:	b2da      	uxtb	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	0d9b      	lsrs	r3, r3, #22
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11a      	bne.n	80039a0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fab8 	bl	8003ee4 <RTC_Bcd2ToByte>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 faaf 	bl	8003ee4 <RTC_Bcd2ToByte>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	789b      	ldrb	r3, [r3, #2]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 faa6 	bl	8003ee4 <RTC_Bcd2ToByte>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039aa:	b590      	push	{r4, r7, lr}
 80039ac:	b087      	sub	sp, #28
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	60f8      	str	r0, [r7, #12]
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	7f1b      	ldrb	r3, [r3, #28]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_RTC_SetDate+0x1c>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e071      	b.n	8003aaa <HAL_RTC_SetDate+0x100>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2202      	movs	r2, #2
 80039d0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10e      	bne.n	80039f6 <HAL_RTC_SetDate+0x4c>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	785b      	ldrb	r3, [r3, #1]
 80039e8:	f023 0310 	bic.w	r3, r3, #16
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	330a      	adds	r3, #10
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d11c      	bne.n	8003a36 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	78db      	ldrb	r3, [r3, #3]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fa51 	bl	8003ea8 <RTC_ByteToBcd2>
 8003a06:	4603      	mov	r3, r0
 8003a08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa4a 	bl	8003ea8 <RTC_ByteToBcd2>
 8003a14:	4603      	mov	r3, r0
 8003a16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	789b      	ldrb	r3, [r3, #2]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fa42 	bl	8003ea8 <RTC_ByteToBcd2>
 8003a24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003a26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e00e      	b.n	8003a54 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	78db      	ldrb	r3, [r3, #3]
 8003a3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a42:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003a48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	22ca      	movs	r2, #202	@ 0xca
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2253      	movs	r2, #83	@ 0x53
 8003a62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f9c3 	bl	8003df0 <RTC_EnterInitMode>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10c      	bne.n	8003a8e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f9ea 	bl	8003e5e <RTC_ExitInitMode>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d102      	bne.n	8003a9a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	22ff      	movs	r2, #255	@ 0xff
 8003aa0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	771a      	strb	r2, [r3, #28]

  return status;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd90      	pop	{r4, r7, pc}

08003ab2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003acc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	0a1b      	lsrs	r3, r3, #8
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	0b5b      	lsrs	r3, r3, #13
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d11a      	bne.n	8003b46 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	78db      	ldrb	r3, [r3, #3]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f9e5 	bl	8003ee4 <RTC_Bcd2ToByte>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f9dc 	bl	8003ee4 <RTC_Bcd2ToByte>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	789b      	ldrb	r3, [r3, #2]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f9d3 	bl	8003ee4 <RTC_Bcd2ToByte>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	7f1b      	ldrb	r3, [r3, #28]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_RTC_SetAlarm+0x24>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e113      	b.n	8003d9c <HAL_RTC_SetAlarm+0x24c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d137      	bne.n	8003bf6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2200      	movs	r2, #0
 8003b98:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f982 	bl	8003ea8 <RTC_ByteToBcd2>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	785b      	ldrb	r3, [r3, #1]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f97b 	bl	8003ea8 <RTC_ByteToBcd2>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003bb6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	789b      	ldrb	r3, [r3, #2]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f973 	bl	8003ea8 <RTC_ByteToBcd2>
 8003bc2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003bc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	78db      	ldrb	r3, [r3, #3]
 8003bcc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003bce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f965 	bl	8003ea8 <RTC_ByteToBcd2>
 8003bde:	4603      	mov	r3, r0
 8003be0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 8003be2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003bea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	e023      	b.n	8003c3e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2200      	movs	r2, #0
 8003c08:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003c16:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003c1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	78db      	ldrb	r3, [r3, #3]
 8003c22:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003c24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 8003c2e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003c34:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	22ca      	movs	r2, #202	@ 0xca
 8003c50:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2253      	movs	r2, #83	@ 0x53
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c62:	d148      	bne.n	8003cf6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c72:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c82:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003c94:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c96:	f7fd fdf7 	bl	8001888 <HAL_GetTick>
 8003c9a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003c9c:	e013      	b.n	8003cc6 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c9e:	f7fd fdf3 	bl	8001888 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cac:	d90b      	bls.n	8003cc6 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	22ff      	movs	r2, #255	@ 0xff
 8003cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2203      	movs	r2, #3
 8003cba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e06a      	b.n	8003d9c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0e4      	beq.n	8003c9e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	e047      	b.n	8003d86 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d04:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d14:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8003d26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d28:	f7fd fdae 	bl	8001888 <HAL_GetTick>
 8003d2c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d2e:	e013      	b.n	8003d58 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d30:	f7fd fdaa 	bl	8001888 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d3e:	d90b      	bls.n	8003d58 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ff      	movs	r2, #255	@ 0xff
 8003d46:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e021      	b.n	8003d9c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0e4      	beq.n	8003d30 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d84:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	22ff      	movs	r2, #255	@ 0xff
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3724      	adds	r7, #36	@ 0x24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd90      	pop	{r4, r7, pc}

08003da4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <HAL_RTC_WaitForSynchro+0x48>)
 8003db6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003db8:	f7fd fd66 	bl	8001888 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dbe:	e009      	b.n	8003dd4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dc0:	f7fd fd62 	bl	8001888 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dce:	d901      	bls.n	8003dd4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e007      	b.n	8003de4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ee      	beq.n	8003dc0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	0001ff5f 	.word	0x0001ff5f

08003df0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d122      	bne.n	8003e54 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fd33 	bl	8001888 <HAL_GetTick>
 8003e22:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e24:	e00c      	b.n	8003e40 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e26:	f7fd fd2f 	bl	8001888 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e34:	d904      	bls.n	8003e40 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2204      	movs	r2, #4
 8003e3a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <RTC_EnterInitMode+0x64>
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d1e8      	bne.n	8003e26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ff8b 	bl	8003da4 <HAL_RTC_WaitForSynchro>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d004      	beq.n	8003e9e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2204      	movs	r2, #4
 8003e98:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003eb6:	e005      	b.n	8003ec4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	3b0a      	subs	r3, #10
 8003ec2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d8f6      	bhi.n	8003eb8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	b2db      	uxtb	r3, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e049      	b.n	8003fc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7fd f9da 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f000 fdb8 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d001      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e04f      	b.n	8004088 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a23      	ldr	r2, [pc, #140]	@ (8004094 <HAL_TIM_Base_Start_IT+0xc4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x76>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004012:	d018      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x76>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1f      	ldr	r2, [pc, #124]	@ (8004098 <HAL_TIM_Base_Start_IT+0xc8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x76>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	@ (800409c <HAL_TIM_Base_Start_IT+0xcc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x76>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1c      	ldr	r2, [pc, #112]	@ (80040a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x76>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1b      	ldr	r2, [pc, #108]	@ (80040a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_TIM_Base_Start_IT+0x76>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	@ (80040a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d115      	bne.n	8004072 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	4b17      	ldr	r3, [pc, #92]	@ (80040ac <HAL_TIM_Base_Start_IT+0xdc>)
 800404e:	4013      	ands	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d015      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0xb4>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405e:	d011      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004070:	e008      	b.n	8004084 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e000      	b.n	8004086 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40013400 	.word	0x40013400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40015000 	.word	0x40015000
 80040ac:	00010007 	.word	0x00010007

080040b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e049      	b.n	8004156 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f841 	bl	800415e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 fcf0 	bl	8004ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_TIM_PWM_Start+0x24>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e03c      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d109      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x3e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e02f      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d109      	bne.n	80041cc <HAL_TIM_PWM_Start+0x58>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e022      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d109      	bne.n	80041e6 <HAL_TIM_PWM_Start+0x72>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e015      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d109      	bne.n	8004200 <HAL_TIM_PWM_Start+0x8c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e008      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0a1      	b.n	800435e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0xb6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	e023      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xc6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004238:	e01b      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0xd6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004248:	e013      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0xe6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004258:	e00b      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b10      	cmp	r3, #16
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xf6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004268:	e003      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f874 	bl	8005368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a38      	ldr	r2, [pc, #224]	@ (8004368 <HAL_TIM_PWM_Start+0x1f4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a37      	ldr	r2, [pc, #220]	@ (800436c <HAL_TIM_PWM_Start+0x1f8>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a35      	ldr	r2, [pc, #212]	@ (8004370 <HAL_TIM_PWM_Start+0x1fc>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a34      	ldr	r2, [pc, #208]	@ (8004374 <HAL_TIM_PWM_Start+0x200>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a32      	ldr	r2, [pc, #200]	@ (8004378 <HAL_TIM_PWM_Start+0x204>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a31      	ldr	r2, [pc, #196]	@ (800437c <HAL_TIM_PWM_Start+0x208>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_PWM_Start+0x14c>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_TIM_PWM_Start+0x14e>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a23      	ldr	r2, [pc, #140]	@ (8004368 <HAL_TIM_PWM_Start+0x1f4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_TIM_PWM_Start+0x1a8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e8:	d018      	beq.n	800431c <HAL_TIM_PWM_Start+0x1a8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a24      	ldr	r2, [pc, #144]	@ (8004380 <HAL_TIM_PWM_Start+0x20c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_TIM_PWM_Start+0x1a8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a22      	ldr	r2, [pc, #136]	@ (8004384 <HAL_TIM_PWM_Start+0x210>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_TIM_PWM_Start+0x1a8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1a      	ldr	r2, [pc, #104]	@ (800436c <HAL_TIM_PWM_Start+0x1f8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_TIM_PWM_Start+0x1a8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a18      	ldr	r2, [pc, #96]	@ (8004370 <HAL_TIM_PWM_Start+0x1fc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_TIM_PWM_Start+0x1a8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a19      	ldr	r2, [pc, #100]	@ (800437c <HAL_TIM_PWM_Start+0x208>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d115      	bne.n	8004348 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	4b19      	ldr	r3, [pc, #100]	@ (8004388 <HAL_TIM_PWM_Start+0x214>)
 8004324:	4013      	ands	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b06      	cmp	r3, #6
 800432c:	d015      	beq.n	800435a <HAL_TIM_PWM_Start+0x1e6>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004334:	d011      	beq.n	800435a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004346:	e008      	b.n	800435a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0201 	orr.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	e000      	b.n	800435c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40013400 	.word	0x40013400
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	40015000 	.word	0x40015000
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	00010007 	.word	0x00010007

0800438c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2200      	movs	r2, #0
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 ffe2 	bl	8005368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a40      	ldr	r2, [pc, #256]	@ (80044ac <HAL_TIM_PWM_Stop+0x120>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d018      	beq.n	80043e0 <HAL_TIM_PWM_Stop+0x54>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3f      	ldr	r2, [pc, #252]	@ (80044b0 <HAL_TIM_PWM_Stop+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d013      	beq.n	80043e0 <HAL_TIM_PWM_Stop+0x54>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a3d      	ldr	r2, [pc, #244]	@ (80044b4 <HAL_TIM_PWM_Stop+0x128>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00e      	beq.n	80043e0 <HAL_TIM_PWM_Stop+0x54>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a3c      	ldr	r2, [pc, #240]	@ (80044b8 <HAL_TIM_PWM_Stop+0x12c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_TIM_PWM_Stop+0x54>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a3a      	ldr	r2, [pc, #232]	@ (80044bc <HAL_TIM_PWM_Stop+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d004      	beq.n	80043e0 <HAL_TIM_PWM_Stop+0x54>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a39      	ldr	r2, [pc, #228]	@ (80044c0 <HAL_TIM_PWM_Stop+0x134>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <HAL_TIM_PWM_Stop+0x58>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <HAL_TIM_PWM_Stop+0x5a>
 80043e4:	2300      	movs	r3, #0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d017      	beq.n	800441a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1a      	ldr	r2, [r3, #32]
 80043f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_TIM_PWM_Stop+0x8e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	f240 4344 	movw	r3, #1092	@ 0x444
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_TIM_PWM_Stop+0x8e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a1a      	ldr	r2, [r3, #32]
 8004420:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10f      	bne.n	800444a <HAL_TIM_PWM_Stop+0xbe>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a1a      	ldr	r2, [r3, #32]
 8004430:	f240 4344 	movw	r3, #1092	@ 0x444
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_TIM_PWM_Stop+0xbe>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0201 	bic.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <HAL_TIM_PWM_Stop+0xce>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004458:	e023      	b.n	80044a2 <HAL_TIM_PWM_Stop+0x116>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b04      	cmp	r3, #4
 800445e:	d104      	bne.n	800446a <HAL_TIM_PWM_Stop+0xde>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004468:	e01b      	b.n	80044a2 <HAL_TIM_PWM_Stop+0x116>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d104      	bne.n	800447a <HAL_TIM_PWM_Stop+0xee>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004478:	e013      	b.n	80044a2 <HAL_TIM_PWM_Stop+0x116>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d104      	bne.n	800448a <HAL_TIM_PWM_Stop+0xfe>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004488:	e00b      	b.n	80044a2 <HAL_TIM_PWM_Stop+0x116>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b10      	cmp	r3, #16
 800448e:	d104      	bne.n	800449a <HAL_TIM_PWM_Stop+0x10e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004498:	e003      	b.n	80044a2 <HAL_TIM_PWM_Stop+0x116>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40013400 	.word	0x40013400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800
 80044c0:	40015000 	.word	0x40015000

080044c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d020      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01b      	beq.n	8004528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fac1 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fab3 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fac4 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	d020      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01b      	beq.n	8004574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0204 	mvn.w	r2, #4
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa9b 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa8d 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa9e 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0208 	mvn.w	r2, #8
 8004590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2204      	movs	r2, #4
 8004596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa75 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa67 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fa78 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0310 	and.w	r3, r3, #16
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa4f 	bl	8004a96 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa41 	bl	8004a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fa52 	bl	8004aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00c      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0201 	mvn.w	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc f9ba 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00c      	beq.n	8004654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800464c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 ffcc 	bl	80055ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 ffc4 	bl	8005600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fa11 	bl	8004abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0320 	and.w	r3, r3, #32
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0220 	mvn.w	r2, #32
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 ff8c 	bl	80055d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e0ff      	b.n	80048e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b14      	cmp	r3, #20
 80046f2:	f200 80f0 	bhi.w	80048d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046f6:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	08004751 	.word	0x08004751
 8004700:	080048d7 	.word	0x080048d7
 8004704:	080048d7 	.word	0x080048d7
 8004708:	080048d7 	.word	0x080048d7
 800470c:	08004791 	.word	0x08004791
 8004710:	080048d7 	.word	0x080048d7
 8004714:	080048d7 	.word	0x080048d7
 8004718:	080048d7 	.word	0x080048d7
 800471c:	080047d3 	.word	0x080047d3
 8004720:	080048d7 	.word	0x080048d7
 8004724:	080048d7 	.word	0x080048d7
 8004728:	080048d7 	.word	0x080048d7
 800472c:	08004813 	.word	0x08004813
 8004730:	080048d7 	.word	0x080048d7
 8004734:	080048d7 	.word	0x080048d7
 8004738:	080048d7 	.word	0x080048d7
 800473c:	08004855 	.word	0x08004855
 8004740:	080048d7 	.word	0x080048d7
 8004744:	080048d7 	.word	0x080048d7
 8004748:	080048d7 	.word	0x080048d7
 800474c:	08004895 	.word	0x08004895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fa66 	bl	8004c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0208 	orr.w	r2, r2, #8
 800476a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6999      	ldr	r1, [r3, #24]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	619a      	str	r2, [r3, #24]
      break;
 800478e:	e0a5      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fae0 	bl	8004d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6999      	ldr	r1, [r3, #24]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	021a      	lsls	r2, r3, #8
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	619a      	str	r2, [r3, #24]
      break;
 80047d0:	e084      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fb53 	bl	8004e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0208 	orr.w	r2, r2, #8
 80047ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0204 	bic.w	r2, r2, #4
 80047fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69d9      	ldr	r1, [r3, #28]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	61da      	str	r2, [r3, #28]
      break;
 8004810:	e064      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fbc5 	bl	8004fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800482c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69d9      	ldr	r1, [r3, #28]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	021a      	lsls	r2, r3, #8
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	61da      	str	r2, [r3, #28]
      break;
 8004852:	e043      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68b9      	ldr	r1, [r7, #8]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fc14 	bl	8005088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0208 	orr.w	r2, r2, #8
 800486e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004892:	e023      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fc5e 	bl	800515c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	021a      	lsls	r2, r3, #8
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80048d4:	e002      	b.n	80048dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
      break;
 80048da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIM_ConfigClockSource+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e0b6      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x18a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004948:	d03e      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0xd8>
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494e:	f200 8087 	bhi.w	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004956:	f000 8086 	beq.w	8004a66 <HAL_TIM_ConfigClockSource+0x176>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495e:	d87f      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004960:	2b70      	cmp	r3, #112	@ 0x70
 8004962:	d01a      	beq.n	800499a <HAL_TIM_ConfigClockSource+0xaa>
 8004964:	2b70      	cmp	r3, #112	@ 0x70
 8004966:	d87b      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004968:	2b60      	cmp	r3, #96	@ 0x60
 800496a:	d050      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x11e>
 800496c:	2b60      	cmp	r3, #96	@ 0x60
 800496e:	d877      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004970:	2b50      	cmp	r3, #80	@ 0x50
 8004972:	d03c      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0xfe>
 8004974:	2b50      	cmp	r3, #80	@ 0x50
 8004976:	d873      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004978:	2b40      	cmp	r3, #64	@ 0x40
 800497a:	d058      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x13e>
 800497c:	2b40      	cmp	r3, #64	@ 0x40
 800497e:	d86f      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d064      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 8004984:	2b30      	cmp	r3, #48	@ 0x30
 8004986:	d86b      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d060      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d867      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d05c      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 8004994:	2b10      	cmp	r3, #16
 8004996:	d05a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15e>
 8004998:	e062      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	f000 fcbd 	bl	8005328 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	609a      	str	r2, [r3, #8]
      break;
 80049c6:	e04f      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	f000 fca6 	bl	8005328 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ea:	609a      	str	r2, [r3, #8]
      break;
 80049ec:	e03c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 fc1a 	bl	8005234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2150      	movs	r1, #80	@ 0x50
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fc73 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e02c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f000 fc39 	bl	8005292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2160      	movs	r1, #96	@ 0x60
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fc63 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 8004a2c:	e01c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f000 fbfa 	bl	8005234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2140      	movs	r1, #64	@ 0x40
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fc53 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 8004a4c:	e00c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f000 fc4a 	bl	80052f2 <TIM_ITRx_SetConfig>
      break;
 8004a5e:	e003      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e000      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a48      	ldr	r2, [pc, #288]	@ (8004c08 <TIM_Base_SetConfig+0x134>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af2:	d00f      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a45      	ldr	r2, [pc, #276]	@ (8004c0c <TIM_Base_SetConfig+0x138>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d00b      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a44      	ldr	r2, [pc, #272]	@ (8004c10 <TIM_Base_SetConfig+0x13c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d007      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a43      	ldr	r2, [pc, #268]	@ (8004c14 <TIM_Base_SetConfig+0x140>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d003      	beq.n	8004b14 <TIM_Base_SetConfig+0x40>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a42      	ldr	r2, [pc, #264]	@ (8004c18 <TIM_Base_SetConfig+0x144>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d108      	bne.n	8004b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a37      	ldr	r2, [pc, #220]	@ (8004c08 <TIM_Base_SetConfig+0x134>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01f      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b34:	d01b      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a34      	ldr	r2, [pc, #208]	@ (8004c0c <TIM_Base_SetConfig+0x138>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d017      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a33      	ldr	r2, [pc, #204]	@ (8004c10 <TIM_Base_SetConfig+0x13c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d013      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a32      	ldr	r2, [pc, #200]	@ (8004c14 <TIM_Base_SetConfig+0x140>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00f      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a32      	ldr	r2, [pc, #200]	@ (8004c1c <TIM_Base_SetConfig+0x148>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00b      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a31      	ldr	r2, [pc, #196]	@ (8004c20 <TIM_Base_SetConfig+0x14c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a30      	ldr	r2, [pc, #192]	@ (8004c24 <TIM_Base_SetConfig+0x150>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d003      	beq.n	8004b6e <TIM_Base_SetConfig+0x9a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a2b      	ldr	r2, [pc, #172]	@ (8004c18 <TIM_Base_SetConfig+0x144>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d108      	bne.n	8004b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	@ (8004c08 <TIM_Base_SetConfig+0x134>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <TIM_Base_SetConfig+0x100>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a19      	ldr	r2, [pc, #100]	@ (8004c14 <TIM_Base_SetConfig+0x140>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_Base_SetConfig+0x100>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <TIM_Base_SetConfig+0x148>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_Base_SetConfig+0x100>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <TIM_Base_SetConfig+0x14c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_Base_SetConfig+0x100>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a17      	ldr	r2, [pc, #92]	@ (8004c24 <TIM_Base_SetConfig+0x150>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_Base_SetConfig+0x100>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a12      	ldr	r2, [pc, #72]	@ (8004c18 <TIM_Base_SetConfig+0x144>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d103      	bne.n	8004bdc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d105      	bne.n	8004bfa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f023 0201 	bic.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	611a      	str	r2, [r3, #16]
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40000400 	.word	0x40000400
 8004c10:	40000800 	.word	0x40000800
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40015000 	.word	0x40015000
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40014400 	.word	0x40014400
 8004c24:	40014800 	.word	0x40014800

08004c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f023 0201 	bic.w	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f023 0302 	bic.w	r3, r3, #2
 8004c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a30      	ldr	r2, [pc, #192]	@ (8004d44 <TIM_OC1_SetConfig+0x11c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x88>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d48 <TIM_OC1_SetConfig+0x120>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x88>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a2e      	ldr	r2, [pc, #184]	@ (8004d4c <TIM_OC1_SetConfig+0x124>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x88>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d50 <TIM_OC1_SetConfig+0x128>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x88>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d54 <TIM_OC1_SetConfig+0x12c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC1_SetConfig+0x88>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2b      	ldr	r2, [pc, #172]	@ (8004d58 <TIM_OC1_SetConfig+0x130>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d10c      	bne.n	8004cca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0308 	bic.w	r3, r3, #8
 8004cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d44 <TIM_OC1_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <TIM_OC1_SetConfig+0xd2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <TIM_OC1_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_OC1_SetConfig+0xd2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d4c <TIM_OC1_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_OC1_SetConfig+0xd2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d50 <TIM_OC1_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_OC1_SetConfig+0xd2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a19      	ldr	r2, [pc, #100]	@ (8004d54 <TIM_OC1_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC1_SetConfig+0xd2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a18      	ldr	r2, [pc, #96]	@ (8004d58 <TIM_OC1_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d111      	bne.n	8004d1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	621a      	str	r2, [r3, #32]
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40013400 	.word	0x40013400
 8004d4c:	40014000 	.word	0x40014000
 8004d50:	40014400 	.word	0x40014400
 8004d54:	40014800 	.word	0x40014800
 8004d58:	40015000 	.word	0x40015000

08004d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f023 0210 	bic.w	r2, r3, #16
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f023 0320 	bic.w	r3, r3, #32
 8004daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a2c      	ldr	r2, [pc, #176]	@ (8004e6c <TIM_OC2_SetConfig+0x110>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x74>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e70 <TIM_OC2_SetConfig+0x114>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_OC2_SetConfig+0x74>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a2a      	ldr	r2, [pc, #168]	@ (8004e74 <TIM_OC2_SetConfig+0x118>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d10d      	bne.n	8004dec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a1f      	ldr	r2, [pc, #124]	@ (8004e6c <TIM_OC2_SetConfig+0x110>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <TIM_OC2_SetConfig+0xc0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e70 <TIM_OC2_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00f      	beq.n	8004e1c <TIM_OC2_SetConfig+0xc0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <TIM_OC2_SetConfig+0x11c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_OC2_SetConfig+0xc0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <TIM_OC2_SetConfig+0x120>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_OC2_SetConfig+0xc0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e80 <TIM_OC2_SetConfig+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC2_SetConfig+0xc0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <TIM_OC2_SetConfig+0x118>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d113      	bne.n	8004e44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40012c00 	.word	0x40012c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40015000 	.word	0x40015000
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <TIM_OC3_SetConfig+0x10c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_OC3_SetConfig+0x72>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f94 <TIM_OC3_SetConfig+0x110>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_OC3_SetConfig+0x72>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a29      	ldr	r2, [pc, #164]	@ (8004f98 <TIM_OC3_SetConfig+0x114>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d10d      	bne.n	8004f12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1e      	ldr	r2, [pc, #120]	@ (8004f90 <TIM_OC3_SetConfig+0x10c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <TIM_OC3_SetConfig+0xbe>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f94 <TIM_OC3_SetConfig+0x110>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00f      	beq.n	8004f42 <TIM_OC3_SetConfig+0xbe>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1d      	ldr	r2, [pc, #116]	@ (8004f9c <TIM_OC3_SetConfig+0x118>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00b      	beq.n	8004f42 <TIM_OC3_SetConfig+0xbe>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <TIM_OC3_SetConfig+0x11c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <TIM_OC3_SetConfig+0xbe>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa4 <TIM_OC3_SetConfig+0x120>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d003      	beq.n	8004f42 <TIM_OC3_SetConfig+0xbe>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	@ (8004f98 <TIM_OC3_SetConfig+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d113      	bne.n	8004f6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	621a      	str	r2, [r3, #32]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40015000 	.word	0x40015000
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	031b      	lsls	r3, r3, #12
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1a      	ldr	r2, [pc, #104]	@ (8005070 <TIM_OC4_SetConfig+0xc8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_OC4_SetConfig+0x8c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a19      	ldr	r2, [pc, #100]	@ (8005074 <TIM_OC4_SetConfig+0xcc>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_OC4_SetConfig+0x8c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <TIM_OC4_SetConfig+0xd0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_OC4_SetConfig+0x8c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a17      	ldr	r2, [pc, #92]	@ (800507c <TIM_OC4_SetConfig+0xd4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_OC4_SetConfig+0x8c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a16      	ldr	r2, [pc, #88]	@ (8005080 <TIM_OC4_SetConfig+0xd8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_OC4_SetConfig+0x8c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a15      	ldr	r2, [pc, #84]	@ (8005084 <TIM_OC4_SetConfig+0xdc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d109      	bne.n	8005048 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800503a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	019b      	lsls	r3, r3, #6
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40013400 	.word	0x40013400
 8005078:	40014000 	.word	0x40014000
 800507c:	40014400 	.word	0x40014400
 8005080:	40014800 	.word	0x40014800
 8005084:	40015000 	.word	0x40015000

08005088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80050cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <TIM_OC5_SetConfig+0xbc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_OC5_SetConfig+0x82>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <TIM_OC5_SetConfig+0xc0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_OC5_SetConfig+0x82>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a17      	ldr	r2, [pc, #92]	@ (800514c <TIM_OC5_SetConfig+0xc4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_OC5_SetConfig+0x82>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <TIM_OC5_SetConfig+0xc8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_OC5_SetConfig+0x82>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a15      	ldr	r2, [pc, #84]	@ (8005154 <TIM_OC5_SetConfig+0xcc>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC5_SetConfig+0x82>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <TIM_OC5_SetConfig+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d109      	bne.n	800511e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	621a      	str	r2, [r3, #32]
}
 8005138:	bf00      	nop
 800513a:	371c      	adds	r7, #28
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	40012c00 	.word	0x40012c00
 8005148:	40013400 	.word	0x40013400
 800514c:	40014000 	.word	0x40014000
 8005150:	40014400 	.word	0x40014400
 8005154:	40014800 	.word	0x40014800
 8005158:	40015000 	.word	0x40015000

0800515c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	051b      	lsls	r3, r3, #20
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <TIM_OC6_SetConfig+0xc0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d013      	beq.n	80051e0 <TIM_OC6_SetConfig+0x84>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a19      	ldr	r2, [pc, #100]	@ (8005220 <TIM_OC6_SetConfig+0xc4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00f      	beq.n	80051e0 <TIM_OC6_SetConfig+0x84>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <TIM_OC6_SetConfig+0xc8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <TIM_OC6_SetConfig+0x84>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <TIM_OC6_SetConfig+0xcc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d007      	beq.n	80051e0 <TIM_OC6_SetConfig+0x84>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a16      	ldr	r2, [pc, #88]	@ (800522c <TIM_OC6_SetConfig+0xd0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC6_SetConfig+0x84>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <TIM_OC6_SetConfig+0xd4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d109      	bne.n	80051f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40013400 	.word	0x40013400
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800
 8005230:	40015000 	.word	0x40015000

08005234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0201 	bic.w	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800525e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f023 030a 	bic.w	r3, r3, #10
 8005270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0210 	bic.w	r2, r3, #16
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	031b      	lsls	r3, r3, #12
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b085      	sub	sp, #20
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	f043 0307 	orr.w	r3, r3, #7
 8005314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	431a      	orrs	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4313      	orrs	r3, r2
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	371c      	adds	r7, #28
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	2201      	movs	r2, #1
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	43db      	mvns	r3, r3
 800538a:	401a      	ands	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1a      	ldr	r2, [r3, #32]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	fa01 f303 	lsl.w	r3, r1, r3
 80053a0:	431a      	orrs	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
}
 80053a6:	bf00      	nop
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e06d      	b.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a30      	ldr	r2, [pc, #192]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2f      	ldr	r2, [pc, #188]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2d      	ldr	r2, [pc, #180]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d108      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1e      	ldr	r2, [pc, #120]	@ (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01d      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005448:	d018      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1c      	ldr	r2, [pc, #112]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1a      	ldr	r2, [pc, #104]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a15      	ldr	r2, [pc, #84]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a16      	ldr	r2, [pc, #88]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a11      	ldr	r2, [pc, #68]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10c      	bne.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	4313      	orrs	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40015000 	.word	0x40015000
 80054c0:	40000400 	.word	0x40000400
 80054c4:	40000800 	.word	0x40000800
 80054c8:	40014000 	.word	0x40014000

080054cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e06a      	b.n	80055be <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	4313      	orrs	r3, r2
 8005560:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a19      	ldr	r2, [pc, #100]	@ (80055cc <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d009      	beq.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d115      	bne.n	80055ac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	051b      	lsls	r3, r3, #20
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40012c00 	.word	0x40012c00
 80055d0:	40013400 	.word	0x40013400
 80055d4:	40015000 	.word	0x40015000

080055d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <siprintf>:
 8005614:	b40e      	push	{r1, r2, r3}
 8005616:	b510      	push	{r4, lr}
 8005618:	b09d      	sub	sp, #116	@ 0x74
 800561a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800561c:	9002      	str	r0, [sp, #8]
 800561e:	9006      	str	r0, [sp, #24]
 8005620:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005624:	480a      	ldr	r0, [pc, #40]	@ (8005650 <siprintf+0x3c>)
 8005626:	9107      	str	r1, [sp, #28]
 8005628:	9104      	str	r1, [sp, #16]
 800562a:	490a      	ldr	r1, [pc, #40]	@ (8005654 <siprintf+0x40>)
 800562c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005630:	9105      	str	r1, [sp, #20]
 8005632:	2400      	movs	r4, #0
 8005634:	a902      	add	r1, sp, #8
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800563c:	f000 f9a2 	bl	8005984 <_svfiprintf_r>
 8005640:	9b02      	ldr	r3, [sp, #8]
 8005642:	701c      	strb	r4, [r3, #0]
 8005644:	b01d      	add	sp, #116	@ 0x74
 8005646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800564a:	b003      	add	sp, #12
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000018 	.word	0x20000018
 8005654:	ffff0208 	.word	0xffff0208

08005658 <memset>:
 8005658:	4402      	add	r2, r0
 800565a:	4603      	mov	r3, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	d100      	bne.n	8005662 <memset+0xa>
 8005660:	4770      	bx	lr
 8005662:	f803 1b01 	strb.w	r1, [r3], #1
 8005666:	e7f9      	b.n	800565c <memset+0x4>

08005668 <__errno>:
 8005668:	4b01      	ldr	r3, [pc, #4]	@ (8005670 <__errno+0x8>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000018 	.word	0x20000018

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	4d0d      	ldr	r5, [pc, #52]	@ (80056ac <__libc_init_array+0x38>)
 8005678:	4c0d      	ldr	r4, [pc, #52]	@ (80056b0 <__libc_init_array+0x3c>)
 800567a:	1b64      	subs	r4, r4, r5
 800567c:	10a4      	asrs	r4, r4, #2
 800567e:	2600      	movs	r6, #0
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	4d0b      	ldr	r5, [pc, #44]	@ (80056b4 <__libc_init_array+0x40>)
 8005686:	4c0c      	ldr	r4, [pc, #48]	@ (80056b8 <__libc_init_array+0x44>)
 8005688:	f000 fc64 	bl	8005f54 <_init>
 800568c:	1b64      	subs	r4, r4, r5
 800568e:	10a4      	asrs	r4, r4, #2
 8005690:	2600      	movs	r6, #0
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08006050 	.word	0x08006050
 80056b0:	08006050 	.word	0x08006050
 80056b4:	08006050 	.word	0x08006050
 80056b8:	08006054 	.word	0x08006054

080056bc <__retarget_lock_acquire_recursive>:
 80056bc:	4770      	bx	lr

080056be <__retarget_lock_release_recursive>:
 80056be:	4770      	bx	lr

080056c0 <memcpy>:
 80056c0:	440a      	add	r2, r1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c8:	d100      	bne.n	80056cc <memcpy+0xc>
 80056ca:	4770      	bx	lr
 80056cc:	b510      	push	{r4, lr}
 80056ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d1f9      	bne.n	80056ce <memcpy+0xe>
 80056da:	bd10      	pop	{r4, pc}

080056dc <_free_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4605      	mov	r5, r0
 80056e0:	2900      	cmp	r1, #0
 80056e2:	d041      	beq.n	8005768 <_free_r+0x8c>
 80056e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e8:	1f0c      	subs	r4, r1, #4
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bfb8      	it	lt
 80056ee:	18e4      	addlt	r4, r4, r3
 80056f0:	f000 f8e0 	bl	80058b4 <__malloc_lock>
 80056f4:	4a1d      	ldr	r2, [pc, #116]	@ (800576c <_free_r+0x90>)
 80056f6:	6813      	ldr	r3, [r2, #0]
 80056f8:	b933      	cbnz	r3, 8005708 <_free_r+0x2c>
 80056fa:	6063      	str	r3, [r4, #4]
 80056fc:	6014      	str	r4, [r2, #0]
 80056fe:	4628      	mov	r0, r5
 8005700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005704:	f000 b8dc 	b.w	80058c0 <__malloc_unlock>
 8005708:	42a3      	cmp	r3, r4
 800570a:	d908      	bls.n	800571e <_free_r+0x42>
 800570c:	6820      	ldr	r0, [r4, #0]
 800570e:	1821      	adds	r1, r4, r0
 8005710:	428b      	cmp	r3, r1
 8005712:	bf01      	itttt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	1809      	addeq	r1, r1, r0
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	e7ed      	b.n	80056fa <_free_r+0x1e>
 800571e:	461a      	mov	r2, r3
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	b10b      	cbz	r3, 8005728 <_free_r+0x4c>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d9fa      	bls.n	800571e <_free_r+0x42>
 8005728:	6811      	ldr	r1, [r2, #0]
 800572a:	1850      	adds	r0, r2, r1
 800572c:	42a0      	cmp	r0, r4
 800572e:	d10b      	bne.n	8005748 <_free_r+0x6c>
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	4401      	add	r1, r0
 8005734:	1850      	adds	r0, r2, r1
 8005736:	4283      	cmp	r3, r0
 8005738:	6011      	str	r1, [r2, #0]
 800573a:	d1e0      	bne.n	80056fe <_free_r+0x22>
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	6053      	str	r3, [r2, #4]
 8005742:	4408      	add	r0, r1
 8005744:	6010      	str	r0, [r2, #0]
 8005746:	e7da      	b.n	80056fe <_free_r+0x22>
 8005748:	d902      	bls.n	8005750 <_free_r+0x74>
 800574a:	230c      	movs	r3, #12
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	e7d6      	b.n	80056fe <_free_r+0x22>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	1821      	adds	r1, r4, r0
 8005754:	428b      	cmp	r3, r1
 8005756:	bf04      	itt	eq
 8005758:	6819      	ldreq	r1, [r3, #0]
 800575a:	685b      	ldreq	r3, [r3, #4]
 800575c:	6063      	str	r3, [r4, #4]
 800575e:	bf04      	itt	eq
 8005760:	1809      	addeq	r1, r1, r0
 8005762:	6021      	streq	r1, [r4, #0]
 8005764:	6054      	str	r4, [r2, #4]
 8005766:	e7ca      	b.n	80056fe <_free_r+0x22>
 8005768:	bd38      	pop	{r3, r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	20000328 	.word	0x20000328

08005770 <sbrk_aligned>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4e0f      	ldr	r6, [pc, #60]	@ (80057b0 <sbrk_aligned+0x40>)
 8005774:	460c      	mov	r4, r1
 8005776:	6831      	ldr	r1, [r6, #0]
 8005778:	4605      	mov	r5, r0
 800577a:	b911      	cbnz	r1, 8005782 <sbrk_aligned+0x12>
 800577c:	f000 fba4 	bl	8005ec8 <_sbrk_r>
 8005780:	6030      	str	r0, [r6, #0]
 8005782:	4621      	mov	r1, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f000 fb9f 	bl	8005ec8 <_sbrk_r>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d103      	bne.n	8005796 <sbrk_aligned+0x26>
 800578e:	f04f 34ff 	mov.w	r4, #4294967295
 8005792:	4620      	mov	r0, r4
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	1cc4      	adds	r4, r0, #3
 8005798:	f024 0403 	bic.w	r4, r4, #3
 800579c:	42a0      	cmp	r0, r4
 800579e:	d0f8      	beq.n	8005792 <sbrk_aligned+0x22>
 80057a0:	1a21      	subs	r1, r4, r0
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 fb90 	bl	8005ec8 <_sbrk_r>
 80057a8:	3001      	adds	r0, #1
 80057aa:	d1f2      	bne.n	8005792 <sbrk_aligned+0x22>
 80057ac:	e7ef      	b.n	800578e <sbrk_aligned+0x1e>
 80057ae:	bf00      	nop
 80057b0:	20000324 	.word	0x20000324

080057b4 <_malloc_r>:
 80057b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057b8:	1ccd      	adds	r5, r1, #3
 80057ba:	f025 0503 	bic.w	r5, r5, #3
 80057be:	3508      	adds	r5, #8
 80057c0:	2d0c      	cmp	r5, #12
 80057c2:	bf38      	it	cc
 80057c4:	250c      	movcc	r5, #12
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	4606      	mov	r6, r0
 80057ca:	db01      	blt.n	80057d0 <_malloc_r+0x1c>
 80057cc:	42a9      	cmp	r1, r5
 80057ce:	d904      	bls.n	80057da <_malloc_r+0x26>
 80057d0:	230c      	movs	r3, #12
 80057d2:	6033      	str	r3, [r6, #0]
 80057d4:	2000      	movs	r0, #0
 80057d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058b0 <_malloc_r+0xfc>
 80057de:	f000 f869 	bl	80058b4 <__malloc_lock>
 80057e2:	f8d8 3000 	ldr.w	r3, [r8]
 80057e6:	461c      	mov	r4, r3
 80057e8:	bb44      	cbnz	r4, 800583c <_malloc_r+0x88>
 80057ea:	4629      	mov	r1, r5
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff ffbf 	bl	8005770 <sbrk_aligned>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	4604      	mov	r4, r0
 80057f6:	d158      	bne.n	80058aa <_malloc_r+0xf6>
 80057f8:	f8d8 4000 	ldr.w	r4, [r8]
 80057fc:	4627      	mov	r7, r4
 80057fe:	2f00      	cmp	r7, #0
 8005800:	d143      	bne.n	800588a <_malloc_r+0xd6>
 8005802:	2c00      	cmp	r4, #0
 8005804:	d04b      	beq.n	800589e <_malloc_r+0xea>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	eb04 0903 	add.w	r9, r4, r3
 8005810:	f000 fb5a 	bl	8005ec8 <_sbrk_r>
 8005814:	4581      	cmp	r9, r0
 8005816:	d142      	bne.n	800589e <_malloc_r+0xea>
 8005818:	6821      	ldr	r1, [r4, #0]
 800581a:	1a6d      	subs	r5, r5, r1
 800581c:	4629      	mov	r1, r5
 800581e:	4630      	mov	r0, r6
 8005820:	f7ff ffa6 	bl	8005770 <sbrk_aligned>
 8005824:	3001      	adds	r0, #1
 8005826:	d03a      	beq.n	800589e <_malloc_r+0xea>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	442b      	add	r3, r5
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	bb62      	cbnz	r2, 8005890 <_malloc_r+0xdc>
 8005836:	f8c8 7000 	str.w	r7, [r8]
 800583a:	e00f      	b.n	800585c <_malloc_r+0xa8>
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	1b52      	subs	r2, r2, r5
 8005840:	d420      	bmi.n	8005884 <_malloc_r+0xd0>
 8005842:	2a0b      	cmp	r2, #11
 8005844:	d917      	bls.n	8005876 <_malloc_r+0xc2>
 8005846:	1961      	adds	r1, r4, r5
 8005848:	42a3      	cmp	r3, r4
 800584a:	6025      	str	r5, [r4, #0]
 800584c:	bf18      	it	ne
 800584e:	6059      	strne	r1, [r3, #4]
 8005850:	6863      	ldr	r3, [r4, #4]
 8005852:	bf08      	it	eq
 8005854:	f8c8 1000 	streq.w	r1, [r8]
 8005858:	5162      	str	r2, [r4, r5]
 800585a:	604b      	str	r3, [r1, #4]
 800585c:	4630      	mov	r0, r6
 800585e:	f000 f82f 	bl	80058c0 <__malloc_unlock>
 8005862:	f104 000b 	add.w	r0, r4, #11
 8005866:	1d23      	adds	r3, r4, #4
 8005868:	f020 0007 	bic.w	r0, r0, #7
 800586c:	1ac2      	subs	r2, r0, r3
 800586e:	bf1c      	itt	ne
 8005870:	1a1b      	subne	r3, r3, r0
 8005872:	50a3      	strne	r3, [r4, r2]
 8005874:	e7af      	b.n	80057d6 <_malloc_r+0x22>
 8005876:	6862      	ldr	r2, [r4, #4]
 8005878:	42a3      	cmp	r3, r4
 800587a:	bf0c      	ite	eq
 800587c:	f8c8 2000 	streq.w	r2, [r8]
 8005880:	605a      	strne	r2, [r3, #4]
 8005882:	e7eb      	b.n	800585c <_malloc_r+0xa8>
 8005884:	4623      	mov	r3, r4
 8005886:	6864      	ldr	r4, [r4, #4]
 8005888:	e7ae      	b.n	80057e8 <_malloc_r+0x34>
 800588a:	463c      	mov	r4, r7
 800588c:	687f      	ldr	r7, [r7, #4]
 800588e:	e7b6      	b.n	80057fe <_malloc_r+0x4a>
 8005890:	461a      	mov	r2, r3
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	42a3      	cmp	r3, r4
 8005896:	d1fb      	bne.n	8005890 <_malloc_r+0xdc>
 8005898:	2300      	movs	r3, #0
 800589a:	6053      	str	r3, [r2, #4]
 800589c:	e7de      	b.n	800585c <_malloc_r+0xa8>
 800589e:	230c      	movs	r3, #12
 80058a0:	6033      	str	r3, [r6, #0]
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 f80c 	bl	80058c0 <__malloc_unlock>
 80058a8:	e794      	b.n	80057d4 <_malloc_r+0x20>
 80058aa:	6005      	str	r5, [r0, #0]
 80058ac:	e7d6      	b.n	800585c <_malloc_r+0xa8>
 80058ae:	bf00      	nop
 80058b0:	20000328 	.word	0x20000328

080058b4 <__malloc_lock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	@ (80058bc <__malloc_lock+0x8>)
 80058b6:	f7ff bf01 	b.w	80056bc <__retarget_lock_acquire_recursive>
 80058ba:	bf00      	nop
 80058bc:	20000320 	.word	0x20000320

080058c0 <__malloc_unlock>:
 80058c0:	4801      	ldr	r0, [pc, #4]	@ (80058c8 <__malloc_unlock+0x8>)
 80058c2:	f7ff befc 	b.w	80056be <__retarget_lock_release_recursive>
 80058c6:	bf00      	nop
 80058c8:	20000320 	.word	0x20000320

080058cc <__ssputs_r>:
 80058cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	688e      	ldr	r6, [r1, #8]
 80058d2:	461f      	mov	r7, r3
 80058d4:	42be      	cmp	r6, r7
 80058d6:	680b      	ldr	r3, [r1, #0]
 80058d8:	4682      	mov	sl, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4690      	mov	r8, r2
 80058de:	d82d      	bhi.n	800593c <__ssputs_r+0x70>
 80058e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80058e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80058e8:	d026      	beq.n	8005938 <__ssputs_r+0x6c>
 80058ea:	6965      	ldr	r5, [r4, #20]
 80058ec:	6909      	ldr	r1, [r1, #16]
 80058ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f2:	eba3 0901 	sub.w	r9, r3, r1
 80058f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058fa:	1c7b      	adds	r3, r7, #1
 80058fc:	444b      	add	r3, r9
 80058fe:	106d      	asrs	r5, r5, #1
 8005900:	429d      	cmp	r5, r3
 8005902:	bf38      	it	cc
 8005904:	461d      	movcc	r5, r3
 8005906:	0553      	lsls	r3, r2, #21
 8005908:	d527      	bpl.n	800595a <__ssputs_r+0x8e>
 800590a:	4629      	mov	r1, r5
 800590c:	f7ff ff52 	bl	80057b4 <_malloc_r>
 8005910:	4606      	mov	r6, r0
 8005912:	b360      	cbz	r0, 800596e <__ssputs_r+0xa2>
 8005914:	6921      	ldr	r1, [r4, #16]
 8005916:	464a      	mov	r2, r9
 8005918:	f7ff fed2 	bl	80056c0 <memcpy>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	6126      	str	r6, [r4, #16]
 800592a:	6165      	str	r5, [r4, #20]
 800592c:	444e      	add	r6, r9
 800592e:	eba5 0509 	sub.w	r5, r5, r9
 8005932:	6026      	str	r6, [r4, #0]
 8005934:	60a5      	str	r5, [r4, #8]
 8005936:	463e      	mov	r6, r7
 8005938:	42be      	cmp	r6, r7
 800593a:	d900      	bls.n	800593e <__ssputs_r+0x72>
 800593c:	463e      	mov	r6, r7
 800593e:	6820      	ldr	r0, [r4, #0]
 8005940:	4632      	mov	r2, r6
 8005942:	4641      	mov	r1, r8
 8005944:	f000 faa6 	bl	8005e94 <memmove>
 8005948:	68a3      	ldr	r3, [r4, #8]
 800594a:	1b9b      	subs	r3, r3, r6
 800594c:	60a3      	str	r3, [r4, #8]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	4433      	add	r3, r6
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	2000      	movs	r0, #0
 8005956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595a:	462a      	mov	r2, r5
 800595c:	f000 fac4 	bl	8005ee8 <_realloc_r>
 8005960:	4606      	mov	r6, r0
 8005962:	2800      	cmp	r0, #0
 8005964:	d1e0      	bne.n	8005928 <__ssputs_r+0x5c>
 8005966:	6921      	ldr	r1, [r4, #16]
 8005968:	4650      	mov	r0, sl
 800596a:	f7ff feb7 	bl	80056dc <_free_r>
 800596e:	230c      	movs	r3, #12
 8005970:	f8ca 3000 	str.w	r3, [sl]
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800597a:	81a3      	strh	r3, [r4, #12]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295
 8005980:	e7e9      	b.n	8005956 <__ssputs_r+0x8a>
	...

08005984 <_svfiprintf_r>:
 8005984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005988:	4698      	mov	r8, r3
 800598a:	898b      	ldrh	r3, [r1, #12]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	b09d      	sub	sp, #116	@ 0x74
 8005990:	4607      	mov	r7, r0
 8005992:	460d      	mov	r5, r1
 8005994:	4614      	mov	r4, r2
 8005996:	d510      	bpl.n	80059ba <_svfiprintf_r+0x36>
 8005998:	690b      	ldr	r3, [r1, #16]
 800599a:	b973      	cbnz	r3, 80059ba <_svfiprintf_r+0x36>
 800599c:	2140      	movs	r1, #64	@ 0x40
 800599e:	f7ff ff09 	bl	80057b4 <_malloc_r>
 80059a2:	6028      	str	r0, [r5, #0]
 80059a4:	6128      	str	r0, [r5, #16]
 80059a6:	b930      	cbnz	r0, 80059b6 <_svfiprintf_r+0x32>
 80059a8:	230c      	movs	r3, #12
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	b01d      	add	sp, #116	@ 0x74
 80059b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b6:	2340      	movs	r3, #64	@ 0x40
 80059b8:	616b      	str	r3, [r5, #20]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059be:	2320      	movs	r3, #32
 80059c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c8:	2330      	movs	r3, #48	@ 0x30
 80059ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005b68 <_svfiprintf_r+0x1e4>
 80059ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059d2:	f04f 0901 	mov.w	r9, #1
 80059d6:	4623      	mov	r3, r4
 80059d8:	469a      	mov	sl, r3
 80059da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059de:	b10a      	cbz	r2, 80059e4 <_svfiprintf_r+0x60>
 80059e0:	2a25      	cmp	r2, #37	@ 0x25
 80059e2:	d1f9      	bne.n	80059d8 <_svfiprintf_r+0x54>
 80059e4:	ebba 0b04 	subs.w	fp, sl, r4
 80059e8:	d00b      	beq.n	8005a02 <_svfiprintf_r+0x7e>
 80059ea:	465b      	mov	r3, fp
 80059ec:	4622      	mov	r2, r4
 80059ee:	4629      	mov	r1, r5
 80059f0:	4638      	mov	r0, r7
 80059f2:	f7ff ff6b 	bl	80058cc <__ssputs_r>
 80059f6:	3001      	adds	r0, #1
 80059f8:	f000 80a7 	beq.w	8005b4a <_svfiprintf_r+0x1c6>
 80059fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059fe:	445a      	add	r2, fp
 8005a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a02:	f89a 3000 	ldrb.w	r3, [sl]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 809f 	beq.w	8005b4a <_svfiprintf_r+0x1c6>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a16:	f10a 0a01 	add.w	sl, sl, #1
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	9307      	str	r3, [sp, #28]
 8005a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a24:	4654      	mov	r4, sl
 8005a26:	2205      	movs	r2, #5
 8005a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2c:	484e      	ldr	r0, [pc, #312]	@ (8005b68 <_svfiprintf_r+0x1e4>)
 8005a2e:	f7fa fbef 	bl	8000210 <memchr>
 8005a32:	9a04      	ldr	r2, [sp, #16]
 8005a34:	b9d8      	cbnz	r0, 8005a6e <_svfiprintf_r+0xea>
 8005a36:	06d0      	lsls	r0, r2, #27
 8005a38:	bf44      	itt	mi
 8005a3a:	2320      	movmi	r3, #32
 8005a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a40:	0711      	lsls	r1, r2, #28
 8005a42:	bf44      	itt	mi
 8005a44:	232b      	movmi	r3, #43	@ 0x2b
 8005a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a50:	d015      	beq.n	8005a7e <_svfiprintf_r+0xfa>
 8005a52:	9a07      	ldr	r2, [sp, #28]
 8005a54:	4654      	mov	r4, sl
 8005a56:	2000      	movs	r0, #0
 8005a58:	f04f 0c0a 	mov.w	ip, #10
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a62:	3b30      	subs	r3, #48	@ 0x30
 8005a64:	2b09      	cmp	r3, #9
 8005a66:	d94b      	bls.n	8005b00 <_svfiprintf_r+0x17c>
 8005a68:	b1b0      	cbz	r0, 8005a98 <_svfiprintf_r+0x114>
 8005a6a:	9207      	str	r2, [sp, #28]
 8005a6c:	e014      	b.n	8005a98 <_svfiprintf_r+0x114>
 8005a6e:	eba0 0308 	sub.w	r3, r0, r8
 8005a72:	fa09 f303 	lsl.w	r3, r9, r3
 8005a76:	4313      	orrs	r3, r2
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	46a2      	mov	sl, r4
 8005a7c:	e7d2      	b.n	8005a24 <_svfiprintf_r+0xa0>
 8005a7e:	9b03      	ldr	r3, [sp, #12]
 8005a80:	1d19      	adds	r1, r3, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	9103      	str	r1, [sp, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfbb      	ittet	lt
 8005a8a:	425b      	neglt	r3, r3
 8005a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a90:	9307      	strge	r3, [sp, #28]
 8005a92:	9307      	strlt	r3, [sp, #28]
 8005a94:	bfb8      	it	lt
 8005a96:	9204      	strlt	r2, [sp, #16]
 8005a98:	7823      	ldrb	r3, [r4, #0]
 8005a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a9c:	d10a      	bne.n	8005ab4 <_svfiprintf_r+0x130>
 8005a9e:	7863      	ldrb	r3, [r4, #1]
 8005aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aa2:	d132      	bne.n	8005b0a <_svfiprintf_r+0x186>
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	1d1a      	adds	r2, r3, #4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	9203      	str	r2, [sp, #12]
 8005aac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ab0:	3402      	adds	r4, #2
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005b78 <_svfiprintf_r+0x1f4>
 8005ab8:	7821      	ldrb	r1, [r4, #0]
 8005aba:	2203      	movs	r2, #3
 8005abc:	4650      	mov	r0, sl
 8005abe:	f7fa fba7 	bl	8000210 <memchr>
 8005ac2:	b138      	cbz	r0, 8005ad4 <_svfiprintf_r+0x150>
 8005ac4:	9b04      	ldr	r3, [sp, #16]
 8005ac6:	eba0 000a 	sub.w	r0, r0, sl
 8005aca:	2240      	movs	r2, #64	@ 0x40
 8005acc:	4082      	lsls	r2, r0
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	3401      	adds	r4, #1
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad8:	4824      	ldr	r0, [pc, #144]	@ (8005b6c <_svfiprintf_r+0x1e8>)
 8005ada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ade:	2206      	movs	r2, #6
 8005ae0:	f7fa fb96 	bl	8000210 <memchr>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d036      	beq.n	8005b56 <_svfiprintf_r+0x1d2>
 8005ae8:	4b21      	ldr	r3, [pc, #132]	@ (8005b70 <_svfiprintf_r+0x1ec>)
 8005aea:	bb1b      	cbnz	r3, 8005b34 <_svfiprintf_r+0x1b0>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	3307      	adds	r3, #7
 8005af0:	f023 0307 	bic.w	r3, r3, #7
 8005af4:	3308      	adds	r3, #8
 8005af6:	9303      	str	r3, [sp, #12]
 8005af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005afa:	4433      	add	r3, r6
 8005afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afe:	e76a      	b.n	80059d6 <_svfiprintf_r+0x52>
 8005b00:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b04:	460c      	mov	r4, r1
 8005b06:	2001      	movs	r0, #1
 8005b08:	e7a8      	b.n	8005a5c <_svfiprintf_r+0xd8>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	3401      	adds	r4, #1
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f04f 0c0a 	mov.w	ip, #10
 8005b16:	4620      	mov	r0, r4
 8005b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b1c:	3a30      	subs	r2, #48	@ 0x30
 8005b1e:	2a09      	cmp	r2, #9
 8005b20:	d903      	bls.n	8005b2a <_svfiprintf_r+0x1a6>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0c6      	beq.n	8005ab4 <_svfiprintf_r+0x130>
 8005b26:	9105      	str	r1, [sp, #20]
 8005b28:	e7c4      	b.n	8005ab4 <_svfiprintf_r+0x130>
 8005b2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2e:	4604      	mov	r4, r0
 8005b30:	2301      	movs	r3, #1
 8005b32:	e7f0      	b.n	8005b16 <_svfiprintf_r+0x192>
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b74 <_svfiprintf_r+0x1f0>)
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f3af 8000 	nop.w
 8005b44:	1c42      	adds	r2, r0, #1
 8005b46:	4606      	mov	r6, r0
 8005b48:	d1d6      	bne.n	8005af8 <_svfiprintf_r+0x174>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	065b      	lsls	r3, r3, #25
 8005b4e:	f53f af2d 	bmi.w	80059ac <_svfiprintf_r+0x28>
 8005b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b54:	e72c      	b.n	80059b0 <_svfiprintf_r+0x2c>
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4b05      	ldr	r3, [pc, #20]	@ (8005b74 <_svfiprintf_r+0x1f0>)
 8005b5e:	a904      	add	r1, sp, #16
 8005b60:	4638      	mov	r0, r7
 8005b62:	f000 f879 	bl	8005c58 <_printf_i>
 8005b66:	e7ed      	b.n	8005b44 <_svfiprintf_r+0x1c0>
 8005b68:	08006014 	.word	0x08006014
 8005b6c:	0800601e 	.word	0x0800601e
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058cd 	.word	0x080058cd
 8005b78:	0800601a 	.word	0x0800601a

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4698      	mov	r8, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bfb8      	it	lt
 8005b90:	4613      	movlt	r3, r2
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b98:	4607      	mov	r7, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc26      	bgt.n	8005c12 <_printf_common+0x96>
 8005bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	3b00      	subs	r3, #0
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d42b      	bmi.n	8005c2c <_printf_common+0xb0>
 8005bd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005bd8:	4641      	mov	r1, r8
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c8      	blx	r9
 8005bde:	3001      	adds	r0, #1
 8005be0:	d01e      	beq.n	8005c20 <_printf_common+0xa4>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	6922      	ldr	r2, [r4, #16]
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	bf02      	ittt	eq
 8005bee:	68e5      	ldreq	r5, [r4, #12]
 8005bf0:	6833      	ldreq	r3, [r6, #0]
 8005bf2:	1aed      	subeq	r5, r5, r3
 8005bf4:	68a3      	ldr	r3, [r4, #8]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	2600      	movs	r6, #0
 8005c08:	341a      	adds	r4, #26
 8005c0a:	42b5      	cmp	r5, r6
 8005c0c:	d11a      	bne.n	8005c44 <_printf_common+0xc8>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e008      	b.n	8005c24 <_printf_common+0xa8>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4641      	mov	r1, r8
 8005c18:	4638      	mov	r0, r7
 8005c1a:	47c8      	blx	r9
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0xac>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7c6      	b.n	8005bba <_printf_common+0x3e>
 8005c2c:	18e1      	adds	r1, r4, r3
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	2030      	movs	r0, #48	@ 0x30
 8005c32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c36:	4422      	add	r2, r4
 8005c38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c40:	3302      	adds	r3, #2
 8005c42:	e7c7      	b.n	8005bd4 <_printf_common+0x58>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4622      	mov	r2, r4
 8005c48:	4641      	mov	r1, r8
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c8      	blx	r9
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0e6      	beq.n	8005c20 <_printf_common+0xa4>
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7d9      	b.n	8005c0a <_printf_common+0x8e>
	...

08005c58 <_printf_i>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	7e0f      	ldrb	r7, [r1, #24]
 8005c5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c60:	2f78      	cmp	r7, #120	@ 0x78
 8005c62:	4691      	mov	r9, r2
 8005c64:	4680      	mov	r8, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c6e:	d807      	bhi.n	8005c80 <_printf_i+0x28>
 8005c70:	2f62      	cmp	r7, #98	@ 0x62
 8005c72:	d80a      	bhi.n	8005c8a <_printf_i+0x32>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f000 80d1 	beq.w	8005e1c <_printf_i+0x1c4>
 8005c7a:	2f58      	cmp	r7, #88	@ 0x58
 8005c7c:	f000 80b8 	beq.w	8005df0 <_printf_i+0x198>
 8005c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c88:	e03a      	b.n	8005d00 <_printf_i+0xa8>
 8005c8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c8e:	2b15      	cmp	r3, #21
 8005c90:	d8f6      	bhi.n	8005c80 <_printf_i+0x28>
 8005c92:	a101      	add	r1, pc, #4	@ (adr r1, 8005c98 <_printf_i+0x40>)
 8005c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005c81 	.word	0x08005c81
 8005ca4:	08005c81 	.word	0x08005c81
 8005ca8:	08005c81 	.word	0x08005c81
 8005cac:	08005c81 	.word	0x08005c81
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005c81 	.word	0x08005c81
 8005cb8:	08005c81 	.word	0x08005c81
 8005cbc:	08005c81 	.word	0x08005c81
 8005cc0:	08005c81 	.word	0x08005c81
 8005cc4:	08005e03 	.word	0x08005e03
 8005cc8:	08005d2f 	.word	0x08005d2f
 8005ccc:	08005dbd 	.word	0x08005dbd
 8005cd0:	08005c81 	.word	0x08005c81
 8005cd4:	08005c81 	.word	0x08005c81
 8005cd8:	08005e25 	.word	0x08005e25
 8005cdc:	08005c81 	.word	0x08005c81
 8005ce0:	08005d2f 	.word	0x08005d2f
 8005ce4:	08005c81 	.word	0x08005c81
 8005ce8:	08005c81 	.word	0x08005c81
 8005cec:	08005dc5 	.word	0x08005dc5
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6032      	str	r2, [r6, #0]
 8005cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e09c      	b.n	8005e3e <_printf_i+0x1e6>
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	6820      	ldr	r0, [r4, #0]
 8005d08:	1d19      	adds	r1, r3, #4
 8005d0a:	6031      	str	r1, [r6, #0]
 8005d0c:	0606      	lsls	r6, r0, #24
 8005d0e:	d501      	bpl.n	8005d14 <_printf_i+0xbc>
 8005d10:	681d      	ldr	r5, [r3, #0]
 8005d12:	e003      	b.n	8005d1c <_printf_i+0xc4>
 8005d14:	0645      	lsls	r5, r0, #25
 8005d16:	d5fb      	bpl.n	8005d10 <_printf_i+0xb8>
 8005d18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	da03      	bge.n	8005d28 <_printf_i+0xd0>
 8005d20:	232d      	movs	r3, #45	@ 0x2d
 8005d22:	426d      	negs	r5, r5
 8005d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d28:	4858      	ldr	r0, [pc, #352]	@ (8005e8c <_printf_i+0x234>)
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	e011      	b.n	8005d52 <_printf_i+0xfa>
 8005d2e:	6821      	ldr	r1, [r4, #0]
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	0608      	lsls	r0, r1, #24
 8005d34:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d38:	d402      	bmi.n	8005d40 <_printf_i+0xe8>
 8005d3a:	0649      	lsls	r1, r1, #25
 8005d3c:	bf48      	it	mi
 8005d3e:	b2ad      	uxthmi	r5, r5
 8005d40:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d42:	4852      	ldr	r0, [pc, #328]	@ (8005e8c <_printf_i+0x234>)
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	bf14      	ite	ne
 8005d48:	230a      	movne	r3, #10
 8005d4a:	2308      	moveq	r3, #8
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d52:	6866      	ldr	r6, [r4, #4]
 8005d54:	60a6      	str	r6, [r4, #8]
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	db05      	blt.n	8005d66 <_printf_i+0x10e>
 8005d5a:	6821      	ldr	r1, [r4, #0]
 8005d5c:	432e      	orrs	r6, r5
 8005d5e:	f021 0104 	bic.w	r1, r1, #4
 8005d62:	6021      	str	r1, [r4, #0]
 8005d64:	d04b      	beq.n	8005dfe <_printf_i+0x1a6>
 8005d66:	4616      	mov	r6, r2
 8005d68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005d70:	5dc7      	ldrb	r7, [r0, r7]
 8005d72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d76:	462f      	mov	r7, r5
 8005d78:	42bb      	cmp	r3, r7
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	d9f4      	bls.n	8005d68 <_printf_i+0x110>
 8005d7e:	2b08      	cmp	r3, #8
 8005d80:	d10b      	bne.n	8005d9a <_printf_i+0x142>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	07df      	lsls	r7, r3, #31
 8005d86:	d508      	bpl.n	8005d9a <_printf_i+0x142>
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	6861      	ldr	r1, [r4, #4]
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	bfde      	ittt	le
 8005d90:	2330      	movle	r3, #48	@ 0x30
 8005d92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d9a:	1b92      	subs	r2, r2, r6
 8005d9c:	6122      	str	r2, [r4, #16]
 8005d9e:	f8cd a000 	str.w	sl, [sp]
 8005da2:	464b      	mov	r3, r9
 8005da4:	aa03      	add	r2, sp, #12
 8005da6:	4621      	mov	r1, r4
 8005da8:	4640      	mov	r0, r8
 8005daa:	f7ff fee7 	bl	8005b7c <_printf_common>
 8005dae:	3001      	adds	r0, #1
 8005db0:	d14a      	bne.n	8005e48 <_printf_i+0x1f0>
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	b004      	add	sp, #16
 8005db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	f043 0320 	orr.w	r3, r3, #32
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	4832      	ldr	r0, [pc, #200]	@ (8005e90 <_printf_i+0x238>)
 8005dc6:	2778      	movs	r7, #120	@ 0x78
 8005dc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	6831      	ldr	r1, [r6, #0]
 8005dd0:	061f      	lsls	r7, r3, #24
 8005dd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005dd6:	d402      	bmi.n	8005dde <_printf_i+0x186>
 8005dd8:	065f      	lsls	r7, r3, #25
 8005dda:	bf48      	it	mi
 8005ddc:	b2ad      	uxthmi	r5, r5
 8005dde:	6031      	str	r1, [r6, #0]
 8005de0:	07d9      	lsls	r1, r3, #31
 8005de2:	bf44      	itt	mi
 8005de4:	f043 0320 	orrmi.w	r3, r3, #32
 8005de8:	6023      	strmi	r3, [r4, #0]
 8005dea:	b11d      	cbz	r5, 8005df4 <_printf_i+0x19c>
 8005dec:	2310      	movs	r3, #16
 8005dee:	e7ad      	b.n	8005d4c <_printf_i+0xf4>
 8005df0:	4826      	ldr	r0, [pc, #152]	@ (8005e8c <_printf_i+0x234>)
 8005df2:	e7e9      	b.n	8005dc8 <_printf_i+0x170>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	f023 0320 	bic.w	r3, r3, #32
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	e7f6      	b.n	8005dec <_printf_i+0x194>
 8005dfe:	4616      	mov	r6, r2
 8005e00:	e7bd      	b.n	8005d7e <_printf_i+0x126>
 8005e02:	6833      	ldr	r3, [r6, #0]
 8005e04:	6825      	ldr	r5, [r4, #0]
 8005e06:	6961      	ldr	r1, [r4, #20]
 8005e08:	1d18      	adds	r0, r3, #4
 8005e0a:	6030      	str	r0, [r6, #0]
 8005e0c:	062e      	lsls	r6, r5, #24
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	d501      	bpl.n	8005e16 <_printf_i+0x1be>
 8005e12:	6019      	str	r1, [r3, #0]
 8005e14:	e002      	b.n	8005e1c <_printf_i+0x1c4>
 8005e16:	0668      	lsls	r0, r5, #25
 8005e18:	d5fb      	bpl.n	8005e12 <_printf_i+0x1ba>
 8005e1a:	8019      	strh	r1, [r3, #0]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	4616      	mov	r6, r2
 8005e22:	e7bc      	b.n	8005d9e <_printf_i+0x146>
 8005e24:	6833      	ldr	r3, [r6, #0]
 8005e26:	1d1a      	adds	r2, r3, #4
 8005e28:	6032      	str	r2, [r6, #0]
 8005e2a:	681e      	ldr	r6, [r3, #0]
 8005e2c:	6862      	ldr	r2, [r4, #4]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4630      	mov	r0, r6
 8005e32:	f7fa f9ed 	bl	8000210 <memchr>
 8005e36:	b108      	cbz	r0, 8005e3c <_printf_i+0x1e4>
 8005e38:	1b80      	subs	r0, r0, r6
 8005e3a:	6060      	str	r0, [r4, #4]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	6123      	str	r3, [r4, #16]
 8005e40:	2300      	movs	r3, #0
 8005e42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e46:	e7aa      	b.n	8005d9e <_printf_i+0x146>
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	4640      	mov	r0, r8
 8005e50:	47d0      	blx	sl
 8005e52:	3001      	adds	r0, #1
 8005e54:	d0ad      	beq.n	8005db2 <_printf_i+0x15a>
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	079b      	lsls	r3, r3, #30
 8005e5a:	d413      	bmi.n	8005e84 <_printf_i+0x22c>
 8005e5c:	68e0      	ldr	r0, [r4, #12]
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	4298      	cmp	r0, r3
 8005e62:	bfb8      	it	lt
 8005e64:	4618      	movlt	r0, r3
 8005e66:	e7a6      	b.n	8005db6 <_printf_i+0x15e>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	4640      	mov	r0, r8
 8005e70:	47d0      	blx	sl
 8005e72:	3001      	adds	r0, #1
 8005e74:	d09d      	beq.n	8005db2 <_printf_i+0x15a>
 8005e76:	3501      	adds	r5, #1
 8005e78:	68e3      	ldr	r3, [r4, #12]
 8005e7a:	9903      	ldr	r1, [sp, #12]
 8005e7c:	1a5b      	subs	r3, r3, r1
 8005e7e:	42ab      	cmp	r3, r5
 8005e80:	dcf2      	bgt.n	8005e68 <_printf_i+0x210>
 8005e82:	e7eb      	b.n	8005e5c <_printf_i+0x204>
 8005e84:	2500      	movs	r5, #0
 8005e86:	f104 0619 	add.w	r6, r4, #25
 8005e8a:	e7f5      	b.n	8005e78 <_printf_i+0x220>
 8005e8c:	08006025 	.word	0x08006025
 8005e90:	08006036 	.word	0x08006036

08005e94 <memmove>:
 8005e94:	4288      	cmp	r0, r1
 8005e96:	b510      	push	{r4, lr}
 8005e98:	eb01 0402 	add.w	r4, r1, r2
 8005e9c:	d902      	bls.n	8005ea4 <memmove+0x10>
 8005e9e:	4284      	cmp	r4, r0
 8005ea0:	4623      	mov	r3, r4
 8005ea2:	d807      	bhi.n	8005eb4 <memmove+0x20>
 8005ea4:	1e43      	subs	r3, r0, #1
 8005ea6:	42a1      	cmp	r1, r4
 8005ea8:	d008      	beq.n	8005ebc <memmove+0x28>
 8005eaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eb2:	e7f8      	b.n	8005ea6 <memmove+0x12>
 8005eb4:	4402      	add	r2, r0
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	428a      	cmp	r2, r1
 8005eba:	d100      	bne.n	8005ebe <memmove+0x2a>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ec2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ec6:	e7f7      	b.n	8005eb8 <memmove+0x24>

08005ec8 <_sbrk_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d06      	ldr	r5, [pc, #24]	@ (8005ee4 <_sbrk_r+0x1c>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7fb fb02 	bl	80014dc <_sbrk>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_sbrk_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_sbrk_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	2000031c 	.word	0x2000031c

08005ee8 <_realloc_r>:
 8005ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eec:	4607      	mov	r7, r0
 8005eee:	4614      	mov	r4, r2
 8005ef0:	460d      	mov	r5, r1
 8005ef2:	b921      	cbnz	r1, 8005efe <_realloc_r+0x16>
 8005ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef8:	4611      	mov	r1, r2
 8005efa:	f7ff bc5b 	b.w	80057b4 <_malloc_r>
 8005efe:	b92a      	cbnz	r2, 8005f0c <_realloc_r+0x24>
 8005f00:	f7ff fbec 	bl	80056dc <_free_r>
 8005f04:	4625      	mov	r5, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f0c:	f000 f81a 	bl	8005f44 <_malloc_usable_size_r>
 8005f10:	4284      	cmp	r4, r0
 8005f12:	4606      	mov	r6, r0
 8005f14:	d802      	bhi.n	8005f1c <_realloc_r+0x34>
 8005f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f1a:	d8f4      	bhi.n	8005f06 <_realloc_r+0x1e>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4638      	mov	r0, r7
 8005f20:	f7ff fc48 	bl	80057b4 <_malloc_r>
 8005f24:	4680      	mov	r8, r0
 8005f26:	b908      	cbnz	r0, 8005f2c <_realloc_r+0x44>
 8005f28:	4645      	mov	r5, r8
 8005f2a:	e7ec      	b.n	8005f06 <_realloc_r+0x1e>
 8005f2c:	42b4      	cmp	r4, r6
 8005f2e:	4622      	mov	r2, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	bf28      	it	cs
 8005f34:	4632      	movcs	r2, r6
 8005f36:	f7ff fbc3 	bl	80056c0 <memcpy>
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f7ff fbcd 	bl	80056dc <_free_r>
 8005f42:	e7f1      	b.n	8005f28 <_realloc_r+0x40>

08005f44 <_malloc_usable_size_r>:
 8005f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f48:	1f18      	subs	r0, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bfbc      	itt	lt
 8005f4e:	580b      	ldrlt	r3, [r1, r0]
 8005f50:	18c0      	addlt	r0, r0, r3
 8005f52:	4770      	bx	lr

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
