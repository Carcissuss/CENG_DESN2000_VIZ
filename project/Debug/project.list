
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006678  08006678  00007678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e0  080067e0  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e8  080067e8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067ec  080067ec  000077ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080067f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          000002e8  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00011e1d  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000008d  00000000  00000000  00019eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000d5db  00000000  00000000  00019f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002567  00000000  00000000  00027521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000cc0  00000000  00000000  00029a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbbf5  00000000  00000000  0002a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000988  00000000  00000000  000f633d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002210f  00000000  00000000  000f6cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00118dd4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003734  00000000  00000000  00118e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006660 	.word	0x08006660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006660 	.word	0x08006660

080001e0 <coast_asm_delay>:
		i++;
	}
}
*/
coast_asm_delay:
	PUSH {r4}	// 1 + 1 = 2
 80001e0:	b410      	push	{r4}
	PUSH {r5} 	// 2
 80001e2:	b420      	push	{r5}

	// uint32_t i = 0
	MOV r4, #0	// 1
 80001e4:	2400      	movs	r4, #0
	LDR r1, =11999	// 2
 80001e6:	f642 61df 	movw	r1, #11999	@ 0x2edf

080001ea <loop1_start>:
loop1_start:
	CMP r4, r0	// 1
 80001ea:	4284      	cmp	r4, r0
	BHS loop1_end // 1 + P
 80001ec:	d206      	bcs.n	80001fc <loop1_end>

	MOV r5, #0	// 1
 80001ee:	2500      	movs	r5, #0

080001f0 <loop2_start>:

loop2_start:
	// ldr slower but has 32-bits, mov faster only 8-bit
	CMP r5, r1		// 1
 80001f0:	428d      	cmp	r5, r1
	BHS loop2_end	// 1 + P
 80001f2:	d201      	bcs.n	80001f8 <loop2_end>

	// j++
	ADD r5, r5, #1 // 1
 80001f4:	3501      	adds	r5, #1
	b loop2_start  // 1 + P
 80001f6:	e7fb      	b.n	80001f0 <loop2_start>

080001f8 <loop2_end>:
loop2_end:
	// i++
	ADD r4, r4, #1	// 1
 80001f8:	3401      	adds	r4, #1
	b loop1_start  	// 1 + P
 80001fa:	e7f6      	b.n	80001ea <loop1_start>

080001fc <loop1_end>:

loop1_end:
	pop {r5}	// 2
 80001fc:	bc20      	pop	{r5}
	pop {r4}	// 2
 80001fe:	bc10      	pop	{r4}

	BX LR 		// 1 + P
 8000200:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <generate_sound>:

#include "main.h"
extern void coast_asm_delay(uint32_t milliseconds);
extern bool enable_sound;

void generate_sound(uint16_t frequency, uint8_t duty_cycle, TIM_HandleTypeDef htim1) {
 80002b0:	b082      	sub	sp, #8
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b084      	sub	sp, #16
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	f107 0c18 	add.w	ip, r7, #24
 80002bc:	e88c 000c 	stmia.w	ip, {r2, r3}
 80002c0:	4603      	mov	r3, r0
 80002c2:	80fb      	strh	r3, [r7, #6]
 80002c4:	460b      	mov	r3, r1
 80002c6:	717b      	strb	r3, [r7, #5]
	/* protect the function from invalid frequency input */
	if (frequency == 0 || !enable_sound) {
 80002c8:	88fb      	ldrh	r3, [r7, #6]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d006      	beq.n	80002dc <generate_sound+0x2c>
 80002ce:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <generate_sound+0x68>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	f083 0301 	eor.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d005      	beq.n	80002e8 <generate_sound+0x38>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80002dc:	2108      	movs	r1, #8
 80002de:	f107 0018 	add.w	r0, r7, #24
 80002e2:	f004 fbd9 	bl	8004a98 <HAL_TIM_PWM_Stop>
		return;
 80002e6:	e011      	b.n	800030c <generate_sound+0x5c>
	}
	/* millisecond trigger period */
	uint32_t period = 72000 / frequency;
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	4a0c      	ldr	r2, [pc, #48]	@ (800031c <generate_sound+0x6c>)
 80002ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80002f0:	60fb      	str	r3, [r7, #12]
	/* setup PWM channel and tim1 autoloader */
	htim1.Instance->ARR = period - 1;
 80002f2:	69bb      	ldr	r3, [r7, #24]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	3a01      	subs	r2, #1
 80002f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim1.Instance->CCR3 = period / 2;
 80002fa:	69bb      	ldr	r3, [r7, #24]
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	0852      	lsrs	r2, r2, #1
 8000300:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* start the timer1 and buzzer */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000302:	2108      	movs	r1, #8
 8000304:	f107 0018 	add.w	r0, r7, #24
 8000308:	f004 faba 	bl	8004880 <HAL_TIM_PWM_Start>
}
 800030c:	3710      	adds	r7, #16
 800030e:	46bd      	mov	sp, r7
 8000310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000314:	b002      	add	sp, #8
 8000316:	4770      	bx	lr
 8000318:	20000008 	.word	0x20000008
 800031c:	00011940 	.word	0x00011940

08000320 <stop_sound>:

void stop_sound(TIM_HandleTypeDef htim1) {
 8000320:	b084      	sub	sp, #16
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
 8000326:	f107 0c08 	add.w	ip, r7, #8
 800032a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* stop the timer1 and buzzer */
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800032e:	2108      	movs	r1, #8
 8000330:	f107 0008 	add.w	r0, r7, #8
 8000334:	f004 fbb0 	bl	8004a98 <HAL_TIM_PWM_Stop>
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000340:	b004      	add	sp, #16
 8000342:	4770      	bx	lr

08000344 <homePage>:
#include "lcd.h"

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void homePage() {
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f8d6 	bl	80004fc <LCD_SendCmd>
	LCD_SendStr("FITNESS||");
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <homePage+0x44>)
 8000352:	f000 f90f 	bl	8000574 <LCD_SendStr>

	char buff[16];

	int temp = 21; // placeholder
 8000356:	2315      	movs	r3, #21
 8000358:	617b      	str	r3, [r7, #20]
	sprintf(buff, "%dC ", temp);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	490b      	ldr	r1, [pc, #44]	@ (800038c <homePage+0x48>)
 8000360:	4618      	mov	r0, r3
 8000362:	f005 fcdd 	bl	8005d20 <siprintf>
	LCD_SendStr(buff);
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f903 	bl	8000574 <LCD_SendStr>

	LCD_SendStr("57%");
 800036e:	4808      	ldr	r0, [pc, #32]	@ (8000390 <homePage+0x4c>)
 8000370:	f000 f900 	bl	8000574 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 8000374:	20c0      	movs	r0, #192	@ 0xc0
 8000376:	f000 f8c1 	bl	80004fc <LCD_SendCmd>

	LCD_SendStr("OPT|");
 800037a:	4806      	ldr	r0, [pc, #24]	@ (8000394 <homePage+0x50>)
 800037c:	f000 f8fa 	bl	8000574 <LCD_SendStr>
}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	08006678 	.word	0x08006678
 800038c:	08006684 	.word	0x08006684
 8000390:	0800668c 	.word	0x0800668c
 8000394:	08006690 	.word	0x08006690

08000398 <OPTpage>:

void OPTpage() {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 800039c:	2001      	movs	r0, #1
 800039e:	f000 f8ad 	bl	80004fc <LCD_SendCmd>
	LCD_SendStr("BRIGHTNESS|");
 80003a2:	4807      	ldr	r0, [pc, #28]	@ (80003c0 <OPTpage+0x28>)
 80003a4:	f000 f8e6 	bl	8000574 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 80003a8:	20c0      	movs	r0, #192	@ 0xc0
 80003aa:	f000 f8a7 	bl	80004fc <LCD_SendCmd>

	LCD_SendStr("SETTINGS  ");
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <OPTpage+0x2c>)
 80003b0:	f000 f8e0 	bl	8000574 <LCD_SendStr>
	LCD_SendStr("|RESET");
 80003b4:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <OPTpage+0x30>)
 80003b6:	f000 f8dd 	bl	8000574 <LCD_SendStr>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	08006698 	.word	0x08006698
 80003c4:	080066a4 	.word	0x080066a4
 80003c8:	080066b0 	.word	0x080066b0

080003cc <coast_lcd_init>:

#include "main.h"
#include "coast.h"
#include "lcd.h"

void coast_lcd_init(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	// 1. wait for enough time to stabilise
	 HAL_Delay(50);
 80003d0:	2032      	movs	r0, #50	@ 0x32
 80003d2:	f001 fdeb 	bl	8001fac <HAL_Delay>
	 // 2. send command 0011 (function set) and wait for >=4.1 ms (enough wait inside
	 // the pulse)
	 LCD_PutNibble(0b0011);
 80003d6:	2003      	movs	r0, #3
 80003d8:	f000 f83e 	bl	8000458 <LCD_PutNibble>
	 LCD_Pulse();
 80003dc:	f000 f826 	bl	800042c <LCD_Pulse>
	 HAL_Delay(5);
 80003e0:	2005      	movs	r0, #5
 80003e2:	f001 fde3 	bl	8001fac <HAL_Delay>
	 // 3. send command 0011 (function set) again and wait for >=100 us
	 // fill this
	 LCD_PutNibble(0b0011);
 80003e6:	2003      	movs	r0, #3
 80003e8:	f000 f836 	bl	8000458 <LCD_PutNibble>
	 LCD_Pulse();
 80003ec:	f000 f81e 	bl	800042c <LCD_Pulse>
	 HAL_Delay(1);
 80003f0:	2001      	movs	r0, #1
 80003f2:	f001 fddb 	bl	8001fac <HAL_Delay>
	 // 4. send command 0011 (function set) again
	 // fill this
	 LCD_PutNibble(0b0011);
 80003f6:	2003      	movs	r0, #3
 80003f8:	f000 f82e 	bl	8000458 <LCD_PutNibble>
	 LCD_Pulse();
 80003fc:	f000 f816 	bl	800042c <LCD_Pulse>
	 // 5. send command 0010 to set to 4-bit bus mode
	 // fill this
	 LCD_PutNibble(0b0010);
 8000400:	2002      	movs	r0, #2
 8000402:	f000 f829 	bl	8000458 <LCD_PutNibble>
	 LCD_Pulse();
 8000406:	f000 f811 	bl	800042c <LCD_Pulse>
	 // 6. send command 0010 1100 (function set: 4-bit mode, 2-lines, 5x8 font)
	 LCD_SendCmd(0b00101100);
 800040a:	202c      	movs	r0, #44	@ 0x2c
 800040c:	f000 f876 	bl	80004fc <LCD_SendCmd>
	 // 7. Send command 0000 1000 to display ON/OFF
	 LCD_SendCmd(0b00001000);
 8000410:	2008      	movs	r0, #8
 8000412:	f000 f873 	bl	80004fc <LCD_SendCmd>
	 // 8. Send command to clear the display
	 // fill this
	 LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000416:	2001      	movs	r0, #1
 8000418:	f000 f870 	bl	80004fc <LCD_SendCmd>
	 // 9. Send command set entry mode (increment cursor, no display shift)
	 // fill this
	 LCD_SendCmd(0b00000110);
 800041c:	2006      	movs	r0, #6
 800041e:	f000 f86d 	bl	80004fc <LCD_SendCmd>
	 // 10. send command 0000 1111 to display on, cursor on, blink on
	 // fill this
	 LCD_SendCmd(0b00001111);
 8000422:	200f      	movs	r0, #15
 8000424:	f000 f86a 	bl	80004fc <LCD_SendCmd>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}

0800042c <LCD_Pulse>:

void LCD_Pulse(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 1);
 8000430:	2201      	movs	r2, #1
 8000432:	2104      	movs	r1, #4
 8000434:	4807      	ldr	r0, [pc, #28]	@ (8000454 <LCD_Pulse+0x28>)
 8000436:	f002 f891 	bl	800255c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800043a:	2001      	movs	r0, #1
 800043c:	f001 fdb6 	bl	8001fac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, 0);
 8000440:	2200      	movs	r2, #0
 8000442:	2104      	movs	r1, #4
 8000444:	4803      	ldr	r0, [pc, #12]	@ (8000454 <LCD_Pulse+0x28>)
 8000446:	f002 f889 	bl	800255c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800044a:	2001      	movs	r0, #1
 800044c:	f001 fdae 	bl	8001fac <HAL_Delay>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	48000c00 	.word	0x48000c00

08000458 <LCD_PutNibble>:

void LCD_PutNibble(uint8_t nibble){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	uint8_t D4 = nibble & 1;
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	f003 0301 	and.w	r3, r3, #1
 8000468:	73fb      	strb	r3, [r7, #15]
	uint8_t D5 = (nibble >> 1) & 1;
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	085b      	lsrs	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	73bb      	strb	r3, [r7, #14]
	uint8_t D6 = (nibble >> 2) & 1;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	089b      	lsrs	r3, r3, #2
 800047a:	b2db      	uxtb	r3, r3
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	737b      	strb	r3, [r7, #13]
	uint8_t D7 = (nibble >> 3) & 1;
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	08db      	lsrs	r3, r3, #3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D4_Pin, D4? GPIO_PIN_SET : GPIO_PIN_RESET);
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	2b00      	cmp	r3, #0
 8000492:	bf14      	ite	ne
 8000494:	2301      	movne	r3, #1
 8000496:	2300      	moveq	r3, #0
 8000498:	b2db      	uxtb	r3, r3
 800049a:	461a      	mov	r2, r3
 800049c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a0:	4815      	ldr	r0, [pc, #84]	@ (80004f8 <LCD_PutNibble+0xa0>)
 80004a2:	f002 f85b 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D5_Pin, D5? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004a6:	7bbb      	ldrb	r3, [r7, #14]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	bf14      	ite	ne
 80004ac:	2301      	movne	r3, #1
 80004ae:	2300      	moveq	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004b8:	480f      	ldr	r0, [pc, #60]	@ (80004f8 <LCD_PutNibble+0xa0>)
 80004ba:	f002 f84f 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D6_Pin, D6? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004be:	7b7b      	ldrb	r3, [r7, #13]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	bf14      	ite	ne
 80004c4:	2301      	movne	r3, #1
 80004c6:	2300      	moveq	r3, #0
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004d0:	4809      	ldr	r0, [pc, #36]	@ (80004f8 <LCD_PutNibble+0xa0>)
 80004d2:	f002 f843 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_Data_Port, LCD_D7_Pin, D7? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004d6:	7b3b      	ldrb	r3, [r7, #12]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	bf14      	ite	ne
 80004dc:	2301      	movne	r3, #1
 80004de:	2300      	moveq	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004e8:	4803      	ldr	r0, [pc, #12]	@ (80004f8 <LCD_PutNibble+0xa0>)
 80004ea:	f002 f837 	bl	800255c <HAL_GPIO_WritePin>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	48000800 	.word	0x48000800

080004fc <LCD_SendCmd>:

void LCD_SendCmd(uint8_t c){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	LCD_PutNibble(c >> 4);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	091b      	lsrs	r3, r3, #4
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ffa3 	bl	8000458 <LCD_PutNibble>
	LCD_Pulse();
 8000512:	f7ff ff8b 	bl	800042c <LCD_Pulse>
	LCD_PutNibble(c);
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff9d 	bl	8000458 <LCD_PutNibble>
	LCD_Pulse();
 800051e:	f7ff ff85 	bl	800042c <LCD_Pulse>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <LCD_SendData>:


void LCD_SendData(uint8_t c){
 800052a:	b580      	push	{r7, lr}
 800052c:	b082      	sub	sp, #8
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800053a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800053e:	f002 f80d 	bl	800255c <HAL_GPIO_WritePin>
	LCD_PutNibble(c >> 4);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	091b      	lsrs	r3, r3, #4
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ff85 	bl	8000458 <LCD_PutNibble>
	LCD_Pulse();
 800054e:	f7ff ff6d 	bl	800042c <LCD_Pulse>
	LCD_PutNibble(c);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff7f 	bl	8000458 <LCD_PutNibble>
	LCD_Pulse();
 800055a:	f7ff ff67 	bl	800042c <LCD_Pulse>
	HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f001 fff8 	bl	800255c <HAL_GPIO_WritePin>
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <LCD_SendStr>:

// send string to LCD data
void LCD_SendStr(char *str){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	for (int i = 0; str[i]; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	e00f      	b.n	80005a2 <LCD_SendStr+0x2e>
		if (i == 15) {
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d102      	bne.n	800058e <LCD_SendStr+0x1a>
			LCD_SendCmd(LCD_SECOND_LINE);
 8000588:	20c0      	movs	r0, #192	@ 0xc0
 800058a:	f7ff ffb7 	bl	80004fc <LCD_SendCmd>
		}
		LCD_SendData((uint8_t)str[i]);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ffc7 	bl	800052a <LCD_SendData>
	for (int i = 0; str[i]; i++) {
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	3301      	adds	r3, #1
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1e9      	bne.n	8000582 <LCD_SendStr+0xe>
	}
}
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b095      	sub	sp, #84	@ 0x54
 80005bc:	af12      	add	r7, sp, #72	@ 0x48
 80005be:	4603      	mov	r3, r0
 80005c0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005c8:	f040 80af 	bne.w	800072a <HAL_GPIO_EXTI_Callback+0x172>
		/* B1 is pressed */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0) {
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4895      	ldr	r0, [pc, #596]	@ (8000828 <HAL_GPIO_EXTI_Callback+0x270>)
 80005d2:	f001 ffab 	bl	800252c <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d16f      	bne.n	80006bc <HAL_GPIO_EXTI_Callback+0x104>
			/* sound indication */
			if (enable_sound) generate_sound(460, 50, htim1);
 80005dc:	4b93      	ldr	r3, [pc, #588]	@ (800082c <HAL_GPIO_EXTI_Callback+0x274>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d00e      	beq.n	8000602 <HAL_GPIO_EXTI_Callback+0x4a>
 80005e4:	4c92      	ldr	r4, [pc, #584]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x278>)
 80005e6:	4668      	mov	r0, sp
 80005e8:	f104 0308 	add.w	r3, r4, #8
 80005ec:	2244      	movs	r2, #68	@ 0x44
 80005ee:	4619      	mov	r1, r3
 80005f0:	f005 fbec 	bl	8005dcc <memcpy>
 80005f4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80005f8:	2132      	movs	r1, #50	@ 0x32
 80005fa:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 80005fe:	f7ff fe57 	bl	80002b0 <generate_sound>

			if (enable_vibration) {
 8000602:	4b8c      	ldr	r3, [pc, #560]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <HAL_GPIO_EXTI_Callback+0x5a>
				vibration_call(STEPS_PER_REV);
 800060a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060e:	f001 fbbb 	bl	8001d88 <vibration_call>
			}
			switch (currentScreen) {
 8000612:	4b89      	ldr	r3, [pc, #548]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x280>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b06      	cmp	r3, #6
 800061a:	d00a      	beq.n	8000632 <HAL_GPIO_EXTI_Callback+0x7a>
 800061c:	2b06      	cmp	r3, #6
 800061e:	dc21      	bgt.n	8000664 <HAL_GPIO_EXTI_Callback+0xac>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d002      	beq.n	800062a <HAL_GPIO_EXTI_Callback+0x72>
 8000624:	2b03      	cmp	r3, #3
 8000626:	d01a      	beq.n	800065e <HAL_GPIO_EXTI_Callback+0xa6>
 8000628:	e01c      	b.n	8000664 <HAL_GPIO_EXTI_Callback+0xac>
				case HOME:
					currentScreen = TIME;
 800062a:	4b83      	ldr	r3, [pc, #524]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x280>)
 800062c:	2202      	movs	r2, #2
 800062e:	701a      	strb	r2, [r3, #0]
					break;
 8000630:	e018      	b.n	8000664 <HAL_GPIO_EXTI_Callback+0xac>

				case SETTINGS:
					flash  = !flash;
 8000632:	4b82      	ldr	r3, [pc, #520]	@ (800083c <HAL_GPIO_EXTI_Callback+0x284>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	bf14      	ite	ne
 800063c:	2301      	movne	r3, #1
 800063e:	2300      	moveq	r3, #0
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f083 0301 	eor.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b7b      	ldr	r3, [pc, #492]	@ (800083c <HAL_GPIO_EXTI_Callback+0x284>)
 8000650:	701a      	strb	r2, [r3, #0]
					flash_state();
 8000652:	f001 f803 	bl	800165c <flash_state>
					screenNeedsRefresh = true;
 8000656:	4b7a      	ldr	r3, [pc, #488]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x288>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
					break;
 800065c:	e002      	b.n	8000664 <HAL_GPIO_EXTI_Callback+0xac>

				case ALARM:
					changeAlarmMin();
 800065e:	f001 fb01 	bl	8001c64 <changeAlarmMin>
					break;
 8000662:	bf00      	nop
				}
//			check_double_press(0, is_single_press, is_double_press, is_holding,
//					decimal_second_count, double_press_interval,
//					button_double_press_time, button_holding_time);
			if (is_single_press[0] == true &&
 8000664:	4b77      	ldr	r3, [pc, #476]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d019      	beq.n	80006a0 <HAL_GPIO_EXTI_Callback+0xe8>
				is_double_press[0] == false &&
 800066c:	4b76      	ldr	r3, [pc, #472]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f083 0301 	eor.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
			if (is_single_press[0] == true &&
 8000676:	2b00      	cmp	r3, #0
 8000678:	d012      	beq.n	80006a0 <HAL_GPIO_EXTI_Callback+0xe8>
				(decimal_second_count - button_double_press_time[0]) <= double_press_interval) {
 800067a:	4b74      	ldr	r3, [pc, #464]	@ (800084c <HAL_GPIO_EXTI_Callback+0x294>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b74      	ldr	r3, [pc, #464]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x298>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	1ad2      	subs	r2, r2, r3
 8000684:	4b73      	ldr	r3, [pc, #460]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000686:	681b      	ldr	r3, [r3, #0]
				is_double_press[0] == false &&
 8000688:	429a      	cmp	r2, r3
 800068a:	d809      	bhi.n	80006a0 <HAL_GPIO_EXTI_Callback+0xe8>
				is_double_press[0] = true;
 800068c:	4b6e      	ldr	r3, [pc, #440]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 8000692:	4b6c      	ldr	r3, [pc, #432]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 8000698:	4b6f      	ldr	r3, [pc, #444]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
 800069e:	e008      	b.n	80006b2 <HAL_GPIO_EXTI_Callback+0xfa>

			} else {
				is_single_press[0] = true;
 80006a0:	4b68      	ldr	r3, [pc, #416]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 80006a6:	4b68      	ldr	r3, [pc, #416]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
				is_holding[0] = false;
 80006ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
			}

			button_holding_time[0] = decimal_second_count;
 80006b2:	4b66      	ldr	r3, [pc, #408]	@ (800084c <HAL_GPIO_EXTI_Callback+0x294>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a69      	ldr	r2, [pc, #420]	@ (800085c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006b8:	6013      	str	r3, [r2, #0]
			} else {
				button_double_press_time[3] = decimal_second_count;
			}
		}
	}
}
 80006ba:	e282      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
			stop_sound(htim1);
 80006bc:	4e5c      	ldr	r6, [pc, #368]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x278>)
 80006be:	466d      	mov	r5, sp
 80006c0:	f106 0410 	add.w	r4, r6, #16
 80006c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80006d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80006d8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80006dc:	f7ff fe20 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[0]) >= holding_bound) {
 80006e0:	4b5a      	ldr	r3, [pc, #360]	@ (800084c <HAL_GPIO_EXTI_Callback+0x294>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b5d      	ldr	r3, [pc, #372]	@ (800085c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1ad2      	subs	r2, r2, r3
 80006ea:	4b5d      	ldr	r3, [pc, #372]	@ (8000860 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d309      	bcc.n	8000706 <HAL_GPIO_EXTI_Callback+0x14e>
				is_holding[0] = true;
 80006f2:	4b59      	ldr	r3, [pc, #356]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	701a      	strb	r2, [r3, #0]
				is_double_press[0] = false;
 80006f8:	4b53      	ldr	r3, [pc, #332]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
				is_single_press[0] = false;
 80006fe:	4b51      	ldr	r3, [pc, #324]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e003      	b.n	800070e <HAL_GPIO_EXTI_Callback+0x156>
				button_double_press_time[0] = decimal_second_count;
 8000706:	4b51      	ldr	r3, [pc, #324]	@ (800084c <HAL_GPIO_EXTI_Callback+0x294>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a51      	ldr	r2, [pc, #324]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x298>)
 800070c:	6013      	str	r3, [r2, #0]
			if (is_holding[0]) {
 800070e:	4b52      	ldr	r3, [pc, #328]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	f000 8254 	beq.w	8000bc0 <HAL_GPIO_EXTI_Callback+0x608>
				switch (currentScreen) {
 8000718:	4b47      	ldr	r3, [pc, #284]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x280>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2b02      	cmp	r3, #2
 8000720:	f040 824f 	bne.w	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
						switchTimeFormat();
 8000724:	f001 fa1a 	bl	8001b5c <switchTimeFormat>
						break;
 8000728:	e24b      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
	} else if (GPIO_Pin == SW1_Pin) {
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	2b02      	cmp	r3, #2
 800072e:	f040 80d1 	bne.w	80008d4 <HAL_GPIO_EXTI_Callback+0x31c>
		if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1) {
 8000732:	2102      	movs	r1, #2
 8000734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000738:	f001 fef8 	bl	800252c <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	f040 8090 	bne.w	8000864 <HAL_GPIO_EXTI_Callback+0x2ac>
			if (enable_sound) generate_sound(460, 50, htim1);
 8000744:	4b39      	ldr	r3, [pc, #228]	@ (800082c <HAL_GPIO_EXTI_Callback+0x274>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00e      	beq.n	800076a <HAL_GPIO_EXTI_Callback+0x1b2>
 800074c:	4c38      	ldr	r4, [pc, #224]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x278>)
 800074e:	4668      	mov	r0, sp
 8000750:	f104 0308 	add.w	r3, r4, #8
 8000754:	2244      	movs	r2, #68	@ 0x44
 8000756:	4619      	mov	r1, r3
 8000758:	f005 fb38 	bl	8005dcc <memcpy>
 800075c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000760:	2132      	movs	r1, #50	@ 0x32
 8000762:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000766:	f7ff fda3 	bl	80002b0 <generate_sound>
			if (enable_vibration) {
 800076a:	4b32      	ldr	r3, [pc, #200]	@ (8000834 <HAL_GPIO_EXTI_Callback+0x27c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d003      	beq.n	800077a <HAL_GPIO_EXTI_Callback+0x1c2>
				vibration_call(STEPS_PER_REV);
 8000772:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000776:	f001 fb07 	bl	8001d88 <vibration_call>
			switch (currentScreen) {
 800077a:	4b2f      	ldr	r3, [pc, #188]	@ (8000838 <HAL_GPIO_EXTI_Callback+0x280>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b06      	cmp	r3, #6
 8000782:	d124      	bne.n	80007ce <HAL_GPIO_EXTI_Callback+0x216>
					if (enable_sound) generate_sound(460, 50, htim1);
 8000784:	4b29      	ldr	r3, [pc, #164]	@ (800082c <HAL_GPIO_EXTI_Callback+0x274>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00e      	beq.n	80007aa <HAL_GPIO_EXTI_Callback+0x1f2>
 800078c:	4c28      	ldr	r4, [pc, #160]	@ (8000830 <HAL_GPIO_EXTI_Callback+0x278>)
 800078e:	4668      	mov	r0, sp
 8000790:	f104 0308 	add.w	r3, r4, #8
 8000794:	2244      	movs	r2, #68	@ 0x44
 8000796:	4619      	mov	r1, r3
 8000798:	f005 fb18 	bl	8005dcc <memcpy>
 800079c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80007a0:	2132      	movs	r1, #50	@ 0x32
 80007a2:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 80007a6:	f7ff fd83 	bl	80002b0 <generate_sound>
					enable_sound = !enable_sound;
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <HAL_GPIO_EXTI_Callback+0x274>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf14      	ite	ne
 80007b2:	2301      	movne	r3, #1
 80007b4:	2300      	moveq	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b19      	ldr	r3, [pc, #100]	@ (800082c <HAL_GPIO_EXTI_Callback+0x274>)
 80007c6:	701a      	strb	r2, [r3, #0]
					screenNeedsRefresh = true;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000840 <HAL_GPIO_EXTI_Callback+0x288>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
			if (is_single_press[1] == true &&
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d019      	beq.n	800080a <HAL_GPIO_EXTI_Callback+0x252>
				is_double_press[1] == false &&
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	f083 0301 	eor.w	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
			if (is_single_press[1] == true &&
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d012      	beq.n	800080a <HAL_GPIO_EXTI_Callback+0x252>
				(decimal_second_count - button_double_press_time[1]) <= double_press_interval) {
 80007e4:	4b19      	ldr	r3, [pc, #100]	@ (800084c <HAL_GPIO_EXTI_Callback+0x294>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x298>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	1ad2      	subs	r2, r2, r3
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
				is_double_press[1] == false &&
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d809      	bhi.n	800080a <HAL_GPIO_EXTI_Callback+0x252>
				is_double_press[1] = true;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000804:	2200      	movs	r2, #0
 8000806:	705a      	strb	r2, [r3, #1]
 8000808:	e008      	b.n	800081c <HAL_GPIO_EXTI_Callback+0x264>
				is_single_press[1] = true;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_GPIO_EXTI_Callback+0x28c>)
 800080c:	2201      	movs	r2, #1
 800080e:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 8000810:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <HAL_GPIO_EXTI_Callback+0x290>)
 8000812:	2200      	movs	r2, #0
 8000814:	705a      	strb	r2, [r3, #1]
				is_holding[1] = false;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000818:	2200      	movs	r2, #0
 800081a:	705a      	strb	r2, [r3, #1]
			button_holding_time[1] = decimal_second_count;
 800081c:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <HAL_GPIO_EXTI_Callback+0x294>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000822:	6053      	str	r3, [r2, #4]
}
 8000824:	e1cd      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
 8000826:	bf00      	nop
 8000828:	48000800 	.word	0x48000800
 800082c:	20000008 	.word	0x20000008
 8000830:	200000c0 	.word	0x200000c0
 8000834:	20000009 	.word	0x20000009
 8000838:	2000000a 	.word	0x2000000a
 800083c:	200001e4 	.word	0x200001e4
 8000840:	200001d4 	.word	0x200001d4
 8000844:	200001d8 	.word	0x200001d8
 8000848:	200001dc 	.word	0x200001dc
 800084c:	200001b0 	.word	0x200001b0
 8000850:	200001b4 	.word	0x200001b4
 8000854:	20000000 	.word	0x20000000
 8000858:	200001e0 	.word	0x200001e0
 800085c:	200001c4 	.word	0x200001c4
 8000860:	20000004 	.word	0x20000004
			stop_sound(htim1);
 8000864:	4e9a      	ldr	r6, [pc, #616]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x518>)
 8000866:	466d      	mov	r5, sp
 8000868:	f106 0410 	add.w	r4, r6, #16
 800086c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800086e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000878:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800087c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000880:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000884:	f7ff fd4c 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[1]) >= holding_bound) {
 8000888:	4b92      	ldr	r3, [pc, #584]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x51c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b92      	ldr	r3, [pc, #584]	@ (8000ad8 <HAL_GPIO_EXTI_Callback+0x520>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	1ad2      	subs	r2, r2, r3
 8000892:	4b92      	ldr	r3, [pc, #584]	@ (8000adc <HAL_GPIO_EXTI_Callback+0x524>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	429a      	cmp	r2, r3
 8000898:	d309      	bcc.n	80008ae <HAL_GPIO_EXTI_Callback+0x2f6>
				is_holding[1] = true;
 800089a:	4b91      	ldr	r3, [pc, #580]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x528>)
 800089c:	2201      	movs	r2, #1
 800089e:	705a      	strb	r2, [r3, #1]
				is_double_press[1] = false;
 80008a0:	4b90      	ldr	r3, [pc, #576]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x52c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	705a      	strb	r2, [r3, #1]
				is_single_press[1] = false;
 80008a6:	4b90      	ldr	r3, [pc, #576]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x530>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	705a      	strb	r2, [r3, #1]
 80008ac:	e003      	b.n	80008b6 <HAL_GPIO_EXTI_Callback+0x2fe>
				button_double_press_time[1] = decimal_second_count;
 80008ae:	4b89      	ldr	r3, [pc, #548]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x51c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a8e      	ldr	r2, [pc, #568]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x534>)
 80008b4:	6053      	str	r3, [r2, #4]
			if (is_holding[1]) {
 80008b6:	4b8a      	ldr	r3, [pc, #552]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x528>)
 80008b8:	785b      	ldrb	r3, [r3, #1]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 8181 	beq.w	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
				switch (currentScreen){
 80008c0:	4b8b      	ldr	r3, [pc, #556]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	f040 817b 	bne.w	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
						currentScreen = TIME;
 80008cc:	4b88      	ldr	r3, [pc, #544]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	701a      	strb	r2, [r3, #0]
						break;
 80008d2:	e176      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
	} else if (GPIO_Pin == SW2_Pin) {
 80008d4:	88fb      	ldrh	r3, [r7, #6]
 80008d6:	2b10      	cmp	r3, #16
 80008d8:	f040 8081 	bne.w	80009de <HAL_GPIO_EXTI_Callback+0x426>
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == 1) {
 80008dc:	2110      	movs	r1, #16
 80008de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e2:	f001 fe23 	bl	800252c <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d146      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x3c2>
			if (enable_sound) generate_sound(460, 50, htim1);
 80008ec:	4b81      	ldr	r3, [pc, #516]	@ (8000af4 <HAL_GPIO_EXTI_Callback+0x53c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00e      	beq.n	8000912 <HAL_GPIO_EXTI_Callback+0x35a>
 80008f4:	4c76      	ldr	r4, [pc, #472]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x518>)
 80008f6:	4668      	mov	r0, sp
 80008f8:	f104 0308 	add.w	r3, r4, #8
 80008fc:	2244      	movs	r2, #68	@ 0x44
 80008fe:	4619      	mov	r1, r3
 8000900:	f005 fa64 	bl	8005dcc <memcpy>
 8000904:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000908:	2132      	movs	r1, #50	@ 0x32
 800090a:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 800090e:	f7ff fccf 	bl	80002b0 <generate_sound>
			if (enable_vibration) {
 8000912:	4b79      	ldr	r3, [pc, #484]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x540>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d003      	beq.n	8000922 <HAL_GPIO_EXTI_Callback+0x36a>
				vibration_call(STEPS_PER_REV);
 800091a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800091e:	f001 fa33 	bl	8001d88 <vibration_call>
		    if (is_single_press[2] == true &&
 8000922:	4b71      	ldr	r3, [pc, #452]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x530>)
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d019      	beq.n	800095e <HAL_GPIO_EXTI_Callback+0x3a6>
		        is_double_press[2] == false &&
 800092a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x52c>)
 800092c:	789b      	ldrb	r3, [r3, #2]
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
		    if (is_single_press[2] == true &&
 8000934:	2b00      	cmp	r3, #0
 8000936:	d012      	beq.n	800095e <HAL_GPIO_EXTI_Callback+0x3a6>
		        (decimal_second_count - button_double_press_time[2]) <= double_press_interval) {
 8000938:	4b66      	ldr	r3, [pc, #408]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x51c>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b6b      	ldr	r3, [pc, #428]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x534>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	1ad2      	subs	r2, r2, r3
 8000942:	4b6e      	ldr	r3, [pc, #440]	@ (8000afc <HAL_GPIO_EXTI_Callback+0x544>)
 8000944:	681b      	ldr	r3, [r3, #0]
		        is_double_press[2] == false &&
 8000946:	429a      	cmp	r2, r3
 8000948:	d809      	bhi.n	800095e <HAL_GPIO_EXTI_Callback+0x3a6>
		        is_double_press[2] = true;
 800094a:	4b66      	ldr	r3, [pc, #408]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x52c>)
 800094c:	2201      	movs	r2, #1
 800094e:	709a      	strb	r2, [r3, #2]
		        is_single_press[2] = false;
 8000950:	4b65      	ldr	r3, [pc, #404]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x530>)
 8000952:	2200      	movs	r2, #0
 8000954:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 8000956:	4b62      	ldr	r3, [pc, #392]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x528>)
 8000958:	2200      	movs	r2, #0
 800095a:	709a      	strb	r2, [r3, #2]
 800095c:	e008      	b.n	8000970 <HAL_GPIO_EXTI_Callback+0x3b8>
		        is_single_press[2] = true;
 800095e:	4b62      	ldr	r3, [pc, #392]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x530>)
 8000960:	2201      	movs	r2, #1
 8000962:	709a      	strb	r2, [r3, #2]
		        is_double_press[2] = false;
 8000964:	4b5f      	ldr	r3, [pc, #380]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000966:	2200      	movs	r2, #0
 8000968:	709a      	strb	r2, [r3, #2]
		        is_holding[2] = false;
 800096a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x528>)
 800096c:	2200      	movs	r2, #0
 800096e:	709a      	strb	r2, [r3, #2]
		    button_holding_time[2] = decimal_second_count;
 8000970:	4b58      	ldr	r3, [pc, #352]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x51c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a58      	ldr	r2, [pc, #352]	@ (8000ad8 <HAL_GPIO_EXTI_Callback+0x520>)
 8000976:	6093      	str	r3, [r2, #8]
}
 8000978:	e123      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
			stop_sound(htim1);
 800097a:	4e55      	ldr	r6, [pc, #340]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x518>)
 800097c:	466d      	mov	r5, sp
 800097e:	f106 0410 	add.w	r4, r6, #16
 8000982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800098a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800098c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800098e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000992:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000996:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800099a:	f7ff fcc1 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[2]) >= holding_bound) {
 800099e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x51c>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad8 <HAL_GPIO_EXTI_Callback+0x520>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	1ad2      	subs	r2, r2, r3
 80009a8:	4b4c      	ldr	r3, [pc, #304]	@ (8000adc <HAL_GPIO_EXTI_Callback+0x524>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d309      	bcc.n	80009c4 <HAL_GPIO_EXTI_Callback+0x40c>
				is_holding[2] = true;
 80009b0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x528>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	709a      	strb	r2, [r3, #2]
				is_double_press[2] = false;
 80009b6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x52c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	709a      	strb	r2, [r3, #2]
				is_single_press[2] = false;
 80009bc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x530>)
 80009be:	2200      	movs	r2, #0
 80009c0:	709a      	strb	r2, [r3, #2]
 80009c2:	e003      	b.n	80009cc <HAL_GPIO_EXTI_Callback+0x414>
				button_double_press_time[2] = decimal_second_count;
 80009c4:	4b43      	ldr	r3, [pc, #268]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x51c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a48      	ldr	r2, [pc, #288]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x534>)
 80009ca:	6093      	str	r3, [r2, #8]
			if (is_holding[2] == true) {
 80009cc:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x528>)
 80009ce:	789b      	ldrb	r3, [r3, #2]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	f000 80f6 	beq.w	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
				currentScreen = HOME;
 80009d6:	4b46      	ldr	r3, [pc, #280]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 80009d8:	2201      	movs	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	e0f1      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
	} else if (GPIO_Pin == SW3_Pin){
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	f040 80ee 	bne.w	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
		if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_SET) {
 80009e6:	2101      	movs	r1, #1
 80009e8:	4845      	ldr	r0, [pc, #276]	@ (8000b00 <HAL_GPIO_EXTI_Callback+0x548>)
 80009ea:	f001 fd9f 	bl	800252c <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	f040 80bb 	bne.w	8000b6c <HAL_GPIO_EXTI_Callback+0x5b4>
			if (enable_sound) generate_sound(460, 50, htim1);
 80009f6:	4b3f      	ldr	r3, [pc, #252]	@ (8000af4 <HAL_GPIO_EXTI_Callback+0x53c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00e      	beq.n	8000a1c <HAL_GPIO_EXTI_Callback+0x464>
 80009fe:	4c34      	ldr	r4, [pc, #208]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x518>)
 8000a00:	4668      	mov	r0, sp
 8000a02:	f104 0308 	add.w	r3, r4, #8
 8000a06:	2244      	movs	r2, #68	@ 0x44
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f005 f9df 	bl	8005dcc <memcpy>
 8000a0e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000a12:	2132      	movs	r1, #50	@ 0x32
 8000a14:	f44f 70e6 	mov.w	r0, #460	@ 0x1cc
 8000a18:	f7ff fc4a 	bl	80002b0 <generate_sound>
			if (enable_vibration) {
 8000a1c:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x540>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_EXTI_Callback+0x474>
				vibration_call(STEPS_PER_REV);
 8000a24:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a28:	f001 f9ae 	bl	8001d88 <vibration_call>
			if (is_double_press[2]) {
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x52c>)
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_EXTI_Callback+0x48c>
				switch (currentScreen) {
 8000a34:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d102      	bne.n	8000a44 <HAL_GPIO_EXTI_Callback+0x48c>
					switchAMPM();
 8000a3e:	f001 f8ab 	bl	8001b98 <switchAMPM>
					break;
 8000a42:	bf00      	nop
			switch (currentScreen) {
 8000a44:	4b2a      	ldr	r3, [pc, #168]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	d861      	bhi.n	8000b14 <HAL_GPIO_EXTI_Callback+0x55c>
 8000a50:	a201      	add	r2, pc, #4	@ (adr r2, 8000a58 <HAL_GPIO_EXTI_Callback+0x4a0>)
 8000a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a56:	bf00      	nop
 8000a58:	08000a71 	.word	0x08000a71
 8000a5c:	08000a95 	.word	0x08000a95
 8000a60:	08000a9d 	.word	0x08000a9d
 8000a64:	08000b15 	.word	0x08000b15
 8000a68:	08000a83 	.word	0x08000a83
 8000a6c:	08000aa3 	.word	0x08000aa3
					previousScreen = currentScreen;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000a78:	701a      	strb	r2, [r3, #0]
					currentScreen = OPT;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	701a      	strb	r2, [r3, #0]
					break;
 8000a80:	e048      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x55c>
					previousScreen = currentScreen;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <HAL_GPIO_EXTI_Callback+0x54c>)
 8000a8a:	701a      	strb	r2, [r3, #0]
					currentScreen = SETTINGS;
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a8e:	2206      	movs	r2, #6
 8000a90:	701a      	strb	r2, [r3, #0]
					break;
 8000a92:	e03f      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x55c>
					currentScreen = ALARM;
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x538>)
 8000a96:	2203      	movs	r2, #3
 8000a98:	701a      	strb	r2, [r3, #0]
					break;
 8000a9a:	e03b      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x55c>
					changeAlarmHour();
 8000a9c:	f001 f8b2 	bl	8001c04 <changeAlarmHour>
					break;
 8000aa0:	e038      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x55c>
					enable_vibration = !enable_vibration;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x540>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x540>)
 8000abe:	701a      	strb	r2, [r3, #0]
					if (enable_vibration) {
 8000ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_GPIO_EXTI_Callback+0x540>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d01f      	beq.n	8000b08 <HAL_GPIO_EXTI_Callback+0x550>
						vibration_call(32);
 8000ac8:	2020      	movs	r0, #32
 8000aca:	f001 f95d 	bl	8001d88 <vibration_call>
 8000ace:	e01d      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x554>
 8000ad0:	200000c0 	.word	0x200000c0
 8000ad4:	200001b0 	.word	0x200001b0
 8000ad8:	200001c4 	.word	0x200001c4
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	200001e0 	.word	0x200001e0
 8000ae4:	200001dc 	.word	0x200001dc
 8000ae8:	200001d8 	.word	0x200001d8
 8000aec:	200001b4 	.word	0x200001b4
 8000af0:	2000000a 	.word	0x2000000a
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000009 	.word	0x20000009
 8000afc:	20000000 	.word	0x20000000
 8000b00:	48000400 	.word	0x48000400
 8000b04:	200001e5 	.word	0x200001e5
						vibration_stop();
 8000b08:	f001 f95e 	bl	8001dc8 <vibration_stop>
					screenNeedsRefresh = true;
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000bcc <HAL_GPIO_EXTI_Callback+0x614>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
					break;
 8000b12:	bf00      	nop
			if (is_single_press[3] == true &&
 8000b14:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd0 <HAL_GPIO_EXTI_Callback+0x618>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d019      	beq.n	8000b50 <HAL_GPIO_EXTI_Callback+0x598>
				is_double_press[3] == false &&
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
			if (is_single_press[3] == true &&
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d012      	beq.n	8000b50 <HAL_GPIO_EXTI_Callback+0x598>
				(decimal_second_count - button_double_press_time[3]) <= double_press_interval) {
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x620>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <HAL_GPIO_EXTI_Callback+0x624>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	1ad2      	subs	r2, r2, r3
 8000b34:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <HAL_GPIO_EXTI_Callback+0x628>)
 8000b36:	681b      	ldr	r3, [r3, #0]
				is_double_press[3] == false &&
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d809      	bhi.n	8000b50 <HAL_GPIO_EXTI_Callback+0x598>
				is_double_press[3] = true;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <HAL_GPIO_EXTI_Callback+0x618>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	70da      	strb	r2, [r3, #3]
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_EXTI_Callback+0x5aa>
				is_single_press[3] = true;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <HAL_GPIO_EXTI_Callback+0x618>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	70da      	strb	r2, [r3, #3]
				is_holding[3] = false;
 8000b5c:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	70da      	strb	r2, [r3, #3]
			button_holding_time[3] = decimal_second_count;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x620>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a20      	ldr	r2, [pc, #128]	@ (8000be8 <HAL_GPIO_EXTI_Callback+0x630>)
 8000b68:	60d3      	str	r3, [r2, #12]
}
 8000b6a:	e02a      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
			stop_sound(htim1);
 8000b6c:	4e1f      	ldr	r6, [pc, #124]	@ (8000bec <HAL_GPIO_EXTI_Callback+0x634>)
 8000b6e:	466d      	mov	r5, sp
 8000b70:	f106 0410 	add.w	r4, r6, #16
 8000b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b80:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b84:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000b88:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b8c:	f7ff fbc8 	bl	8000320 <stop_sound>
			if ((decimal_second_count - button_holding_time[3]) >= holding_bound) {
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x620>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_GPIO_EXTI_Callback+0x630>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	1ad2      	subs	r2, r2, r3
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_GPIO_EXTI_Callback+0x638>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d309      	bcc.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x5fe>
				is_holding[3] = true;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <HAL_GPIO_EXTI_Callback+0x62c>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	70da      	strb	r2, [r3, #3]
				is_double_press[3] = false;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_GPIO_EXTI_Callback+0x61c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	70da      	strb	r2, [r3, #3]
				is_single_press[3] = false;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_GPIO_EXTI_Callback+0x618>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	70da      	strb	r2, [r3, #3]
}
 8000bb4:	e005      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
				button_double_press_time[3] = decimal_second_count;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x620>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_GPIO_EXTI_Callback+0x624>)
 8000bbc:	60d3      	str	r3, [r2, #12]
}
 8000bbe:	e000      	b.n	8000bc2 <HAL_GPIO_EXTI_Callback+0x60a>
					default:
 8000bc0:	bf00      	nop
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200001d4 	.word	0x200001d4
 8000bd0:	200001d8 	.word	0x200001d8
 8000bd4:	200001dc 	.word	0x200001dc
 8000bd8:	200001b0 	.word	0x200001b0
 8000bdc:	200001b4 	.word	0x200001b4
 8000be0:	20000000 	.word	0x20000000
 8000be4:	200001e0 	.word	0x200001e0
 8000be8:	200001c4 	.word	0x200001c4
 8000bec:	200000c0 	.word	0x200000c0
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    if (htim == &htim6) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a12      	ldr	r2, [pc, #72]	@ (8000c48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d105      	bne.n	8000c10 <HAL_TIM_PeriodElapsedCallback+0x1c>
        seconds++;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a10      	ldr	r2, [pc, #64]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c0c:	6013      	str	r3, [r2, #0]
            period_count = 0;
            decimal_second_count++;
        }
        vibration_tick_1ms(); // vibration ticker
    }
}
 8000c0e:	e016      	b.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x4a>
    } else if (htim == &htim7) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d112      	bne.n	8000c3e <HAL_TIM_PeriodElapsedCallback+0x4a>
        period_count++;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c20:	6013      	str	r3, [r2, #0]
        if (period_count >= 100) {
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b63      	cmp	r3, #99	@ 0x63
 8000c28:	d907      	bls.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x46>
            period_count = 0;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
            decimal_second_count++;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c38:	6013      	str	r3, [r2, #0]
        vibration_tick_1ms(); // vibration ticker
 8000c3a:	f001 f8e9 	bl	8001e10 <vibration_tick_1ms>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000010c 	.word	0x2000010c
 8000c4c:	200001a8 	.word	0x200001a8
 8000c50:	20000158 	.word	0x20000158
 8000c54:	200001ac 	.word	0x200001ac
 8000c58:	200001b0 	.word	0x200001b0

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f001 f93e 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 f898 	bl	8000d98 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  system_clock_setup();
 8000c68:	f000 fbc0 	bl	80013ec <system_clock_setup>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f000 faae 	bl	80011cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000c70:	f000 f8f8 	bl	8000e64 <MX_RTC_Init>
  MX_TIM1_Init();
 8000c74:	f000 f982 	bl	8000f7c <MX_TIM1_Init>
  MX_TIM6_Init();
 8000c78:	f000 fa3a 	bl	80010f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000c7c:	f000 fa70 	bl	8001160 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  //timeDateInit();
  coast_lcd_init();
 8000c80:	f7ff fba4 	bl	80003cc <coast_lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000c84:	483d      	ldr	r0, [pc, #244]	@ (8000d7c <main+0x120>)
 8000c86:	f003 fd29 	bl	80046dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000c8a:	483d      	ldr	r0, [pc, #244]	@ (8000d80 <main+0x124>)
 8000c8c:	f003 fd26 	bl	80046dc <HAL_TIM_Base_Start_IT>
//	  }
//	  if (button_vibration) {
//		  generate_vibration();
//		  button_vibration = false;
//	  }
	  if (currentScreen != previousScreen || screenNeedsRefresh || timeFormatChanged) {
 8000c90:	4b3c      	ldr	r3, [pc, #240]	@ (8000d84 <main+0x128>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b3c      	ldr	r3, [pc, #240]	@ (8000d88 <main+0x12c>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d107      	bne.n	8000cb0 <main+0x54>
 8000ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8000d8c <main+0x130>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d103      	bne.n	8000cb0 <main+0x54>
 8000ca8:	4b39      	ldr	r3, [pc, #228]	@ (8000d90 <main+0x134>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d042      	beq.n	8000d36 <main+0xda>
	  	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fc23 	bl	80004fc <LCD_SendCmd>
	  	coast_asm_delay(2);
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fa92 	bl	80001e0 <coast_asm_delay>

	  	switch (currentScreen) {
 8000cbc:	4b31      	ldr	r3, [pc, #196]	@ (8000d84 <main+0x128>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	d826      	bhi.n	8000d16 <main+0xba>
 8000cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd0 <main+0x74>)
 8000cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cce:	bf00      	nop
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000cf7 	.word	0x08000cf7
 8000cd8:	08000d05 	.word	0x08000d05
 8000cdc:	08000d17 	.word	0x08000d17
 8000ce0:	08000d0b 	.word	0x08000d0b
 8000ce4:	08000d11 	.word	0x08000d11
	  		case HOME:
	  			homePage(); // draw layout only
 8000ce8:	f7ff fb2c 	bl	8000344 <homePage>
	  			updateTime(1, 4);
 8000cec:	2104      	movs	r1, #4
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 fe9a 	bl	8001a28 <updateTime>
	  			break;
 8000cf4:	e00f      	b.n	8000d16 <main+0xba>
	  		case TIME:
	  			timePage();
 8000cf6:	f000 fe41 	bl	800197c <timePage>
	  			updateTime(0, 4);
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f000 fe93 	bl	8001a28 <updateTime>
	  			break;
 8000d02:	e008      	b.n	8000d16 <main+0xba>
	  		case ALARM:
	  			alarmPage();
 8000d04:	f000 fefa 	bl	8001afc <alarmPage>
	  			break;
 8000d08:	e005      	b.n	8000d16 <main+0xba>
	  		case OPT:
	  			OPTpage();
 8000d0a:	f7ff fb45 	bl	8000398 <OPTpage>
	  			break;
 8000d0e:	e002      	b.n	8000d16 <main+0xba>
	  		case SETTINGS:
	  			settingsPage();
 8000d10:	f000 fbda 	bl	80014c8 <settingsPage>
	  			break;
 8000d14:	bf00      	nop
	  	}
	  	previousScreen = currentScreen;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <main+0x128>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <main+0x12c>)
 8000d1e:	701a      	strb	r2, [r3, #0]
	  	screenNeedsRefresh = false;  // clear the flags
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <main+0x130>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	  	timeFormatChanged = false;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <main+0x134>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
	  	last_tick = HAL_GetTick();
 8000d2c:	f001 f932 	bl	8001f94 <HAL_GetTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <main+0x138>)
 8000d34:	6013      	str	r3, [r2, #0]
	  }
	    //HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin, 1);
	  /* UPDATE TIME EVERY SECOND ELAPSED */
	  if ((HAL_GetTick() - last_tick) >= 1000) {
 8000d36:	f001 f92d 	bl	8001f94 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <main+0x138>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d46:	d3a3      	bcc.n	8000c90 <main+0x34>
	  	switch (currentScreen) {
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <main+0x128>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d002      	beq.n	8000d58 <main+0xfc>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d005      	beq.n	8000d62 <main+0x106>
	  			break;
	  		case TIME:
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
	  			break;
	  		default:
	  			break;
 8000d56:	e009      	b.n	8000d6c <main+0x110>
	  			updateTime(1, 4);  // row 1 (second line), column 4
 8000d58:	2104      	movs	r1, #4
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 fe64 	bl	8001a28 <updateTime>
	  			break;
 8000d60:	e004      	b.n	8000d6c <main+0x110>
	  			updateTime(0, 4);  // row 0, col 6 (or wherever)
 8000d62:	2104      	movs	r1, #4
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 fe5f 	bl	8001a28 <updateTime>
	  			break;
 8000d6a:	bf00      	nop
	  	}
	  	last_tick += 1000;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <main+0x138>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000d74:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <main+0x138>)
 8000d76:	6013      	str	r3, [r2, #0]
	  if (currentScreen != previousScreen || screenNeedsRefresh || timeFormatChanged) {
 8000d78:	e78a      	b.n	8000c90 <main+0x34>
 8000d7a:	bf00      	nop
 8000d7c:	2000010c 	.word	0x2000010c
 8000d80:	20000158 	.word	0x20000158
 8000d84:	2000000a 	.word	0x2000000a
 8000d88:	200001e5 	.word	0x200001e5
 8000d8c:	200001d4 	.word	0x200001d4
 8000d90:	200001d5 	.word	0x200001d5
 8000d94:	200001a4 	.word	0x200001a4

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0a6      	sub	sp, #152	@ 0x98
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000da2:	2228      	movs	r2, #40	@ 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 ffdc 	bl	8005d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2258      	movs	r2, #88	@ 0x58
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f004 ffce 	bl	8005d64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000dc8:	230a      	movs	r3, #10
 8000dca:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000de6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fbdd 	bl	80025bc <HAL_RCC_OscConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e08:	f000 fb57 	bl	80014ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e10:	2302      	movs	r3, #2
 8000e12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fbeb 	bl	8003604 <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000e34:	f000 fb41 	bl	80014ba <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8000e38:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8000e3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e42:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f002 fd9c 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e56:	f000 fb30 	bl	80014ba <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	3798      	adds	r7, #152	@ 0x98
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b090      	sub	sp, #64	@ 0x40
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2228      	movs	r2, #40	@ 0x28
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 ff6d 	bl	8005d64 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f78 <MX_RTC_Init+0x114>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e90:	4b38      	ldr	r3, [pc, #224]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e96:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000e98:	227f      	movs	r2, #127	@ 0x7f
 8000e9a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e9c:	4b35      	ldr	r3, [pc, #212]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ea2:	4b34      	ldr	r3, [pc, #208]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea8:	4b32      	ldr	r3, [pc, #200]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eb4:	482f      	ldr	r0, [pc, #188]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000eb6:	f002 ff83 	bl	8003dc0 <HAL_RTC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f000 fafb 	bl	80014ba <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x8;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x30;
 8000eca:	2330      	movs	r3, #48	@ 0x30
 8000ecc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ede:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4823      	ldr	r0, [pc, #140]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000ee8:	f002 ffed 	bl	8003ec6 <HAL_RTC_SetTime>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000ef2:	f000 fae2 	bl	80014ba <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_AUGUST;
 8000efc:	2308      	movs	r3, #8
 8000efe:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x3;
 8000f02:	2303      	movs	r3, #3
 8000f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x25;
 8000f08:	2325      	movs	r3, #37	@ 0x25
 8000f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f12:	2201      	movs	r2, #1
 8000f14:	4619      	mov	r1, r3
 8000f16:	4817      	ldr	r0, [pc, #92]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000f18:	f003 f8cd 	bl	80040b6 <HAL_RTC_SetDate>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000f22:	f000 faca 	bl	80014ba <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <MX_RTC_Init+0x110>)
 8000f5e:	f003 f97d 	bl	800425c <HAL_RTC_SetAlarm>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000f68:	f000 faa7 	bl	80014ba <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3740      	adds	r7, #64	@ 0x40
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000a0 	.word	0x200000a0
 8000f78:	40002800 	.word	0x40002800

08000f7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09a      	sub	sp, #104	@ 0x68
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	222c      	movs	r2, #44	@ 0x2c
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fed4 	bl	8005d64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fbc:	4b4a      	ldr	r3, [pc, #296]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fbe:	4a4b      	ldr	r2, [pc, #300]	@ (80010ec <MX_TIM1_Init+0x170>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000 -1;
 8000fc2:	4b49      	ldr	r3, [pc, #292]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b47      	ldr	r3, [pc, #284]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 296;
 8000fd0:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fd2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8000fd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b43      	ldr	r3, [pc, #268]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b40      	ldr	r3, [pc, #256]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fea:	483f      	ldr	r0, [pc, #252]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8000fec:	f003 fb1e 	bl	800462c <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000ff6:	f000 fa60 	bl	80014ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001004:	4619      	mov	r1, r3
 8001006:	4838      	ldr	r0, [pc, #224]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8001008:	f003 fff8 	bl	8004ffc <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001012:	f000 fa52 	bl	80014ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001016:	4834      	ldr	r0, [pc, #208]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8001018:	f003 fbd0 	bl	80047bc <HAL_TIM_PWM_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001022:	f000 fa4a 	bl	80014ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001032:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001036:	4619      	mov	r1, r3
 8001038:	482b      	ldr	r0, [pc, #172]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 800103a:	f004 fd41 	bl	8005ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8001044:	f000 fa39 	bl	80014ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001048:	2360      	movs	r3, #96	@ 0x60
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001054:	2300      	movs	r3, #0
 8001056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001064:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	481e      	ldr	r0, [pc, #120]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 800106e:	f003 feb1 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001078:	f000 fa1f 	bl	80014ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4818      	ldr	r0, [pc, #96]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 8001086:	f003 fea5 	bl	8004dd4 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001090:	f000 fa13 	bl	80014ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 80010ca:	f004 fd85 	bl	8005bd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80010d4:	f000 f9f1 	bl	80014ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM1_Init+0x16c>)
 80010da:	f000 fb6f 	bl	80017bc <HAL_TIM_MspPostInit>

}
 80010de:	bf00      	nop
 80010e0:	3768      	adds	r7, #104	@ 0x68
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200000c0 	.word	0x200000c0
 80010ec:	40012c00 	.word	0x40012c00

080010f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_TIM6_Init+0x68>)
 8001102:	4a16      	ldr	r2, [pc, #88]	@ (800115c <MX_TIM6_Init+0x6c>)
 8001104:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_TIM6_Init+0x68>)
 8001108:	f242 720f 	movw	r2, #9999	@ 0x270f
 800110c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <MX_TIM6_Init+0x68>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 7199;
 8001114:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_TIM6_Init+0x68>)
 8001116:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800111a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_TIM6_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_TIM6_Init+0x68>)
 8001124:	f003 fa82 	bl	800462c <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800112e:	f000 f9c4 	bl	80014ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	@ (8001158 <MX_TIM6_Init+0x68>)
 8001140:	f004 fcbe 	bl	8005ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800114a:	f000 f9b6 	bl	80014ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000010c 	.word	0x2000010c
 800115c:	40001000 	.word	0x40001000

08001160 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_TIM7_Init+0x64>)
 8001172:	4a15      	ldr	r2, [pc, #84]	@ (80011c8 <MX_TIM7_Init+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_TIM7_Init+0x64>)
 8001178:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800117c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_TIM7_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 71;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_TIM7_Init+0x64>)
 8001186:	2247      	movs	r2, #71	@ 0x47
 8001188:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_TIM7_Init+0x64>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <MX_TIM7_Init+0x64>)
 8001192:	f003 fa4b 	bl	800462c <HAL_TIM_Base_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800119c:	f000 f98d 	bl	80014ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_TIM7_Init+0x64>)
 80011ae:	f004 fc87 	bl	8005ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80011b8:	f000 f97f 	bl	80014ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000158 	.word	0x20000158
 80011c8:	40001400 	.word	0x40001400

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e2:	4b7e      	ldr	r3, [pc, #504]	@ (80013dc <MX_GPIO_Init+0x210>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a7d      	ldr	r2, [pc, #500]	@ (80013dc <MX_GPIO_Init+0x210>)
 80011e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011ec:	6153      	str	r3, [r2, #20]
 80011ee:	4b7b      	ldr	r3, [pc, #492]	@ (80013dc <MX_GPIO_Init+0x210>)
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fa:	4b78      	ldr	r3, [pc, #480]	@ (80013dc <MX_GPIO_Init+0x210>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a77      	ldr	r2, [pc, #476]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001200:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b75      	ldr	r3, [pc, #468]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b72      	ldr	r3, [pc, #456]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a71      	ldr	r2, [pc, #452]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b6f      	ldr	r3, [pc, #444]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b6c      	ldr	r3, [pc, #432]	@ (80013dc <MX_GPIO_Init+0x210>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a6b      	ldr	r2, [pc, #428]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001230:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001234:	6153      	str	r3, [r2, #20]
 8001236:	4b69      	ldr	r3, [pc, #420]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001242:	4b66      	ldr	r3, [pc, #408]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	4a65      	ldr	r2, [pc, #404]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001248:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800124c:	6153      	str	r3, [r2, #20]
 800124e:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <MX_GPIO_Init+0x210>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f640 71e1 	movw	r1, #4065	@ 0xfe1
 8001260:	485f      	ldr	r0, [pc, #380]	@ (80013e0 <MX_GPIO_Init+0x214>)
 8001262:	f001 f97b 	bl	800255c <HAL_GPIO_WritePin>
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|COILB_Pin|Control_RS_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f249 0120 	movw	r1, #36896	@ 0x9020
 800126c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001270:	f001 f974 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 8001274:	2200      	movs	r2, #0
 8001276:	f248 41bc 	movw	r1, #33980	@ 0x84bc
 800127a:	485a      	ldr	r0, [pc, #360]	@ (80013e4 <MX_GPIO_Init+0x218>)
 800127c:	f001 f96e 	bl	800255c <HAL_GPIO_WritePin>
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Control_E_GPIO_Port, Control_E_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2104      	movs	r1, #4
 8001284:	4858      	ldr	r0, [pc, #352]	@ (80013e8 <MX_GPIO_Init+0x21c>)
 8001286:	f001 f969 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001290:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	484f      	ldr	r0, [pc, #316]	@ (80013e0 <MX_GPIO_Init+0x214>)
 80012a2:	f000 ffb9 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin COILA_Pin Control_RW_Pin COILC_Pin
                           Data_D4_Pin Data_D5_Pin Data_D6_Pin Data_D7_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|COILA_Pin|Control_RW_Pin|COILC_Pin
 80012a6:	f640 73e1 	movw	r3, #4065	@ 0xfe1
 80012aa:	617b      	str	r3, [r7, #20]
                          |Data_D4_Pin|Data_D5_Pin|Data_D6_Pin|Data_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4848      	ldr	r0, [pc, #288]	@ (80013e0 <MX_GPIO_Init+0x214>)
 80012c0:	f000 ffaa 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80012c4:	2302      	movs	r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012c8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012dc:	f000 ff9c 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012e0:	230c      	movs	r3, #12
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f0:	2307      	movs	r3, #7
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fe:	f000 ff8b 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8001302:	2310      	movs	r3, #16
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001306:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131a:	f000 ff7d 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin COILB_Pin Control_RS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|COILB_Pin|Control_RS_Pin;
 800131e:	f249 0320 	movw	r3, #36896	@ 0x9020
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133a:	f000 ff6d 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 800133e:	2301      	movs	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001342:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <MX_GPIO_Init+0x218>)
 8001354:	f000 ff60 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : COILD_Pin LED_D1_Pin SER_Data_IN_Pin LED_D2_Pin
                           LED_D2B4_Pin LED_D3_Pin RCLK_Latch_Pin */
  GPIO_InitStruct.Pin = COILD_Pin|LED_D1_Pin|SER_Data_IN_Pin|LED_D2_Pin
 8001358:	f248 43bc 	movw	r3, #33980	@ 0x84bc
 800135c:	617b      	str	r3, [r7, #20]
                          |LED_D2B4_Pin|LED_D3_Pin|RCLK_Latch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	481c      	ldr	r0, [pc, #112]	@ (80013e4 <MX_GPIO_Init+0x218>)
 8001372:	f000 ff51 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : Control_E_Pin */
  GPIO_InitStruct.Pin = Control_E_Pin;
 8001376:	2304      	movs	r3, #4
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Control_E_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4816      	ldr	r0, [pc, #88]	@ (80013e8 <MX_GPIO_Init+0x21c>)
 800138e:	f000 ff43 	bl	8002218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	2006      	movs	r0, #6
 8001398:	f000 ff07 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800139c:	2006      	movs	r0, #6
 800139e:	f000 ff20 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2007      	movs	r0, #7
 80013a8:	f000 feff 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013ac:	2007      	movs	r0, #7
 80013ae:	f000 ff18 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	200a      	movs	r0, #10
 80013b8:	f000 fef7 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013bc:	200a      	movs	r0, #10
 80013be:	f000 ff10 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2028      	movs	r0, #40	@ 0x28
 80013c8:	f000 feef 	bl	80021aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013cc:	2028      	movs	r0, #40	@ 0x28
 80013ce:	f000 ff08 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48000c00 	.word	0x48000c00

080013ec <system_clock_setup>:

/* USER CODE BEGIN 4 */
void system_clock_setup() {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0a6      	sub	sp, #152	@ 0x98
 80013f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80013f6:	2228      	movs	r2, #40	@ 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f004 fcb2 	bl	8005d64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2258      	movs	r2, #88	@ 0x58
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fca4 	bl	8005d64 <memset>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800141c:	2306      	movs	r3, #6
 800141e:	673b      	str	r3, [r7, #112]	@ 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001420:	2301      	movs	r3, #1
 8001422:	67fb      	str	r3, [r7, #124]	@ 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	2310      	movs	r3, #16
 8001426:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800142a:	2301      	movs	r3, #1
 800142c:	67bb      	str	r3, [r7, #120]	@ 0x78
	RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800143e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001442:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001454:	4618      	mov	r0, r3
 8001456:	f001 f8b1 	bl	80025bc <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <system_clock_setup+0x78>
	{
	Error_Handler();
 8001460:	f000 f82b 	bl	80014ba <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	65fb      	str	r3, [r7, #92]	@ 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001468:	2302      	movs	r3, #2
 800146a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001474:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	66fb      	str	r3, [r7, #108]	@ 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800147a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800147e:	2101      	movs	r1, #1
 8001480:	4618      	mov	r0, r3
 8001482:	f002 f8bf 	bl	8003604 <HAL_RCC_ClockConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <system_clock_setup+0xa4>
	{
	Error_Handler();
 800148c:	f000 f815 	bl	80014ba <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM1;
 8001490:	f44f 3388 	mov.w	r3, #69632	@ 0x11000
 8001494:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800149a:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800149c:	2300      	movs	r3, #0
 800149e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 fa70 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <system_clock_setup+0xc6>
	{
	Error_Handler();
 80014ae:	f000 f804 	bl	80014ba <Error_Handler>
	}
}
 80014b2:	bf00      	nop
 80014b4:	3798      	adds	r7, #152	@ 0x98
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014be:	b672      	cpsid	i
}
 80014c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c2:	bf00      	nop
 80014c4:	e7fd      	b.n	80014c2 <Error_Handler+0x8>
	...

080014c8 <settingsPage>:

extern bool enable_sound;
extern bool enable_vibration;
extern volatile bool flash;

void settingsPage() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff f815 	bl	80004fc <LCD_SendCmd>

	LCD_SendStr("SOUND:");
 80014d2:	4816      	ldr	r0, [pc, #88]	@ (800152c <settingsPage+0x64>)
 80014d4:	f7ff f84e 	bl	8000574 <LCD_SendStr>
	LCD_SendStr(enable_sound ? "ON " : "OFF");
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <settingsPage+0x68>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <settingsPage+0x1c>
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <settingsPage+0x6c>)
 80014e2:	e000      	b.n	80014e6 <settingsPage+0x1e>
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <settingsPage+0x70>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f844 	bl	8000574 <LCD_SendStr>


	LCD_SendCmd(LCD_SECOND_LINE); // Move to second line
 80014ec:	20c0      	movs	r0, #192	@ 0xc0
 80014ee:	f7ff f805 	bl	80004fc <LCD_SendCmd>

	LCD_SendStr("HAPT:");
 80014f2:	4812      	ldr	r0, [pc, #72]	@ (800153c <settingsPage+0x74>)
 80014f4:	f7ff f83e 	bl	8000574 <LCD_SendStr>
	LCD_SendStr(enable_vibration ? "ON" : "OF");
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <settingsPage+0x78>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <settingsPage+0x3c>
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <settingsPage+0x7c>)
 8001502:	e000      	b.n	8001506 <settingsPage+0x3e>
 8001504:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <settingsPage+0x80>)
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f834 	bl	8000574 <LCD_SendStr>

	LCD_SendStr("|FLASH:");
 800150c:	480f      	ldr	r0, [pc, #60]	@ (800154c <settingsPage+0x84>)
 800150e:	f7ff f831 	bl	8000574 <LCD_SendStr>
	LCD_SendStr(flash ? "ON" : "OFF");
 8001512:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <settingsPage+0x88>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <settingsPage+0x58>
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <settingsPage+0x7c>)
 800151e:	e000      	b.n	8001522 <settingsPage+0x5a>
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <settingsPage+0x70>)
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f826 	bl	8000574 <LCD_SendStr>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	080066b8 	.word	0x080066b8
 8001530:	20000008 	.word	0x20000008
 8001534:	080066c0 	.word	0x080066c0
 8001538:	080066c4 	.word	0x080066c4
 800153c:	080066c8 	.word	0x080066c8
 8001540:	20000009 	.word	0x20000009
 8001544:	080066d0 	.word	0x080066d0
 8001548:	080066d4 	.word	0x080066d4
 800154c:	080066d8 	.word	0x080066d8
 8001550:	200001e4 	.word	0x200001e4

08001554 <switchLedBar>:
 * Flashlight feature control
 *
 * */

/* switch D5–D20 */
static void switchLedBar(uint16_t value) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
    for (int i = 15; i >= 0; --i) {
 800155e:	230f      	movs	r3, #15
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e01b      	b.n	800159c <switchLedBar+0x48>
        GPIO_PinState bit = (value & (1U << i)) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	fa22 f303 	lsr.w	r3, r2, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SER_Data_IN_GPIO_Port, SER_Data_IN_Pin, bit);
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	461a      	mov	r2, r3
 8001578:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800157c:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <switchLedBar+0x6c>)
 800157e:	f000 ffed 	bl	800255c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2101      	movs	r1, #1
 8001586:	480f      	ldr	r0, [pc, #60]	@ (80015c4 <switchLedBar+0x70>)
 8001588:	f000 ffe8 	bl	800255c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2101      	movs	r1, #1
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <switchLedBar+0x70>)
 8001592:	f000 ffe3 	bl	800255c <HAL_GPIO_WritePin>
    for (int i = 15; i >= 0; --i) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3b01      	subs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	dae0      	bge.n	8001564 <switchLedBar+0x10>
    }
    HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2180      	movs	r1, #128	@ 0x80
 80015a6:	4806      	ldr	r0, [pc, #24]	@ (80015c0 <switchLedBar+0x6c>)
 80015a8:	f000 ffd8 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RCLK_Latch_GPIO_Port, RCLK_Latch_Pin, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2180      	movs	r1, #128	@ 0x80
 80015b0:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <switchLedBar+0x6c>)
 80015b2:	f000 ffd3 	bl	800255c <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800

080015c8 <flash_on>:

void flash_on(void) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
    /* Direct LEDs D1–D4 + LD2 */
    HAL_GPIO_WritePin(LED_D1_GPIO_Port,   LED_D1_Pin,   GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015d2:	480f      	ldr	r0, [pc, #60]	@ (8001610 <flash_on+0x48>)
 80015d4:	f000 ffc2 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D2_GPIO_Port,   LED_D2_Pin,   GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2108      	movs	r1, #8
 80015dc:	480c      	ldr	r0, [pc, #48]	@ (8001610 <flash_on+0x48>)
 80015de:	f000 ffbd 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D3_GPIO_Port,   LED_D3_Pin,   GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2120      	movs	r1, #32
 80015e6:	480a      	ldr	r0, [pc, #40]	@ (8001610 <flash_on+0x48>)
 80015e8:	f000 ffb8 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D2B4_GPIO_Port, LED_D2B4_Pin, GPIO_PIN_SET); // D4 on this board
 80015ec:	2201      	movs	r2, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	4807      	ldr	r0, [pc, #28]	@ (8001610 <flash_on+0x48>)
 80015f2:	f000 ffb3 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port,      LD2_Pin,      GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2120      	movs	r1, #32
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fe:	f000 ffad 	bl	800255c <HAL_GPIO_WritePin>

    // led bar (D5–D20) all ON
    switchLedBar(0xFFFF);
 8001602:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001606:	f7ff ffa5 	bl	8001554 <switchLedBar>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	48000400 	.word	0x48000400

08001614 <flash_off>:

void flash_off(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_D1_GPIO_Port,   LED_D1_Pin,   GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800161e:	480e      	ldr	r0, [pc, #56]	@ (8001658 <flash_off+0x44>)
 8001620:	f000 ff9c 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D2_GPIO_Port,   LED_D2_Pin,   GPIO_PIN_RESET);
 8001624:	2200      	movs	r2, #0
 8001626:	2108      	movs	r1, #8
 8001628:	480b      	ldr	r0, [pc, #44]	@ (8001658 <flash_off+0x44>)
 800162a:	f000 ff97 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D3_GPIO_Port,   LED_D3_Pin,   GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	2120      	movs	r1, #32
 8001632:	4809      	ldr	r0, [pc, #36]	@ (8001658 <flash_off+0x44>)
 8001634:	f000 ff92 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_D2B4_GPIO_Port, LED_D2B4_Pin, GPIO_PIN_RESET);
 8001638:	2200      	movs	r2, #0
 800163a:	2110      	movs	r1, #16
 800163c:	4806      	ldr	r0, [pc, #24]	@ (8001658 <flash_off+0x44>)
 800163e:	f000 ff8d 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LD2_GPIO_Port,      LD2_Pin,      GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2120      	movs	r1, #32
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f000 ff87 	bl	800255c <HAL_GPIO_WritePin>

    // D5–D20 all OFF
    switchLedBar(0x0000);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff80 	bl	8001554 <switchLedBar>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	48000400 	.word	0x48000400

0800165c <flash_state>:

/* Apply current state of flash */
void flash_state(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    if (flash) flash_on(); else flash_off();
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <flash_state+0x1c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <flash_state+0x14>
 800166a:	f7ff ffad 	bl	80015c8 <flash_on>
}
 800166e:	e001      	b.n	8001674 <flash_state+0x18>
    if (flash) flash_on(); else flash_off();
 8001670:	f7ff ffd0 	bl	8001614 <flash_off>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200001e4 	.word	0x200001e4

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x44>)
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6193      	str	r3, [r2, #24]
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x44>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_MspInit+0x44>)
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	61d3      	str	r3, [r2, #28]
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_MspInit+0x44>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016b2:	2007      	movs	r0, #7
 80016b4:	f000 fd6e 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <HAL_RTC_MspInit+0x44>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d111      	bne.n	80016fa <HAL_RTC_MspInit+0x36>
 80016d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016da:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016e4:	68bb      	ldr	r3, [r7, #8]
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <HAL_RTC_MspInit+0x48>)
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	2301      	movs	r3, #1
 80016f8:	6013      	str	r3, [r2, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40002800 	.word	0x40002800
 800170c:	10908100 	.word	0x10908100

08001710 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a23      	ldr	r2, [pc, #140]	@ (80017ac <HAL_TIM_Base_MspInit+0x9c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10c      	bne.n	800173c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	4b23      	ldr	r3, [pc, #140]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a22      	ldr	r2, [pc, #136]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001728:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 800173a:	e032      	b.n	80017a2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <HAL_TIM_Base_MspInit+0xa4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d114      	bne.n	8001770 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2036      	movs	r0, #54	@ 0x36
 8001764:	f000 fd21 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001768:	2036      	movs	r0, #54	@ 0x36
 800176a:	f000 fd3a 	bl	80021e2 <HAL_NVIC_EnableIRQ>
}
 800176e:	e018      	b.n	80017a2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a10      	ldr	r2, [pc, #64]	@ (80017b8 <HAL_TIM_Base_MspInit+0xa8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d113      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0c      	ldr	r2, [pc, #48]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001780:	f043 0320 	orr.w	r3, r3, #32
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_TIM_Base_MspInit+0xa0>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2037      	movs	r0, #55	@ 0x37
 8001798:	f000 fd07 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800179c:	2037      	movs	r0, #55	@ 0x37
 800179e:	f000 fd20 	bl	80021e2 <HAL_NVIC_EnableIRQ>
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40012c00 	.word	0x40012c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40001000 	.word	0x40001000
 80017b8:	40001400 	.word	0x40001400

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_TIM_MspPostInit+0x64>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d11b      	bne.n	8001816 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_TIM_MspPostInit+0x68>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_TIM_MspPostInit+0x68>)
 80017e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017e8:	6153      	str	r3, [r2, #20]
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_TIM_MspPostInit+0x68>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017f6:	2304      	movs	r3, #4
 80017f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_TIM_MspPostInit+0x6c>)
 8001812:	f000 fd01 	bl	8002218 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40012c00 	.word	0x40012c00
 8001824:	40021000 	.word	0x40021000
 8001828:	48000800 	.word	0x48000800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001882:	f000 fb73 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}

0800188a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 800188e:	2001      	movs	r0, #1
 8001890:	f000 fe7c 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 800189c:	2002      	movs	r0, #2
 800189e:	f000 fe75 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80018aa:	2010      	movs	r0, #16
 80018ac:	f000 fe6e 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018bc:	f000 fe66 	bl	800258c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <TIM6_DAC_IRQHandler+0x10>)
 80018ca:	f003 f981 	bl	8004bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000010c 	.word	0x2000010c

080018d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <TIM7_IRQHandler+0x10>)
 80018de:	f003 f977 	bl	8004bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000158 	.word	0x20000158

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f004 fa2a 	bl	8005d74 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	@ (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20010000 	.word	0x20010000
 800194c:	00000400 	.word	0x00000400
 8001950:	200001e8 	.word	0x200001e8
 8001954:	20000358 	.word	0x20000358

08001958 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	@ (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <timePage>:

RTC_TimeTypeDef sAlarm;
bool is_24_hour_format = true;
extern bool timeFormatChanged;

void timePage() {
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b08c      	sub	sp, #48	@ 0x30
 8001980:	af00      	add	r7, sp, #0
	LCD_SendCmd(LCD_CLEAR_DISPLAY);
 8001982:	2001      	movs	r0, #1
 8001984:	f7fe fdba 	bl	80004fc <LCD_SendCmd>
	char buff[16];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001988:	2200      	movs	r2, #0
 800198a:	491e      	ldr	r1, [pc, #120]	@ (8001a04 <timePage+0x88>)
 800198c:	481e      	ldr	r0, [pc, #120]	@ (8001a08 <timePage+0x8c>)
 800198e:	f002 fb34 	bl	8003ffa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001992:	2200      	movs	r2, #0
 8001994:	491d      	ldr	r1, [pc, #116]	@ (8001a0c <timePage+0x90>)
 8001996:	481c      	ldr	r0, [pc, #112]	@ (8001a08 <timePage+0x8c>)
 8001998:	f002 fc11 	bl	80041be <HAL_RTC_GetDate>

	char *weekDayMap[7] = {"MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"};
 800199c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <timePage+0x94>)
 800199e:	463c      	mov	r4, r7
 80019a0:	461d      	mov	r5, r3
 80019a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	char *weekday = weekDayMap[sDate.WeekDay - 1];
 80019ae:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <timePage+0x90>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	3330      	adds	r3, #48	@ 0x30
 80019b8:	443b      	add	r3, r7
 80019ba:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//uint8_t year = sDate.Year;
	sprintf(buff, "%s ", weekday);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c6:	4913      	ldr	r1, [pc, #76]	@ (8001a14 <timePage+0x98>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 f9a9 	bl	8005d20 <siprintf>

	LCD_SendStr(buff);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdce 	bl	8000574 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 80019d8:	20c0      	movs	r0, #192	@ 0xc0
 80019da:	f7fe fd8f 	bl	80004fc <LCD_SendCmd>

	LCD_SendStr("ALARM");
 80019de:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <timePage+0x9c>)
 80019e0:	f7fe fdc8 	bl	8000574 <LCD_SendStr>


	if (is_24_hour_format) {
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <timePage+0xa0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <timePage+0x78>
	    LCD_SendStr("   24H_TIME");
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <timePage+0xa4>)
 80019ee:	f7fe fdc1 	bl	8000574 <LCD_SendStr>
	} else {
	    LCD_SendStr("   12H_TIME");
	}

}
 80019f2:	e002      	b.n	80019fa <timePage+0x7e>
	    LCD_SendStr("   12H_TIME");
 80019f4:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <timePage+0xa8>)
 80019f6:	f7fe fdbd 	bl	8000574 <LCD_SendStr>
}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	@ 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdb0      	pop	{r4, r5, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000088 	.word	0x20000088
 8001a08:	200000a0 	.word	0x200000a0
 8001a0c:	2000009c 	.word	0x2000009c
 8001a10:	08006720 	.word	0x08006720
 8001a14:	080066e0 	.word	0x080066e0
 8001a18:	080066e4 	.word	0x080066e4
 8001a1c:	20000010 	.word	0x20000010
 8001a20:	080066ec 	.word	0x080066ec
 8001a24:	080066f8 	.word	0x080066f8

08001a28 <updateTime>:

void updateTime(uint8_t row, uint8_t col) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	char buff[8];  // Enough for HH:MM + null
	char dateBuff[8];

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	492a      	ldr	r1, [pc, #168]	@ (8001ae4 <updateTime+0xbc>)
 8001a3c:	482a      	ldr	r0, [pc, #168]	@ (8001ae8 <updateTime+0xc0>)
 8001a3e:	f002 fadc 	bl	8003ffa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a42:	2200      	movs	r2, #0
 8001a44:	4929      	ldr	r1, [pc, #164]	@ (8001aec <updateTime+0xc4>)
 8001a46:	4828      	ldr	r0, [pc, #160]	@ (8001ae8 <updateTime+0xc0>)
 8001a48:	f002 fbb9 	bl	80041be <HAL_RTC_GetDate>

	uint8_t hours = sTime.Hours;
 8001a4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <updateTime+0xbc>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = sTime.Minutes;
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <updateTime+0xbc>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	77bb      	strb	r3, [r7, #30]
	uint8_t day = sDate.Date;
 8001a58:	4b24      	ldr	r3, [pc, #144]	@ (8001aec <updateTime+0xc4>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	777b      	strb	r3, [r7, #29]
	uint8_t month = sDate.Month;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <updateTime+0xc4>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	773b      	strb	r3, [r7, #28]

	uint8_t displayHour = hours;
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	76fb      	strb	r3, [r7, #27]
	 if (!is_24_hour_format) {
 8001a68:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <updateTime+0xc8>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <updateTime+0x66>
	        if (hours == 0) {
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <updateTime+0x5a>
	        	displayHour = 12;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	76fb      	strb	r3, [r7, #27]
 8001a80:	e005      	b.n	8001a8e <updateTime+0x66>
	        }
	        else if (hours > 12) {
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	d902      	bls.n	8001a8e <updateTime+0x66>
	        	displayHour = hours - 12;
 8001a88:	7ffb      	ldrb	r3, [r7, #31]
 8001a8a:	3b0c      	subs	r3, #12
 8001a8c:	76fb      	strb	r3, [r7, #27]
	        }
	    }
	// Move cursor to desired position (row 0 or 1)
	uint8_t baseCmd = (row == 0) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <updateTime+0x70>
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	e000      	b.n	8001a9a <updateTime+0x72>
 8001a98:	23c0      	movs	r3, #192	@ 0xc0
 8001a9a:	76bb      	strb	r3, [r7, #26]
	LCD_SendCmd(baseCmd + col);
 8001a9c:	7eba      	ldrb	r2, [r7, #26]
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd29 	bl	80004fc <LCD_SendCmd>

	sprintf(buff, "|%02d:%02d ", hours, minutes);
 8001aaa:	7ffa      	ldrb	r2, [r7, #31]
 8001aac:	7fbb      	ldrb	r3, [r7, #30]
 8001aae:	f107 0010 	add.w	r0, r7, #16
 8001ab2:	4910      	ldr	r1, [pc, #64]	@ (8001af4 <updateTime+0xcc>)
 8001ab4:	f004 f934 	bl	8005d20 <siprintf>
	LCD_SendStr(buff);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fd59 	bl	8000574 <LCD_SendStr>

	sprintf(dateBuff, "%02d/%02d", day, month);
 8001ac2:	7f7a      	ldrb	r2, [r7, #29]
 8001ac4:	7f3b      	ldrb	r3, [r7, #28]
 8001ac6:	f107 0008 	add.w	r0, r7, #8
 8001aca:	490b      	ldr	r1, [pc, #44]	@ (8001af8 <updateTime+0xd0>)
 8001acc:	f004 f928 	bl	8005d20 <siprintf>
	LCD_SendStr(dateBuff);
 8001ad0:	f107 0308 	add.w	r3, r7, #8
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd4d 	bl	8000574 <LCD_SendStr>
}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000088 	.word	0x20000088
 8001ae8:	200000a0 	.word	0x200000a0
 8001aec:	2000009c 	.word	0x2000009c
 8001af0:	20000010 	.word	0x20000010
 8001af4:	0800673c 	.word	0x0800673c
 8001af8:	08006748 	.word	0x08006748

08001afc <alarmPage>:


void alarmPage() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
	char buff[16];

	LCD_SendStr("Set Alarm for:");
 8001b02:	4812      	ldr	r0, [pc, #72]	@ (8001b4c <alarmPage+0x50>)
 8001b04:	f7fe fd36 	bl	8000574 <LCD_SendStr>

	LCD_SendCmd(LCD_SECOND_LINE);
 8001b08:	20c0      	movs	r0, #192	@ 0xc0
 8001b0a:	f7fe fcf7 	bl	80004fc <LCD_SendCmd>

	uint8_t hours =  sAlarm.Hours;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <alarmPage+0x54>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	75fb      	strb	r3, [r7, #23]
	uint8_t minutes = sAlarm.Minutes;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <alarmPage+0x54>)
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	75bb      	strb	r3, [r7, #22]

	sprintf(buff, "%02d:%02d A.M", hours, minutes);
 8001b1a:	7dfa      	ldrb	r2, [r7, #23]
 8001b1c:	7dbb      	ldrb	r3, [r7, #22]
 8001b1e:	1d38      	adds	r0, r7, #4
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <alarmPage+0x58>)
 8001b22:	f004 f8fd 	bl	8005d20 <siprintf>
	LCD_SendStr(buff);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd23 	bl	8000574 <LCD_SendStr>

	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4907      	ldr	r1, [pc, #28]	@ (8001b50 <alarmPage+0x54>)
 8001b32:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <alarmPage+0x5c>)
 8001b34:	f002 fb92 	bl	800425c <HAL_RTC_SetAlarm>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <alarmPage+0x46>
	{
		Error_Handler();
 8001b3e:	f7ff fcbc 	bl	80014ba <Error_Handler>
	}
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	08006754 	.word	0x08006754
 8001b50:	200001ec 	.word	0x200001ec
 8001b54:	08006764 	.word	0x08006764
 8001b58:	200000a0 	.word	0x200000a0

08001b5c <switchTimeFormat>:

void switchTimeFormat() {
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
    is_24_hour_format = !is_24_hour_format;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <switchTimeFormat+0x34>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf14      	ite	ne
 8001b68:	2301      	movne	r3, #1
 8001b6a:	2300      	moveq	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	f083 0301 	eor.w	r3, r3, #1
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <switchTimeFormat+0x34>)
 8001b7c:	701a      	strb	r2, [r3, #0]
    timeFormatChanged = true;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <switchTimeFormat+0x38>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000010 	.word	0x20000010
 8001b94:	200001d5 	.word	0x200001d5

08001b98 <switchAMPM>:


void switchAMPM(){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
	sAlarm.Hours += 12;
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <switchAMPM+0x60>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	330c      	adds	r3, #12
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <switchAMPM+0x60>)
 8001ba8:	701a      	strb	r2, [r3, #0]
	char buff[16];
	uint8_t baseCmd = (2) ? 0x80 : 0xC0; // LCD_LINE1 or LCD_LINE2
 8001baa:	2380      	movs	r3, #128	@ 0x80
 8001bac:	75fb      	strb	r3, [r7, #23]
	LCD_SendCmd(baseCmd + 6);
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	3306      	adds	r3, #6
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fca1 	bl	80004fc <LCD_SendCmd>
	if (sAlarm.TimeFormat == RTC_HOURFORMAT12_AM) {
 8001bba:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf8 <switchAMPM+0x60>)
 8001bbc:	78db      	ldrb	r3, [r3, #3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d109      	bne.n	8001bd6 <switchAMPM+0x3e>
		sprintf(buff, "A");
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	490d      	ldr	r1, [pc, #52]	@ (8001bfc <switchAMPM+0x64>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 f8aa 	bl	8005d20 <siprintf>
		LCD_SendStr(buff);
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcd0 	bl	8000574 <LCD_SendStr>
	} else if (sAlarm.TimeFormat == RTC_HOURFORMAT12_PM) {
		sprintf(buff, "P");
		LCD_SendStr(buff);
	}
}
 8001bd4:	e00c      	b.n	8001bf0 <switchAMPM+0x58>
	} else if (sAlarm.TimeFormat == RTC_HOURFORMAT12_PM) {
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <switchAMPM+0x60>)
 8001bd8:	78db      	ldrb	r3, [r3, #3]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d108      	bne.n	8001bf0 <switchAMPM+0x58>
		sprintf(buff, "P");
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	4907      	ldr	r1, [pc, #28]	@ (8001c00 <switchAMPM+0x68>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 f89c 	bl	8005d20 <siprintf>
		LCD_SendStr(buff);
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcc2 	bl	8000574 <LCD_SendStr>
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200001ec 	.word	0x200001ec
 8001bfc:	08006774 	.word	0x08006774
 8001c00:	08006778 	.word	0x08006778

08001c04 <changeAlarmHour>:

void changeAlarmHour() {
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	if (sTime.TimeFormat == RTC_HOURFORMAT_12) {
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <changeAlarmHour+0x58>)
 8001c0a:	78db      	ldrb	r3, [r3, #3]
 8001c0c:	2b40      	cmp	r3, #64	@ 0x40
 8001c0e:	d10e      	bne.n	8001c2e <changeAlarmHour+0x2a>
		if (sAlarm.Hours <= 12) {
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d806      	bhi.n	8001c26 <changeAlarmHour+0x22>
			sAlarm.Hours += 1;
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c22:	701a      	strb	r2, [r3, #0]
			sAlarm.Hours += 1;
		} else {
			sAlarm.Hours = 0;
		}
	}
}
 8001c24:	e015      	b.n	8001c52 <changeAlarmHour+0x4e>
			sAlarm.Hours = 1;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
}
 8001c2c:	e011      	b.n	8001c52 <changeAlarmHour+0x4e>
	} else if (sTime.TimeFormat == RTC_HOURFORMAT_24) {
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <changeAlarmHour+0x58>)
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <changeAlarmHour+0x4e>
		if (sAlarm.Hours <= 23) {
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b17      	cmp	r3, #23
 8001c3c:	d806      	bhi.n	8001c4c <changeAlarmHour+0x48>
			sAlarm.Hours += 1;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c48:	701a      	strb	r2, [r3, #0]
}
 8001c4a:	e002      	b.n	8001c52 <changeAlarmHour+0x4e>
			sAlarm.Hours = 0;
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <changeAlarmHour+0x5c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	20000088 	.word	0x20000088
 8001c60:	200001ec 	.word	0x200001ec

08001c64 <changeAlarmMin>:

void changeAlarmMin() {
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
	if (sAlarm.Minutes < 60) {
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <changeAlarmMin+0x2c>)
 8001c6a:	785b      	ldrb	r3, [r3, #1]
 8001c6c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c6e:	d806      	bhi.n	8001c7e <changeAlarmMin+0x1a>
		sAlarm.Minutes += 5;
 8001c70:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <changeAlarmMin+0x2c>)
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	3305      	adds	r3, #5
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <changeAlarmMin+0x2c>)
 8001c7a:	705a      	strb	r2, [r3, #1]
	} else {
		sAlarm.Minutes = 0;
	}
}
 8001c7c:	e002      	b.n	8001c84 <changeAlarmMin+0x20>
		sAlarm.Minutes = 0;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <changeAlarmMin+0x2c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	705a      	strb	r2, [r3, #1]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	200001ec 	.word	0x200001ec

08001c94 <write_phase>:

/* Step speed: every 1 ms */
#define STEP_PERIOD_MS 2

/* 2-coil full-step sequence (matches your earlier working pattern) */
static inline void write_phase(uint8_t p) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    switch (p & 3) {	// (p&3) for keeping value b/w 0-3
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d867      	bhi.n	8001d78 <write_phase+0xe4>
 8001ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb0 <write_phase+0x1c>)
 8001caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cae:	bf00      	nop
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001cef 	.word	0x08001cef
 8001cb8:	08001d1d 	.word	0x08001d1d
 8001cbc:	08001d4b 	.word	0x08001d4b
        case 0: // B+C
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	482e      	ldr	r0, [pc, #184]	@ (8001d80 <write_phase+0xec>)
 8001cc6:	f000 fc49 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd4:	f000 fc42 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	4828      	ldr	r0, [pc, #160]	@ (8001d80 <write_phase+0xec>)
 8001cde:	f000 fc3d 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	4827      	ldr	r0, [pc, #156]	@ (8001d84 <write_phase+0xf0>)
 8001ce8:	f000 fc38 	bl	800255c <HAL_GPIO_WritePin>
            break;
 8001cec:	e044      	b.n	8001d78 <write_phase+0xe4>
        case 1: // A+B
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_SET);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4823      	ldr	r0, [pc, #140]	@ (8001d80 <write_phase+0xec>)
 8001cf4:	f000 fc32 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d02:	f000 fc2b 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2180      	movs	r1, #128	@ 0x80
 8001d0a:	481d      	ldr	r0, [pc, #116]	@ (8001d80 <write_phase+0xec>)
 8001d0c:	f000 fc26 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_RESET);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2104      	movs	r1, #4
 8001d14:	481b      	ldr	r0, [pc, #108]	@ (8001d84 <write_phase+0xf0>)
 8001d16:	f000 fc21 	bl	800255c <HAL_GPIO_WritePin>
            break;
 8001d1a:	e02d      	b.n	8001d78 <write_phase+0xe4>
        case 2: // A+D
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2120      	movs	r1, #32
 8001d20:	4817      	ldr	r0, [pc, #92]	@ (8001d80 <write_phase+0xec>)
 8001d22:	f000 fc1b 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d30:	f000 fc14 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2180      	movs	r1, #128	@ 0x80
 8001d38:	4811      	ldr	r0, [pc, #68]	@ (8001d80 <write_phase+0xec>)
 8001d3a:	f000 fc0f 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2104      	movs	r1, #4
 8001d42:	4810      	ldr	r0, [pc, #64]	@ (8001d84 <write_phase+0xf0>)
 8001d44:	f000 fc0a 	bl	800255c <HAL_GPIO_WritePin>
            break;
 8001d48:	e016      	b.n	8001d78 <write_phase+0xe4>
        case 3: // C+D
            HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	480c      	ldr	r0, [pc, #48]	@ (8001d80 <write_phase+0xec>)
 8001d50:	f000 fc04 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d5e:	f000 fbfd 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	4806      	ldr	r0, [pc, #24]	@ (8001d80 <write_phase+0xec>)
 8001d68:	f000 fbf8 	bl	800255c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_SET);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4804      	ldr	r0, [pc, #16]	@ (8001d84 <write_phase+0xf0>)
 8001d72:	f000 fbf3 	bl	800255c <HAL_GPIO_WritePin>
            break;
 8001d76:	bf00      	nop
    }
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000400 	.word	0x48000400

08001d88 <vibration_call>:


/* for asynchronous functioanlity via TIM7 tick */
void vibration_call(uint16_t steps) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
    if (steps == 0) return;
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00c      	beq.n	8001db2 <vibration_call+0x2a>
    steps_left = steps;
 8001d98:	4a08      	ldr	r2, [pc, #32]	@ (8001dbc <vibration_call+0x34>)
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	8013      	strh	r3, [r2, #0]
    write_phase(phase);
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <vibration_call+0x38>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff75 	bl	8001c94 <write_phase>
    ms_since_last_step = 0;
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <vibration_call+0x3c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e000      	b.n	8001db4 <vibration_call+0x2c>
    if (steps == 0) return;
 8001db2:	bf00      	nop
}
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000200 	.word	0x20000200
 8001dc0:	20000202 	.word	0x20000202
 8001dc4:	20000204 	.word	0x20000204

08001dc8 <vibration_stop>:

/* stoping vibration */
void vibration_stop() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    steps_left = 0;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <vibration_stop+0x3c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	801a      	strh	r2, [r3, #0]
    HAL_GPIO_WritePin(COILA_GPIO_Port, COILA_Pin, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2120      	movs	r1, #32
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <vibration_stop+0x40>)
 8001dd8:	f000 fbc0 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COILB_GPIO_Port, COILB_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de6:	f000 fbb9 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COILC_GPIO_Port, COILC_Pin, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <vibration_stop+0x40>)
 8001df0:	f000 fbb4 	bl	800255c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COILD_GPIO_Port, COILD_Pin, GPIO_PIN_RESET);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2104      	movs	r1, #4
 8001df8:	4804      	ldr	r0, [pc, #16]	@ (8001e0c <vibration_stop+0x44>)
 8001dfa:	f000 fbaf 	bl	800255c <HAL_GPIO_WritePin>
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000200 	.word	0x20000200
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	48000400 	.word	0x48000400

08001e10 <vibration_tick_1ms>:

/* TIM7 ISR - vibration ticker per 1 ms */
void vibration_tick_1ms() {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
    if (steps_left == 0) return;
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <vibration_tick_1ms+0x70>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02b      	beq.n	8001e76 <vibration_tick_1ms+0x66>

    ms_since_last_step++;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <vibration_tick_1ms+0x74>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3301      	adds	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <vibration_tick_1ms+0x74>)
 8001e2a:	801a      	strh	r2, [r3, #0]
    if (ms_since_last_step < STEP_PERIOD_MS) return;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <vibration_tick_1ms+0x74>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d921      	bls.n	8001e7a <vibration_tick_1ms+0x6a>
    ms_since_last_step = 0;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <vibration_tick_1ms+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	801a      	strh	r2, [r3, #0]

    // advance one step;
    phase = (phase + 1) & 3;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <vibration_tick_1ms+0x78>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <vibration_tick_1ms+0x78>)
 8001e4e:	701a      	strb	r2, [r3, #0]
    write_phase(phase);
 8001e50:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <vibration_tick_1ms+0x78>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff1c 	bl	8001c94 <write_phase>

    if (--steps_left == 0) {
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <vibration_tick_1ms+0x70>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4a06      	ldr	r2, [pc, #24]	@ (8001e80 <vibration_tick_1ms+0x70>)
 8001e68:	4619      	mov	r1, r3
 8001e6a:	8011      	strh	r1, [r2, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <vibration_tick_1ms+0x6c>
    	vibration_stop();
 8001e70:	f7ff ffaa 	bl	8001dc8 <vibration_stop>
 8001e74:	e002      	b.n	8001e7c <vibration_tick_1ms+0x6c>
    if (steps_left == 0) return;
 8001e76:	bf00      	nop
 8001e78:	e000      	b.n	8001e7c <vibration_tick_1ms+0x6c>
    if (ms_since_last_step < STEP_PERIOD_MS) return;
 8001e7a:	bf00      	nop
    }
}
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000200 	.word	0x20000200
 8001e84:	20000204 	.word	0x20000204
 8001e88:	20000202 	.word	0x20000202

08001e8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fd62 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopForever+0xe>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopForever+0x16>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f003 ff61 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ebe:	f7fe fecd 	bl	8000c5c <main>

08001ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec2:	e7fe      	b.n	8001ec2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001ed0:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 8001ed4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001ed8:	20000354 	.word	0x20000354

08001edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC1_2_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_Init+0x28>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_Init+0x28>)
 8001eea:	f043 0310 	orr.w	r3, r3, #16
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 f94f 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f000 f808 	bl	8001f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efc:	f7ff fbbe 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40022000 	.word	0x40022000

08001f0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f14:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_InitTick+0x54>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_InitTick+0x58>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f967 	bl	80021fe <HAL_SYSTICK_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00e      	b.n	8001f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d80a      	bhi.n	8001f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f40:	2200      	movs	r2, #0
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f000 f92f 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	@ (8001f68 <HAL_InitTick+0x5c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000000c 	.word	0x2000000c
 8001f64:	20000018 	.word	0x20000018
 8001f68:	20000014 	.word	0x20000014

08001f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x20>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_IncTick+0x24>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000018 	.word	0x20000018
 8001f90:	20000208 	.word	0x20000208

08001f94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <HAL_GetTick+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000208 	.word	0x20000208

08001fac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff ffee 	bl	8001f94 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d005      	beq.n	8001fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_Delay+0x44>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d8f7      	bhi.n	8001fd4 <HAL_Delay+0x28>
  {
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000018 	.word	0x20000018

08001ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002010:	4013      	ands	r3, r2
 8002012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800201c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002026:	4a04      	ldr	r2, [pc, #16]	@ (8002038 <__NVIC_SetPriorityGrouping+0x44>)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	60d3      	str	r3, [r2, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002040:	4b04      	ldr	r3, [pc, #16]	@ (8002054 <__NVIC_GetPriorityGrouping+0x18>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 0307 	and.w	r3, r3, #7
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	2b00      	cmp	r3, #0
 8002068:	db0b      	blt.n	8002082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	f003 021f 	and.w	r2, r3, #31
 8002070:	4907      	ldr	r1, [pc, #28]	@ (8002090 <__NVIC_EnableIRQ+0x38>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	095b      	lsrs	r3, r3, #5
 8002078:	2001      	movs	r0, #1
 800207a:	fa00 f202 	lsl.w	r2, r0, r2
 800207e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	@ (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	@ (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	@ 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	@ 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff8e 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff29 	bl	8001ff4 <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff3e 	bl	800203c <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff8e 	bl	80020e8 <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5d 	bl	8002094 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff31 	bl	8002058 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e160      	b.n	80024ea <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8152 	beq.w	80024e4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x40>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d017      	beq.n	80022f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80ac 	beq.w	80024e4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238c:	4b5e      	ldr	r3, [pc, #376]	@ (8002508 <HAL_GPIO_Init+0x2f0>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a5d      	ldr	r2, [pc, #372]	@ (8002508 <HAL_GPIO_Init+0x2f0>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b5b      	ldr	r3, [pc, #364]	@ (8002508 <HAL_GPIO_Init+0x2f0>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a4:	4a59      	ldr	r2, [pc, #356]	@ (800250c <HAL_GPIO_Init+0x2f4>)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023ce:	d025      	beq.n	800241c <HAL_GPIO_Init+0x204>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002510 <HAL_GPIO_Init+0x2f8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01f      	beq.n	8002418 <HAL_GPIO_Init+0x200>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4e      	ldr	r2, [pc, #312]	@ (8002514 <HAL_GPIO_Init+0x2fc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d019      	beq.n	8002414 <HAL_GPIO_Init+0x1fc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_GPIO_Init+0x300>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_GPIO_Init+0x1f8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4c      	ldr	r2, [pc, #304]	@ (800251c <HAL_GPIO_Init+0x304>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d00d      	beq.n	800240c <HAL_GPIO_Init+0x1f4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002520 <HAL_GPIO_Init+0x308>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d007      	beq.n	8002408 <HAL_GPIO_Init+0x1f0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a4a      	ldr	r2, [pc, #296]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_GPIO_Init+0x1ec>
 8002400:	2306      	movs	r3, #6
 8002402:	e00c      	b.n	800241e <HAL_GPIO_Init+0x206>
 8002404:	2307      	movs	r3, #7
 8002406:	e00a      	b.n	800241e <HAL_GPIO_Init+0x206>
 8002408:	2305      	movs	r3, #5
 800240a:	e008      	b.n	800241e <HAL_GPIO_Init+0x206>
 800240c:	2304      	movs	r3, #4
 800240e:	e006      	b.n	800241e <HAL_GPIO_Init+0x206>
 8002410:	2303      	movs	r3, #3
 8002412:	e004      	b.n	800241e <HAL_GPIO_Init+0x206>
 8002414:	2302      	movs	r3, #2
 8002416:	e002      	b.n	800241e <HAL_GPIO_Init+0x206>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_GPIO_Init+0x206>
 800241c:	2300      	movs	r3, #0
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	f002 0203 	and.w	r2, r2, #3
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4093      	lsls	r3, r2
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800242e:	4937      	ldr	r1, [pc, #220]	@ (800250c <HAL_GPIO_Init+0x2f4>)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243c:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_GPIO_Init+0x310>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002460:	4a31      	ldr	r2, [pc, #196]	@ (8002528 <HAL_GPIO_Init+0x310>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002466:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <HAL_GPIO_Init+0x310>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800248a:	4a27      	ldr	r2, [pc, #156]	@ (8002528 <HAL_GPIO_Init+0x310>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_GPIO_Init+0x310>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <HAL_GPIO_Init+0x310>)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002528 <HAL_GPIO_Init+0x310>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024de:	4a12      	ldr	r2, [pc, #72]	@ (8002528 <HAL_GPIO_Init+0x310>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f47f ae97 	bne.w	8002228 <HAL_GPIO_Init+0x10>
  }
}
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	371c      	adds	r7, #28
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000
 8002510:	48000400 	.word	0x48000400
 8002514:	48000800 	.word	0x48000800
 8002518:	48000c00 	.word	0x48000c00
 800251c:	48001000 	.word	0x48001000
 8002520:	48001400 	.word	0x48001400
 8002524:	48001800 	.word	0x48001800
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	887b      	ldrh	r3, [r7, #2]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e001      	b.n	800254e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002578:	e002      	b.n	8002580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe f804 	bl	80005b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f001 b80a 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 8161 	beq.w	80028ba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025f8:	4bae      	ldr	r3, [pc, #696]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b04      	cmp	r3, #4
 8002602:	d00c      	beq.n	800261e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002604:	4bab      	ldr	r3, [pc, #684]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 030c 	and.w	r3, r3, #12
 800260c:	2b08      	cmp	r3, #8
 800260e:	d157      	bne.n	80026c0 <HAL_RCC_OscConfig+0x104>
 8002610:	4ba8      	ldr	r3, [pc, #672]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261c:	d150      	bne.n	80026c0 <HAL_RCC_OscConfig+0x104>
 800261e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002622:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 8002632:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b3f      	cmp	r3, #63	@ 0x3f
 800263e:	d802      	bhi.n	8002646 <HAL_RCC_OscConfig+0x8a>
 8002640:	4b9c      	ldr	r3, [pc, #624]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0xb6>
 8002646:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800264a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800265a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800265e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002662:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800266e:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002676:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800267a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800267e:	fa92 f2a2 	rbit	r2, r2
 8002682:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8002686:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	f002 021f 	and.w	r2, r2, #31
 800269a:	2101      	movs	r1, #1
 800269c:	fa01 f202 	lsl.w	r2, r1, r2
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8108 	beq.w	80028b8 <HAL_RCC_OscConfig+0x2fc>
 80026a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 80ff 	bne.w	80028b8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	f000 bf9b 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x124>
 80026d2:	4b78      	ldr	r3, [pc, #480]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a77      	ldr	r2, [pc, #476]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e036      	b.n	800274e <HAL_RCC_OscConfig+0x192>
 80026e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10c      	bne.n	800270a <HAL_RCC_OscConfig+0x14e>
 80026f0:	4b70      	ldr	r3, [pc, #448]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6f      	ldr	r2, [pc, #444]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b6d      	ldr	r3, [pc, #436]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6c      	ldr	r2, [pc, #432]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e021      	b.n	800274e <HAL_RCC_OscConfig+0x192>
 800270a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x17a>
 800271c:	4b65      	ldr	r3, [pc, #404]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a64      	ldr	r2, [pc, #400]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002722:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a61      	ldr	r2, [pc, #388]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0x192>
 8002736:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a5e      	ldr	r2, [pc, #376]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 800273c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b5c      	ldr	r3, [pc, #368]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a5b      	ldr	r2, [pc, #364]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 8002748:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002752:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d054      	beq.n	8002808 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff fc19 	bl	8001f94 <HAL_GetTick>
 8002762:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff fc14 	bl	8001f94 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	@ 0x64
 8002776:	d902      	bls.n	800277e <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	f000 bf3c 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
 800277e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002782:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800278a:	fa93 f3a3 	rbit	r3, r3
 800278e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8002792:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b3f      	cmp	r3, #63	@ 0x3f
 800279e:	d802      	bhi.n	80027a6 <HAL_RCC_OscConfig+0x1ea>
 80027a0:	4b44      	ldr	r3, [pc, #272]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x216>
 80027a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027aa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80027ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027be:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80027c2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80027ce:	4b39      	ldr	r3, [pc, #228]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027d6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80027da:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80027de:	fa92 f2a2 	rbit	r2, r2
 80027e2:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80027e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	f042 0220 	orr.w	r2, r2, #32
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	f002 021f 	and.w	r2, r2, #31
 80027fa:	2101      	movs	r1, #1
 80027fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0b0      	beq.n	8002768 <HAL_RCC_OscConfig+0x1ac>
 8002806:	e058      	b.n	80028ba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff fbc4 	bl	8001f94 <HAL_GetTick>
 800280c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002812:	f7ff fbbf 	bl	8001f94 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d902      	bls.n	8002828 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	f000 bee7 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
 8002828:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800282c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002830:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002834:	fa93 f3a3 	rbit	r3, r3
 8002838:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800283c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b3f      	cmp	r3, #63	@ 0x3f
 8002848:	d802      	bhi.n	8002850 <HAL_RCC_OscConfig+0x294>
 800284a:	4b1a      	ldr	r3, [pc, #104]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e015      	b.n	800287c <HAL_RCC_OscConfig+0x2c0>
 8002850:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002854:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8002864:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002868:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800286c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002878:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <HAL_RCC_OscConfig+0x2f8>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002880:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8002884:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8002890:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f002 021f 	and.w	r2, r2, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1b0      	bne.n	8002812 <HAL_RCC_OscConfig+0x256>
 80028b0:	e003      	b.n	80028ba <HAL_RCC_OscConfig+0x2fe>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 816d 	beq.w	8002baa <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028d0:	4bcd      	ldr	r3, [pc, #820]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028dc:	4bca      	ldr	r3, [pc, #808]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d16e      	bne.n	80029c6 <HAL_RCC_OscConfig+0x40a>
 80028e8:	4bc7      	ldr	r3, [pc, #796]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80028f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f4:	d167      	bne.n	80029c6 <HAL_RCC_OscConfig+0x40a>
 80028f6:	2302      	movs	r3, #2
 80028f8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002908:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b3f      	cmp	r3, #63	@ 0x3f
 8002914:	d802      	bhi.n	800291c <HAL_RCC_OscConfig+0x360>
 8002916:	4bbc      	ldr	r3, [pc, #752]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	e013      	b.n	8002944 <HAL_RCC_OscConfig+0x388>
 800291c:	2302      	movs	r3, #2
 800291e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002926:	fa93 f3a3 	rbit	r3, r3
 800292a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800292e:	2302      	movs	r3, #2
 8002930:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002934:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002940:	4bb1      	ldr	r3, [pc, #708]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002944:	2202      	movs	r2, #2
 8002946:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800294a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800294e:	fa92 f2a2 	rbit	r2, r2
 8002952:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002956:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800295a:	fab2 f282 	clz	r2, r2
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	f042 0220 	orr.w	r2, r2, #32
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f002 021f 	and.w	r2, r2, #31
 800296a:	2101      	movs	r1, #1
 800296c:	fa01 f202 	lsl.w	r2, r1, r2
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCC_OscConfig+0x3d0>
 8002976:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800297a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d002      	beq.n	800298c <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f000 be35 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b9e      	ldr	r3, [pc, #632]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002998:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	21f8      	movs	r1, #248	@ 0xf8
 80029a2:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80029aa:	fa91 f1a1 	rbit	r1, r1
 80029ae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80029b2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80029b6:	fab1 f181 	clz	r1, r1
 80029ba:	b2c9      	uxtb	r1, r1
 80029bc:	408b      	lsls	r3, r1
 80029be:	4992      	ldr	r1, [pc, #584]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c4:	e0f1      	b.n	8002baa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8083 	beq.w	8002ade <HAL_RCC_OscConfig+0x522>
 80029d8:	2301      	movs	r3, #1
 80029da:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80029ea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	461a      	mov	r2, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fac6 	bl	8001f94 <HAL_GetTick>
 8002a08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7ff fac1 	bl	8001f94 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f000 bde9 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002a36:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a42:	d802      	bhi.n	8002a4a <HAL_RCC_OscConfig+0x48e>
 8002a44:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e013      	b.n	8002a72 <HAL_RCC_OscConfig+0x4b6>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a62:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a6e:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2202      	movs	r2, #2
 8002a74:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8002a78:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8002a7c:	fa92 f2a2 	rbit	r2, r2
 8002a80:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8002a84:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f042 0220 	orr.w	r2, r2, #32
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f002 021f 	and.w	r2, r2, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0b4      	beq.n	8002a0e <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b58      	ldr	r3, [pc, #352]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	21f8      	movs	r1, #248	@ 0xf8
 8002aba:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8002ac2:	fa91 f1a1 	rbit	r1, r1
 8002ac6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002aca:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ace:	fab1 f181 	clz	r1, r1
 8002ad2:	b2c9      	uxtb	r1, r1
 8002ad4:	408b      	lsls	r3, r1
 8002ad6:	494c      	ldr	r1, [pc, #304]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e065      	b.n	8002baa <HAL_RCC_OscConfig+0x5ee>
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8002af0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002afe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	461a      	mov	r2, r3
 8002b06:	2300      	movs	r3, #0
 8002b08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7ff fa43 	bl	8001f94 <HAL_GetTick>
 8002b0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b14:	f7ff fa3e 	bl	8001f94 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d902      	bls.n	8002b2a <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f000 bd66 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b48:	d802      	bhi.n	8002b50 <HAL_RCC_OscConfig+0x594>
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e013      	b.n	8002b78 <HAL_RCC_OscConfig+0x5bc>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002b62:	2302      	movs	r3, #2
 8002b64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b68:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_RCC_OscConfig+0x64c>)
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002b7e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002b82:	fa92 f2a2 	rbit	r2, r2
 8002b86:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002b8a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b8e:	fab2 f282 	clz	r2, r2
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	f042 0220 	orr.w	r2, r2, #32
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f002 021f 	and.w	r2, r2, #31
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1b4      	bne.n	8002b14 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bae:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8119 	beq.w	8002df2 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8082 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x71a>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8002be4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_RCC_OscConfig+0x650>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfc:	f7ff f9ca 	bl	8001f94 <HAL_GetTick>
 8002c00:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c04:	e00f      	b.n	8002c26 <HAL_RCC_OscConfig+0x66a>
 8002c06:	bf00      	nop
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c10:	f7ff f9c0 	bl	8001f94 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d902      	bls.n	8002c26 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	f000 bce8 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
 8002c26:	2302      	movs	r3, #2
 8002c28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c46:	2202      	movs	r2, #2
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	fa93 f2a3 	rbit	r2, r3
 8002c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c80:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	4bb0      	ldr	r3, [pc, #704]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c8e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c92:	2102      	movs	r1, #2
 8002c94:	6019      	str	r1, [r3, #0]
 8002c96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c9a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f1a3 	rbit	r1, r3
 8002ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cac:	6019      	str	r1, [r3, #0]
  return result;
 8002cae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2101      	movs	r1, #1
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d09d      	beq.n	8002c10 <HAL_RCC_OscConfig+0x654>
 8002cd4:	e08d      	b.n	8002df2 <HAL_RCC_OscConfig+0x836>
 8002cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cda:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	fa93 f2a3 	rbit	r2, r3
 8002cf0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cf4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cf8:	601a      	str	r2, [r3, #0]
  return result;
 8002cfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d02:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8002f4c <HAL_RCC_OscConfig+0x990>)
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	461a      	mov	r2, r3
 8002d14:	2300      	movs	r3, #0
 8002d16:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7ff f93c 	bl	8001f94 <HAL_GetTick>
 8002d1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d22:	f7ff f937 	bl	8001f94 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	f000 bc5f 	b.w	80035f6 <HAL_RCC_OscConfig+0x103a>
 8002d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d40:	2202      	movs	r2, #2
 8002d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d48:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	fa93 f2a3 	rbit	r2, r3
 8002d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d64:	2202      	movs	r2, #2
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	fa93 f2a3 	rbit	r2, r3
 8002d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d84:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d88:	2202      	movs	r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d90:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002da2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da4:	4b68      	ldr	r3, [pc, #416]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002db0:	2102      	movs	r1, #2
 8002db2:	6019      	str	r1, [r3, #0]
 8002db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002db8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f1a3 	rbit	r1, r3
 8002dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dc6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002dca:	6019      	str	r1, [r3, #0]
  return result;
 8002dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002dd0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d197      	bne.n	8002d22 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 819c 	beq.w	8003140 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b48      	ldr	r3, [pc, #288]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e40:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b41      	ldr	r3, [pc, #260]	@ (8002f50 <HAL_RCC_OscConfig+0x994>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11a      	bne.n	8002e8a <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e54:	4b3e      	ldr	r3, [pc, #248]	@ (8002f50 <HAL_RCC_OscConfig+0x994>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3d      	ldr	r2, [pc, #244]	@ (8002f50 <HAL_RCC_OscConfig+0x994>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e60:	f7ff f898 	bl	8001f94 <HAL_GetTick>
 8002e64:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7ff f893 	bl	8001f94 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e3bb      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b34      	ldr	r3, [pc, #208]	@ (8002f50 <HAL_RCC_OscConfig+0x994>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ef      	beq.n	8002e6a <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x8ec>
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	e035      	b.n	8002f14 <HAL_RCC_OscConfig+0x958>
 8002ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002eac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x916>
 8002eb8:	4b23      	ldr	r3, [pc, #140]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6213      	str	r3, [r2, #32]
 8002ed0:	e020      	b.n	8002f14 <HAL_RCC_OscConfig+0x958>
 8002ed2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x940>
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a18      	ldr	r2, [pc, #96]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	6213      	str	r3, [r2, #32]
 8002eee:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0x958>
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a11      	ldr	r2, [pc, #68]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	4b0f      	ldr	r3, [pc, #60]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f48 <HAL_RCC_OscConfig+0x98c>)
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f18:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8085 	beq.w	8003030 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7ff f835 	bl	8001f94 <HAL_GetTick>
 8002f2a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	e011      	b.n	8002f54 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7ff f830 	bl	8001f94 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e356      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	10908120 	.word	0x10908120
 8002f50:	40007000 	.word	0x40007000
 8002f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f58:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f64:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	fa93 f2a3 	rbit	r2, r3
 8002f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f72:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f7c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f88:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f96:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f9a:	601a      	str	r2, [r3, #0]
  return result;
 8002f9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002fa4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <HAL_RCC_OscConfig+0xa00>
 8002fb6:	4b98      	ldr	r3, [pc, #608]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	e013      	b.n	8002fe4 <HAL_RCC_OscConfig+0xa28>
 8002fbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fcc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	fa93 f2a3 	rbit	r2, r3
 8002fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fda:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fe8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fec:	2102      	movs	r1, #2
 8002fee:	6011      	str	r1, [r2, #0]
 8002ff0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ff4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	fa92 f1a2 	rbit	r1, r2
 8002ffe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003002:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003006:	6011      	str	r1, [r2, #0]
  return result;
 8003008:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800300c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	fab2 f282 	clz	r2, r2
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	f002 021f 	and.w	r2, r2, #31
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d080      	beq.n	8002f30 <HAL_RCC_OscConfig+0x974>
 800302e:	e07d      	b.n	800312c <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fe ffb0 	bl	8001f94 <HAL_GetTick>
 8003034:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fe ffab 	bl	8001f94 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e2d1      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
 8003052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003056:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003062:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f2a3 	rbit	r2, r3
 800306c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003070:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800307a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800307e:	2202      	movs	r2, #2
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003086:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003094:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003098:	601a      	str	r2, [r3, #0]
  return result;
 800309a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800309e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80030a2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_OscConfig+0xafe>
 80030b4:	4b58      	ldr	r3, [pc, #352]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	e013      	b.n	80030e2 <HAL_RCC_OscConfig+0xb26>
 80030ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030be:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030c2:	2202      	movs	r2, #2
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030ca:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030d8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030e6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030ea:	2102      	movs	r1, #2
 80030ec:	6011      	str	r1, [r2, #0]
 80030ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80030f2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	fa92 f1a2 	rbit	r1, r2
 80030fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003100:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003104:	6011      	str	r1, [r2, #0]
  return result;
 8003106:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800310a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fab2 f282 	clz	r2, r2
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	f002 021f 	and.w	r2, r2, #31
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f202 	lsl.w	r2, r1, r2
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d186      	bne.n	800303a <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800312c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b38      	ldr	r3, [pc, #224]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	4a37      	ldr	r2, [pc, #220]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003144:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8251 	beq.w	80035f4 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003152:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b08      	cmp	r3, #8
 800315c:	f000 820f 	beq.w	800357e <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003160:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003164:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b02      	cmp	r3, #2
 800316e:	f040 8165 	bne.w	800343c <HAL_RCC_OscConfig+0xe80>
 8003172:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003176:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800317a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800317e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003184:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	fa93 f2a3 	rbit	r2, r3
 800318e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003192:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003196:	601a      	str	r2, [r3, #0]
  return result;
 8003198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800319c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	461a      	mov	r2, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe feec 	bl	8001f94 <HAL_GetTick>
 80031bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c0:	e009      	b.n	80031d6 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe fee7 	bl	8001f94 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e20f      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
 80031d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80031f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031fa:	601a      	str	r2, [r3, #0]
  return result;
 80031fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003200:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003204:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b3f      	cmp	r3, #63	@ 0x3f
 800320e:	d805      	bhi.n	800321c <HAL_RCC_OscConfig+0xc60>
 8003210:	4b01      	ldr	r3, [pc, #4]	@ (8003218 <HAL_RCC_OscConfig+0xc5c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	e02a      	b.n	800326c <HAL_RCC_OscConfig+0xcb0>
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003220:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003224:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003228:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800322e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	fa93 f2a3 	rbit	r2, r3
 8003238:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800323c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003246:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800324a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003254:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003262:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	4bca      	ldr	r3, [pc, #808]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003270:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003274:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800327e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	fa92 f1a2 	rbit	r1, r2
 8003288:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800328c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003290:	6011      	str	r1, [r2, #0]
  return result;
 8003292:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003296:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d184      	bne.n	80031c2 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b8:	4bb6      	ldr	r3, [pc, #728]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	f023 020f 	bic.w	r2, r3, #15
 80032c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	49b1      	ldr	r1, [pc, #708]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80032d2:	4bb0      	ldr	r3, [pc, #704]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 80032da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032de:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a19      	ldr	r1, [r3, #32]
 80032e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	430b      	orrs	r3, r1
 80032f4:	49a7      	ldr	r1, [pc, #668]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
 80032fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032fe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003302:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800331a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800331e:	601a      	str	r2, [r3, #0]
  return result;
 8003320:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003324:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003328:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003334:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	2301      	movs	r3, #1
 800333e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fe28 	bl	8001f94 <HAL_GetTick>
 8003344:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003348:	e009      	b.n	800335e <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7fe fe23 	bl	8001f94 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e14b      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
 800335e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003362:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003366:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003370:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800337e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003382:	601a      	str	r2, [r3, #0]
  return result;
 8003384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003388:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800338c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b3f      	cmp	r3, #63	@ 0x3f
 8003396:	d802      	bhi.n	800339e <HAL_RCC_OscConfig+0xde2>
 8003398:	4b7e      	ldr	r3, [pc, #504]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	e027      	b.n	80033ee <HAL_RCC_OscConfig+0xe32>
 800339e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	fa93 f2a3 	rbit	r2, r3
 80033ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033be:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033c8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80033f2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033f6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80033fa:	6011      	str	r1, [r2, #0]
 80033fc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003400:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	fa92 f1a2 	rbit	r1, r2
 800340a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800340e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003412:	6011      	str	r1, [r2, #0]
  return result;
 8003414:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003418:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	fab2 f282 	clz	r2, r2
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	f042 0220 	orr.w	r2, r2, #32
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	f002 021f 	and.w	r2, r2, #31
 800342e:	2101      	movs	r1, #1
 8003430:	fa01 f202 	lsl.w	r2, r1, r2
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d087      	beq.n	800334a <HAL_RCC_OscConfig+0xd8e>
 800343a:	e0db      	b.n	80035f4 <HAL_RCC_OscConfig+0x1038>
 800343c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003440:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003444:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800344e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	fa93 f2a3 	rbit	r2, r3
 8003458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800345c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003460:	601a      	str	r2, [r3, #0]
  return result;
 8003462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003466:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800346a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003476:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	461a      	mov	r2, r3
 800347e:	2300      	movs	r3, #0
 8003480:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fe fd87 	bl	8001f94 <HAL_GetTick>
 8003486:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348a:	e009      	b.n	80034a0 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fd82 	bl	8001f94 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0aa      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
 80034a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034a4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	fa93 f2a3 	rbit	r2, r3
 80034bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034c4:	601a      	str	r2, [r3, #0]
  return result;
 80034c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034ca:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80034ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d0:	fab3 f383 	clz	r3, r3
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80034d8:	d802      	bhi.n	80034e0 <HAL_RCC_OscConfig+0xf24>
 80034da:	4b2e      	ldr	r3, [pc, #184]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e027      	b.n	8003530 <HAL_RCC_OscConfig+0xf74>
 80034e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034e4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034f2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003500:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800350a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800350e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003518:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003526:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_RCC_OscConfig+0xfd8>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003534:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003538:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003542:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	fa92 f1a2 	rbit	r1, r2
 800354c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003550:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003554:	6011      	str	r1, [r2, #0]
  return result;
 8003556:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800355a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	fab2 f282 	clz	r2, r2
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f002 021f 	and.w	r2, r2, #31
 8003570:	2101      	movs	r1, #1
 8003572:	fa01 f202 	lsl.w	r2, r1, r2
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d187      	bne.n	800348c <HAL_RCC_OscConfig+0xed0>
 800357c:	e03a      	b.n	80035f4 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800357e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003582:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d104      	bne.n	8003598 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e031      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
 8003592:	bf00      	nop
 8003594:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003598:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <HAL_RCC_OscConfig+0x1044>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80035a0:	4b17      	ldr	r3, [pc, #92]	@ (8003600 <HAL_RCC_OscConfig+0x1044>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035ac:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80035b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d117      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80035c4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035cc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80035d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000

08003604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b09e      	sub	sp, #120	@ 0x78
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e154      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800361c:	4b89      	ldr	r3, [pc, #548]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d910      	bls.n	800364c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b86      	ldr	r3, [pc, #536]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 0207 	bic.w	r2, r3, #7
 8003632:	4984      	ldr	r1, [pc, #528]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b82      	ldr	r3, [pc, #520]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e13c      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003658:	4b7b      	ldr	r3, [pc, #492]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4978      	ldr	r1, [pc, #480]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003666:	4313      	orrs	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80cd 	beq.w	8003812 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d137      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xec>
 8003680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003684:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800368e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b3f      	cmp	r3, #63	@ 0x3f
 8003698:	d802      	bhi.n	80036a0 <HAL_RCC_ClockConfig+0x9c>
 800369a:	4b6b      	ldr	r3, [pc, #428]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	e00f      	b.n	80036c0 <HAL_RCC_ClockConfig+0xbc>
 80036a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80036ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80036b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036bc:	4b62      	ldr	r3, [pc, #392]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036c8:	fa92 f2a2 	rbit	r2, r2
 80036cc:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80036ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80036d0:	fab2 f282 	clz	r2, r2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f002 021f 	and.w	r2, r2, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d171      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0ea      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d137      	bne.n	8003768 <HAL_RCC_ClockConfig+0x164>
 80036f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003710:	d802      	bhi.n	8003718 <HAL_RCC_ClockConfig+0x114>
 8003712:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	e00f      	b.n	8003738 <HAL_RCC_ClockConfig+0x134>
 8003718:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800371c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	647b      	str	r3, [r7, #68]	@ 0x44
 8003726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800372a:	643b      	str	r3, [r7, #64]	@ 0x40
 800372c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003734:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800373c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800373e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003740:	fa92 f2a2 	rbit	r2, r2
 8003744:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003746:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003748:	fab2 f282 	clz	r2, r2
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	f042 0220 	orr.w	r2, r2, #32
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	f002 021f 	and.w	r2, r2, #31
 8003758:	2101      	movs	r1, #1
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	4013      	ands	r3, r2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d135      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0ae      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
 8003768:	2302      	movs	r3, #2
 800376a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	fa93 f3a3 	rbit	r3, r3
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b3f      	cmp	r3, #63	@ 0x3f
 800377e:	d802      	bhi.n	8003786 <HAL_RCC_ClockConfig+0x182>
 8003780:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	e00d      	b.n	80037a2 <HAL_RCC_ClockConfig+0x19e>
 8003786:	2302      	movs	r3, #2
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378c:	fa93 f3a3 	rbit	r3, r3
 8003790:	627b      	str	r3, [r7, #36]	@ 0x24
 8003792:	2302      	movs	r3, #2
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	2202      	movs	r2, #2
 80037a4:	61ba      	str	r2, [r7, #24]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	fa92 f2a2 	rbit	r2, r2
 80037ac:	617a      	str	r2, [r7, #20]
  return result;
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	f042 0220 	orr.w	r2, r2, #32
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f002 021f 	and.w	r2, r2, #31
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f202 	lsl.w	r2, r1, r2
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e07a      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 0203 	bic.w	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	491a      	ldr	r1, [pc, #104]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e2:	f7fe fbd7 	bl	8001f94 <HAL_GetTick>
 80037e6:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ea:	f7fe fbd3 	bl	8001f94 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e062      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 020c 	and.w	r2, r3, #12
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	429a      	cmp	r2, r3
 8003810:	d1eb      	bne.n	80037ea <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003812:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d215      	bcs.n	800384c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 0207 	bic.w	r2, r3, #7
 8003828:	4906      	ldr	r1, [pc, #24]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d006      	beq.n	800384c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_RCC_ClockConfig+0x2c2>
 8003842:	bf00      	nop
 8003844:	40022000 	.word	0x40022000
 8003848:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003858:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_RCC_ClockConfig+0x2cc>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	491a      	ldr	r1, [pc, #104]	@ (80038d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003876:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4912      	ldr	r1, [pc, #72]	@ (80038d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800388a:	f000 f829 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 800388e:	4601      	mov	r1, r0
 8003890:	4b0f      	ldr	r3, [pc, #60]	@ (80038d0 <HAL_RCC_ClockConfig+0x2cc>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003898:	22f0      	movs	r2, #240	@ 0xf0
 800389a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	fa92 f2a2 	rbit	r2, r2
 80038a2:	60fa      	str	r2, [r7, #12]
  return result;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	fab2 f282 	clz	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	40d3      	lsrs	r3, r2
 80038ae:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <HAL_RCC_ClockConfig+0x2d0>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	fa21 f303 	lsr.w	r3, r1, r3
 80038b6:	4a08      	ldr	r2, [pc, #32]	@ (80038d8 <HAL_RCC_ClockConfig+0x2d4>)
 80038b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80038ba:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <HAL_RCC_ClockConfig+0x2d8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe fb24 	bl	8001f0c <HAL_InitTick>
  
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3778      	adds	r7, #120	@ 0x78
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	0800677c 	.word	0x0800677c
 80038d8:	2000000c 	.word	0x2000000c
 80038dc:	20000014 	.word	0x20000014

080038e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80038fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b04      	cmp	r3, #4
 8003908:	d002      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x30>
 800390a:	2b08      	cmp	r3, #8
 800390c:	d003      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x36>
 800390e:	e029      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003910:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003912:	613b      	str	r3, [r7, #16]
      break;
 8003914:	e029      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0c9b      	lsrs	r3, r3, #18
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003924:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <HAL_RCC_GetSysClockFreq+0x98>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xa4>)
 800392e:	5cd3      	ldrb	r3, [r2, r3]
 8003930:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800393c:	4a0f      	ldr	r2, [pc, #60]	@ (800397c <HAL_RCC_GetSysClockFreq+0x9c>)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	fbb2 f2f3 	udiv	r2, r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e007      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800394e:	4a0b      	ldr	r2, [pc, #44]	@ (800397c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	fbb2 f2f3 	udiv	r2, r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	613b      	str	r3, [r7, #16]
      break;
 8003962:	e002      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003966:	613b      	str	r3, [r7, #16]
      break;
 8003968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396a:	693b      	ldr	r3, [r7, #16]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40021000 	.word	0x40021000
 800397c:	007a1200 	.word	0x007a1200
 8003980:	0800678c 	.word	0x0800678c
 8003984:	0800679c 	.word	0x0800679c

08003988 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b092      	sub	sp, #72	@ 0x48
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003994:	2300      	movs	r3, #0
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80d2 	beq.w	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ac:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10e      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4a49      	ldr	r2, [pc, #292]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	61d3      	str	r3, [r2, #28]
 80039c4:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d6:	4b44      	ldr	r3, [pc, #272]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d118      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e2:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a40      	ldr	r2, [pc, #256]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ee:	f7fe fad1 	bl	8001f94 <HAL_GetTick>
 80039f2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f4:	e008      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f6:	f7fe facd 	bl	8001f94 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b64      	cmp	r3, #100	@ 0x64
 8003a02:	d901      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e1d4      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	4b37      	ldr	r3, [pc, #220]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a14:	4b33      	ldr	r3, [pc, #204]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8082 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d07a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b25      	ldr	r3, [pc, #148]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2301      	movs	r3, #1
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	461a      	mov	r2, r3
 8003a82:	2300      	movs	r3, #0
 8003a84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a86:	4a17      	ldr	r2, [pc, #92]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d049      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fe fa7d 	bl	8001f94 <HAL_GetTick>
 8003a9a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9e:	f7fe fa79 	bl	8001f94 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e17e      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	61fb      	str	r3, [r7, #28]
  return result;
 8003acc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ade:	4b01      	ldr	r3, [pc, #4]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	e00d      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	10908100 	.word	0x10908100
 8003af0:	2302      	movs	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	4b9a      	ldr	r3, [pc, #616]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b00:	2202      	movs	r2, #2
 8003b02:	613a      	str	r2, [r7, #16]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	fa92 f2a2 	rbit	r2, r2
 8003b0a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	fab2 f282 	clz	r2, r2
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	f002 021f 	and.w	r2, r2, #31
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0b9      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	498c      	ldr	r1, [pc, #560]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b44:	4b88      	ldr	r3, [pc, #544]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4a87      	ldr	r2, [pc, #540]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5c:	4b82      	ldr	r3, [pc, #520]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f023 0203 	bic.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	497f      	ldr	r1, [pc, #508]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4978      	ldr	r1, [pc, #480]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b98:	4b73      	ldr	r3, [pc, #460]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	4970      	ldr	r1, [pc, #448]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f023 0210 	bic.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4969      	ldr	r1, [pc, #420]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bd4:	4b64      	ldr	r3, [pc, #400]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be0:	4961      	ldr	r1, [pc, #388]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf6:	f023 0220 	bic.w	r2, r3, #32
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	495a      	ldr	r1, [pc, #360]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c10:	4b55      	ldr	r3, [pc, #340]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	4952      	ldr	r1, [pc, #328]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	494b      	ldr	r1, [pc, #300]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c4c:	4b46      	ldr	r3, [pc, #280]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4943      	ldr	r1, [pc, #268]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	493c      	ldr	r1, [pc, #240]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c88:	4b37      	ldr	r3, [pc, #220]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	4934      	ldr	r1, [pc, #208]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003ca6:	4b30      	ldr	r3, [pc, #192]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	492d      	ldr	r1, [pc, #180]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003cc4:	4b28      	ldr	r3, [pc, #160]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	4925      	ldr	r1, [pc, #148]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ce2:	4b21      	ldr	r3, [pc, #132]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	491e      	ldr	r1, [pc, #120]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003d00:	4b19      	ldr	r3, [pc, #100]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	4916      	ldr	r1, [pc, #88]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003d1e:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2a:	490f      	ldr	r1, [pc, #60]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d48:	4907      	ldr	r1, [pc, #28]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00c      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003d5a:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6e:	4913      	ldr	r1, [pc, #76]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003d80:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8c:	490b      	ldr	r1, [pc, #44]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003d9e:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003daa:	4904      	ldr	r1, [pc, #16]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3748      	adds	r7, #72	@ 0x48
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e073      	b.n	8003ebe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7f5b      	ldrb	r3, [r3, #29]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd fc6c 	bl	80016c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d055      	beq.n	8003eac <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	22ca      	movs	r2, #202	@ 0xca
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2253      	movs	r2, #83	@ 0x53
 8003e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fb73 	bl	80044fc <RTC_EnterInitMode>
 8003e16:	4603      	mov	r3, r0
 8003e18:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d12c      	bne.n	8003e7a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e32:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6899      	ldr	r1, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68d2      	ldr	r2, [r2, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6919      	ldr	r1, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	041a      	lsls	r2, r3, #16
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fb7a 	bl	800456a <RTC_ExitInitMode>
 8003e76:	4603      	mov	r3, r0
 8003e78:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d110      	bne.n	8003ea2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	22ff      	movs	r2, #255	@ 0xff
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003eaa:	e001      	b.n	8003eb0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ec6:	b590      	push	{r4, r7, lr}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	7f1b      	ldrb	r3, [r3, #28]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_RTC_SetTime+0x1c>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e087      	b.n	8003ff2 <HAL_RTC_SetTime+0x12c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2202      	movs	r2, #2
 8003eec:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d126      	bne.n	8003f42 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fb51 	bl	80045b4 <RTC_ByteToBcd2>
 8003f12:	4603      	mov	r3, r0
 8003f14:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb4a 	bl	80045b4 <RTC_ByteToBcd2>
 8003f20:	4603      	mov	r3, r0
 8003f22:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f24:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	789b      	ldrb	r3, [r3, #2]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fb42 	bl	80045b4 <RTC_ByteToBcd2>
 8003f30:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f32:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	78db      	ldrb	r3, [r3, #3]
 8003f3a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e018      	b.n	8003f74 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f62:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f68:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	78db      	ldrb	r3, [r3, #3]
 8003f6e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	22ca      	movs	r2, #202	@ 0xca
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2253      	movs	r2, #83	@ 0x53
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fab9 	bl	80044fc <RTC_EnterInitMode>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d120      	bne.n	8003fd6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f9e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003fa2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fb2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6899      	ldr	r1, [r3, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 facc 	bl	800456a <RTC_ExitInitMode>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	22ff      	movs	r2, #255	@ 0xff
 8003fe8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	771a      	strb	r2, [r3, #28]

  return status;
 8003ff0:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd90      	pop	{r4, r7, pc}

08003ffa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800402c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004030:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	0c1b      	lsrs	r3, r3, #16
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800405a:	b2da      	uxtb	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	0d9b      	lsrs	r3, r3, #22
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11a      	bne.n	80040ac <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fab8 	bl	80045f0 <RTC_Bcd2ToByte>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	4618      	mov	r0, r3
 800408e:	f000 faaf 	bl	80045f0 <RTC_Bcd2ToByte>
 8004092:	4603      	mov	r3, r0
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	789b      	ldrb	r3, [r3, #2]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 faa6 	bl	80045f0 <RTC_Bcd2ToByte>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040b6:	b590      	push	{r4, r7, lr}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	7f1b      	ldrb	r3, [r3, #28]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_RTC_SetDate+0x1c>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e071      	b.n	80041b6 <HAL_RTC_SetDate+0x100>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2202      	movs	r2, #2
 80040dc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10e      	bne.n	8004102 <HAL_RTC_SetDate+0x4c>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d008      	beq.n	8004102 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	f023 0310 	bic.w	r3, r3, #16
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	330a      	adds	r3, #10
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d11c      	bne.n	8004142 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	78db      	ldrb	r3, [r3, #3]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fa51 	bl	80045b4 <RTC_ByteToBcd2>
 8004112:	4603      	mov	r3, r0
 8004114:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fa4a 	bl	80045b4 <RTC_ByteToBcd2>
 8004120:	4603      	mov	r3, r0
 8004122:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004124:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	789b      	ldrb	r3, [r3, #2]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fa42 	bl	80045b4 <RTC_ByteToBcd2>
 8004130:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004132:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e00e      	b.n	8004160 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	78db      	ldrb	r3, [r3, #3]
 8004146:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800414e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004154:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	22ca      	movs	r2, #202	@ 0xca
 8004166:	625a      	str	r2, [r3, #36]	@ 0x24
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2253      	movs	r2, #83	@ 0x53
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f9c3 	bl	80044fc <RTC_EnterInitMode>
 8004176:	4603      	mov	r3, r0
 8004178:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10c      	bne.n	800419a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800418a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800418e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f9ea 	bl	800456a <RTC_ExitInitMode>
 8004196:	4603      	mov	r3, r0
 8004198:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800419a:	7cfb      	ldrb	r3, [r7, #19]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	22ff      	movs	r2, #255	@ 0xff
 80041ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	771a      	strb	r2, [r3, #28]

  return status;
 80041b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}

080041be <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041dc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	0b5b      	lsrs	r3, r3, #13
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11a      	bne.n	8004252 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	78db      	ldrb	r3, [r3, #3]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f9e5 	bl	80045f0 <RTC_Bcd2ToByte>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	4618      	mov	r0, r3
 8004234:	f000 f9dc 	bl	80045f0 <RTC_Bcd2ToByte>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	789b      	ldrb	r3, [r3, #2]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f9d3 	bl	80045f0 <RTC_Bcd2ToByte>
 800424a:	4603      	mov	r3, r0
 800424c:	461a      	mov	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b089      	sub	sp, #36	@ 0x24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	7f1b      	ldrb	r3, [r3, #28]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_RTC_SetAlarm+0x24>
 800427c:	2302      	movs	r3, #2
 800427e:	e113      	b.n	80044a8 <HAL_RTC_SetAlarm+0x24c>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2202      	movs	r2, #2
 800428a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d137      	bne.n	8004302 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2200      	movs	r2, #0
 80042a4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f982 	bl	80045b4 <RTC_ByteToBcd2>
 80042b0:	4603      	mov	r3, r0
 80042b2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f97b 	bl	80045b4 <RTC_ByteToBcd2>
 80042be:	4603      	mov	r3, r0
 80042c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80042c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	789b      	ldrb	r3, [r3, #2]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f973 	bl	80045b4 <RTC_ByteToBcd2>
 80042ce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80042d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	78db      	ldrb	r3, [r3, #3]
 80042d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80042da:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f965 	bl	80045b4 <RTC_ByteToBcd2>
 80042ea:	4603      	mov	r3, r0
 80042ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 80042ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80042f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	e023      	b.n	800434a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004322:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004328:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	78db      	ldrb	r3, [r3, #3]
 800432e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004330:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004338:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800433a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004340:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004346:	4313      	orrs	r3, r2
 8004348:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	22ca      	movs	r2, #202	@ 0xca
 800435c:	625a      	str	r2, [r3, #36]	@ 0x24
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2253      	movs	r2, #83	@ 0x53
 8004364:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	d148      	bne.n	8004402 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800437e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800438e:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80043a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043a2:	f7fd fdf7 	bl	8001f94 <HAL_GetTick>
 80043a6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80043a8:	e013      	b.n	80043d2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043aa:	f7fd fdf3 	bl	8001f94 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043b8:	d90b      	bls.n	80043d2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	22ff      	movs	r2, #255	@ 0xff
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2203      	movs	r2, #3
 80043c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e06a      	b.n	80044a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0e4      	beq.n	80043aa <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043fe:	609a      	str	r2, [r3, #8]
 8004400:	e047      	b.n	8004492 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004410:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004420:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004432:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004434:	f7fd fdae 	bl	8001f94 <HAL_GetTick>
 8004438:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800443a:	e013      	b.n	8004464 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800443c:	f7fd fdaa 	bl	8001f94 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800444a:	d90b      	bls.n	8004464 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	22ff      	movs	r2, #255	@ 0xff
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2203      	movs	r2, #3
 8004458:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e021      	b.n	80044a8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0e4      	beq.n	800443c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004490:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	22ff      	movs	r2, #255	@ 0xff
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3724      	adds	r7, #36	@ 0x24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd90      	pop	{r4, r7, pc}

080044b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0d      	ldr	r2, [pc, #52]	@ (80044f8 <HAL_RTC_WaitForSynchro+0x48>)
 80044c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c4:	f7fd fd66 	bl	8001f94 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044ca:	e009      	b.n	80044e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044cc:	f7fd fd62 	bl	8001f94 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044da:	d901      	bls.n	80044e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e007      	b.n	80044f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ee      	beq.n	80044cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	0001ff5f 	.word	0x0001ff5f

080044fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d122      	bne.n	8004560 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004528:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800452a:	f7fd fd33 	bl	8001f94 <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004530:	e00c      	b.n	800454c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004532:	f7fd fd2f 	bl	8001f94 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004540:	d904      	bls.n	800454c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2204      	movs	r2, #4
 8004546:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <RTC_EnterInitMode+0x64>
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d1e8      	bne.n	8004532 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004584:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff8b 	bl	80044b0 <HAL_RTC_WaitForSynchro>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d004      	beq.n	80045aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2204      	movs	r2, #4
 80045a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80045c2:	e005      	b.n	80045d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	3b0a      	subs	r3, #10
 80045ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	d8f6      	bhi.n	80045c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	b2db      	uxtb	r3, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4413      	add	r3, r2
 800461e:	b2db      	uxtb	r3, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e049      	b.n	80046d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd f85c 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f000 fdb8 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d001      	beq.n	80046f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e04f      	b.n	8004794 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a23      	ldr	r2, [pc, #140]	@ (80047a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01d      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471e:	d018      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1f      	ldr	r2, [pc, #124]	@ (80047a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a1e      	ldr	r2, [pc, #120]	@ (80047a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d00e      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <HAL_TIM_Base_Start_IT+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_TIM_Base_Start_IT+0x76>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a19      	ldr	r2, [pc, #100]	@ (80047b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d115      	bne.n	800477e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b17      	ldr	r3, [pc, #92]	@ (80047b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800475a:	4013      	ands	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b06      	cmp	r3, #6
 8004762:	d015      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476a:	d011      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	e008      	b.n	8004790 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0201 	orr.w	r2, r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e000      	b.n	8004792 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40000800 	.word	0x40000800
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40015000 	.word	0x40015000
 80047b8:	00010007 	.word	0x00010007

080047bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e049      	b.n	8004862 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f841 	bl	800486a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 fcf0 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <HAL_TIM_PWM_Start+0x24>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b01      	cmp	r3, #1
 800489a:	bf14      	ite	ne
 800489c:	2301      	movne	r3, #1
 800489e:	2300      	moveq	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e03c      	b.n	800491e <HAL_TIM_PWM_Start+0x9e>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d109      	bne.n	80048be <HAL_TIM_PWM_Start+0x3e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	bf14      	ite	ne
 80048b6:	2301      	movne	r3, #1
 80048b8:	2300      	moveq	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	e02f      	b.n	800491e <HAL_TIM_PWM_Start+0x9e>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d109      	bne.n	80048d8 <HAL_TIM_PWM_Start+0x58>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	bf14      	ite	ne
 80048d0:	2301      	movne	r3, #1
 80048d2:	2300      	moveq	r3, #0
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	e022      	b.n	800491e <HAL_TIM_PWM_Start+0x9e>
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d109      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x72>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e015      	b.n	800491e <HAL_TIM_PWM_Start+0x9e>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d109      	bne.n	800490c <HAL_TIM_PWM_Start+0x8c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	bf14      	ite	ne
 8004904:	2301      	movne	r3, #1
 8004906:	2300      	moveq	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e008      	b.n	800491e <HAL_TIM_PWM_Start+0x9e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0a1      	b.n	8004a6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xb6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004934:	e023      	b.n	800497e <HAL_TIM_PWM_Start+0xfe>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b04      	cmp	r3, #4
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0xc6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004944:	e01b      	b.n	800497e <HAL_TIM_PWM_Start+0xfe>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d104      	bne.n	8004956 <HAL_TIM_PWM_Start+0xd6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004954:	e013      	b.n	800497e <HAL_TIM_PWM_Start+0xfe>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0xe6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004964:	e00b      	b.n	800497e <HAL_TIM_PWM_Start+0xfe>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0xf6>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004974:	e003      	b.n	800497e <HAL_TIM_PWM_Start+0xfe>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2201      	movs	r2, #1
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f874 	bl	8005a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a38      	ldr	r2, [pc, #224]	@ (8004a74 <HAL_TIM_PWM_Start+0x1f4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d018      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x148>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a37      	ldr	r2, [pc, #220]	@ (8004a78 <HAL_TIM_PWM_Start+0x1f8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x148>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a35      	ldr	r2, [pc, #212]	@ (8004a7c <HAL_TIM_PWM_Start+0x1fc>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x148>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a34      	ldr	r2, [pc, #208]	@ (8004a80 <HAL_TIM_PWM_Start+0x200>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x148>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <HAL_TIM_PWM_Start+0x204>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_TIM_PWM_Start+0x148>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a31      	ldr	r2, [pc, #196]	@ (8004a88 <HAL_TIM_PWM_Start+0x208>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_PWM_Start+0x14c>
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <HAL_TIM_PWM_Start+0x14e>
 80049cc:	2300      	movs	r3, #0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a23      	ldr	r2, [pc, #140]	@ (8004a74 <HAL_TIM_PWM_Start+0x1f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d01d      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1a8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f4:	d018      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1a8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <HAL_TIM_PWM_Start+0x20c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1a8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <HAL_TIM_PWM_Start+0x210>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1a8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a78 <HAL_TIM_PWM_Start+0x1f8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1a8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a18      	ldr	r2, [pc, #96]	@ (8004a7c <HAL_TIM_PWM_Start+0x1fc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_TIM_PWM_Start+0x1a8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <HAL_TIM_PWM_Start+0x208>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d115      	bne.n	8004a54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <HAL_TIM_PWM_Start+0x214>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d015      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x1e6>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a40:	d011      	beq.n	8004a66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a52:	e008      	b.n	8004a66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e000      	b.n	8004a68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40013400 	.word	0x40013400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	40014400 	.word	0x40014400
 8004a84:	40014800 	.word	0x40014800
 8004a88:	40015000 	.word	0x40015000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	00010007 	.word	0x00010007

08004a98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	6839      	ldr	r1, [r7, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 ffe2 	bl	8005a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a40      	ldr	r2, [pc, #256]	@ (8004bb8 <HAL_TIM_PWM_Stop+0x120>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_TIM_PWM_Stop+0x54>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3f      	ldr	r2, [pc, #252]	@ (8004bbc <HAL_TIM_PWM_Stop+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <HAL_TIM_PWM_Stop+0x54>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8004bc0 <HAL_TIM_PWM_Stop+0x128>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_TIM_PWM_Stop+0x54>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc4 <HAL_TIM_PWM_Stop+0x12c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIM_PWM_Stop+0x54>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	@ (8004bc8 <HAL_TIM_PWM_Stop+0x130>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_PWM_Stop+0x54>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a39      	ldr	r2, [pc, #228]	@ (8004bcc <HAL_TIM_PWM_Stop+0x134>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <HAL_TIM_PWM_Stop+0x58>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_TIM_PWM_Stop+0x5a>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d017      	beq.n	8004b26 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <HAL_TIM_PWM_Stop+0x8e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_PWM_Stop+0x8e>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a1a      	ldr	r2, [r3, #32]
 8004b2c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <HAL_TIM_PWM_Stop+0xbe>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a1a      	ldr	r2, [r3, #32]
 8004b3c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_PWM_Stop+0xbe>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Stop+0xce>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b64:	e023      	b.n	8004bae <HAL_TIM_PWM_Stop+0x116>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_PWM_Stop+0xde>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b74:	e01b      	b.n	8004bae <HAL_TIM_PWM_Stop+0x116>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d104      	bne.n	8004b86 <HAL_TIM_PWM_Stop+0xee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b84:	e013      	b.n	8004bae <HAL_TIM_PWM_Stop+0x116>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d104      	bne.n	8004b96 <HAL_TIM_PWM_Stop+0xfe>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b94:	e00b      	b.n	8004bae <HAL_TIM_PWM_Stop+0x116>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d104      	bne.n	8004ba6 <HAL_TIM_PWM_Stop+0x10e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba4:	e003      	b.n	8004bae <HAL_TIM_PWM_Stop+0x116>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800
 8004bcc:	40015000 	.word	0x40015000

08004bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d020      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01b      	beq.n	8004c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0202 	mvn.w	r2, #2
 8004c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fac1 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fab3 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fac4 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d020      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0204 	mvn.w	r2, #4
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa9b 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa8d 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa9e 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d020      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01b      	beq.n	8004ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0208 	mvn.w	r2, #8
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa75 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa67 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fa78 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d020      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01b      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0210 	mvn.w	r2, #16
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2208      	movs	r2, #8
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fa4f 	bl	80051a2 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fa41 	bl	800518e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fa52 	bl	80051b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0201 	mvn.w	r2, #1
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fb ff5c 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 ffcc 	bl	8005cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00c      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d007      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 ffc4 	bl	8005d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00c      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fa11 	bl	80051ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00c      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0220 	mvn.w	r2, #32
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 ff8c 	bl	8005ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e0ff      	b.n	8004ff2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b14      	cmp	r3, #20
 8004dfe:	f200 80f0 	bhi.w	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e02:	a201      	add	r2, pc, #4	@ (adr r2, 8004e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e5d 	.word	0x08004e5d
 8004e0c:	08004fe3 	.word	0x08004fe3
 8004e10:	08004fe3 	.word	0x08004fe3
 8004e14:	08004fe3 	.word	0x08004fe3
 8004e18:	08004e9d 	.word	0x08004e9d
 8004e1c:	08004fe3 	.word	0x08004fe3
 8004e20:	08004fe3 	.word	0x08004fe3
 8004e24:	08004fe3 	.word	0x08004fe3
 8004e28:	08004edf 	.word	0x08004edf
 8004e2c:	08004fe3 	.word	0x08004fe3
 8004e30:	08004fe3 	.word	0x08004fe3
 8004e34:	08004fe3 	.word	0x08004fe3
 8004e38:	08004f1f 	.word	0x08004f1f
 8004e3c:	08004fe3 	.word	0x08004fe3
 8004e40:	08004fe3 	.word	0x08004fe3
 8004e44:	08004fe3 	.word	0x08004fe3
 8004e48:	08004f61 	.word	0x08004f61
 8004e4c:	08004fe3 	.word	0x08004fe3
 8004e50:	08004fe3 	.word	0x08004fe3
 8004e54:	08004fe3 	.word	0x08004fe3
 8004e58:	08004fa1 	.word	0x08004fa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fa66 	bl	8005334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699a      	ldr	r2, [r3, #24]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0208 	orr.w	r2, r2, #8
 8004e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0204 	bic.w	r2, r2, #4
 8004e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	619a      	str	r2, [r3, #24]
      break;
 8004e9a:	e0a5      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fae0 	bl	8005468 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6999      	ldr	r1, [r3, #24]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	021a      	lsls	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	619a      	str	r2, [r3, #24]
      break;
 8004edc:	e084      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fb53 	bl	8005590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 0208 	orr.w	r2, r2, #8
 8004ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69da      	ldr	r2, [r3, #28]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0204 	bic.w	r2, r2, #4
 8004f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69d9      	ldr	r1, [r3, #28]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	61da      	str	r2, [r3, #28]
      break;
 8004f1c:	e064      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fbc5 	bl	80056b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69d9      	ldr	r1, [r3, #28]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	61da      	str	r2, [r3, #28]
      break;
 8004f5e:	e043      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 fc14 	bl	8005794 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0208 	orr.w	r2, r2, #8
 8004f7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0204 	bic.w	r2, r2, #4
 8004f8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f9e:	e023      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fc5e 	bl	8005868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	021a      	lsls	r2, r3, #8
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004fe0:	e002      	b.n	8004fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop

08004ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_TIM_ConfigClockSource+0x1c>
 8005014:	2302      	movs	r3, #2
 8005016:	e0b6      	b.n	8005186 <HAL_TIM_ConfigClockSource+0x18a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005036:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005054:	d03e      	beq.n	80050d4 <HAL_TIM_ConfigClockSource+0xd8>
 8005056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505a:	f200 8087 	bhi.w	800516c <HAL_TIM_ConfigClockSource+0x170>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005062:	f000 8086 	beq.w	8005172 <HAL_TIM_ConfigClockSource+0x176>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	d87f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800506c:	2b70      	cmp	r3, #112	@ 0x70
 800506e:	d01a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0xaa>
 8005070:	2b70      	cmp	r3, #112	@ 0x70
 8005072:	d87b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 8005074:	2b60      	cmp	r3, #96	@ 0x60
 8005076:	d050      	beq.n	800511a <HAL_TIM_ConfigClockSource+0x11e>
 8005078:	2b60      	cmp	r3, #96	@ 0x60
 800507a:	d877      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800507c:	2b50      	cmp	r3, #80	@ 0x50
 800507e:	d03c      	beq.n	80050fa <HAL_TIM_ConfigClockSource+0xfe>
 8005080:	2b50      	cmp	r3, #80	@ 0x50
 8005082:	d873      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 8005084:	2b40      	cmp	r3, #64	@ 0x40
 8005086:	d058      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x13e>
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	d86f      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800508c:	2b30      	cmp	r3, #48	@ 0x30
 800508e:	d064      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 8005090:	2b30      	cmp	r3, #48	@ 0x30
 8005092:	d86b      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 8005094:	2b20      	cmp	r3, #32
 8005096:	d060      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 8005098:	2b20      	cmp	r3, #32
 800509a:	d867      	bhi.n	800516c <HAL_TIM_ConfigClockSource+0x170>
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d05a      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x15e>
 80050a4:	e062      	b.n	800516c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b6:	f000 fcbd 	bl	8005a34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	609a      	str	r2, [r3, #8]
      break;
 80050d2:	e04f      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	f000 fca6 	bl	8005a34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050f6:	609a      	str	r2, [r3, #8]
      break;
 80050f8:	e03c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005106:	461a      	mov	r2, r3
 8005108:	f000 fc1a 	bl	8005940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2150      	movs	r1, #80	@ 0x50
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fc73 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005118:	e02c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005126:	461a      	mov	r2, r3
 8005128:	f000 fc39 	bl	800599e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2160      	movs	r1, #96	@ 0x60
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fc63 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005138:	e01c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005146:	461a      	mov	r2, r3
 8005148:	f000 fbfa 	bl	8005940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	@ 0x40
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fc53 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 8005158:	e00c      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4619      	mov	r1, r3
 8005164:	4610      	mov	r0, r2
 8005166:	f000 fc4a 	bl	80059fe <TIM_ITRx_SetConfig>
      break;
 800516a:	e003      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      break;
 8005170:	e000      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a48      	ldr	r2, [pc, #288]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fe:	d00f      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a45      	ldr	r2, [pc, #276]	@ (8005318 <TIM_Base_SetConfig+0x138>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00b      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a44      	ldr	r2, [pc, #272]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d007      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a43      	ldr	r2, [pc, #268]	@ (8005320 <TIM_Base_SetConfig+0x140>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a42      	ldr	r2, [pc, #264]	@ (8005324 <TIM_Base_SetConfig+0x144>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a37      	ldr	r2, [pc, #220]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01f      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005240:	d01b      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a34      	ldr	r2, [pc, #208]	@ (8005318 <TIM_Base_SetConfig+0x138>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d017      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a33      	ldr	r2, [pc, #204]	@ (800531c <TIM_Base_SetConfig+0x13c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a32      	ldr	r2, [pc, #200]	@ (8005320 <TIM_Base_SetConfig+0x140>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00f      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a32      	ldr	r2, [pc, #200]	@ (8005328 <TIM_Base_SetConfig+0x148>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00b      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a31      	ldr	r2, [pc, #196]	@ (800532c <TIM_Base_SetConfig+0x14c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d007      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a30      	ldr	r2, [pc, #192]	@ (8005330 <TIM_Base_SetConfig+0x150>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d003      	beq.n	800527a <TIM_Base_SetConfig+0x9a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2b      	ldr	r2, [pc, #172]	@ (8005324 <TIM_Base_SetConfig+0x144>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d108      	bne.n	800528c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4313      	orrs	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <TIM_Base_SetConfig+0x134>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <TIM_Base_SetConfig+0x100>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a19      	ldr	r2, [pc, #100]	@ (8005320 <TIM_Base_SetConfig+0x140>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00f      	beq.n	80052e0 <TIM_Base_SetConfig+0x100>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a19      	ldr	r2, [pc, #100]	@ (8005328 <TIM_Base_SetConfig+0x148>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00b      	beq.n	80052e0 <TIM_Base_SetConfig+0x100>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <TIM_Base_SetConfig+0x14c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <TIM_Base_SetConfig+0x100>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <TIM_Base_SetConfig+0x150>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_Base_SetConfig+0x100>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a12      	ldr	r2, [pc, #72]	@ (8005324 <TIM_Base_SetConfig+0x144>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d103      	bne.n	80052e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	611a      	str	r2, [r3, #16]
  }
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40013400 	.word	0x40013400
 8005324:	40015000 	.word	0x40015000
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f023 0201 	bic.w	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0303 	bic.w	r3, r3, #3
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a30      	ldr	r2, [pc, #192]	@ (8005450 <TIM_OC1_SetConfig+0x11c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <TIM_OC1_SetConfig+0x88>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2f      	ldr	r2, [pc, #188]	@ (8005454 <TIM_OC1_SetConfig+0x120>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_OC1_SetConfig+0x88>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a2e      	ldr	r2, [pc, #184]	@ (8005458 <TIM_OC1_SetConfig+0x124>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_OC1_SetConfig+0x88>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a2d      	ldr	r2, [pc, #180]	@ (800545c <TIM_OC1_SetConfig+0x128>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_OC1_SetConfig+0x88>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005460 <TIM_OC1_SetConfig+0x12c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC1_SetConfig+0x88>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005464 <TIM_OC1_SetConfig+0x130>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d10c      	bne.n	80053d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f023 0308 	bic.w	r3, r3, #8
 80053c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <TIM_OC1_SetConfig+0x11c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <TIM_OC1_SetConfig+0xd2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005454 <TIM_OC1_SetConfig+0x120>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00f      	beq.n	8005406 <TIM_OC1_SetConfig+0xd2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005458 <TIM_OC1_SetConfig+0x124>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_OC1_SetConfig+0xd2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1a      	ldr	r2, [pc, #104]	@ (800545c <TIM_OC1_SetConfig+0x128>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_OC1_SetConfig+0xd2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a19      	ldr	r2, [pc, #100]	@ (8005460 <TIM_OC1_SetConfig+0x12c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_OC1_SetConfig+0xd2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <TIM_OC1_SetConfig+0x130>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d111      	bne.n	800542a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800540c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	621a      	str	r2, [r3, #32]
}
 8005444:	bf00      	nop
 8005446:	371c      	adds	r7, #28
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	40012c00 	.word	0x40012c00
 8005454:	40013400 	.word	0x40013400
 8005458:	40014000 	.word	0x40014000
 800545c:	40014400 	.word	0x40014400
 8005460:	40014800 	.word	0x40014800
 8005464:	40015000 	.word	0x40015000

08005468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f023 0210 	bic.w	r2, r3, #16
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0320 	bic.w	r3, r3, #32
 80054b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005578 <TIM_OC2_SetConfig+0x110>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC2_SetConfig+0x74>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a2b      	ldr	r2, [pc, #172]	@ (800557c <TIM_OC2_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC2_SetConfig+0x74>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005580 <TIM_OC2_SetConfig+0x118>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d10d      	bne.n	80054f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005578 <TIM_OC2_SetConfig+0x110>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <TIM_OC2_SetConfig+0xc0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1e      	ldr	r2, [pc, #120]	@ (800557c <TIM_OC2_SetConfig+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC2_SetConfig+0xc0>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a1e      	ldr	r2, [pc, #120]	@ (8005584 <TIM_OC2_SetConfig+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC2_SetConfig+0xc0>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a1d      	ldr	r2, [pc, #116]	@ (8005588 <TIM_OC2_SetConfig+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC2_SetConfig+0xc0>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a1c      	ldr	r2, [pc, #112]	@ (800558c <TIM_OC2_SetConfig+0x124>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC2_SetConfig+0xc0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <TIM_OC2_SetConfig+0x118>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d113      	bne.n	8005550 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800552e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005536:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40015000 	.word	0x40015000
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0303 	bic.w	r3, r3, #3
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	021b      	lsls	r3, r3, #8
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2b      	ldr	r2, [pc, #172]	@ (800569c <TIM_OC3_SetConfig+0x10c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d007      	beq.n	8005602 <TIM_OC3_SetConfig+0x72>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2a      	ldr	r2, [pc, #168]	@ (80056a0 <TIM_OC3_SetConfig+0x110>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d003      	beq.n	8005602 <TIM_OC3_SetConfig+0x72>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a29      	ldr	r2, [pc, #164]	@ (80056a4 <TIM_OC3_SetConfig+0x114>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10d      	bne.n	800561e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800561c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <TIM_OC3_SetConfig+0x10c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <TIM_OC3_SetConfig+0xbe>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1d      	ldr	r2, [pc, #116]	@ (80056a0 <TIM_OC3_SetConfig+0x110>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_OC3_SetConfig+0xbe>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1d      	ldr	r2, [pc, #116]	@ (80056a8 <TIM_OC3_SetConfig+0x118>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_OC3_SetConfig+0xbe>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a1c      	ldr	r2, [pc, #112]	@ (80056ac <TIM_OC3_SetConfig+0x11c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_OC3_SetConfig+0xbe>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1b      	ldr	r2, [pc, #108]	@ (80056b0 <TIM_OC3_SetConfig+0x120>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_OC3_SetConfig+0xbe>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a16      	ldr	r2, [pc, #88]	@ (80056a4 <TIM_OC3_SetConfig+0x114>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d113      	bne.n	8005676 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800565c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
}
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	40012c00 	.word	0x40012c00
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40015000 	.word	0x40015000
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40014400 	.word	0x40014400
 80056b0:	40014800 	.word	0x40014800

080056b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	031b      	lsls	r3, r3, #12
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1a      	ldr	r2, [pc, #104]	@ (800577c <TIM_OC4_SetConfig+0xc8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <TIM_OC4_SetConfig+0x8c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <TIM_OC4_SetConfig+0xcc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_OC4_SetConfig+0x8c>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a18      	ldr	r2, [pc, #96]	@ (8005784 <TIM_OC4_SetConfig+0xd0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_OC4_SetConfig+0x8c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	@ (8005788 <TIM_OC4_SetConfig+0xd4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_OC4_SetConfig+0x8c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a16      	ldr	r2, [pc, #88]	@ (800578c <TIM_OC4_SetConfig+0xd8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_OC4_SetConfig+0x8c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a15      	ldr	r2, [pc, #84]	@ (8005790 <TIM_OC4_SetConfig+0xdc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d109      	bne.n	8005754 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	019b      	lsls	r3, r3, #6
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40013400 	.word	0x40013400
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800
 8005790:	40015000 	.word	0x40015000

08005794 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80057d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a19      	ldr	r2, [pc, #100]	@ (8005850 <TIM_OC5_SetConfig+0xbc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <TIM_OC5_SetConfig+0x82>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <TIM_OC5_SetConfig+0xc0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00f      	beq.n	8005816 <TIM_OC5_SetConfig+0x82>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a17      	ldr	r2, [pc, #92]	@ (8005858 <TIM_OC5_SetConfig+0xc4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00b      	beq.n	8005816 <TIM_OC5_SetConfig+0x82>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a16      	ldr	r2, [pc, #88]	@ (800585c <TIM_OC5_SetConfig+0xc8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <TIM_OC5_SetConfig+0x82>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a15      	ldr	r2, [pc, #84]	@ (8005860 <TIM_OC5_SetConfig+0xcc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC5_SetConfig+0x82>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a14      	ldr	r2, [pc, #80]	@ (8005864 <TIM_OC5_SetConfig+0xd0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d109      	bne.n	800582a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800581c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	40015000 	.word	0x40015000

08005868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80058ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a1a      	ldr	r2, [pc, #104]	@ (8005928 <TIM_OC6_SetConfig+0xc0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <TIM_OC6_SetConfig+0x84>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a19      	ldr	r2, [pc, #100]	@ (800592c <TIM_OC6_SetConfig+0xc4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00f      	beq.n	80058ec <TIM_OC6_SetConfig+0x84>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a18      	ldr	r2, [pc, #96]	@ (8005930 <TIM_OC6_SetConfig+0xc8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00b      	beq.n	80058ec <TIM_OC6_SetConfig+0x84>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a17      	ldr	r2, [pc, #92]	@ (8005934 <TIM_OC6_SetConfig+0xcc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_OC6_SetConfig+0x84>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a16      	ldr	r2, [pc, #88]	@ (8005938 <TIM_OC6_SetConfig+0xd0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC6_SetConfig+0x84>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a15      	ldr	r2, [pc, #84]	@ (800593c <TIM_OC6_SetConfig+0xd4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d109      	bne.n	8005900 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	029b      	lsls	r3, r3, #10
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800
 800593c:	40015000 	.word	0x40015000

08005940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f023 0201 	bic.w	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800596a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 030a 	bic.w	r3, r3, #10
 800597c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	621a      	str	r2, [r3, #32]
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f023 0210 	bic.w	r2, r3, #16
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	031b      	lsls	r3, r3, #12
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80059da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f043 0307 	orr.w	r3, r3, #7
 8005a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	021a      	lsls	r2, r3, #8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	697a      	ldr	r2, [r7, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	2201      	movs	r2, #1
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1a      	ldr	r2, [r3, #32]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	43db      	mvns	r3, r3
 8005a96:	401a      	ands	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a1a      	ldr	r2, [r3, #32]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e06d      	b.n	8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a30      	ldr	r2, [pc, #192]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d009      	beq.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a2f      	ldr	r2, [pc, #188]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d004      	beq.n	8005b16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2d      	ldr	r2, [pc, #180]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d108      	bne.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1e      	ldr	r2, [pc, #120]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d01d      	beq.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b54:	d018      	beq.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d013      	beq.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00e      	beq.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d009      	beq.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a16      	ldr	r2, [pc, #88]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d004      	beq.n	8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a11      	ldr	r2, [pc, #68]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d10c      	bne.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40012c00 	.word	0x40012c00
 8005bc4:	40013400 	.word	0x40013400
 8005bc8:	40015000 	.word	0x40015000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40014000 	.word	0x40014000

08005bd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e06a      	b.n	8005cca <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	041b      	lsls	r3, r3, #16
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d009      	beq.n	8005c8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	@ (8005cdc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d004      	beq.n	8005c8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a16      	ldr	r2, [pc, #88]	@ (8005ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d115      	bne.n	8005cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	051b      	lsls	r3, r3, #20
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40012c00 	.word	0x40012c00
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40015000 	.word	0x40015000

08005ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <siprintf>:
 8005d20:	b40e      	push	{r1, r2, r3}
 8005d22:	b510      	push	{r4, lr}
 8005d24:	b09d      	sub	sp, #116	@ 0x74
 8005d26:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005d28:	9002      	str	r0, [sp, #8]
 8005d2a:	9006      	str	r0, [sp, #24]
 8005d2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d30:	480a      	ldr	r0, [pc, #40]	@ (8005d5c <siprintf+0x3c>)
 8005d32:	9107      	str	r1, [sp, #28]
 8005d34:	9104      	str	r1, [sp, #16]
 8005d36:	490a      	ldr	r1, [pc, #40]	@ (8005d60 <siprintf+0x40>)
 8005d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d3c:	9105      	str	r1, [sp, #20]
 8005d3e:	2400      	movs	r4, #0
 8005d40:	a902      	add	r1, sp, #8
 8005d42:	6800      	ldr	r0, [r0, #0]
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d48:	f000 f9a2 	bl	8006090 <_svfiprintf_r>
 8005d4c:	9b02      	ldr	r3, [sp, #8]
 8005d4e:	701c      	strb	r4, [r3, #0]
 8005d50:	b01d      	add	sp, #116	@ 0x74
 8005d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d56:	b003      	add	sp, #12
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	2000001c 	.word	0x2000001c
 8005d60:	ffff0208 	.word	0xffff0208

08005d64 <memset>:
 8005d64:	4402      	add	r2, r0
 8005d66:	4603      	mov	r3, r0
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d100      	bne.n	8005d6e <memset+0xa>
 8005d6c:	4770      	bx	lr
 8005d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d72:	e7f9      	b.n	8005d68 <memset+0x4>

08005d74 <__errno>:
 8005d74:	4b01      	ldr	r3, [pc, #4]	@ (8005d7c <__errno+0x8>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	2000001c 	.word	0x2000001c

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	4d0d      	ldr	r5, [pc, #52]	@ (8005db8 <__libc_init_array+0x38>)
 8005d84:	4c0d      	ldr	r4, [pc, #52]	@ (8005dbc <__libc_init_array+0x3c>)
 8005d86:	1b64      	subs	r4, r4, r5
 8005d88:	10a4      	asrs	r4, r4, #2
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	4d0b      	ldr	r5, [pc, #44]	@ (8005dc0 <__libc_init_array+0x40>)
 8005d92:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc4 <__libc_init_array+0x44>)
 8005d94:	f000 fc64 	bl	8006660 <_init>
 8005d98:	1b64      	subs	r4, r4, r5
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	080067e8 	.word	0x080067e8
 8005dbc:	080067e8 	.word	0x080067e8
 8005dc0:	080067e8 	.word	0x080067e8
 8005dc4:	080067ec 	.word	0x080067ec

08005dc8 <__retarget_lock_acquire_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <__retarget_lock_release_recursive>:
 8005dca:	4770      	bx	lr

08005dcc <memcpy>:
 8005dcc:	440a      	add	r2, r1
 8005dce:	4291      	cmp	r1, r2
 8005dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dd4:	d100      	bne.n	8005dd8 <memcpy+0xc>
 8005dd6:	4770      	bx	lr
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005de2:	4291      	cmp	r1, r2
 8005de4:	d1f9      	bne.n	8005dda <memcpy+0xe>
 8005de6:	bd10      	pop	{r4, pc}

08005de8 <_free_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4605      	mov	r5, r0
 8005dec:	2900      	cmp	r1, #0
 8005dee:	d041      	beq.n	8005e74 <_free_r+0x8c>
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f0c      	subs	r4, r1, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfb8      	it	lt
 8005dfa:	18e4      	addlt	r4, r4, r3
 8005dfc:	f000 f8e0 	bl	8005fc0 <__malloc_lock>
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <_free_r+0x90>)
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x2c>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e10:	f000 b8dc 	b.w	8005fcc <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x42>
 8005e18:	6820      	ldr	r0, [r4, #0]
 8005e1a:	1821      	adds	r1, r4, r0
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1809      	addeq	r1, r1, r0
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x1e>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x4c>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x42>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1850      	adds	r0, r2, r1
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x6c>
 8005e3c:	6820      	ldr	r0, [r4, #0]
 8005e3e:	4401      	add	r1, r0
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	4283      	cmp	r3, r0
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x22>
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	4408      	add	r0, r1
 8005e50:	6010      	str	r0, [r2, #0]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x22>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x74>
 8005e56:	230c      	movs	r3, #12
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x22>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	1821      	adds	r1, r4, r0
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf04      	itt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	bf04      	itt	eq
 8005e6c:	1809      	addeq	r1, r1, r0
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7ca      	b.n	8005e0a <_free_r+0x22>
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
 8005e76:	bf00      	nop
 8005e78:	20000350 	.word	0x20000350

08005e7c <sbrk_aligned>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005ebc <sbrk_aligned+0x40>)
 8005e80:	460c      	mov	r4, r1
 8005e82:	6831      	ldr	r1, [r6, #0]
 8005e84:	4605      	mov	r5, r0
 8005e86:	b911      	cbnz	r1, 8005e8e <sbrk_aligned+0x12>
 8005e88:	f000 fba4 	bl	80065d4 <_sbrk_r>
 8005e8c:	6030      	str	r0, [r6, #0]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fb9f 	bl	80065d4 <_sbrk_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d103      	bne.n	8005ea2 <sbrk_aligned+0x26>
 8005e9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	1cc4      	adds	r4, r0, #3
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	42a0      	cmp	r0, r4
 8005eaa:	d0f8      	beq.n	8005e9e <sbrk_aligned+0x22>
 8005eac:	1a21      	subs	r1, r4, r0
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f000 fb90 	bl	80065d4 <_sbrk_r>
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d1f2      	bne.n	8005e9e <sbrk_aligned+0x22>
 8005eb8:	e7ef      	b.n	8005e9a <sbrk_aligned+0x1e>
 8005eba:	bf00      	nop
 8005ebc:	2000034c 	.word	0x2000034c

08005ec0 <_malloc_r>:
 8005ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ec4:	1ccd      	adds	r5, r1, #3
 8005ec6:	f025 0503 	bic.w	r5, r5, #3
 8005eca:	3508      	adds	r5, #8
 8005ecc:	2d0c      	cmp	r5, #12
 8005ece:	bf38      	it	cc
 8005ed0:	250c      	movcc	r5, #12
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	db01      	blt.n	8005edc <_malloc_r+0x1c>
 8005ed8:	42a9      	cmp	r1, r5
 8005eda:	d904      	bls.n	8005ee6 <_malloc_r+0x26>
 8005edc:	230c      	movs	r3, #12
 8005ede:	6033      	str	r3, [r6, #0]
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ee6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fbc <_malloc_r+0xfc>
 8005eea:	f000 f869 	bl	8005fc0 <__malloc_lock>
 8005eee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ef2:	461c      	mov	r4, r3
 8005ef4:	bb44      	cbnz	r4, 8005f48 <_malloc_r+0x88>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7ff ffbf 	bl	8005e7c <sbrk_aligned>
 8005efe:	1c43      	adds	r3, r0, #1
 8005f00:	4604      	mov	r4, r0
 8005f02:	d158      	bne.n	8005fb6 <_malloc_r+0xf6>
 8005f04:	f8d8 4000 	ldr.w	r4, [r8]
 8005f08:	4627      	mov	r7, r4
 8005f0a:	2f00      	cmp	r7, #0
 8005f0c:	d143      	bne.n	8005f96 <_malloc_r+0xd6>
 8005f0e:	2c00      	cmp	r4, #0
 8005f10:	d04b      	beq.n	8005faa <_malloc_r+0xea>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	4639      	mov	r1, r7
 8005f16:	4630      	mov	r0, r6
 8005f18:	eb04 0903 	add.w	r9, r4, r3
 8005f1c:	f000 fb5a 	bl	80065d4 <_sbrk_r>
 8005f20:	4581      	cmp	r9, r0
 8005f22:	d142      	bne.n	8005faa <_malloc_r+0xea>
 8005f24:	6821      	ldr	r1, [r4, #0]
 8005f26:	1a6d      	subs	r5, r5, r1
 8005f28:	4629      	mov	r1, r5
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff ffa6 	bl	8005e7c <sbrk_aligned>
 8005f30:	3001      	adds	r0, #1
 8005f32:	d03a      	beq.n	8005faa <_malloc_r+0xea>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	442b      	add	r3, r5
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	bb62      	cbnz	r2, 8005f9c <_malloc_r+0xdc>
 8005f42:	f8c8 7000 	str.w	r7, [r8]
 8005f46:	e00f      	b.n	8005f68 <_malloc_r+0xa8>
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	1b52      	subs	r2, r2, r5
 8005f4c:	d420      	bmi.n	8005f90 <_malloc_r+0xd0>
 8005f4e:	2a0b      	cmp	r2, #11
 8005f50:	d917      	bls.n	8005f82 <_malloc_r+0xc2>
 8005f52:	1961      	adds	r1, r4, r5
 8005f54:	42a3      	cmp	r3, r4
 8005f56:	6025      	str	r5, [r4, #0]
 8005f58:	bf18      	it	ne
 8005f5a:	6059      	strne	r1, [r3, #4]
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	bf08      	it	eq
 8005f60:	f8c8 1000 	streq.w	r1, [r8]
 8005f64:	5162      	str	r2, [r4, r5]
 8005f66:	604b      	str	r3, [r1, #4]
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f82f 	bl	8005fcc <__malloc_unlock>
 8005f6e:	f104 000b 	add.w	r0, r4, #11
 8005f72:	1d23      	adds	r3, r4, #4
 8005f74:	f020 0007 	bic.w	r0, r0, #7
 8005f78:	1ac2      	subs	r2, r0, r3
 8005f7a:	bf1c      	itt	ne
 8005f7c:	1a1b      	subne	r3, r3, r0
 8005f7e:	50a3      	strne	r3, [r4, r2]
 8005f80:	e7af      	b.n	8005ee2 <_malloc_r+0x22>
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	bf0c      	ite	eq
 8005f88:	f8c8 2000 	streq.w	r2, [r8]
 8005f8c:	605a      	strne	r2, [r3, #4]
 8005f8e:	e7eb      	b.n	8005f68 <_malloc_r+0xa8>
 8005f90:	4623      	mov	r3, r4
 8005f92:	6864      	ldr	r4, [r4, #4]
 8005f94:	e7ae      	b.n	8005ef4 <_malloc_r+0x34>
 8005f96:	463c      	mov	r4, r7
 8005f98:	687f      	ldr	r7, [r7, #4]
 8005f9a:	e7b6      	b.n	8005f0a <_malloc_r+0x4a>
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d1fb      	bne.n	8005f9c <_malloc_r+0xdc>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6053      	str	r3, [r2, #4]
 8005fa8:	e7de      	b.n	8005f68 <_malloc_r+0xa8>
 8005faa:	230c      	movs	r3, #12
 8005fac:	6033      	str	r3, [r6, #0]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	f000 f80c 	bl	8005fcc <__malloc_unlock>
 8005fb4:	e794      	b.n	8005ee0 <_malloc_r+0x20>
 8005fb6:	6005      	str	r5, [r0, #0]
 8005fb8:	e7d6      	b.n	8005f68 <_malloc_r+0xa8>
 8005fba:	bf00      	nop
 8005fbc:	20000350 	.word	0x20000350

08005fc0 <__malloc_lock>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	@ (8005fc8 <__malloc_lock+0x8>)
 8005fc2:	f7ff bf01 	b.w	8005dc8 <__retarget_lock_acquire_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	20000348 	.word	0x20000348

08005fcc <__malloc_unlock>:
 8005fcc:	4801      	ldr	r0, [pc, #4]	@ (8005fd4 <__malloc_unlock+0x8>)
 8005fce:	f7ff befc 	b.w	8005dca <__retarget_lock_release_recursive>
 8005fd2:	bf00      	nop
 8005fd4:	20000348 	.word	0x20000348

08005fd8 <__ssputs_r>:
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	688e      	ldr	r6, [r1, #8]
 8005fde:	461f      	mov	r7, r3
 8005fe0:	42be      	cmp	r6, r7
 8005fe2:	680b      	ldr	r3, [r1, #0]
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4690      	mov	r8, r2
 8005fea:	d82d      	bhi.n	8006048 <__ssputs_r+0x70>
 8005fec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ff0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ff4:	d026      	beq.n	8006044 <__ssputs_r+0x6c>
 8005ff6:	6965      	ldr	r5, [r4, #20]
 8005ff8:	6909      	ldr	r1, [r1, #16]
 8005ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ffe:	eba3 0901 	sub.w	r9, r3, r1
 8006002:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006006:	1c7b      	adds	r3, r7, #1
 8006008:	444b      	add	r3, r9
 800600a:	106d      	asrs	r5, r5, #1
 800600c:	429d      	cmp	r5, r3
 800600e:	bf38      	it	cc
 8006010:	461d      	movcc	r5, r3
 8006012:	0553      	lsls	r3, r2, #21
 8006014:	d527      	bpl.n	8006066 <__ssputs_r+0x8e>
 8006016:	4629      	mov	r1, r5
 8006018:	f7ff ff52 	bl	8005ec0 <_malloc_r>
 800601c:	4606      	mov	r6, r0
 800601e:	b360      	cbz	r0, 800607a <__ssputs_r+0xa2>
 8006020:	6921      	ldr	r1, [r4, #16]
 8006022:	464a      	mov	r2, r9
 8006024:	f7ff fed2 	bl	8005dcc <memcpy>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800602e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	6126      	str	r6, [r4, #16]
 8006036:	6165      	str	r5, [r4, #20]
 8006038:	444e      	add	r6, r9
 800603a:	eba5 0509 	sub.w	r5, r5, r9
 800603e:	6026      	str	r6, [r4, #0]
 8006040:	60a5      	str	r5, [r4, #8]
 8006042:	463e      	mov	r6, r7
 8006044:	42be      	cmp	r6, r7
 8006046:	d900      	bls.n	800604a <__ssputs_r+0x72>
 8006048:	463e      	mov	r6, r7
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	4632      	mov	r2, r6
 800604e:	4641      	mov	r1, r8
 8006050:	f000 faa6 	bl	80065a0 <memmove>
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	1b9b      	subs	r3, r3, r6
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	4433      	add	r3, r6
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006066:	462a      	mov	r2, r5
 8006068:	f000 fac4 	bl	80065f4 <_realloc_r>
 800606c:	4606      	mov	r6, r0
 800606e:	2800      	cmp	r0, #0
 8006070:	d1e0      	bne.n	8006034 <__ssputs_r+0x5c>
 8006072:	6921      	ldr	r1, [r4, #16]
 8006074:	4650      	mov	r0, sl
 8006076:	f7ff feb7 	bl	8005de8 <_free_r>
 800607a:	230c      	movs	r3, #12
 800607c:	f8ca 3000 	str.w	r3, [sl]
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006086:	81a3      	strh	r3, [r4, #12]
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e7e9      	b.n	8006062 <__ssputs_r+0x8a>
	...

08006090 <_svfiprintf_r>:
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006094:	4698      	mov	r8, r3
 8006096:	898b      	ldrh	r3, [r1, #12]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	b09d      	sub	sp, #116	@ 0x74
 800609c:	4607      	mov	r7, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	4614      	mov	r4, r2
 80060a2:	d510      	bpl.n	80060c6 <_svfiprintf_r+0x36>
 80060a4:	690b      	ldr	r3, [r1, #16]
 80060a6:	b973      	cbnz	r3, 80060c6 <_svfiprintf_r+0x36>
 80060a8:	2140      	movs	r1, #64	@ 0x40
 80060aa:	f7ff ff09 	bl	8005ec0 <_malloc_r>
 80060ae:	6028      	str	r0, [r5, #0]
 80060b0:	6128      	str	r0, [r5, #16]
 80060b2:	b930      	cbnz	r0, 80060c2 <_svfiprintf_r+0x32>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	b01d      	add	sp, #116	@ 0x74
 80060be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c2:	2340      	movs	r3, #64	@ 0x40
 80060c4:	616b      	str	r3, [r5, #20]
 80060c6:	2300      	movs	r3, #0
 80060c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ca:	2320      	movs	r3, #32
 80060cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80060d4:	2330      	movs	r3, #48	@ 0x30
 80060d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006274 <_svfiprintf_r+0x1e4>
 80060da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060de:	f04f 0901 	mov.w	r9, #1
 80060e2:	4623      	mov	r3, r4
 80060e4:	469a      	mov	sl, r3
 80060e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ea:	b10a      	cbz	r2, 80060f0 <_svfiprintf_r+0x60>
 80060ec:	2a25      	cmp	r2, #37	@ 0x25
 80060ee:	d1f9      	bne.n	80060e4 <_svfiprintf_r+0x54>
 80060f0:	ebba 0b04 	subs.w	fp, sl, r4
 80060f4:	d00b      	beq.n	800610e <_svfiprintf_r+0x7e>
 80060f6:	465b      	mov	r3, fp
 80060f8:	4622      	mov	r2, r4
 80060fa:	4629      	mov	r1, r5
 80060fc:	4638      	mov	r0, r7
 80060fe:	f7ff ff6b 	bl	8005fd8 <__ssputs_r>
 8006102:	3001      	adds	r0, #1
 8006104:	f000 80a7 	beq.w	8006256 <_svfiprintf_r+0x1c6>
 8006108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800610a:	445a      	add	r2, fp
 800610c:	9209      	str	r2, [sp, #36]	@ 0x24
 800610e:	f89a 3000 	ldrb.w	r3, [sl]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 809f 	beq.w	8006256 <_svfiprintf_r+0x1c6>
 8006118:	2300      	movs	r3, #0
 800611a:	f04f 32ff 	mov.w	r2, #4294967295
 800611e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006122:	f10a 0a01 	add.w	sl, sl, #1
 8006126:	9304      	str	r3, [sp, #16]
 8006128:	9307      	str	r3, [sp, #28]
 800612a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800612e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006130:	4654      	mov	r4, sl
 8006132:	2205      	movs	r2, #5
 8006134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006138:	484e      	ldr	r0, [pc, #312]	@ (8006274 <_svfiprintf_r+0x1e4>)
 800613a:	f7fa f869 	bl	8000210 <memchr>
 800613e:	9a04      	ldr	r2, [sp, #16]
 8006140:	b9d8      	cbnz	r0, 800617a <_svfiprintf_r+0xea>
 8006142:	06d0      	lsls	r0, r2, #27
 8006144:	bf44      	itt	mi
 8006146:	2320      	movmi	r3, #32
 8006148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800614c:	0711      	lsls	r1, r2, #28
 800614e:	bf44      	itt	mi
 8006150:	232b      	movmi	r3, #43	@ 0x2b
 8006152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006156:	f89a 3000 	ldrb.w	r3, [sl]
 800615a:	2b2a      	cmp	r3, #42	@ 0x2a
 800615c:	d015      	beq.n	800618a <_svfiprintf_r+0xfa>
 800615e:	9a07      	ldr	r2, [sp, #28]
 8006160:	4654      	mov	r4, sl
 8006162:	2000      	movs	r0, #0
 8006164:	f04f 0c0a 	mov.w	ip, #10
 8006168:	4621      	mov	r1, r4
 800616a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800616e:	3b30      	subs	r3, #48	@ 0x30
 8006170:	2b09      	cmp	r3, #9
 8006172:	d94b      	bls.n	800620c <_svfiprintf_r+0x17c>
 8006174:	b1b0      	cbz	r0, 80061a4 <_svfiprintf_r+0x114>
 8006176:	9207      	str	r2, [sp, #28]
 8006178:	e014      	b.n	80061a4 <_svfiprintf_r+0x114>
 800617a:	eba0 0308 	sub.w	r3, r0, r8
 800617e:	fa09 f303 	lsl.w	r3, r9, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	46a2      	mov	sl, r4
 8006188:	e7d2      	b.n	8006130 <_svfiprintf_r+0xa0>
 800618a:	9b03      	ldr	r3, [sp, #12]
 800618c:	1d19      	adds	r1, r3, #4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	9103      	str	r1, [sp, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	bfbb      	ittet	lt
 8006196:	425b      	neglt	r3, r3
 8006198:	f042 0202 	orrlt.w	r2, r2, #2
 800619c:	9307      	strge	r3, [sp, #28]
 800619e:	9307      	strlt	r3, [sp, #28]
 80061a0:	bfb8      	it	lt
 80061a2:	9204      	strlt	r2, [sp, #16]
 80061a4:	7823      	ldrb	r3, [r4, #0]
 80061a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80061a8:	d10a      	bne.n	80061c0 <_svfiprintf_r+0x130>
 80061aa:	7863      	ldrb	r3, [r4, #1]
 80061ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ae:	d132      	bne.n	8006216 <_svfiprintf_r+0x186>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	1d1a      	adds	r2, r3, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	9203      	str	r2, [sp, #12]
 80061b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061bc:	3402      	adds	r4, #2
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006284 <_svfiprintf_r+0x1f4>
 80061c4:	7821      	ldrb	r1, [r4, #0]
 80061c6:	2203      	movs	r2, #3
 80061c8:	4650      	mov	r0, sl
 80061ca:	f7fa f821 	bl	8000210 <memchr>
 80061ce:	b138      	cbz	r0, 80061e0 <_svfiprintf_r+0x150>
 80061d0:	9b04      	ldr	r3, [sp, #16]
 80061d2:	eba0 000a 	sub.w	r0, r0, sl
 80061d6:	2240      	movs	r2, #64	@ 0x40
 80061d8:	4082      	lsls	r2, r0
 80061da:	4313      	orrs	r3, r2
 80061dc:	3401      	adds	r4, #1
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e4:	4824      	ldr	r0, [pc, #144]	@ (8006278 <_svfiprintf_r+0x1e8>)
 80061e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061ea:	2206      	movs	r2, #6
 80061ec:	f7fa f810 	bl	8000210 <memchr>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d036      	beq.n	8006262 <_svfiprintf_r+0x1d2>
 80061f4:	4b21      	ldr	r3, [pc, #132]	@ (800627c <_svfiprintf_r+0x1ec>)
 80061f6:	bb1b      	cbnz	r3, 8006240 <_svfiprintf_r+0x1b0>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	3307      	adds	r3, #7
 80061fc:	f023 0307 	bic.w	r3, r3, #7
 8006200:	3308      	adds	r3, #8
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006206:	4433      	add	r3, r6
 8006208:	9309      	str	r3, [sp, #36]	@ 0x24
 800620a:	e76a      	b.n	80060e2 <_svfiprintf_r+0x52>
 800620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006210:	460c      	mov	r4, r1
 8006212:	2001      	movs	r0, #1
 8006214:	e7a8      	b.n	8006168 <_svfiprintf_r+0xd8>
 8006216:	2300      	movs	r3, #0
 8006218:	3401      	adds	r4, #1
 800621a:	9305      	str	r3, [sp, #20]
 800621c:	4619      	mov	r1, r3
 800621e:	f04f 0c0a 	mov.w	ip, #10
 8006222:	4620      	mov	r0, r4
 8006224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006228:	3a30      	subs	r2, #48	@ 0x30
 800622a:	2a09      	cmp	r2, #9
 800622c:	d903      	bls.n	8006236 <_svfiprintf_r+0x1a6>
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0c6      	beq.n	80061c0 <_svfiprintf_r+0x130>
 8006232:	9105      	str	r1, [sp, #20]
 8006234:	e7c4      	b.n	80061c0 <_svfiprintf_r+0x130>
 8006236:	fb0c 2101 	mla	r1, ip, r1, r2
 800623a:	4604      	mov	r4, r0
 800623c:	2301      	movs	r3, #1
 800623e:	e7f0      	b.n	8006222 <_svfiprintf_r+0x192>
 8006240:	ab03      	add	r3, sp, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	462a      	mov	r2, r5
 8006246:	4b0e      	ldr	r3, [pc, #56]	@ (8006280 <_svfiprintf_r+0x1f0>)
 8006248:	a904      	add	r1, sp, #16
 800624a:	4638      	mov	r0, r7
 800624c:	f3af 8000 	nop.w
 8006250:	1c42      	adds	r2, r0, #1
 8006252:	4606      	mov	r6, r0
 8006254:	d1d6      	bne.n	8006204 <_svfiprintf_r+0x174>
 8006256:	89ab      	ldrh	r3, [r5, #12]
 8006258:	065b      	lsls	r3, r3, #25
 800625a:	f53f af2d 	bmi.w	80060b8 <_svfiprintf_r+0x28>
 800625e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006260:	e72c      	b.n	80060bc <_svfiprintf_r+0x2c>
 8006262:	ab03      	add	r3, sp, #12
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	462a      	mov	r2, r5
 8006268:	4b05      	ldr	r3, [pc, #20]	@ (8006280 <_svfiprintf_r+0x1f0>)
 800626a:	a904      	add	r1, sp, #16
 800626c:	4638      	mov	r0, r7
 800626e:	f000 f879 	bl	8006364 <_printf_i>
 8006272:	e7ed      	b.n	8006250 <_svfiprintf_r+0x1c0>
 8006274:	080067ac 	.word	0x080067ac
 8006278:	080067b6 	.word	0x080067b6
 800627c:	00000000 	.word	0x00000000
 8006280:	08005fd9 	.word	0x08005fd9
 8006284:	080067b2 	.word	0x080067b2

08006288 <_printf_common>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	4616      	mov	r6, r2
 800628e:	4698      	mov	r8, r3
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	690b      	ldr	r3, [r1, #16]
 8006294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006298:	4293      	cmp	r3, r2
 800629a:	bfb8      	it	lt
 800629c:	4613      	movlt	r3, r2
 800629e:	6033      	str	r3, [r6, #0]
 80062a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062a4:	4607      	mov	r7, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	b10a      	cbz	r2, 80062ae <_printf_common+0x26>
 80062aa:	3301      	adds	r3, #1
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	0699      	lsls	r1, r3, #26
 80062b2:	bf42      	ittt	mi
 80062b4:	6833      	ldrmi	r3, [r6, #0]
 80062b6:	3302      	addmi	r3, #2
 80062b8:	6033      	strmi	r3, [r6, #0]
 80062ba:	6825      	ldr	r5, [r4, #0]
 80062bc:	f015 0506 	ands.w	r5, r5, #6
 80062c0:	d106      	bne.n	80062d0 <_printf_common+0x48>
 80062c2:	f104 0a19 	add.w	sl, r4, #25
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	6832      	ldr	r2, [r6, #0]
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dc26      	bgt.n	800631e <_printf_common+0x96>
 80062d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062d4:	6822      	ldr	r2, [r4, #0]
 80062d6:	3b00      	subs	r3, #0
 80062d8:	bf18      	it	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	0692      	lsls	r2, r2, #26
 80062de:	d42b      	bmi.n	8006338 <_printf_common+0xb0>
 80062e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062e4:	4641      	mov	r1, r8
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c8      	blx	r9
 80062ea:	3001      	adds	r0, #1
 80062ec:	d01e      	beq.n	800632c <_printf_common+0xa4>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6922      	ldr	r2, [r4, #16]
 80062f2:	f003 0306 	and.w	r3, r3, #6
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	bf02      	ittt	eq
 80062fa:	68e5      	ldreq	r5, [r4, #12]
 80062fc:	6833      	ldreq	r3, [r6, #0]
 80062fe:	1aed      	subeq	r5, r5, r3
 8006300:	68a3      	ldr	r3, [r4, #8]
 8006302:	bf0c      	ite	eq
 8006304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006308:	2500      	movne	r5, #0
 800630a:	4293      	cmp	r3, r2
 800630c:	bfc4      	itt	gt
 800630e:	1a9b      	subgt	r3, r3, r2
 8006310:	18ed      	addgt	r5, r5, r3
 8006312:	2600      	movs	r6, #0
 8006314:	341a      	adds	r4, #26
 8006316:	42b5      	cmp	r5, r6
 8006318:	d11a      	bne.n	8006350 <_printf_common+0xc8>
 800631a:	2000      	movs	r0, #0
 800631c:	e008      	b.n	8006330 <_printf_common+0xa8>
 800631e:	2301      	movs	r3, #1
 8006320:	4652      	mov	r2, sl
 8006322:	4641      	mov	r1, r8
 8006324:	4638      	mov	r0, r7
 8006326:	47c8      	blx	r9
 8006328:	3001      	adds	r0, #1
 800632a:	d103      	bne.n	8006334 <_printf_common+0xac>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006334:	3501      	adds	r5, #1
 8006336:	e7c6      	b.n	80062c6 <_printf_common+0x3e>
 8006338:	18e1      	adds	r1, r4, r3
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	2030      	movs	r0, #48	@ 0x30
 800633e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006342:	4422      	add	r2, r4
 8006344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800634c:	3302      	adds	r3, #2
 800634e:	e7c7      	b.n	80062e0 <_printf_common+0x58>
 8006350:	2301      	movs	r3, #1
 8006352:	4622      	mov	r2, r4
 8006354:	4641      	mov	r1, r8
 8006356:	4638      	mov	r0, r7
 8006358:	47c8      	blx	r9
 800635a:	3001      	adds	r0, #1
 800635c:	d0e6      	beq.n	800632c <_printf_common+0xa4>
 800635e:	3601      	adds	r6, #1
 8006360:	e7d9      	b.n	8006316 <_printf_common+0x8e>
	...

08006364 <_printf_i>:
 8006364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006368:	7e0f      	ldrb	r7, [r1, #24]
 800636a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800636c:	2f78      	cmp	r7, #120	@ 0x78
 800636e:	4691      	mov	r9, r2
 8006370:	4680      	mov	r8, r0
 8006372:	460c      	mov	r4, r1
 8006374:	469a      	mov	sl, r3
 8006376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800637a:	d807      	bhi.n	800638c <_printf_i+0x28>
 800637c:	2f62      	cmp	r7, #98	@ 0x62
 800637e:	d80a      	bhi.n	8006396 <_printf_i+0x32>
 8006380:	2f00      	cmp	r7, #0
 8006382:	f000 80d1 	beq.w	8006528 <_printf_i+0x1c4>
 8006386:	2f58      	cmp	r7, #88	@ 0x58
 8006388:	f000 80b8 	beq.w	80064fc <_printf_i+0x198>
 800638c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006394:	e03a      	b.n	800640c <_printf_i+0xa8>
 8006396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800639a:	2b15      	cmp	r3, #21
 800639c:	d8f6      	bhi.n	800638c <_printf_i+0x28>
 800639e:	a101      	add	r1, pc, #4	@ (adr r1, 80063a4 <_printf_i+0x40>)
 80063a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a4:	080063fd 	.word	0x080063fd
 80063a8:	08006411 	.word	0x08006411
 80063ac:	0800638d 	.word	0x0800638d
 80063b0:	0800638d 	.word	0x0800638d
 80063b4:	0800638d 	.word	0x0800638d
 80063b8:	0800638d 	.word	0x0800638d
 80063bc:	08006411 	.word	0x08006411
 80063c0:	0800638d 	.word	0x0800638d
 80063c4:	0800638d 	.word	0x0800638d
 80063c8:	0800638d 	.word	0x0800638d
 80063cc:	0800638d 	.word	0x0800638d
 80063d0:	0800650f 	.word	0x0800650f
 80063d4:	0800643b 	.word	0x0800643b
 80063d8:	080064c9 	.word	0x080064c9
 80063dc:	0800638d 	.word	0x0800638d
 80063e0:	0800638d 	.word	0x0800638d
 80063e4:	08006531 	.word	0x08006531
 80063e8:	0800638d 	.word	0x0800638d
 80063ec:	0800643b 	.word	0x0800643b
 80063f0:	0800638d 	.word	0x0800638d
 80063f4:	0800638d 	.word	0x0800638d
 80063f8:	080064d1 	.word	0x080064d1
 80063fc:	6833      	ldr	r3, [r6, #0]
 80063fe:	1d1a      	adds	r2, r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6032      	str	r2, [r6, #0]
 8006404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800640c:	2301      	movs	r3, #1
 800640e:	e09c      	b.n	800654a <_printf_i+0x1e6>
 8006410:	6833      	ldr	r3, [r6, #0]
 8006412:	6820      	ldr	r0, [r4, #0]
 8006414:	1d19      	adds	r1, r3, #4
 8006416:	6031      	str	r1, [r6, #0]
 8006418:	0606      	lsls	r6, r0, #24
 800641a:	d501      	bpl.n	8006420 <_printf_i+0xbc>
 800641c:	681d      	ldr	r5, [r3, #0]
 800641e:	e003      	b.n	8006428 <_printf_i+0xc4>
 8006420:	0645      	lsls	r5, r0, #25
 8006422:	d5fb      	bpl.n	800641c <_printf_i+0xb8>
 8006424:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006428:	2d00      	cmp	r5, #0
 800642a:	da03      	bge.n	8006434 <_printf_i+0xd0>
 800642c:	232d      	movs	r3, #45	@ 0x2d
 800642e:	426d      	negs	r5, r5
 8006430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006434:	4858      	ldr	r0, [pc, #352]	@ (8006598 <_printf_i+0x234>)
 8006436:	230a      	movs	r3, #10
 8006438:	e011      	b.n	800645e <_printf_i+0xfa>
 800643a:	6821      	ldr	r1, [r4, #0]
 800643c:	6833      	ldr	r3, [r6, #0]
 800643e:	0608      	lsls	r0, r1, #24
 8006440:	f853 5b04 	ldr.w	r5, [r3], #4
 8006444:	d402      	bmi.n	800644c <_printf_i+0xe8>
 8006446:	0649      	lsls	r1, r1, #25
 8006448:	bf48      	it	mi
 800644a:	b2ad      	uxthmi	r5, r5
 800644c:	2f6f      	cmp	r7, #111	@ 0x6f
 800644e:	4852      	ldr	r0, [pc, #328]	@ (8006598 <_printf_i+0x234>)
 8006450:	6033      	str	r3, [r6, #0]
 8006452:	bf14      	ite	ne
 8006454:	230a      	movne	r3, #10
 8006456:	2308      	moveq	r3, #8
 8006458:	2100      	movs	r1, #0
 800645a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800645e:	6866      	ldr	r6, [r4, #4]
 8006460:	60a6      	str	r6, [r4, #8]
 8006462:	2e00      	cmp	r6, #0
 8006464:	db05      	blt.n	8006472 <_printf_i+0x10e>
 8006466:	6821      	ldr	r1, [r4, #0]
 8006468:	432e      	orrs	r6, r5
 800646a:	f021 0104 	bic.w	r1, r1, #4
 800646e:	6021      	str	r1, [r4, #0]
 8006470:	d04b      	beq.n	800650a <_printf_i+0x1a6>
 8006472:	4616      	mov	r6, r2
 8006474:	fbb5 f1f3 	udiv	r1, r5, r3
 8006478:	fb03 5711 	mls	r7, r3, r1, r5
 800647c:	5dc7      	ldrb	r7, [r0, r7]
 800647e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006482:	462f      	mov	r7, r5
 8006484:	42bb      	cmp	r3, r7
 8006486:	460d      	mov	r5, r1
 8006488:	d9f4      	bls.n	8006474 <_printf_i+0x110>
 800648a:	2b08      	cmp	r3, #8
 800648c:	d10b      	bne.n	80064a6 <_printf_i+0x142>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	07df      	lsls	r7, r3, #31
 8006492:	d508      	bpl.n	80064a6 <_printf_i+0x142>
 8006494:	6923      	ldr	r3, [r4, #16]
 8006496:	6861      	ldr	r1, [r4, #4]
 8006498:	4299      	cmp	r1, r3
 800649a:	bfde      	ittt	le
 800649c:	2330      	movle	r3, #48	@ 0x30
 800649e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064a6:	1b92      	subs	r2, r2, r6
 80064a8:	6122      	str	r2, [r4, #16]
 80064aa:	f8cd a000 	str.w	sl, [sp]
 80064ae:	464b      	mov	r3, r9
 80064b0:	aa03      	add	r2, sp, #12
 80064b2:	4621      	mov	r1, r4
 80064b4:	4640      	mov	r0, r8
 80064b6:	f7ff fee7 	bl	8006288 <_printf_common>
 80064ba:	3001      	adds	r0, #1
 80064bc:	d14a      	bne.n	8006554 <_printf_i+0x1f0>
 80064be:	f04f 30ff 	mov.w	r0, #4294967295
 80064c2:	b004      	add	sp, #16
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	f043 0320 	orr.w	r3, r3, #32
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	4832      	ldr	r0, [pc, #200]	@ (800659c <_printf_i+0x238>)
 80064d2:	2778      	movs	r7, #120	@ 0x78
 80064d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	6831      	ldr	r1, [r6, #0]
 80064dc:	061f      	lsls	r7, r3, #24
 80064de:	f851 5b04 	ldr.w	r5, [r1], #4
 80064e2:	d402      	bmi.n	80064ea <_printf_i+0x186>
 80064e4:	065f      	lsls	r7, r3, #25
 80064e6:	bf48      	it	mi
 80064e8:	b2ad      	uxthmi	r5, r5
 80064ea:	6031      	str	r1, [r6, #0]
 80064ec:	07d9      	lsls	r1, r3, #31
 80064ee:	bf44      	itt	mi
 80064f0:	f043 0320 	orrmi.w	r3, r3, #32
 80064f4:	6023      	strmi	r3, [r4, #0]
 80064f6:	b11d      	cbz	r5, 8006500 <_printf_i+0x19c>
 80064f8:	2310      	movs	r3, #16
 80064fa:	e7ad      	b.n	8006458 <_printf_i+0xf4>
 80064fc:	4826      	ldr	r0, [pc, #152]	@ (8006598 <_printf_i+0x234>)
 80064fe:	e7e9      	b.n	80064d4 <_printf_i+0x170>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	f023 0320 	bic.w	r3, r3, #32
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	e7f6      	b.n	80064f8 <_printf_i+0x194>
 800650a:	4616      	mov	r6, r2
 800650c:	e7bd      	b.n	800648a <_printf_i+0x126>
 800650e:	6833      	ldr	r3, [r6, #0]
 8006510:	6825      	ldr	r5, [r4, #0]
 8006512:	6961      	ldr	r1, [r4, #20]
 8006514:	1d18      	adds	r0, r3, #4
 8006516:	6030      	str	r0, [r6, #0]
 8006518:	062e      	lsls	r6, r5, #24
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	d501      	bpl.n	8006522 <_printf_i+0x1be>
 800651e:	6019      	str	r1, [r3, #0]
 8006520:	e002      	b.n	8006528 <_printf_i+0x1c4>
 8006522:	0668      	lsls	r0, r5, #25
 8006524:	d5fb      	bpl.n	800651e <_printf_i+0x1ba>
 8006526:	8019      	strh	r1, [r3, #0]
 8006528:	2300      	movs	r3, #0
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	4616      	mov	r6, r2
 800652e:	e7bc      	b.n	80064aa <_printf_i+0x146>
 8006530:	6833      	ldr	r3, [r6, #0]
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	6032      	str	r2, [r6, #0]
 8006536:	681e      	ldr	r6, [r3, #0]
 8006538:	6862      	ldr	r2, [r4, #4]
 800653a:	2100      	movs	r1, #0
 800653c:	4630      	mov	r0, r6
 800653e:	f7f9 fe67 	bl	8000210 <memchr>
 8006542:	b108      	cbz	r0, 8006548 <_printf_i+0x1e4>
 8006544:	1b80      	subs	r0, r0, r6
 8006546:	6060      	str	r0, [r4, #4]
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	6123      	str	r3, [r4, #16]
 800654c:	2300      	movs	r3, #0
 800654e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006552:	e7aa      	b.n	80064aa <_printf_i+0x146>
 8006554:	6923      	ldr	r3, [r4, #16]
 8006556:	4632      	mov	r2, r6
 8006558:	4649      	mov	r1, r9
 800655a:	4640      	mov	r0, r8
 800655c:	47d0      	blx	sl
 800655e:	3001      	adds	r0, #1
 8006560:	d0ad      	beq.n	80064be <_printf_i+0x15a>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	079b      	lsls	r3, r3, #30
 8006566:	d413      	bmi.n	8006590 <_printf_i+0x22c>
 8006568:	68e0      	ldr	r0, [r4, #12]
 800656a:	9b03      	ldr	r3, [sp, #12]
 800656c:	4298      	cmp	r0, r3
 800656e:	bfb8      	it	lt
 8006570:	4618      	movlt	r0, r3
 8006572:	e7a6      	b.n	80064c2 <_printf_i+0x15e>
 8006574:	2301      	movs	r3, #1
 8006576:	4632      	mov	r2, r6
 8006578:	4649      	mov	r1, r9
 800657a:	4640      	mov	r0, r8
 800657c:	47d0      	blx	sl
 800657e:	3001      	adds	r0, #1
 8006580:	d09d      	beq.n	80064be <_printf_i+0x15a>
 8006582:	3501      	adds	r5, #1
 8006584:	68e3      	ldr	r3, [r4, #12]
 8006586:	9903      	ldr	r1, [sp, #12]
 8006588:	1a5b      	subs	r3, r3, r1
 800658a:	42ab      	cmp	r3, r5
 800658c:	dcf2      	bgt.n	8006574 <_printf_i+0x210>
 800658e:	e7eb      	b.n	8006568 <_printf_i+0x204>
 8006590:	2500      	movs	r5, #0
 8006592:	f104 0619 	add.w	r6, r4, #25
 8006596:	e7f5      	b.n	8006584 <_printf_i+0x220>
 8006598:	080067bd 	.word	0x080067bd
 800659c:	080067ce 	.word	0x080067ce

080065a0 <memmove>:
 80065a0:	4288      	cmp	r0, r1
 80065a2:	b510      	push	{r4, lr}
 80065a4:	eb01 0402 	add.w	r4, r1, r2
 80065a8:	d902      	bls.n	80065b0 <memmove+0x10>
 80065aa:	4284      	cmp	r4, r0
 80065ac:	4623      	mov	r3, r4
 80065ae:	d807      	bhi.n	80065c0 <memmove+0x20>
 80065b0:	1e43      	subs	r3, r0, #1
 80065b2:	42a1      	cmp	r1, r4
 80065b4:	d008      	beq.n	80065c8 <memmove+0x28>
 80065b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065be:	e7f8      	b.n	80065b2 <memmove+0x12>
 80065c0:	4402      	add	r2, r0
 80065c2:	4601      	mov	r1, r0
 80065c4:	428a      	cmp	r2, r1
 80065c6:	d100      	bne.n	80065ca <memmove+0x2a>
 80065c8:	bd10      	pop	{r4, pc}
 80065ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065d2:	e7f7      	b.n	80065c4 <memmove+0x24>

080065d4 <_sbrk_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d06      	ldr	r5, [pc, #24]	@ (80065f0 <_sbrk_r+0x1c>)
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fb f984 	bl	80018ec <_sbrk>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_sbrk_r+0x1a>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_sbrk_r+0x1a>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	20000344 	.word	0x20000344

080065f4 <_realloc_r>:
 80065f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f8:	4607      	mov	r7, r0
 80065fa:	4614      	mov	r4, r2
 80065fc:	460d      	mov	r5, r1
 80065fe:	b921      	cbnz	r1, 800660a <_realloc_r+0x16>
 8006600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006604:	4611      	mov	r1, r2
 8006606:	f7ff bc5b 	b.w	8005ec0 <_malloc_r>
 800660a:	b92a      	cbnz	r2, 8006618 <_realloc_r+0x24>
 800660c:	f7ff fbec 	bl	8005de8 <_free_r>
 8006610:	4625      	mov	r5, r4
 8006612:	4628      	mov	r0, r5
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	f000 f81a 	bl	8006650 <_malloc_usable_size_r>
 800661c:	4284      	cmp	r4, r0
 800661e:	4606      	mov	r6, r0
 8006620:	d802      	bhi.n	8006628 <_realloc_r+0x34>
 8006622:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006626:	d8f4      	bhi.n	8006612 <_realloc_r+0x1e>
 8006628:	4621      	mov	r1, r4
 800662a:	4638      	mov	r0, r7
 800662c:	f7ff fc48 	bl	8005ec0 <_malloc_r>
 8006630:	4680      	mov	r8, r0
 8006632:	b908      	cbnz	r0, 8006638 <_realloc_r+0x44>
 8006634:	4645      	mov	r5, r8
 8006636:	e7ec      	b.n	8006612 <_realloc_r+0x1e>
 8006638:	42b4      	cmp	r4, r6
 800663a:	4622      	mov	r2, r4
 800663c:	4629      	mov	r1, r5
 800663e:	bf28      	it	cs
 8006640:	4632      	movcs	r2, r6
 8006642:	f7ff fbc3 	bl	8005dcc <memcpy>
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff fbcd 	bl	8005de8 <_free_r>
 800664e:	e7f1      	b.n	8006634 <_realloc_r+0x40>

08006650 <_malloc_usable_size_r>:
 8006650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006654:	1f18      	subs	r0, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	bfbc      	itt	lt
 800665a:	580b      	ldrlt	r3, [r1, r0]
 800665c:	18c0      	addlt	r0, r0, r3
 800665e:	4770      	bx	lr

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
